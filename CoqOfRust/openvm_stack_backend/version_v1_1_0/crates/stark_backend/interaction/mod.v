(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module interaction.
  Axiom BusIndex : (Ty.path "openvm_stark_backend::interaction::BusIndex") = (Ty.path "u16").
  
  (* StructRecord
    {
      name := "Interaction";
      const_params := [];
      ty_params := [ "Expr" ];
      fields :=
        [
          ("message",
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ Expr; Ty.path "alloc::alloc::Global" ]);
          ("count", Expr);
          ("bus_index", Ty.path "u16");
          ("count_weight", Ty.path "u32")
        ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_Expr_for_openvm_stark_backend_interaction_Interaction_Expr.
    Definition Self (Expr : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ].
    
    (* Clone *)
    Definition clone (Expr : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Expr in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ] ],
              self
            |) in
          Value.mkStructRecord
            "openvm_stark_backend::interaction::Interaction"
            []
            [ Expr ]
            [
              ("message",
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ Expr; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Expr; Ty.path "alloc::alloc::Global" ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::interaction::Interaction",
                            "message"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("count",
                M.call_closure (|
                  Expr,
                  M.get_trait_method (| "core::clone::Clone", Expr, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::interaction::Interaction",
                            "count"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("bus_index",
                M.call_closure (|
                  Ty.path "u16",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "u16",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::interaction::Interaction",
                            "bus_index"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("count_weight",
                M.call_closure (|
                  Ty.path "u32",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "u32",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::interaction::Interaction",
                            "count_weight"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Expr : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Expr)
        (* Instance *) [ ("clone", InstanceField.Method (clone Expr)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_Expr_for_openvm_stark_backend_interaction_Interaction_Expr.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_Expr_for_openvm_stark_backend_interaction_Interaction_Expr.
    Definition Self (Expr : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ].
    
    (* Debug *)
    Definition fmt (Expr : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Expr in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ] ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field4_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Interaction" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "message" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Expr; Ty.path "alloc::alloc::Global" ]
                    ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::interaction::Interaction",
                          "message"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "count" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Expr ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::interaction::Interaction",
                          "count"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "bus_index" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Ty.path "u16" ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::interaction::Interaction",
                          "bus_index"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "count_weight" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::interaction::Interaction",
                              "count_weight"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Expr : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Expr)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt Expr)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_Expr_for_openvm_stark_backend_interaction_Interaction_Expr.
  
  Module underscore.
    Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_Expr_for_openvm_stark_backend_interaction_Interaction_Expr.
      Definition Self (Expr : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ].
      
      (* Serialize *)
      Definition serialize
          (Expr : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self Expr in
        match ε, τ, α with
        | [], [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ]
                  ],
                self
              |) in
            let __serializer := M.alloc (| __S, __serializer |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ __serde_state :
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct" :=
                    M.match_operator (|
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_struct",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "Interaction" |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.cast (Ty.path "usize") (Value.Bool false);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |);
                                    Value.Integer IntegerKind.Usize 1
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (|
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                γ0_0
                              |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Expr; Ty.path "alloc::alloc::Global" ]
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "message" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::interaction::Interaction",
                                        "message"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Expr ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "count" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::interaction::Interaction",
                                        "count"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "u16" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "bus_index" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::interaction::Interaction",
                                        "bus_index"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "u32" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "count_weight" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::interaction::Interaction",
                                        "count_weight"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.get_trait_method (|
                        "serde::ser::SerializeStruct",
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        [],
                        [],
                        "end",
                        [],
                        []
                      |),
                      [ M.read (| __serde_state |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (Expr : Ty.t),
        M.IsTraitInstance
          "serde::ser::Serialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self Expr)
          (* Instance *) [ ("serialize", InstanceField.Method (serialize Expr)) ].
    End Impl_serde_ser_Serialize_where_serde_ser_Serialize_Expr_for_openvm_stark_backend_interaction_Interaction_Expr.
    Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_Expr_for_openvm_stark_backend_interaction_Interaction_Expr.
      Definition Self (Expr : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ].
      
      (* Deserialize *)
      Definition deserialize
          (Expr : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self Expr in
        match ε, τ, α with
        | [], [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __D, __deserializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ];
                  Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                ],
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                [],
                "deserialize_struct",
                [],
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::interaction::_'1::deserialize::__Visitor")
                    []
                    [ Expr ]
                ]
              |),
              [
                M.read (| __deserializer |);
                mk_str (| "Interaction" |);
                M.read (|
                  get_constant (|
                    "openvm_stark_backend::interaction::_'1::deserialize::FIELDS",
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  |)
                |);
                Value.mkStructRecord
                  "openvm_stark_backend::interaction::_'1::deserialize::__Visitor"
                  []
                  [ Expr ]
                  [
                    ("marker",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::Interaction")
                            []
                            [ Expr ]
                        ]
                        []);
                    ("lifetime",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                        [])
                  ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (Expr : Ty.t),
        M.IsTraitInstance
          "serde::de::Deserialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self Expr)
          (* Instance *) [ ("deserialize", InstanceField.Method (deserialize Expr)) ].
    End Impl_serde_de_Deserialize_where_serde_de_Deserialize_Expr_for_openvm_stark_backend_interaction_Interaction_Expr.
    Module Impl_serde_ser_Serialize_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind".
      
      (* Serialize *)
      Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind" ],
                self
              |) in
            let __serializer := M.alloc (| __S, __serializer |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                ],
              M.deref (| M.read (| self |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_stark_backend::interaction::RapPhaseSeqKind::FriLogUp"
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.get_trait_method (|
                        "serde::ser::Serializer",
                        __S,
                        [],
                        [],
                        "serialize_unit_variant",
                        [],
                        []
                      |),
                      [
                        M.read (| __serializer |);
                        mk_str (| "RapPhaseSeqKind" |);
                        Value.Integer IntegerKind.U32 0;
                        mk_str (| "FriLogUp" |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::ser::Serialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
    End Impl_serde_ser_Serialize_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
    Module Impl_serde_de_Deserialize_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind".
      
      (* Deserialize *)
      Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __D, __deserializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind";
                  Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                ],
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                [],
                "deserialize_enum",
                [],
                [ Ty.path "openvm_stark_backend::interaction::_'3::deserialize::__Visitor" ]
              |),
              [
                M.read (| __deserializer |);
                mk_str (| "RapPhaseSeqKind" |);
                M.read (|
                  get_constant (|
                    "openvm_stark_backend::interaction::_'3::deserialize::VARIANTS",
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  |)
                |);
                Value.mkStructRecord
                  "openvm_stark_backend::interaction::_'3::deserialize::__Visitor"
                  []
                  []
                  [
                    ("marker",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind" ]
                        []);
                    ("lifetime",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                        [])
                  ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::de::Deserialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
    End Impl_serde_de_Deserialize_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
    Module Impl_serde_ser_Serialize_for_openvm_stark_backend_interaction_LogUpSecurityParameters.
      Definition Self : Ty.t :=
        Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters".
      
      (* Serialize *)
      Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __S ], [ self; __serializer ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters" ],
                self
              |) in
            let __serializer := M.alloc (| __S, __serializer |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ __serde_state :
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct" :=
                    M.match_operator (|
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_struct",
                                [],
                                []
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "LogUpSecurityParameters" |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.cast (Ty.path "usize") (Value.Bool false);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |);
                                    Value.Integer IntegerKind.Usize 1
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (|
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                γ0_0
                              |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "u32" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "max_interaction_count" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::interaction::LogUpSecurityParameters",
                                        "max_interaction_count"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "u32" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "log_max_message_length" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::interaction::LogUpSecurityParameters",
                                        "log_max_message_length"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::SerializeStruct",
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct",
                                [],
                                [],
                                "serialize_field",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                |);
                                mk_str (| "log_up_pow_bits" |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::interaction::LogUpSecurityParameters",
                                        "log_up_pow_bits"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Ok";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.get_trait_method (|
                        "serde::ser::SerializeStruct",
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        [],
                        [],
                        "end",
                        [],
                        []
                      |),
                      [ M.read (| __serde_state |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::ser::Serialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
    End Impl_serde_ser_Serialize_for_openvm_stark_backend_interaction_LogUpSecurityParameters.
    Module Impl_serde_de_Deserialize_for_openvm_stark_backend_interaction_LogUpSecurityParameters.
      Definition Self : Ty.t :=
        Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters".
      
      (* Deserialize *)
      Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __D ], [ __deserializer ] =>
          ltac:(M.monadic
            (let __deserializer := M.alloc (| __D, __deserializer |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters";
                  Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                ],
              M.get_trait_method (|
                "serde::de::Deserializer",
                __D,
                [],
                [],
                "deserialize_struct",
                [],
                [ Ty.path "openvm_stark_backend::interaction::_'5::deserialize::__Visitor" ]
              |),
              [
                M.read (| __deserializer |);
                mk_str (| "LogUpSecurityParameters" |);
                M.read (|
                  get_constant (|
                    "openvm_stark_backend::interaction::_'5::deserialize::FIELDS",
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  |)
                |);
                Value.mkStructRecord
                  "openvm_stark_backend::interaction::_'5::deserialize::__Visitor"
                  []
                  []
                  [
                    ("marker",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters" ]
                        []);
                    ("lifetime",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                        [])
                  ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "serde::de::Deserialize"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
    End Impl_serde_de_Deserialize_for_openvm_stark_backend_interaction_LogUpSecurityParameters.
  End underscore.
  
  
  Module Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_interaction_Interaction_Expr.
    Definition Self (Expr : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ].
    
    Axiom Implements :
      forall (Expr : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Expr)
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_interaction_Interaction_Expr.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_Expr_openvm_stark_backend_interaction_Interaction_Expr_for_openvm_stark_backend_interaction_Interaction_Expr.
    Definition Self (Expr : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ].
    
    (* PartialEq *)
    Definition eq (Expr : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Expr in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ] ],
              self
            |) in
          let other :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ] ],
              other
            |) in
          LogicalOp.and (|
            LogicalOp.and (|
              LogicalOp.and (|
                M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Expr; Ty.path "alloc::alloc::Global" ],
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Expr; Ty.path "alloc::alloc::Global" ]
                    ],
                    "eq",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_stark_backend::interaction::Interaction",
                        "message"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "openvm_stark_backend::interaction::Interaction",
                        "message"
                      |)
                    |)
                  ]
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Expr,
                      [],
                      [ Expr ],
                      "eq",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::interaction::Interaction",
                          "count"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| other |) |),
                          "openvm_stark_backend::interaction::Interaction",
                          "count"
                        |)
                      |)
                    ]
                  |)))
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  BinOp.eq,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_stark_backend::interaction::Interaction",
                        "bus_index"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "openvm_stark_backend::interaction::Interaction",
                        "bus_index"
                      |)
                    |)
                  ]
                |)))
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_stark_backend::interaction::Interaction",
                      "count_weight"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "openvm_stark_backend::interaction::Interaction",
                      "count_weight"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Expr : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ] ]
        (Self Expr)
        (* Instance *) [ ("eq", InstanceField.Method (eq Expr)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_Expr_openvm_stark_backend_interaction_Interaction_Expr_for_openvm_stark_backend_interaction_Interaction_Expr.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_Expr_for_openvm_stark_backend_interaction_Interaction_Expr.
    Definition Self (Expr : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (Expr : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Expr in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ Expr ] ],
              self
            |) in
          M.match_operator (|
            Ty.tuple [],
            Value.DeclaredButUndefined,
            [
              fun γ =>
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.tuple [],
                    Value.DeclaredButUndefined,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.tuple [],
                            Value.DeclaredButUndefined,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.tuple [],
                                    Value.DeclaredButUndefined,
                                    [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                                  |)))
                            ]
                          |)))
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Expr : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Expr)
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq Expr))
        ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_Expr_for_openvm_stark_backend_interaction_Interaction_Expr.
  
  Axiom SymbolicInteraction :
    forall (F : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::interaction::SymbolicInteraction") [] [ F ]) =
      (Ty.apply
        (Ty.path "openvm_stark_backend::interaction::Interaction")
        []
        [
          Ty.apply
            (Ty.path
              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
            []
            [ F ]
        ]).
  
  (* Trait *)
  (* Empty module 'InteractionBuilder' *)
  
  (* StructRecord
    {
      name := "LookupBus";
      const_params := [];
      ty_params := [];
      fields := [ ("index", Ty.path "u16") ];
    } *)
  
  Module Impl_core_marker_Copy_for_openvm_stark_backend_interaction_LookupBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::LookupBus".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_openvm_stark_backend_interaction_LookupBus.
  
  Module Impl_core_clone_Clone_for_openvm_stark_backend_interaction_LookupBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::LookupBus".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_stark_backend::interaction::LookupBus" ],
              self
            |) in
          M.match_operator (|
            Ty.path "openvm_stark_backend::interaction::LookupBus",
            Value.DeclaredButUndefined,
            [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_openvm_stark_backend_interaction_LookupBus.
  
  Module Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_LookupBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::LookupBus".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_stark_backend::interaction::LookupBus" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field1_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "LookupBus" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "index" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply (Ty.path "&") [] [ Ty.path "u16" ],
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::interaction::LookupBus",
                              "index"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_LookupBus.
  
  Module Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_interaction_LookupBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::LookupBus".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_interaction_LookupBus.
  
  Module Impl_core_cmp_PartialEq_openvm_stark_backend_interaction_LookupBus_for_openvm_stark_backend_interaction_LookupBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::LookupBus".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_stark_backend::interaction::LookupBus" ],
              self
            |) in
          let other :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_stark_backend::interaction::LookupBus" ],
              other
            |) in
          M.call_closure (|
            Ty.path "bool",
            BinOp.eq,
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "openvm_stark_backend::interaction::LookupBus",
                  "index"
                |)
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| other |) |),
                  "openvm_stark_backend::interaction::LookupBus",
                  "index"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "openvm_stark_backend::interaction::LookupBus" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_openvm_stark_backend_interaction_LookupBus_for_openvm_stark_backend_interaction_LookupBus.
  
  Module Impl_core_cmp_Eq_for_openvm_stark_backend_interaction_LookupBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::LookupBus".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_stark_backend::interaction::LookupBus" ],
              self
            |) in
          M.match_operator (|
            Ty.tuple [],
            Value.DeclaredButUndefined,
            [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_openvm_stark_backend_interaction_LookupBus.
  
  Module Impl_openvm_stark_backend_interaction_LookupBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::LookupBus".
    
    (*
        pub const fn new(index: BusIndex) -> Self {
            Self { index }
        }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ index ] =>
        ltac:(M.monadic
          (let index := M.alloc (| Ty.path "u16", index |) in
          Value.mkStructRecord
            "openvm_stark_backend::interaction::LookupBus"
            []
            []
            [ ("index", M.read (| index |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn lookup_key<AB, E>(
            &self,
            builder: &mut AB,
            query: impl IntoIterator<Item = E>,
            enabled: impl Into<AB::Expr>,
        ) where
            AB: InteractionBuilder,
            E: Into<AB::Expr>,
        {
            // We embed the query multiplicity as {0, 1} in the integers and the lookup table key
            // multiplicity to be {0, -1, ..., -p + 1}. Setting `count_weight = 1` will ensure that the
            // total number of lookups is at most p, which is sufficient to establish lookup multiset is
            // a subset of the key multiset. See Corollary 3.6 in [docs/Soundess_of_Interactions_via_LogUp.pdf].
            builder.push_interaction(self.index, query, enabled, 1);
        }
    *)
    Definition lookup_key (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [],
          [ AB; E; impl_IntoIterator_Item___E_; impl_Into_AB_Expr_ ],
          [ self; builder; query; enabled ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_stark_backend::interaction::LookupBus" ],
              self
            |) in
          let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
          let query := M.alloc (| impl_IntoIterator_Item___E_, query |) in
          let enabled := M.alloc (| impl_Into_AB_Expr_, enabled |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "openvm_stark_backend::interaction::InteractionBuilder",
                  AB,
                  [],
                  [],
                  "push_interaction",
                  [],
                  [ E; impl_IntoIterator_Item___E_; impl_Into_AB_Expr_ ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_stark_backend::interaction::LookupBus",
                      "index"
                    |)
                  |);
                  M.read (| query |);
                  M.read (| enabled |);
                  Value.Integer IntegerKind.U32 1
                ]
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_lookup_key :
      M.IsAssociatedFunction.C Self "lookup_key" lookup_key.
    Admitted.
    Global Typeclasses Opaque lookup_key.
    
    (*
        pub fn add_key_with_lookups<AB, E>(
            &self,
            builder: &mut AB,
            key: impl IntoIterator<Item = E>,
            num_lookups: impl Into<AB::Expr>,
        ) where
            AB: InteractionBuilder,
            E: Into<AB::Expr>,
        {
            // Since we only want a subset constraint, `count_weight` can be zero here. See the comment
            // in `LookupBus::lookup_key`.
            builder.push_interaction(self.index, key, -num_lookups.into(), 0);
        }
    *)
    Definition add_key_with_lookups (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [],
          [ AB; E; impl_IntoIterator_Item___E_; impl_Into_AB_Expr_ ],
          [ self; builder; key; num_lookups ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_stark_backend::interaction::LookupBus" ],
              self
            |) in
          let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
          let key := M.alloc (| impl_IntoIterator_Item___E_, key |) in
          let num_lookups := M.alloc (| impl_Into_AB_Expr_, num_lookups |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "openvm_stark_backend::interaction::InteractionBuilder",
                  AB,
                  [],
                  [],
                  "push_interaction",
                  [],
                  [
                    E;
                    impl_IntoIterator_Item___E_;
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_stark_backend::interaction::LookupBus",
                      "index"
                    |)
                  |);
                  M.read (| key |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::ops::arith::Neg",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      [],
                      [],
                      "neg",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::convert::Into",
                          impl_Into_AB_Expr_,
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          "into",
                          [],
                          []
                        |),
                        [ M.read (| num_lookups |) ]
                      |)
                    ]
                  |);
                  Value.Integer IntegerKind.U32 0
                ]
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_add_key_with_lookups :
      M.IsAssociatedFunction.C Self "add_key_with_lookups" add_key_with_lookups.
    Admitted.
    Global Typeclasses Opaque add_key_with_lookups.
  End Impl_openvm_stark_backend_interaction_LookupBus.
  
  (* StructRecord
    {
      name := "PermutationCheckBus";
      const_params := [];
      ty_params := [];
      fields := [ ("index", Ty.path "u16") ];
    } *)
  
  Module Impl_core_marker_Copy_for_openvm_stark_backend_interaction_PermutationCheckBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::PermutationCheckBus".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_openvm_stark_backend_interaction_PermutationCheckBus.
  
  Module Impl_core_clone_Clone_for_openvm_stark_backend_interaction_PermutationCheckBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::PermutationCheckBus".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ],
              self
            |) in
          M.match_operator (|
            Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
            Value.DeclaredButUndefined,
            [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_openvm_stark_backend_interaction_PermutationCheckBus.
  
  Module Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_PermutationCheckBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::PermutationCheckBus".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field1_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "PermutationCheckBus" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "index" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply (Ty.path "&") [] [ Ty.path "u16" ],
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::interaction::PermutationCheckBus",
                              "index"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_PermutationCheckBus.
  
  Module Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_interaction_PermutationCheckBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::PermutationCheckBus".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_interaction_PermutationCheckBus.
  
  Module Impl_core_cmp_PartialEq_openvm_stark_backend_interaction_PermutationCheckBus_for_openvm_stark_backend_interaction_PermutationCheckBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::PermutationCheckBus".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ],
              self
            |) in
          let other :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ],
              other
            |) in
          M.call_closure (|
            Ty.path "bool",
            BinOp.eq,
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "openvm_stark_backend::interaction::PermutationCheckBus",
                  "index"
                |)
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| other |) |),
                  "openvm_stark_backend::interaction::PermutationCheckBus",
                  "index"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_openvm_stark_backend_interaction_PermutationCheckBus_for_openvm_stark_backend_interaction_PermutationCheckBus.
  
  Module Impl_core_cmp_Eq_for_openvm_stark_backend_interaction_PermutationCheckBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::PermutationCheckBus".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ],
              self
            |) in
          M.match_operator (|
            Ty.tuple [],
            Value.DeclaredButUndefined,
            [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_openvm_stark_backend_interaction_PermutationCheckBus.
  
  (*
  Enum PermutationInteractionType
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "Send";
          item := StructTuple [];
        };
        {
          name := "Receive";
          item := StructTuple [];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_PermutationInteractionType_Send :
    M.IsDiscriminant "openvm_stark_backend::interaction::PermutationInteractionType::Send" 0.
  Axiom IsDiscriminant_PermutationInteractionType_Receive :
    M.IsDiscriminant "openvm_stark_backend::interaction::PermutationInteractionType::Receive" 1.
  
  Module Impl_core_marker_Copy_for_openvm_stark_backend_interaction_PermutationInteractionType.
    Definition Self : Ty.t :=
      Ty.path "openvm_stark_backend::interaction::PermutationInteractionType".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_openvm_stark_backend_interaction_PermutationInteractionType.
  
  Module Impl_core_clone_Clone_for_openvm_stark_backend_interaction_PermutationInteractionType.
    Definition Self : Ty.t :=
      Ty.path "openvm_stark_backend::interaction::PermutationInteractionType".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationInteractionType" ],
              self
            |) in
          M.read (| M.deref (| M.read (| self |) |) |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_openvm_stark_backend_interaction_PermutationInteractionType.
  
  Module Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_PermutationInteractionType.
    Definition Self : Ty.t :=
      Ty.path "openvm_stark_backend::interaction::PermutationInteractionType".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationInteractionType" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.match_operator (|
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::interaction::PermutationInteractionType::Send"
                        |) in
                      M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Send" |) |) |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_stark_backend::interaction::PermutationInteractionType::Receive"
                        |) in
                      M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Receive" |) |) |)))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_PermutationInteractionType.
  
  Module Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_interaction_PermutationInteractionType.
    Definition Self : Ty.t :=
      Ty.path "openvm_stark_backend::interaction::PermutationInteractionType".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_interaction_PermutationInteractionType.
  
  Module Impl_core_cmp_PartialEq_openvm_stark_backend_interaction_PermutationInteractionType_for_openvm_stark_backend_interaction_PermutationInteractionType.
    Definition Self : Ty.t :=
      Ty.path "openvm_stark_backend::interaction::PermutationInteractionType".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationInteractionType" ],
              self
            |) in
          let other :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationInteractionType" ],
              other
            |) in
          M.read (|
            let~ __self_discr : Ty.path "isize" :=
              M.call_closure (|
                Ty.path "isize",
                M.get_function (|
                  "core::intrinsics::discriminant_value",
                  [],
                  [ Ty.path "openvm_stark_backend::interaction::PermutationInteractionType" ]
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |) in
            let~ __arg1_discr : Ty.path "isize" :=
              M.call_closure (|
                Ty.path "isize",
                M.get_function (|
                  "core::intrinsics::discriminant_value",
                  [],
                  [ Ty.path "openvm_stark_backend::interaction::PermutationInteractionType" ]
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
              |) in
            M.alloc (|
              Ty.path "bool",
              M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.path "openvm_stark_backend::interaction::PermutationInteractionType" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_openvm_stark_backend_interaction_PermutationInteractionType_for_openvm_stark_backend_interaction_PermutationInteractionType.
  
  Module Impl_core_cmp_Eq_for_openvm_stark_backend_interaction_PermutationInteractionType.
    Definition Self : Ty.t :=
      Ty.path "openvm_stark_backend::interaction::PermutationInteractionType".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationInteractionType" ],
              self
            |) in
          Value.Tuple []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_openvm_stark_backend_interaction_PermutationInteractionType.
  
  Module Impl_openvm_stark_backend_interaction_PermutationCheckBus.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::PermutationCheckBus".
    
    (*
        pub const fn new(index: BusIndex) -> Self {
            Self { index }
        }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ index ] =>
        ltac:(M.monadic
          (let index := M.alloc (| Ty.path "u16", index |) in
          Value.mkStructRecord
            "openvm_stark_backend::interaction::PermutationCheckBus"
            []
            []
            [ ("index", M.read (| index |)) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn send<AB, E>(
            &self,
            builder: &mut AB,
            message: impl IntoIterator<Item = E>,
            enabled: impl Into<AB::Expr>,
        ) where
            AB: InteractionBuilder,
            E: Into<AB::Expr>,
        {
            // We embed the multiplicity `enabled` as an integer {0, 1}.
            builder.push_interaction(self.index, message, enabled, 1);
        }
    *)
    Definition send (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [],
          [ AB; E; impl_IntoIterator_Item___E_; impl_Into_AB_Expr_ ],
          [ self; builder; message; enabled ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ],
              self
            |) in
          let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
          let message := M.alloc (| impl_IntoIterator_Item___E_, message |) in
          let enabled := M.alloc (| impl_Into_AB_Expr_, enabled |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "openvm_stark_backend::interaction::InteractionBuilder",
                  AB,
                  [],
                  [],
                  "push_interaction",
                  [],
                  [ E; impl_IntoIterator_Item___E_; impl_Into_AB_Expr_ ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_stark_backend::interaction::PermutationCheckBus",
                      "index"
                    |)
                  |);
                  M.read (| message |);
                  M.read (| enabled |);
                  Value.Integer IntegerKind.U32 1
                ]
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_send : M.IsAssociatedFunction.C Self "send" send.
    Admitted.
    Global Typeclasses Opaque send.
    
    (*
        pub fn receive<AB, E>(
            &self,
            builder: &mut AB,
            message: impl IntoIterator<Item = E>,
            enabled: impl Into<AB::Expr>,
        ) where
            AB: InteractionBuilder,
            E: Into<AB::Expr>,
        {
            // We embed the multiplicity `enabled` as an integer {0, -1}.
            builder.push_interaction(self.index, message, -enabled.into(), 1);
        }
    *)
    Definition receive (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [],
          [ AB; E; impl_IntoIterator_Item___E_; impl_Into_AB_Expr_ ],
          [ self; builder; message; enabled ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ],
              self
            |) in
          let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
          let message := M.alloc (| impl_IntoIterator_Item___E_, message |) in
          let enabled := M.alloc (| impl_Into_AB_Expr_, enabled |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "openvm_stark_backend::interaction::InteractionBuilder",
                  AB,
                  [],
                  [],
                  "push_interaction",
                  [],
                  [
                    E;
                    impl_IntoIterator_Item___E_;
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_stark_backend::interaction::PermutationCheckBus",
                      "index"
                    |)
                  |);
                  M.read (| message |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::ops::arith::Neg",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      [],
                      [],
                      "neg",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::convert::Into",
                          impl_Into_AB_Expr_,
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          "into",
                          [],
                          []
                        |),
                        [ M.read (| enabled |) ]
                      |)
                    ]
                  |);
                  Value.Integer IntegerKind.U32 1
                ]
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_receive : M.IsAssociatedFunction.C Self "receive" receive.
    Admitted.
    Global Typeclasses Opaque receive.
    
    (*
        pub fn send_or_receive<AB, E>(
            &self,
            builder: &mut AB,
            interaction_type: PermutationInteractionType,
            message: impl IntoIterator<Item = E>,
            enabled: impl Into<AB::Expr>,
        ) where
            AB: InteractionBuilder,
            E: Into<AB::Expr>,
        {
            match interaction_type {
                PermutationInteractionType::Send => self.send(builder, message, enabled),
                PermutationInteractionType::Receive => self.receive(builder, message, enabled),
            }
        }
    *)
    Definition send_or_receive (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [],
          [ AB; E; impl_IntoIterator_Item___E_; impl_Into_AB_Expr_ ],
          [ self; builder; interaction_type; message; enabled ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ],
              self
            |) in
          let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
          let interaction_type :=
            M.alloc (|
              Ty.path "openvm_stark_backend::interaction::PermutationInteractionType",
              interaction_type
            |) in
          let message := M.alloc (| impl_IntoIterator_Item___E_, message |) in
          let enabled := M.alloc (| impl_Into_AB_Expr_, enabled |) in
          M.match_operator (|
            Ty.tuple [],
            interaction_type,
            [
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "openvm_stark_backend::interaction::PermutationInteractionType::Send"
                    |) in
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                      "send",
                      [],
                      [ AB; E; impl_IntoIterator_Item___E_; impl_Into_AB_Expr_ ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                      M.read (| message |);
                      M.read (| enabled |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "openvm_stark_backend::interaction::PermutationInteractionType::Receive"
                    |) in
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                      "receive",
                      [],
                      [ AB; E; impl_IntoIterator_Item___E_; impl_Into_AB_Expr_ ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                      M.read (| message |);
                      M.read (| enabled |)
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_send_or_receive :
      M.IsAssociatedFunction.C Self "send_or_receive" send_or_receive.
    Admitted.
    Global Typeclasses Opaque send_or_receive.
    
    (*
        pub fn interact<AB, E>(
            &self,
            builder: &mut AB,
            message: impl IntoIterator<Item = E>,
            direction: impl Into<AB::Expr>,
        ) where
            AB: InteractionBuilder,
            E: Into<AB::Expr>,
        {
            // We embed the multiplicity `direction` as an integer {-1, 0, 1}.
            builder.push_interaction(self.index, message, direction.into(), 1);
        }
    *)
    Definition interact (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [],
          [ AB; E; impl_IntoIterator_Item___E_; impl_Into_AB_Expr_ ],
          [ self; builder; message; direction ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ],
              self
            |) in
          let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
          let message := M.alloc (| impl_IntoIterator_Item___E_, message |) in
          let direction := M.alloc (| impl_Into_AB_Expr_, direction |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "openvm_stark_backend::interaction::InteractionBuilder",
                  AB,
                  [],
                  [],
                  "push_interaction",
                  [],
                  [
                    E;
                    impl_IntoIterator_Item___E_;
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_stark_backend::interaction::PermutationCheckBus",
                      "index"
                    |)
                  |);
                  M.read (| message |);
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    M.get_trait_method (|
                      "core::convert::Into",
                      impl_Into_AB_Expr_,
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                      "into",
                      [],
                      []
                    |),
                    [ M.read (| direction |) ]
                  |);
                  Value.Integer IntegerKind.U32 1
                ]
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_interact : M.IsAssociatedFunction.C Self "interact" interact.
    Admitted.
    Global Typeclasses Opaque interact.
  End Impl_openvm_stark_backend_interaction_PermutationCheckBus.
  
  (* StructRecord
    {
      name := "RapPhaseProverData";
      const_params := [];
      ty_params := [ "Challenge" ];
      fields :=
        [
          ("challenges",
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ Challenge; Ty.path "alloc::alloc::Global" ]);
          ("after_challenge_trace_per_air",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        Challenge;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Challenge; Ty.path "alloc::alloc::Global" ]
                      ]
                  ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("exposed_values_per_air",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Challenge; Ty.path "alloc::alloc::Global" ]
                  ];
                Ty.path "alloc::alloc::Global"
              ])
        ];
    } *)
  
  (* StructRecord
    {
      name := "RapPhaseVerifierData";
      const_params := [];
      ty_params := [ "Challenge" ];
      fields :=
        [
          ("challenges_per_phase",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Challenge; Ty.path "alloc::alloc::Global" ];
                Ty.path "alloc::alloc::Global"
              ])
        ];
    } *)
  
  Module Impl_core_default_Default_where_core_default_Default_Challenge_for_openvm_stark_backend_interaction_RapPhaseVerifierData_Challenge.
    Definition Self (Challenge : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_stark_backend::interaction::RapPhaseVerifierData") [] [ Challenge ].
    
    (* Default *)
    Definition default
        (Challenge : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Challenge in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.mkStructRecord
            "openvm_stark_backend::interaction::RapPhaseVerifierData"
            []
            [ Challenge ]
            [
              ("challenges_per_phase",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Challenge; Ty.path "alloc::alloc::Global" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Challenge; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Challenge : Ty.t),
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Challenge)
        (* Instance *) [ ("default", InstanceField.Method (default Challenge)) ].
  End Impl_core_default_Default_where_core_default_Default_Challenge_for_openvm_stark_backend_interaction_RapPhaseVerifierData_Challenge.
  
  (* StructRecord
    {
      name := "RapPhaseShape";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("num_challenges", Ty.path "usize");
          ("num_exposed_values", Ty.path "usize");
          ("extra_opening_rots",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_RapPhaseShape.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::RapPhaseShape".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::RapPhaseShape" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "RapPhaseShape" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "num_challenges" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::interaction::RapPhaseShape",
                          "num_challenges"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "num_exposed_values" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::interaction::RapPhaseShape",
                          "num_exposed_values"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "extra_opening_rots" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                        ]
                    ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::interaction::RapPhaseShape",
                              "extra_opening_rots"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_RapPhaseShape.
  
  (*
  Enum RapPhaseSeqKind
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "FriLogUp";
          item := StructTuple [];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_RapPhaseSeqKind_FriLogUp :
    M.IsDiscriminant "openvm_stark_backend::interaction::RapPhaseSeqKind::FriLogUp" 0.
  
  Module Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "FriLogUp" |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
  
  Module Impl_core_marker_Copy_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
  
  Module Impl_core_clone_Clone_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind" ],
              self
            |) in
          M.read (| M.deref (| M.read (| self |) |) |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
  
  
  
  Module Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
  
  Module Impl_core_cmp_PartialEq_openvm_stark_backend_interaction_RapPhaseSeqKind_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind" ],
              self
            |) in
          let other :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind" ],
              other
            |) in
          Value.Bool true))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_openvm_stark_backend_interaction_RapPhaseSeqKind_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
  
  Module Impl_core_cmp_Eq_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind" ],
              self
            |) in
          Value.Tuple []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_openvm_stark_backend_interaction_RapPhaseSeqKind.
  
  Module Impl_openvm_stark_backend_interaction_RapPhaseSeqKind.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind".
    
    (*
        pub fn shape(&self) -> Vec<RapPhaseShape> {
            match self {
                RapPhaseSeqKind::FriLogUp => vec![RapPhaseShape {
                    num_challenges: STARK_LU_NUM_CHALLENGES,
                    num_exposed_values: STARK_LU_NUM_EXPOSED_VALUES,
                    extra_opening_rots: vec![],
                }],
            }
        }
    *)
    Definition shape (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind" ],
              self
            |) in
          M.match_operator (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.path "openvm_stark_backend::interaction::RapPhaseShape";
                Ty.path "alloc::alloc::Global"
              ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.deref (| M.read (| γ |) |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "openvm_stark_backend::interaction::RapPhaseSeqKind::FriLogUp"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path "openvm_stark_backend::interaction::RapPhaseShape";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.path "openvm_stark_backend::interaction::RapPhaseShape" ],
                      "into_vec",
                      [],
                      [ Ty.path "alloc::alloc::Global" ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.path "openvm_stark_backend::interaction::RapPhaseShape" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [ Ty.path "openvm_stark_backend::interaction::RapPhaseShape" ];
                              Ty.path "alloc::alloc::Global"
                            ])
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.path "openvm_stark_backend::interaction::RapPhaseShape" ];
                              Ty.path "alloc::alloc::Global"
                            ]),
                        [
                          M.read (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ Ty.path "openvm_stark_backend::interaction::RapPhaseShape" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "openvm_stark_backend::interaction::RapPhaseShape"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ Ty.path "openvm_stark_backend::interaction::RapPhaseShape" ],
                                  Value.Array
                                    [
                                      Value.mkStructRecord
                                        "openvm_stark_backend::interaction::RapPhaseShape"
                                        []
                                        []
                                        [
                                          ("num_challenges",
                                            M.read (|
                                              get_constant (|
                                                "openvm_stark_backend::interaction::fri_log_up::STARK_LU_NUM_CHALLENGES",
                                                Ty.path "usize"
                                              |)
                                            |));
                                          ("num_exposed_values",
                                            M.read (|
                                              get_constant (|
                                                "openvm_stark_backend::interaction::fri_log_up::STARK_LU_NUM_EXPOSED_VALUES",
                                                Ty.path "usize"
                                              |)
                                            |));
                                          ("extra_opening_rots",
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global"
                                                  ],
                                                "new",
                                                [],
                                                []
                                              |),
                                              []
                                            |))
                                        ]
                                    ]
                                |)
                              ]
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_shape : M.IsAssociatedFunction.C Self "shape" shape.
    Admitted.
    Global Typeclasses Opaque shape.
  End Impl_openvm_stark_backend_interaction_RapPhaseSeqKind.
  
  (* Trait *)
  (* Empty module 'RapPhaseSeq' *)
  
  Axiom PairTraceView :
    forall (F : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::interaction::PairTraceView") [] [ F ]) =
      (Ty.apply
        (Ty.path "openvm_stark_backend::prover::types::PairView")
        []
        [
          Ty.apply
            (Ty.path "alloc::sync::Arc")
            []
            [
              Ty.apply
                (Ty.path "p3_matrix::dense::DenseMatrix")
                []
                [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                ];
              Ty.path "alloc::alloc::Global"
            ];
          F
        ]).
  
  (* StructRecord
    {
      name := "LogUpSecurityParameters";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("max_interaction_count", Ty.path "u32");
          ("log_max_message_length", Ty.path "u32");
          ("log_up_pow_bits", Ty.path "usize")
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_openvm_stark_backend_interaction_LogUpSecurityParameters.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters" ],
              self
            |) in
          Value.mkStructRecord
            "openvm_stark_backend::interaction::LogUpSecurityParameters"
            []
            []
            [
              ("max_interaction_count",
                M.call_closure (|
                  Ty.path "u32",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "u32",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::interaction::LogUpSecurityParameters",
                            "max_interaction_count"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("log_max_message_length",
                M.call_closure (|
                  Ty.path "u32",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "u32",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::interaction::LogUpSecurityParameters",
                            "log_max_message_length"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("log_up_pow_bits",
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "usize",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::interaction::LogUpSecurityParameters",
                            "log_up_pow_bits"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_openvm_stark_backend_interaction_LogUpSecurityParameters.
  
  Module Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_LogUpSecurityParameters.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "LogUpSecurityParameters" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "max_interaction_count" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::interaction::LogUpSecurityParameters",
                          "max_interaction_count"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "log_max_message_length" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::interaction::LogUpSecurityParameters",
                          "log_max_message_length"
                        |)
                      |)
                    |)
                  |)
                ]
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "log_up_pow_bits" |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                  (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::interaction::LogUpSecurityParameters",
                              "log_up_pow_bits"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_openvm_stark_backend_interaction_LogUpSecurityParameters.
  
  
  
  Module Impl_openvm_stark_backend_interaction_LogUpSecurityParameters.
    Definition Self : Ty.t := Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters".
    
    (*
        pub fn conjectured_bits_of_security<F: Field>(&self) -> u32 {
            // See Section 4 of [docs/Soundness_of_Interactions_via_LogUp.pdf].
            let log_order = u32::try_from(F::order().bits() - 1).unwrap();
            log_order
                - log2_ceil_usize(2 * self.max_interaction_count as usize) as u32  // multiply by two to account for the poles as well
                - self.log_max_message_length
                + u32::try_from(self.log_up_pow_bits).unwrap()
        }
    *)
    Definition conjectured_bits_of_security
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ F ], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters" ],
              self
            |) in
          M.read (|
            let~ log_order : Ty.path "u32" :=
              M.call_closure (|
                Ty.path "u32",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                  "unwrap",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                    M.get_trait_method (|
                      "core::convert::TryFrom",
                      Ty.path "u32",
                      [],
                      [ Ty.path "u64" ],
                      "try_from",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.sub,
                        [
                          M.call_closure (|
                            Ty.path "u64",
                            M.get_associated_function (|
                              Ty.path "num_bigint::biguint::BigUint",
                              "bits",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Ty.path "num_bigint::biguint::BigUint",
                                  M.call_closure (|
                                    Ty.path "num_bigint::biguint::BigUint",
                                    M.get_trait_method (|
                                      "p3_field::field::Field",
                                      F,
                                      [],
                                      [],
                                      "order",
                                      [],
                                      []
                                    |),
                                    []
                                  |)
                                |)
                              |)
                            ]
                          |);
                          Value.Integer IntegerKind.U64 1
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            M.alloc (|
              Ty.path "u32",
              M.call_closure (|
                Ty.path "u32",
                BinOp.Wrap.add,
                [
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.sub,
                        [
                          M.read (| log_order |);
                          M.cast
                            (Ty.path "u32")
                            (M.call_closure (|
                              Ty.path "usize",
                              M.get_function (| "p3_util::log2_ceil_usize", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.mul,
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    M.cast
                                      (Ty.path "usize")
                                      (M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::interaction::LogUpSecurityParameters",
                                          "max_interaction_count"
                                        |)
                                      |))
                                  ]
                                |)
                              ]
                            |))
                        ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::interaction::LogUpSecurityParameters",
                          "log_max_message_length"
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                      "unwrap",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                        M.get_trait_method (|
                          "core::convert::TryFrom",
                          Ty.path "u32",
                          [],
                          [ Ty.path "usize" ],
                          "try_from",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::interaction::LogUpSecurityParameters",
                              "log_up_pow_bits"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_conjectured_bits_of_security :
      M.IsAssociatedFunction.C Self "conjectured_bits_of_security" conjectured_bits_of_security.
    Admitted.
    Global Typeclasses Opaque conjectured_bits_of_security.
    
    (*
        pub fn max_message_length(&self) -> usize {
            2usize
                .checked_pow(self.log_max_message_length)
                .expect("max_message_length overflowed usize")
        }
    *)
    Definition max_message_length (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters" ],
              self
            |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
              "expect",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                M.get_associated_function (| Ty.path "usize", "checked_pow", [], [] |),
                [
                  Value.Integer IntegerKind.Usize 2;
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_stark_backend::interaction::LogUpSecurityParameters",
                      "log_max_message_length"
                    |)
                  |)
                ]
              |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| mk_str (| "max_message_length overflowed usize" |) |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_max_message_length :
      M.IsAssociatedFunction.C Self "max_message_length" max_message_length.
    Admitted.
    Global Typeclasses Opaque max_message_length.
  End Impl_openvm_stark_backend_interaction_LogUpSecurityParameters.
End interaction.
