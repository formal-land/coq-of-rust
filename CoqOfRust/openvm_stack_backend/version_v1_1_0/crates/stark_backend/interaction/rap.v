(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module interaction.
  Module rap.
    (* Trait *)
    (* Empty module 'InteractionPhaseAirBuilder' *)
    
    Module Impl_openvm_stark_backend_rap_Rap_where_p3_air_air_Air_A_AB_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_stark_backend_rap_PermutationAirBuilderWithExposedValues_AB_where_openvm_stark_backend_interaction_rap_InteractionPhaseAirBuilder_AB_AB_for_A.
      Definition Self (AB A : Ty.t) : Ty.t := A.
      
      (*
          fn eval(&self, builder: &mut AB) {
              // Constraints for the main trace:
              Air::eval(self, builder);
              builder.finalize_interactions();
              if builder.num_interactions() != 0 {
                  match builder.rap_phase_seq_kind() {
                      RapPhaseSeqKind::FriLogUp => {
                          let symbolic_interactions = builder.symbolic_interactions();
                          eval_fri_log_up_phase(
                              builder,
                              &symbolic_interactions,
                              builder.max_constraint_degree(),
                          );
                      }
                  }
              }
          }
      *)
      Definition eval (AB A : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self AB A in
        match ε, τ, α with
        | [], [], [ self; builder ] =>
          ltac:(M.monadic
            (let self := M.alloc (| Ty.apply (Ty.path "&") [] [ A ], self |) in
            let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (| "p3_air::air::Air", A, [], [ AB ], "eval", [], [] |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "openvm_stark_backend::interaction::rap::InteractionPhaseAirBuilder",
                    AB,
                    [],
                    [],
                    "finalize_interactions",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |) ]
                |) in
              M.alloc (|
                Ty.tuple [],
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ne,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_trait_method (|
                                      "openvm_stark_backend::interaction::InteractionBuilder",
                                      AB,
                                      [],
                                      [],
                                      "num_interactions",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| builder |) |)
                                      |)
                                    ]
                                  |);
                                  Value.Integer IntegerKind.Usize 0
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind",
                            M.call_closure (|
                              Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind",
                              M.get_trait_method (|
                                "openvm_stark_backend::interaction::rap::InteractionPhaseAirBuilder",
                                AB,
                                [],
                                [],
                                "rap_phase_seq_kind",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let _ :=
                                  M.is_struct_tuple (|
                                    γ,
                                    "openvm_stark_backend::interaction::RapPhaseSeqKind::FriLogUp"
                                  |) in
                                M.read (|
                                  let~ symbolic_interactions :
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::interaction::Interaction")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "F"
                                                ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ] :=
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::interaction::Interaction")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "F"
                                                ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      M.get_trait_method (|
                                        "openvm_stark_backend::interaction::rap::InteractionPhaseAirBuilder",
                                        AB,
                                        [],
                                        [],
                                        "symbolic_interactions",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| builder |) |)
                                        |)
                                      ]
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_function (|
                                        "openvm_stark_backend::interaction::fri_log_up::eval_fri_log_up_phase",
                                        [],
                                        [ AB ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| builder |) |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::interaction::Interaction")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "F"
                                                            ]
                                                        ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::interaction::Interaction")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "F"
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "deref",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      symbolic_interactions
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "openvm_stark_backend::interaction::rap::InteractionPhaseAirBuilder",
                                            AB,
                                            [],
                                            [],
                                            "max_constraint_degree",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| builder |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                |)))
                          ]
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (AB A : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::rap::Rap"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ AB ]
          (Self AB A)
          (* Instance *) [ ("eval", InstanceField.Method (eval AB A)) ].
    End Impl_openvm_stark_backend_rap_Rap_where_p3_air_air_Air_A_AB_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_stark_backend_rap_PermutationAirBuilderWithExposedValues_AB_where_openvm_stark_backend_interaction_rap_InteractionPhaseAirBuilder_AB_AB_for_A.
  End rap.
End interaction.
