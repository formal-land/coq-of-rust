(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module interaction.
  Module utils.
    (*
    pub fn generate_betas<AF: FieldAlgebra, E>(
        beta: AF,
        all_interactions: &[Interaction<E>],
    ) -> Vec<AF> {
        let max_fields_len = all_interactions
            .iter()
            .map(|interaction| interaction.message.len())
            .max()
            .unwrap_or(0);
    
        beta.powers().take(max_fields_len + 1).collect()
    }
    *)
    Definition generate_betas (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ AF; E ], [ beta; all_interactions ] =>
        ltac:(M.monadic
          (let beta := M.alloc (| AF, beta |) in
          let all_interactions :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "slice")
                    []
                    [ Ty.apply (Ty.path "openvm_stark_backend::interaction::Interaction") [] [ E ] ]
                ],
              all_interactions
            |) in
          M.read (|
            let~ max_fields_len : Ty.path "usize" :=
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                  "unwrap_or",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::interaction::Interaction")
                                []
                                [ E ]
                            ];
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                                    []
                                    [ E ]
                                ]
                            ]
                            (Ty.path "usize")
                        ],
                      [],
                      [],
                      "max",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [ E ]
                              ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                                      []
                                      [ E ]
                                  ]
                              ]
                              (Ty.path "usize")
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::interaction::Interaction")
                                []
                                [ E ]
                            ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.path "usize";
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::interaction::Interaction")
                                      []
                                      [ E ]
                                  ]
                              ]
                              (Ty.path "usize")
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::interaction::Interaction")
                                  []
                                  [ E ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::interaction::Interaction")
                                    []
                                    [ E ]
                                ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.read (| all_interactions |) |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.path "usize",
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::interaction::Interaction")
                                              []
                                              [ E ]
                                          ],
                                        α0
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let interaction :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::interaction::Interaction")
                                                      []
                                                      [ E ]
                                                  ],
                                                γ
                                              |) in
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ E; Ty.path "alloc::alloc::Global" ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interaction |) |),
                                                    "openvm_stark_backend::interaction::Interaction",
                                                    "message"
                                                  |)
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |);
                  Value.Integer IntegerKind.Usize 0
                ]
              |) in
            M.alloc (|
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ AF; Ty.path "alloc::alloc::Global" ],
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ AF; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::take::Take")
                    []
                    [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ AF ] ],
                  [],
                  [],
                  "collect",
                  [],
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ AF; Ty.path "alloc::alloc::Global" ] ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::take::Take")
                      []
                      [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ AF ] ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "p3_field::field::Powers") [] [ AF ],
                      [],
                      [],
                      "take",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "p3_field::field::Powers") [] [ AF ],
                        M.get_trait_method (|
                          "p3_field::field::FieldAlgebra",
                          AF,
                          [],
                          [],
                          "powers",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, beta |) ]
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.add,
                        [ M.read (| max_fields_len |); Value.Integer IntegerKind.Usize 1 ]
                      |)
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_generate_betas :
      M.IsFunction.C "openvm_stark_backend::interaction::utils::generate_betas" generate_betas.
    Admitted.
    Global Typeclasses Opaque generate_betas.
  End utils.
End interaction.
