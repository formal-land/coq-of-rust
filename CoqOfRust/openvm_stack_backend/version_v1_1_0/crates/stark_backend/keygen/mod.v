(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module keygen.
  (* StructRecord
    {
      name := "AirKeygenBuilder";
      const_params := [];
      ty_params := [ "SC" ];
      fields :=
        [
          ("air",
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("rap_phase_seq_kind", Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind");
          ("prep_keygen_data",
            Ty.apply (Ty.path "openvm_stark_backend::keygen::PrepKeygenData") [] [ SC ])
        ];
    } *)
  
  (* StructRecord
    {
      name := "MultiStarkKeygenBuilder";
      const_params := [];
      ty_params := [ "SC" ];
      fields :=
        [
          ("config", Ty.apply (Ty.path "&") [] [ SC ]);
          ("partitioned_airs",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder") [] [ SC ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("max_constraint_degree", Ty.path "usize")
        ];
    } *)
  
  Module Impl_openvm_stark_backend_keygen_MultiStarkKeygenBuilder_SC.
    Definition Self (SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_stark_backend::keygen::MultiStarkKeygenBuilder") [] [ SC ].
    
    (*
        pub fn new(config: &'a SC) -> Self {
            Self {
                config,
                partitioned_airs: vec![],
                max_constraint_degree: 0,
            }
        }
    *)
    Definition new (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ config ] =>
        ltac:(M.monadic
          (let config := M.alloc (| Ty.apply (Ty.path "&") [] [ SC ], config |) in
          Value.mkStructRecord
            "openvm_stark_backend::keygen::MultiStarkKeygenBuilder"
            []
            [ SC ]
            [
              ("config", M.read (| config |));
              ("partitioned_airs",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder") [] [ SC ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                          []
                          [ SC ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  []
                |));
              ("max_constraint_degree", Value.Integer IntegerKind.Usize 0)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (SC : Ty.t),
      M.IsAssociatedFunction.C (Self SC) "new" (new SC).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn set_max_constraint_degree(&mut self, max_constraint_degree: usize) {
            self.max_constraint_degree = max_constraint_degree;
        }
    *)
    Definition set_max_constraint_degree
        (SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self; max_constraint_degree ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::keygen::MultiStarkKeygenBuilder")
                    []
                    [ SC ]
                ],
              self
            |) in
          let max_constraint_degree := M.alloc (| Ty.path "usize", max_constraint_degree |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                  "max_constraint_degree"
                |),
                M.read (| max_constraint_degree |)
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_set_max_constraint_degree :
      forall (SC : Ty.t),
      M.IsAssociatedFunction.C (Self SC) "set_max_constraint_degree" (set_max_constraint_degree SC).
    Admitted.
    Global Typeclasses Opaque set_max_constraint_degree.
    
    (*
        pub fn add_air(&mut self, air: Arc<dyn AnyRap<SC>>) -> usize {
            self.partitioned_airs.push(AirKeygenBuilder::new(
                self.config.pcs(),
                SC::RapPhaseSeq::ID,
                air,
            ));
            self.partitioned_airs.len() - 1
        }
    *)
    Definition add_air (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self; air ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::keygen::MultiStarkKeygenBuilder")
                    []
                    [ SC ]
                ],
              self
            |) in
          let air :=
            M.alloc (|
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ],
              air
            |) in
          M.catch_return (Ty.path "usize") (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] := Value.Tuple [] in
                let __tracing_attr_span := M.read (| Value.DeclaredButUndefined |) in
                let __tracing_attr_guard := M.read (| Value.DeclaredButUndefined |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                LogicalOp.or (|
                                  LogicalOp.and (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "DEBUG",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_constant (|
                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                            Ty.path "tracing_core::metadata::LevelFilter"
                                          |)
                                        |)
                                      ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialOrd",
                                          Ty.path "tracing_core::metadata::Level",
                                          [],
                                          [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                          "le",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_associated_constant (|
                                              Ty.path "tracing_core::metadata::Level",
                                              "DEBUG",
                                              Ty.path "tracing_core::metadata::Level"
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.call_closure (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::metadata::LevelFilter",
                                                  "current",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                  |),
                                  ltac:(M.monadic (Value.Bool false))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.write (|
                                __tracing_attr_span,
                                M.read (|
                                  let~ interest : Ty.path "tracing_core::subscriber::Interest" :=
                                    M.call_closure (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "never",
                                        [],
                                        []
                                      |),
                                      []
                                    |) in
                                  M.alloc (|
                                    Ty.path "tracing::span::Span",
                                    M.match_operator (|
                                      Ty.path "tracing::span::Span",
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  LogicalOp.and (|
                                                    LogicalOp.and (|
                                                      LogicalOp.and (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "tracing_core::metadata::Level",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            ],
                                                            "le",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_associated_constant (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                "DEBUG",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_constant (|
                                                                "tracing::level_filters::STATIC_MAX_LEVEL",
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              |)
                                                            |)
                                                          ]
                                                        |),
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              [],
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              ],
                                                              "le",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                get_associated_constant (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level",
                                                                  "DEBUG",
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level"
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::metadata::LevelFilter",
                                                                      "current",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)))
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              interest,
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  "interest",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "openvm_stark_backend::keygen::add_air::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (|
                                                            Ty.path "bool",
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::subscriber::Interest",
                                                                  "is_never",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    interest
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)))
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_function (|
                                                          "tracing::__macro_support::__is_enabled",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "tracing_core::callsite::Callsite",
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  [],
                                                                  [],
                                                                  "metadata",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "openvm_stark_backend::keygen::add_air::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.read (| interest |)
                                                        ]
                                                      |)))
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ meta :
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "tracing_core::metadata::Metadata"
                                                    ] :=
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "tracing_core::metadata::Metadata" ],
                                                  M.get_trait_method (|
                                                    "tracing_core::callsite::Callsite",
                                                    Ty.path
                                                      "tracing_core::callsite::DefaultCallsite",
                                                    [],
                                                    [],
                                                    "metadata",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.read (|
                                                          get_constant (|
                                                            "openvm_stark_backend::keygen::add_air::__CALLSITE",
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite"
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |) in
                                              M.alloc (|
                                                Ty.path "tracing::span::Span",
                                                M.call_closure (|
                                                  Ty.path "tracing::span::Span",
                                                  M.get_associated_function (|
                                                    Ty.path "tracing::span::Span",
                                                    "new",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| meta |) |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "tracing_core::field::ValueSet",
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::field::ValueSet",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::field::FieldSet",
                                                                "value_set",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        0
                                                                    ]
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::field::Field"
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("tracing_core::field::Value::Trait",
                                                                                        [])
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::FieldSet"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "tracing_core::metadata::Metadata",
                                                                        "fields",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| meta |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              0
                                                                          ]
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "tracing_core::field::Field"
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.dyn
                                                                                          [
                                                                                            ("tracing_core::field::Value::Trait",
                                                                                              [])
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        Value.Array []
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.read (|
                                              let~ span : Ty.path "tracing::span::Span" :=
                                                M.call_closure (|
                                                  Ty.path "tracing::span::Span",
                                                  M.get_function (|
                                                    "tracing::__macro_support::__disabled_span",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::Metadata"
                                                            ],
                                                          M.get_trait_method (|
                                                            "tracing_core::callsite::Callsite",
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite",
                                                            [],
                                                            [],
                                                            "metadata",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.read (|
                                                                  get_constant (|
                                                                    "openvm_stark_backend::keygen::add_air::__CALLSITE",
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] := Value.Tuple [] in
                                              span
                                            |)))
                                      ]
                                    |)
                                  |)
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.write (|
                                __tracing_attr_guard,
                                M.call_closure (|
                                  Ty.path "tracing::span::Entered",
                                  M.get_associated_function (|
                                    Ty.path "tracing::span::Span",
                                    "enter",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                                |)
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool false |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              let~ __tracing_attr_fake_return : Ty.path "usize" :=
                                M.never_to_any (|
                                  M.read (|
                                    M.loop (|
                                      Ty.path "never",
                                      ltac:(M.monadic (M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)
                                |) in
                              M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                            []
                            [ SC ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "push",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                          "partitioned_airs"
                        |)
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                          []
                          [ SC ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                            []
                            [ SC ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::config::StarkGenericConfig",
                                  SC,
                                  [],
                                  [],
                                  "pcs",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                                          "config"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |);
                          M.read (|
                            get_constant (|
                              "openvm_stark_backend::interaction::RapPhaseSeq::ID",
                              Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind"
                            |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                              (Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]),
                            [ M.read (| air |) ]
                          |)
                        ]
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.path "usize",
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                []
                                [ SC ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "len",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                              "partitioned_airs"
                            |)
                          |)
                        ]
                      |);
                      Value.Integer IntegerKind.Usize 1
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_add_air :
      forall (SC : Ty.t),
      M.IsAssociatedFunction.C (Self SC) "add_air" (add_air SC).
    Admitted.
    Global Typeclasses Opaque add_air.
    
    (*
        pub fn generate_pk(mut self) -> MultiStarkProvingKey<SC> {
            let air_max_constraint_degree = self
                .partitioned_airs
                .iter()
                .map(|keygen_builder| {
                    let max_constraint_degree = keygen_builder.max_constraint_degree();
                    tracing::debug!(
                        "{} has constraint degree {}",
                        keygen_builder.air.name(),
                        max_constraint_degree
                    );
                    max_constraint_degree
                })
                .max()
                .unwrap();
            tracing::info!(
                "Max constraint (excluding logup constraints) degree across all AIRs: {}",
                air_max_constraint_degree
            );
            if self.max_constraint_degree != 0 && air_max_constraint_degree > self.max_constraint_degree
            {
                // This means the quotient polynomial is already going to be higher degree, so we
                // might as well use it.
                tracing::info!(
                    "Setting max_constraint_degree from {} to {air_max_constraint_degree}",
                    self.max_constraint_degree
                );
                self.max_constraint_degree = air_max_constraint_degree;
            }
            // First pass: get symbolic constraints and interactions but RAP phase constraints are not final
            let symbolic_constraints_per_air = self
                .partitioned_airs
                .iter()
                .map(|keygen_builder| keygen_builder.get_symbolic_builder(None).constraints())
                .collect_vec();
            // Note: due to the need to go through a trait, there is some duplicate computation
            // (e.g., FRI logup will calculate the interaction chunking both here and in the second pass below)
            let rap_partial_pk_per_air = self
                .config
                .rap_phase_seq()
                .generate_pk_per_air(&symbolic_constraints_per_air, self.max_constraint_degree);
            let pk_per_air: Vec<_> = zip(self.partitioned_airs, rap_partial_pk_per_air)
                .map(|(keygen_builder, rap_partial_pk)| {
                    // Second pass: get final constraints, where RAP phase constraints may have changed
                    keygen_builder.generate_pk(rap_partial_pk, self.max_constraint_degree)
                })
                .collect();
    
            for pk in pk_per_air.iter() {
                let width = &pk.vk.params.width;
                tracing::info!("{:<20} | Quotient Deg = {:<2} | Prep Cols = {:<2} | Main Cols = {:<8} | Perm Cols = {:<4} | {:4} Constraints | {:3} Interactions On Buses {:?}",
                    pk.air_name,
                    pk.vk.quotient_degree,
                    width.preprocessed.unwrap_or(0),
                    format!("{:?}",width.main_widths()),
                    format!("{:?}",width.after_challenge.iter().map(|&x| x * <SC::Challenge as FieldExtensionAlgebra<Val<SC>>>::D).collect_vec()),
                    pk.vk.symbolic_constraints.constraints.constraint_idx.len(),
                    pk.vk.symbolic_constraints.interactions.len(),
                    pk.vk
                        .symbolic_constraints
                        .interactions
                        .iter()
                        .map(|i| i.bus_index)
                        .collect_vec()
                );
                #[cfg(feature = "bench-metrics")]
                {
                    let labels = [("air_name", pk.air_name.clone())];
                    metrics::counter!("quotient_deg", &labels).absolute(pk.vk.quotient_degree as u64);
                    // column info will be logged by prover later
                    metrics::counter!("constraints", &labels)
                        .absolute(pk.vk.symbolic_constraints.constraints.constraint_idx.len() as u64);
                    metrics::counter!("interactions", &labels)
                        .absolute(pk.vk.symbolic_constraints.interactions.len() as u64);
                }
            }
    
            let num_airs = symbolic_constraints_per_air.len();
            let base_order = Val::<SC>::order().to_u32_digits()[0];
            let mut count_weight_per_air_per_bus_index = HashMap::new();
    
            // We compute the a_i's for the constraints of the form a_0 n_0 + ... + a_{k-1} n_{k-1} < a_k,
            // First the constraints that the total number of interactions on each bus is at most the base field order.
            for (i, constraints_per_air) in symbolic_constraints_per_air.iter().enumerate() {
                for interaction in &constraints_per_air.interactions {
                    // Also make sure that this of interaction is valid given the security params.
                    // +1 because of the bus
                    let max_msg_len = self
                        .config
                        .rap_phase_seq()
                        .log_up_security_params()
                        .max_message_length();
                    // plus one because of the bus
                    let total_message_length = interaction.message.len() + 1;
                    assert!(
                        total_message_length <= max_msg_len,
                        "interaction message with bus has length {}, which is more than max {max_msg_len}",
                        total_message_length,
                    );
    
                    let b = interaction.bus_index;
                    let constraint = count_weight_per_air_per_bus_index
                        .entry(b)
                        .or_insert_with(|| LinearConstraint {
                            coefficients: vec![0; num_airs],
                            threshold: base_order,
                        });
                    constraint.coefficients[i] += interaction.count_weight;
                }
            }
    
            // Sorting by bus index is not necessary, but makes debugging/testing easier.
            let mut trace_height_constraints = count_weight_per_air_per_bus_index
                .into_iter()
                .sorted_by_key(|(bus_index, _)| *bus_index)
                .map(|(_, constraint)| constraint)
                .collect_vec();
    
            let log_up_security_params = self.config.rap_phase_seq().log_up_security_params();
    
            // Add a constraint for the total number of interactions.
            trace_height_constraints.push(LinearConstraint {
                coefficients: symbolic_constraints_per_air
                    .iter()
                    .map(|c| c.interactions.len() as u32)
                    .collect(),
                threshold: log_up_security_params.max_interaction_count,
            });
    
            let pre_vk: MultiStarkVerifyingKey0<SC> = MultiStarkVerifyingKey0 {
                per_air: pk_per_air.iter().map(|pk| pk.vk.clone()).collect(),
                trace_height_constraints: trace_height_constraints.clone(),
                log_up_pow_bits: log_up_security_params.log_up_pow_bits,
            };
            // To protect against weak Fiat-Shamir, we hash the "pre"-verifying key and include it in the
            // final verifying key. This just needs to commit to the verifying key and does not need to be
            // verified by the verifier, so we just use bincode to serialize it.
            let vk_bytes = bitcode::serialize(&pre_vk).unwrap();
            tracing::info!("pre-vkey: {} bytes", vk_bytes.len());
            // Purely to get type compatibility and convenience, we hash using pcs.commit as a single row
            let vk_as_row = RowMajorMatrix::new_row(
                vk_bytes
                    .into_iter()
                    .map(Val::<SC>::from_canonical_u8)
                    .collect(),
            );
            let pcs = self.config.pcs();
            let deg_1_domain = pcs.natural_domain_for_degree(1);
            let (vk_pre_hash, _) = pcs.commit(vec![(deg_1_domain, vk_as_row)]);
    
            MultiStarkProvingKey {
                per_air: pk_per_air,
                trace_height_constraints,
                max_constraint_degree: self.max_constraint_degree,
                log_up_pow_bits: log_up_security_params.log_up_pow_bits,
                vk_pre_hash,
            }
        }
    *)
    Definition generate_pk (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_stark_backend::keygen::MultiStarkKeygenBuilder") [] [ SC ],
              self
            |) in
          M.read (|
            let~ air_max_constraint_degree : Ty.path "usize" :=
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                  "unwrap",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                []
                                [ SC ]
                            ];
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                    []
                                    [ SC ]
                                ]
                            ]
                            (Ty.path "usize")
                        ],
                      [],
                      [],
                      "max",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                  []
                                  [ SC ]
                              ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                      []
                                      [ SC ]
                                  ]
                              ]
                              (Ty.path "usize")
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                []
                                [ SC ]
                            ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.path "usize";
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                      []
                                      [ SC ]
                                  ]
                              ]
                              (Ty.path "usize")
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                  []
                                  [ SC ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                    []
                                    [ SC ]
                                ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::keygen::AirKeygenBuilder")
                                              []
                                              [ SC ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::keygen::AirKeygenBuilder")
                                            []
                                            [ SC ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          self,
                                          "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                                          "partitioned_airs"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.path "usize",
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::keygen::AirKeygenBuilder")
                                              []
                                              [ SC ]
                                          ],
                                        α0
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let keygen_builder :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::keygen::AirKeygenBuilder")
                                                      []
                                                      [ SC ]
                                                  ],
                                                γ
                                              |) in
                                            M.read (|
                                              let~ max_constraint_degree : Ty.path "usize" :=
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::keygen::AirKeygenBuilder")
                                                      []
                                                      [ SC ],
                                                    "max_constraint_degree",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| keygen_builder |) |)
                                                    |)
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.read (|
                                                  let~ enabled : Ty.path "bool" :=
                                                    LogicalOp.and (|
                                                      LogicalOp.and (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "tracing_core::metadata::Level",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            ],
                                                            "le",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_associated_constant (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                "DEBUG",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_constant (|
                                                                "tracing::level_filters::STATIC_MAX_LEVEL",
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              |)
                                                            |)
                                                          ]
                                                        |),
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              [],
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              ],
                                                              "le",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                get_associated_constant (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level",
                                                                  "DEBUG",
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level"
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::metadata::LevelFilter",
                                                                      "current",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)))
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.read (|
                                                          let~ interest :
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest" :=
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                "interest",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_stark_backend::keygen::generate_pk::{{closure}}::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          M.alloc (|
                                                            Ty.path "bool",
                                                            LogicalOp.and (|
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::subscriber::Interest",
                                                                    "is_never",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      interest
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              ltac:(M.monadic
                                                                (M.call_closure (|
                                                                  Ty.path "bool",
                                                                  M.get_function (|
                                                                    "tracing::__macro_support::__is_enabled",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::metadata::Metadata"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "tracing_core::callsite::Callsite",
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite",
                                                                            [],
                                                                            [],
                                                                            "metadata",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  get_constant (|
                                                                                    "openvm_stark_backend::keygen::generate_pk::{{closure}}::__CALLSITE",
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                                      ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.read (| interest |)
                                                                  ]
                                                                |)))
                                                            |)
                                                          |)
                                                        |)))
                                                    |) in
                                                  M.alloc (|
                                                    Ty.tuple [],
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ := M.use enabled in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.read (|
                                                              let~ _ : Ty.tuple [] :=
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "core::ops::function::Fn",
                                                                    Ty.function
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::ValueSet"
                                                                      ]
                                                                      (Ty.tuple []),
                                                                    [],
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::ValueSet"
                                                                        ]
                                                                    ],
                                                                    "call",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.function
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::field::ValueSet"
                                                                          ]
                                                                          (Ty.tuple []),
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                ltac:(M.monadic
                                                                                  (M.match_operator (|
                                                                                    Ty.tuple [],
                                                                                    M.alloc (|
                                                                                      Ty.path
                                                                                        "tracing_core::field::ValueSet",
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                value_set :=
                                                                                            M.copy (|
                                                                                              Ty.path
                                                                                                "tracing_core::field::ValueSet",
                                                                                              γ
                                                                                            |) in
                                                                                          M.read (|
                                                                                            let~
                                                                                                  meta :
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "tracing_core::metadata::Metadata"
                                                                                                  ] :=
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "tracing_core::metadata::Metadata"
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "tracing_core::callsite::Callsite",
                                                                                                  Ty.path
                                                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                                                  [],
                                                                                                  [],
                                                                                                  "metadata",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        get_constant (|
                                                                                                          "openvm_stark_backend::keygen::generate_pk::{{closure}}::__CALLSITE",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                                                            ]
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |) in
                                                                                            let~ _ :
                                                                                                Ty.tuple
                                                                                                  [] :=
                                                                                              M.call_closure (|
                                                                                                Ty.tuple
                                                                                                  [],
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "tracing_core::event::Event",
                                                                                                  "dispatch",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        meta
                                                                                                      |)
                                                                                                    |)
                                                                                                  |);
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        value_set
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Ty.tuple
                                                                                                [],
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |)
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                              | _ =>
                                                                                M.impossible
                                                                                  "wrong number of arguments"
                                                                              end))
                                                                      |)
                                                                    |);
                                                                    Value.Tuple
                                                                      [
                                                                        M.read (|
                                                                          let~ iter :
                                                                              Ty.path
                                                                                "tracing_core::field::Iter" :=
                                                                            M.call_closure (|
                                                                              Ty.path
                                                                                "tracing_core::field::Iter",
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "tracing_core::field::FieldSet",
                                                                                "iter",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "tracing_core::field::FieldSet"
                                                                                        ],
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "tracing_core::metadata::Metadata",
                                                                                        "fields",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.call_closure (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "tracing_core::metadata::Metadata"
                                                                                                ],
                                                                                              M.get_trait_method (|
                                                                                                "tracing_core::callsite::Callsite",
                                                                                                Ty.path
                                                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                                                [],
                                                                                                [],
                                                                                                "metadata",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      get_constant (|
                                                                                                        "openvm_stark_backend::keygen::generate_pk::{{closure}}::__CALLSITE",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                                                          ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |) in
                                                                          M.alloc (|
                                                                            Ty.path
                                                                              "tracing_core::field::ValueSet",
                                                                            M.call_closure (|
                                                                              Ty.path
                                                                                "tracing_core::field::ValueSet",
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "tracing_core::field::FieldSet",
                                                                                "value_set",
                                                                                [],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        1
                                                                                    ]
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "tracing_core::field::Field"
                                                                                            ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::option::Option")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.dyn
                                                                                                    [
                                                                                                      ("tracing_core::field::Value::Trait",
                                                                                                        [])
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "tracing_core::field::FieldSet"
                                                                                        ],
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "tracing_core::metadata::Metadata",
                                                                                        "fields",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.call_closure (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "tracing_core::metadata::Metadata"
                                                                                                ],
                                                                                              M.get_trait_method (|
                                                                                                "tracing_core::callsite::Callsite",
                                                                                                Ty.path
                                                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                                                [],
                                                                                                [],
                                                                                                "metadata",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      get_constant (|
                                                                                                        "openvm_stark_backend::keygen::generate_pk::{{closure}}::__CALLSITE",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                                                          ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.alloc (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              1
                                                                                          ]
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "tracing_core::field::Field"
                                                                                                  ];
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::option::Option")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.dyn
                                                                                                          [
                                                                                                            ("tracing_core::field::Value::Trait",
                                                                                                              [])
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                          ],
                                                                                        Value.Array
                                                                                          [
                                                                                            Value.Tuple
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.alloc (|
                                                                                                    Ty.path
                                                                                                      "tracing_core::field::Field",
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "tracing_core::field::Field",
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::option::Option")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "tracing_core::field::Field"
                                                                                                          ],
                                                                                                        "expect",
                                                                                                        [],
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.call_closure (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::option::Option")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "tracing_core::field::Field"
                                                                                                            ],
                                                                                                          M.get_trait_method (|
                                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                                            Ty.path
                                                                                                              "tracing_core::field::Iter",
                                                                                                            [],
                                                                                                            [],
                                                                                                            "next",
                                                                                                            [],
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.MutRef,
                                                                                                              M.deref (|
                                                                                                                M.borrow (|
                                                                                                                  Pointer.Kind.MutRef,
                                                                                                                  iter
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          ]
                                                                                                        |);
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            mk_str (|
                                                                                                              "FieldSet corrupted (this is a bug)"
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |);
                                                                                                Value.StructTuple
                                                                                                  "core::option::Option::Some"
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.dyn
                                                                                                          [
                                                                                                            ("tracing_core::field::Value::Trait",
                                                                                                              [])
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.use
                                                                                                        (M.alloc (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.dyn
                                                                                                                [
                                                                                                                  ("tracing_core::field::Value::Trait",
                                                                                                                    [])
                                                                                                                ]
                                                                                                            ],
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.dyn
                                                                                                                  [
                                                                                                                    ("tracing_core::field::Value::Trait",
                                                                                                                      [])
                                                                                                                  ]
                                                                                                              ],
                                                                                                            M.pointer_coercion
                                                                                                              M.PointerCoercion.Unsize
                                                                                                              (Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "&")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "core::fmt::Arguments"
                                                                                                                ])
                                                                                                              (Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "&")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.dyn
                                                                                                                    [
                                                                                                                      ("tracing_core::field::Value::Trait",
                                                                                                                        [])
                                                                                                                    ]
                                                                                                                ]),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                M.deref (|
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.alloc (|
                                                                                                                      Ty.path
                                                                                                                        "core::fmt::Arguments",
                                                                                                                      M.call_closure (|
                                                                                                                        Ty.path
                                                                                                                          "core::fmt::Arguments",
                                                                                                                        M.get_associated_function (|
                                                                                                                          Ty.path
                                                                                                                            "core::fmt::Arguments",
                                                                                                                          "new_v1",
                                                                                                                          [
                                                                                                                            Value.Integer
                                                                                                                              IntegerKind.Usize
                                                                                                                              2;
                                                                                                                            Value.Integer
                                                                                                                              IntegerKind.Usize
                                                                                                                              2
                                                                                                                          ],
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            M.deref (|
                                                                                                                              M.borrow (|
                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                M.alloc (|
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "array")
                                                                                                                                    [
                                                                                                                                      Value.Integer
                                                                                                                                        IntegerKind.Usize
                                                                                                                                        2
                                                                                                                                    ]
                                                                                                                                    [
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "&")
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.path
                                                                                                                                            "str"
                                                                                                                                        ]
                                                                                                                                    ],
                                                                                                                                  Value.Array
                                                                                                                                    [
                                                                                                                                      mk_str (|
                                                                                                                                        ""
                                                                                                                                      |);
                                                                                                                                      mk_str (|
                                                                                                                                        " has constraint degree "
                                                                                                                                      |)
                                                                                                                                    ]
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |);
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            M.deref (|
                                                                                                                              M.borrow (|
                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                M.alloc (|
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "array")
                                                                                                                                    [
                                                                                                                                      Value.Integer
                                                                                                                                        IntegerKind.Usize
                                                                                                                                        2
                                                                                                                                    ]
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "core::fmt::rt::Argument"
                                                                                                                                    ],
                                                                                                                                  Value.Array
                                                                                                                                    [
                                                                                                                                      M.call_closure (|
                                                                                                                                        Ty.path
                                                                                                                                          "core::fmt::rt::Argument",
                                                                                                                                        M.get_associated_function (|
                                                                                                                                          Ty.path
                                                                                                                                            "core::fmt::rt::Argument",
                                                                                                                                          "new_display",
                                                                                                                                          [],
                                                                                                                                          [
                                                                                                                                            Ty.path
                                                                                                                                              "alloc::string::String"
                                                                                                                                          ]
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          M.borrow (|
                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                            M.deref (|
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.alloc (|
                                                                                                                                                  Ty.path
                                                                                                                                                    "alloc::string::String",
                                                                                                                                                  M.call_closure (|
                                                                                                                                                    Ty.path
                                                                                                                                                      "alloc::string::String",
                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                      "openvm_stark_backend::rap::AnyRap",
                                                                                                                                                      Ty.dyn
                                                                                                                                                        [
                                                                                                                                                          ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                                                                                                            [])
                                                                                                                                                        ],
                                                                                                                                                      [],
                                                                                                                                                      [
                                                                                                                                                        SC
                                                                                                                                                      ],
                                                                                                                                                      "name",
                                                                                                                                                      [],
                                                                                                                                                      []
                                                                                                                                                    |),
                                                                                                                                                    [
                                                                                                                                                      M.borrow (|
                                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                                        M.deref (|
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "&")
                                                                                                                                                              []
                                                                                                                                                              [
                                                                                                                                                                Ty.dyn
                                                                                                                                                                  [
                                                                                                                                                                    ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                                                                                                                      [])
                                                                                                                                                                  ]
                                                                                                                                                              ],
                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                              "core::ops::deref::Deref",
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "alloc::sync::Arc")
                                                                                                                                                                []
                                                                                                                                                                [
                                                                                                                                                                  Ty.dyn
                                                                                                                                                                    [
                                                                                                                                                                      ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                                                                                                                        [])
                                                                                                                                                                    ];
                                                                                                                                                                  Ty.path
                                                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                                                ],
                                                                                                                                                              [],
                                                                                                                                                              [],
                                                                                                                                                              "deref",
                                                                                                                                                              [],
                                                                                                                                                              []
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.borrow (|
                                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                                  M.deref (|
                                                                                                                                                                    M.read (|
                                                                                                                                                                      keygen_builder
                                                                                                                                                                    |)
                                                                                                                                                                  |),
                                                                                                                                                                  "openvm_stark_backend::keygen::AirKeygenBuilder",
                                                                                                                                                                  "air"
                                                                                                                                                                |)
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        |)
                                                                                                                                                      |)
                                                                                                                                                    ]
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            |)
                                                                                                                                          |)
                                                                                                                                        ]
                                                                                                                                      |);
                                                                                                                                      M.call_closure (|
                                                                                                                                        Ty.path
                                                                                                                                          "core::fmt::rt::Argument",
                                                                                                                                        M.get_associated_function (|
                                                                                                                                          Ty.path
                                                                                                                                            "core::fmt::rt::Argument",
                                                                                                                                          "new_display",
                                                                                                                                          [],
                                                                                                                                          [
                                                                                                                                            Ty.path
                                                                                                                                              "usize"
                                                                                                                                          ]
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          M.borrow (|
                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                            M.deref (|
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                max_constraint_degree
                                                                                                                                              |)
                                                                                                                                            |)
                                                                                                                                          |)
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    ]
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |))
                                                                                                    |)
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                  ]
                                                                |) in
                                                              M.alloc (|
                                                                Ty.tuple [],
                                                                Value.Tuple []
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)
                                                  |)
                                                |) in
                                              max_constraint_degree
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                let~ enabled : Ty.path "bool" :=
                  LogicalOp.and (|
                    LogicalOp.and (|
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialOrd",
                          Ty.path "tracing_core::metadata::Level",
                          [],
                          [ Ty.path "tracing_core::metadata::LevelFilter" ],
                          "le",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            get_associated_constant (|
                              Ty.path "tracing_core::metadata::Level",
                              "INFO",
                              Ty.path "tracing_core::metadata::Level"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            get_constant (|
                              "tracing::level_filters::STATIC_MAX_LEVEL",
                              Ty.path "tracing_core::metadata::LevelFilter"
                            |)
                          |)
                        ]
                      |),
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.path "bool",
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "tracing_core::metadata::Level",
                            [],
                            [ Ty.path "tracing_core::metadata::LevelFilter" ],
                            "le",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              get_associated_constant (|
                                Ty.path "tracing_core::metadata::Level",
                                "INFO",
                                Ty.path "tracing_core::metadata::Level"
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.path "tracing_core::metadata::LevelFilter",
                                M.call_closure (|
                                  Ty.path "tracing_core::metadata::LevelFilter",
                                  M.get_associated_function (|
                                    Ty.path "tracing_core::metadata::LevelFilter",
                                    "current",
                                    [],
                                    []
                                  |),
                                  []
                                |)
                              |)
                            |)
                          ]
                        |)))
                    |),
                    ltac:(M.monadic
                      (M.read (|
                        let~ interest : Ty.path "tracing_core::subscriber::Interest" :=
                          M.call_closure (|
                            Ty.path "tracing_core::subscriber::Interest",
                            M.get_associated_function (|
                              Ty.path "tracing_core::callsite::DefaultCallsite",
                              "interest",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.read (|
                                    get_constant (|
                                      "openvm_stark_backend::keygen::generate_pk::__CALLSITE",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "tracing_core::callsite::DefaultCallsite" ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |) in
                        M.alloc (|
                          Ty.path "bool",
                          LogicalOp.and (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.path "tracing_core::subscriber::Interest",
                                  "is_never",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, interest |) ]
                              |)
                            |),
                            ltac:(M.monadic
                              (M.call_closure (|
                                Ty.path "bool",
                                M.get_function (|
                                  "tracing::__macro_support::__is_enabled",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "tracing_core::metadata::Metadata" ],
                                        M.get_trait_method (|
                                          "tracing_core::callsite::Callsite",
                                          Ty.path "tracing_core::callsite::DefaultCallsite",
                                          [],
                                          [],
                                          "metadata",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.read (|
                                                get_constant (|
                                                  "openvm_stark_backend::keygen::generate_pk::__CALLSITE",
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.path
                                                        "tracing_core::callsite::DefaultCallsite"
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.read (| interest |)
                                ]
                              |)))
                          |)
                        |)
                      |)))
                  |) in
                M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use enabled in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "core::ops::function::Fn",
                                  Ty.function
                                    [ Ty.path "tracing_core::field::ValueSet" ]
                                    (Ty.tuple []),
                                  [],
                                  [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ],
                                  "call",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.function
                                        [ Ty.path "tracing_core::field::ValueSet" ]
                                        (Ty.tuple []),
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (|
                                                    Ty.path "tracing_core::field::ValueSet",
                                                    α0
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let value_set :=
                                                          M.copy (|
                                                            Ty.path "tracing_core::field::ValueSet",
                                                            γ
                                                          |) in
                                                        M.read (|
                                                          let~ meta :
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ] :=
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_stark_backend::keygen::generate_pk::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::event::Event",
                                                                "dispatch",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| meta |) |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      value_set
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                        |)))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    |)
                                  |);
                                  Value.Tuple
                                    [
                                      M.read (|
                                        let~ iter : Ty.path "tracing_core::field::Iter" :=
                                          M.call_closure (|
                                            Ty.path "tracing_core::field::Iter",
                                            M.get_associated_function (|
                                              Ty.path "tracing_core::field::FieldSet",
                                              "iter",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "tracing_core::field::FieldSet" ],
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::metadata::Metadata",
                                                      "fields",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "openvm_stark_backend::keygen::generate_pk::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |) in
                                        M.alloc (|
                                          Ty.path "tracing_core::field::ValueSet",
                                          M.call_closure (|
                                            Ty.path "tracing_core::field::ValueSet",
                                            M.get_associated_function (|
                                              Ty.path "tracing_core::field::FieldSet",
                                              "value_set",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 1 ]
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "tracing_core::field::Field" ];
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.dyn
                                                                  [
                                                                    ("tracing_core::field::Value::Trait",
                                                                      [])
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "tracing_core::field::FieldSet" ],
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::metadata::Metadata",
                                                      "fields",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "openvm_stark_backend::keygen::generate_pk::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::field::Field"
                                                                ];
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("tracing_core::field::Value::Trait",
                                                                            [])
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ],
                                                      Value.Array
                                                        [
                                                          Value.Tuple
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path
                                                                    "tracing_core::field::Field",
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "tracing_core::field::Field",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::Field"
                                                                        ],
                                                                      "expect",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::field::Field"
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.path
                                                                            "tracing_core::field::Iter",
                                                                          [],
                                                                          [],
                                                                          "next",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                iter
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          mk_str (|
                                                                            "FieldSet corrupted (this is a bug)"
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              Value.StructTuple
                                                                "core::option::Option::Some"
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("tracing_core::field::Value::Trait",
                                                                            [])
                                                                        ]
                                                                    ]
                                                                ]
                                                                [
                                                                  M.read (|
                                                                    M.use
                                                                      (M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ],
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("tracing_core::field::Value::Trait",
                                                                                    [])
                                                                                ]
                                                                            ],
                                                                          M.pointer_coercion
                                                                            M.PointerCoercion.Unsize
                                                                            (Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "core::fmt::Arguments"
                                                                              ])
                                                                            (Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.dyn
                                                                                  [
                                                                                    ("tracing_core::field::Value::Trait",
                                                                                      [])
                                                                                  ]
                                                                              ]),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.alloc (|
                                                                                    Ty.path
                                                                                      "core::fmt::Arguments",
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "core::fmt::Arguments",
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::Arguments",
                                                                                        "new_v1",
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            1;
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            1
                                                                                        ],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.alloc (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "array")
                                                                                                  [
                                                                                                    Value.Integer
                                                                                                      IntegerKind.Usize
                                                                                                      1
                                                                                                  ]
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "str"
                                                                                                      ]
                                                                                                  ],
                                                                                                Value.Array
                                                                                                  [
                                                                                                    mk_str (|
                                                                                                      "Max constraint (excluding logup constraints) degree across all AIRs: "
                                                                                                    |)
                                                                                                  ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |);
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.alloc (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "array")
                                                                                                  [
                                                                                                    Value.Integer
                                                                                                      IntegerKind.Usize
                                                                                                      1
                                                                                                  ]
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "core::fmt::rt::Argument"
                                                                                                  ],
                                                                                                Value.Array
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "core::fmt::rt::Argument",
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.path
                                                                                                          "core::fmt::rt::Argument",
                                                                                                        "new_display",
                                                                                                        [],
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize"
                                                                                                        ]
                                                                                                      |),
                                                                                                      [
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              air_max_constraint_degree
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |))
                                                                  |)
                                                                ]
                                                            ]
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |)
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Ty.tuple [],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            Ty.path "bool",
                            LogicalOp.and (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ne,
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                                      "max_constraint_degree"
                                    |)
                                  |);
                                  Value.Integer IntegerKind.Usize 0
                                ]
                              |),
                              ltac:(M.monadic
                                (M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.gt,
                                  [
                                    M.read (| air_max_constraint_degree |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        self,
                                        "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                                        "max_constraint_degree"
                                      |)
                                    |)
                                  ]
                                |)))
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.read (|
                        let~ _ : Ty.tuple [] :=
                          M.read (|
                            let~ enabled : Ty.path "bool" :=
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.path "tracing_core::metadata::Level",
                                      [],
                                      [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                      "le",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_associated_constant (|
                                          Ty.path "tracing_core::metadata::Level",
                                          "INFO",
                                          Ty.path "tracing_core::metadata::Level"
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "tracing::level_filters::STATIC_MAX_LEVEL",
                                          Ty.path "tracing_core::metadata::LevelFilter"
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "INFO",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "tracing_core::metadata::LevelFilter",
                                            M.call_closure (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                "current",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic
                                  (M.read (|
                                    let~ interest : Ty.path "tracing_core::subscriber::Interest" :=
                                      M.call_closure (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        M.get_associated_function (|
                                          Ty.path "tracing_core::callsite::DefaultCallsite",
                                          "interest",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.read (|
                                                get_constant (|
                                                  "openvm_stark_backend::keygen::generate_pk::__CALLSITE'1",
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.path
                                                        "tracing_core::callsite::DefaultCallsite"
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |) in
                                    M.alloc (|
                                      Ty.path "bool",
                                      LogicalOp.and (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_associated_function (|
                                              Ty.path "tracing_core::subscriber::Interest",
                                              "is_never",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, interest |) ]
                                          |)
                                        |),
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Ty.path "bool",
                                            M.get_function (|
                                              "tracing::__macro_support::__is_enabled",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "tracing_core::metadata::Metadata"
                                                      ],
                                                    M.get_trait_method (|
                                                      "tracing_core::callsite::Callsite",
                                                      Ty.path
                                                        "tracing_core::callsite::DefaultCallsite",
                                                      [],
                                                      [],
                                                      "metadata",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.read (|
                                                            get_constant (|
                                                              "openvm_stark_backend::keygen::generate_pk::__CALLSITE'1",
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite"
                                                                ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| interest |)
                                            ]
                                          |)))
                                      |)
                                    |)
                                  |)))
                              |) in
                            M.alloc (|
                              Ty.tuple [],
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.use enabled in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_trait_method (|
                                              "core::ops::function::Fn",
                                              Ty.function
                                                [ Ty.path "tracing_core::field::ValueSet" ]
                                                (Ty.tuple []),
                                              [],
                                              [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ]
                                              ],
                                              "call",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.function
                                                    [ Ty.path "tracing_core::field::ValueSet" ]
                                                    (Ty.tuple []),
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Ty.tuple [],
                                                              M.alloc (|
                                                                Ty.path
                                                                  "tracing_core::field::ValueSet",
                                                                α0
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let value_set :=
                                                                      M.copy (|
                                                                        Ty.path
                                                                          "tracing_core::field::ValueSet",
                                                                        γ
                                                                      |) in
                                                                    M.read (|
                                                                      let~ meta :
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::metadata::Metadata"
                                                                            ] :=
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::metadata::Metadata"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "tracing_core::callsite::Callsite",
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite",
                                                                            [],
                                                                            [],
                                                                            "metadata",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  get_constant (|
                                                                                    "openvm_stark_backend::keygen::generate_pk::__CALLSITE'1",
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                                      ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |) in
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.call_closure (|
                                                                          Ty.tuple [],
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "tracing_core::event::Event",
                                                                            "dispatch",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (| meta |)
                                                                              |)
                                                                            |);
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  value_set
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |) in
                                                                      M.alloc (|
                                                                        Ty.tuple [],
                                                                        Value.Tuple []
                                                                      |)
                                                                    |)))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                |)
                                              |);
                                              Value.Tuple
                                                [
                                                  M.read (|
                                                    let~ iter :
                                                        Ty.path "tracing_core::field::Iter" :=
                                                      M.call_closure (|
                                                        Ty.path "tracing_core::field::Iter",
                                                        M.get_associated_function (|
                                                          Ty.path "tracing_core::field::FieldSet",
                                                          "iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::FieldSet"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata",
                                                                  "fields",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::metadata::Metadata"
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "tracing_core::callsite::Callsite",
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite",
                                                                          [],
                                                                          [],
                                                                          "metadata",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (|
                                                                                get_constant (|
                                                                                  "openvm_stark_backend::keygen::generate_pk::__CALLSITE'1",
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "tracing_core::callsite::DefaultCallsite"
                                                                                    ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |) in
                                                    M.alloc (|
                                                      Ty.path "tracing_core::field::ValueSet",
                                                      M.call_closure (|
                                                        Ty.path "tracing_core::field::ValueSet",
                                                        M.get_associated_function (|
                                                          Ty.path "tracing_core::field::FieldSet",
                                                          "value_set",
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 1 ]
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::Field"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::FieldSet"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata",
                                                                  "fields",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::metadata::Metadata"
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "tracing_core::callsite::Callsite",
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite",
                                                                          [],
                                                                          [],
                                                                          "metadata",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (|
                                                                                get_constant (|
                                                                                  "openvm_stark_backend::keygen::generate_pk::__CALLSITE'1",
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "tracing_core::callsite::DefaultCallsite"
                                                                                    ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::field::Field"
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("tracing_core::field::Value::Trait",
                                                                                        [])
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                  Value.Array
                                                                    [
                                                                      Value.Tuple
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.alloc (|
                                                                              Ty.path
                                                                                "tracing_core::field::Field",
                                                                              M.call_closure (|
                                                                                Ty.path
                                                                                  "tracing_core::field::Field",
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "tracing_core::field::Field"
                                                                                    ],
                                                                                  "expect",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::field::Field"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.path
                                                                                        "tracing_core::field::Iter",
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      mk_str (|
                                                                                        "FieldSet corrupted (this is a bug)"
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          Value.StructTuple
                                                                            "core::option::Option::Some"
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("tracing_core::field::Value::Trait",
                                                                                        [])
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            [
                                                                              M.read (|
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.dyn
                                                                                          [
                                                                                            ("tracing_core::field::Value::Trait",
                                                                                              [])
                                                                                          ]
                                                                                      ],
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.dyn
                                                                                            [
                                                                                              ("tracing_core::field::Value::Trait",
                                                                                                [])
                                                                                            ]
                                                                                        ],
                                                                                      M.pointer_coercion
                                                                                        M.PointerCoercion.Unsize
                                                                                        (Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "core::fmt::Arguments"
                                                                                          ])
                                                                                        (Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.dyn
                                                                                              [
                                                                                                ("tracing_core::field::Value::Trait",
                                                                                                  [])
                                                                                              ]
                                                                                          ]),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.alloc (|
                                                                                                Ty.path
                                                                                                  "core::fmt::Arguments",
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "core::fmt::Arguments",
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.path
                                                                                                      "core::fmt::Arguments",
                                                                                                    "new_v1",
                                                                                                    [
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        2;
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        2
                                                                                                    ],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.deref (|
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.alloc (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "array")
                                                                                                              [
                                                                                                                Value.Integer
                                                                                                                  IntegerKind.Usize
                                                                                                                  2
                                                                                                              ]
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "&")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "str"
                                                                                                                  ]
                                                                                                              ],
                                                                                                            Value.Array
                                                                                                              [
                                                                                                                mk_str (|
                                                                                                                  "Setting max_constraint_degree from "
                                                                                                                |);
                                                                                                                mk_str (|
                                                                                                                  " to "
                                                                                                                |)
                                                                                                              ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    |);
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.deref (|
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.alloc (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "array")
                                                                                                              [
                                                                                                                Value.Integer
                                                                                                                  IntegerKind.Usize
                                                                                                                  2
                                                                                                              ]
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "core::fmt::rt::Argument"
                                                                                                              ],
                                                                                                            Value.Array
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  Ty.path
                                                                                                                    "core::fmt::rt::Argument",
                                                                                                                  M.get_associated_function (|
                                                                                                                    Ty.path
                                                                                                                      "core::fmt::rt::Argument",
                                                                                                                    "new_display",
                                                                                                                    [],
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "usize"
                                                                                                                    ]
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.borrow (|
                                                                                                                      Pointer.Kind.Ref,
                                                                                                                      M.deref (|
                                                                                                                        M.borrow (|
                                                                                                                          Pointer.Kind.Ref,
                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                            self,
                                                                                                                            "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                                                                                                                            "max_constraint_degree"
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |);
                                                                                                                M.call_closure (|
                                                                                                                  Ty.path
                                                                                                                    "core::fmt::rt::Argument",
                                                                                                                  M.get_associated_function (|
                                                                                                                    Ty.path
                                                                                                                      "core::fmt::rt::Argument",
                                                                                                                    "new_display",
                                                                                                                    [],
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "usize"
                                                                                                                    ]
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.borrow (|
                                                                                                                      Pointer.Kind.Ref,
                                                                                                                      M.deref (|
                                                                                                                        M.borrow (|
                                                                                                                          Pointer.Kind.Ref,
                                                                                                                          air_max_constraint_degree
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |))
                                                                              |)
                                                                            ]
                                                                        ]
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |)
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.write (|
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                              "max_constraint_degree"
                            |),
                            M.read (| air_max_constraint_degree |)
                          |) in
                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                      |)));
                  fun γ => ltac:(M.monadic (Value.Tuple []))
                ]
              |) in
            let~ symbolic_constraints_per_air :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "itertools::Itertools",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                            []
                            [ SC ]
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                []
                                [ SC ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ])
                    ],
                  [],
                  [],
                  "collect_vec",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                              []
                              [ SC ]
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                  []
                                  [ SC ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val"
                            ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                            []
                            [ SC ]
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                  []
                                  [ SC ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path
                              "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val"
                            ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                              []
                              [ SC ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                []
                                [ SC ]
                            ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                          []
                                          [ SC ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                        []
                                        [ SC ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                                      "partitioned_airs"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val"
                                    ],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                          []
                                          [ SC ]
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let keygen_builder :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::keygen::AirKeygenBuilder")
                                                  []
                                                  [ SC ]
                                              ],
                                            γ
                                          |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val"
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ],
                                            "constraints",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val"
                                                ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::keygen::AirKeygenBuilder")
                                                  []
                                                  [ SC ],
                                                "get_symbolic_builder",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| keygen_builder |) |)
                                                |);
                                                Value.StructTuple
                                                  "core::option::Option::None"
                                                  []
                                                  [ Ty.path "usize" ]
                                                  []
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |) in
            let~ rap_partial_pk_per_air :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_stark_backend::interaction::RapPhaseSeq"
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ]
                      (Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "RapPhaseSeq")
                      "PartialProvingKey";
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_stark_backend::interaction::RapPhaseSeq"
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ]
                      (Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "RapPhaseSeq")
                      "PartialProvingKey";
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "openvm_stark_backend::interaction::RapPhaseSeq",
                  Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "RapPhaseSeq",
                  [],
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val";
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenger"
                  ],
                  "generate_pk_per_air",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "RapPhaseSeq"
                          ],
                        M.get_trait_method (|
                          "openvm_stark_backend::config::StarkGenericConfig",
                          SC,
                          [],
                          [],
                          "rap_phase_seq",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                                  "config"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (| Pointer.Kind.Ref, symbolic_constraints_per_air |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                      "max_constraint_degree"
                    |)
                  |)
                ]
              |) in
            let~ pk_per_air :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                      []
                      [ SC ];
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                      []
                      [ SC ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                []
                                [ SC ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::interaction::RapPhaseSeq"
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "RapPhaseSeq")
                                "PartialProvingKey";
                              Ty.path "alloc::alloc::Global"
                            ]
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                []
                                [ SC ];
                              Ty.associated_in_trait
                                "openvm_stark_backend::interaction::RapPhaseSeq"
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "RapPhaseSeq")
                                "PartialProvingKey"
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                          []
                          [ SC ])
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                          []
                          [ SC ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                  []
                                  [ SC ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::interaction::RapPhaseSeq"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "RapPhaseSeq")
                                  "PartialProvingKey";
                                Ty.path "alloc::alloc::Global"
                              ]
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                  []
                                  [ SC ];
                                Ty.associated_in_trait
                                  "openvm_stark_backend::interaction::RapPhaseSeq"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "RapPhaseSeq")
                                  "PartialProvingKey"
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                            []
                            [ SC ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                []
                                [ SC ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::interaction::RapPhaseSeq"
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "RapPhaseSeq")
                                "PartialProvingKey";
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                          []
                          [ SC ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                  []
                                  [ SC ];
                                Ty.associated_in_trait
                                  "openvm_stark_backend::interaction::RapPhaseSeq"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "RapPhaseSeq")
                                  "PartialProvingKey"
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                            []
                            [ SC ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                  []
                                  [ SC ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::interaction::RapPhaseSeq"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "RapPhaseSeq")
                                  "PartialProvingKey";
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        M.get_function (|
                          "core::iter::adapters::zip::zip",
                          [],
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                  []
                                  [ SC ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::interaction::RapPhaseSeq"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "RapPhaseSeq")
                                  "PartialProvingKey";
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                              "partitioned_airs"
                            |)
                          |);
                          M.read (| rap_partial_pk_per_air |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                                    []
                                    [ SC ],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                                          []
                                          [ SC ];
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::interaction::RapPhaseSeq"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "RapPhaseSeq")
                                          "PartialProvingKey"
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let keygen_builder :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::keygen::AirKeygenBuilder")
                                              []
                                              [ SC ],
                                            γ0_0
                                          |) in
                                        let rap_partial_pk :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::interaction::RapPhaseSeq"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "RapPhaseSeq")
                                              "PartialProvingKey",
                                            γ0_1
                                          |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::keygen::types::StarkProvingKey")
                                            []
                                            [ SC ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::keygen::AirKeygenBuilder")
                                              []
                                              [ SC ],
                                            "generate_pk",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| keygen_builder |);
                                            M.read (| rap_partial_pk |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                self,
                                                "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                                                "max_constraint_degree"
                                              |)
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                              []
                              [ SC ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                                []
                                [ SC ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                                  []
                                  [ SC ]
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                                    []
                                    [ SC ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::keygen::types::StarkProvingKey")
                                      []
                                      [ SC ]
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::keygen::types::StarkProvingKey")
                                                []
                                                [ SC ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::keygen::types::StarkProvingKey")
                                              []
                                              [ SC ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, pk_per_air |) ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::keygen::types::StarkProvingKey")
                                      []
                                      [ SC ]
                                  ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::keygen::types::StarkProvingKey")
                                                  []
                                                  [ SC ]
                                              ]
                                          ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::keygen::types::StarkProvingKey")
                                                    []
                                                    [ SC ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::keygen::types::StarkProvingKey")
                                                  []
                                                  [ SC ]
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let pk :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::keygen::types::StarkProvingKey")
                                                      []
                                                      [ SC ]
                                                  ],
                                                γ0_0
                                              |) in
                                            M.read (|
                                              let~ width :
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.path
                                                        "openvm_stark_backend::keygen::types::TraceWidth"
                                                    ] :=
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| pk |) |),
                                                        "openvm_stark_backend::keygen::types::StarkProvingKey",
                                                        "vk"
                                                      |),
                                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey",
                                                      "params"
                                                    |),
                                                    "openvm_stark_backend::keygen::types::StarkVerifyingParams",
                                                    "width"
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.read (|
                                                  let~ enabled : Ty.path "bool" :=
                                                    LogicalOp.and (|
                                                      LogicalOp.and (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "tracing_core::metadata::Level",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            ],
                                                            "le",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_associated_constant (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                "INFO",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_constant (|
                                                                "tracing::level_filters::STATIC_MAX_LEVEL",
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              |)
                                                            |)
                                                          ]
                                                        |),
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              [],
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              ],
                                                              "le",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                get_associated_constant (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level",
                                                                  "INFO",
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level"
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::metadata::LevelFilter",
                                                                      "current",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)))
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.read (|
                                                          let~ interest :
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest" :=
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                "interest",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_stark_backend::keygen::generate_pk::__CALLSITE'2",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          M.alloc (|
                                                            Ty.path "bool",
                                                            LogicalOp.and (|
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::subscriber::Interest",
                                                                    "is_never",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      interest
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              ltac:(M.monadic
                                                                (M.call_closure (|
                                                                  Ty.path "bool",
                                                                  M.get_function (|
                                                                    "tracing::__macro_support::__is_enabled",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::metadata::Metadata"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "tracing_core::callsite::Callsite",
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite",
                                                                            [],
                                                                            [],
                                                                            "metadata",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  get_constant (|
                                                                                    "openvm_stark_backend::keygen::generate_pk::__CALLSITE'2",
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                                      ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.read (| interest |)
                                                                  ]
                                                                |)))
                                                            |)
                                                          |)
                                                        |)))
                                                    |) in
                                                  M.alloc (|
                                                    Ty.tuple [],
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ := M.use enabled in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.read (|
                                                              let~ _ : Ty.tuple [] :=
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "core::ops::function::Fn",
                                                                    Ty.function
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::ValueSet"
                                                                      ]
                                                                      (Ty.tuple []),
                                                                    [],
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::ValueSet"
                                                                        ]
                                                                    ],
                                                                    "call",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.function
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::field::ValueSet"
                                                                          ]
                                                                          (Ty.tuple []),
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                ltac:(M.monadic
                                                                                  (M.match_operator (|
                                                                                    Ty.tuple [],
                                                                                    M.alloc (|
                                                                                      Ty.path
                                                                                        "tracing_core::field::ValueSet",
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                value_set :=
                                                                                            M.copy (|
                                                                                              Ty.path
                                                                                                "tracing_core::field::ValueSet",
                                                                                              γ
                                                                                            |) in
                                                                                          M.read (|
                                                                                            let~
                                                                                                  meta :
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "tracing_core::metadata::Metadata"
                                                                                                  ] :=
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "tracing_core::metadata::Metadata"
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "tracing_core::callsite::Callsite",
                                                                                                  Ty.path
                                                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                                                  [],
                                                                                                  [],
                                                                                                  "metadata",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        get_constant (|
                                                                                                          "openvm_stark_backend::keygen::generate_pk::__CALLSITE'2",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                                                            ]
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |) in
                                                                                            let~ _ :
                                                                                                Ty.tuple
                                                                                                  [] :=
                                                                                              M.call_closure (|
                                                                                                Ty.tuple
                                                                                                  [],
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "tracing_core::event::Event",
                                                                                                  "dispatch",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        meta
                                                                                                      |)
                                                                                                    |)
                                                                                                  |);
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        value_set
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Ty.tuple
                                                                                                [],
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |)
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                              | _ =>
                                                                                M.impossible
                                                                                  "wrong number of arguments"
                                                                              end))
                                                                      |)
                                                                    |);
                                                                    Value.Tuple
                                                                      [
                                                                        M.read (|
                                                                          let~ iter :
                                                                              Ty.path
                                                                                "tracing_core::field::Iter" :=
                                                                            M.call_closure (|
                                                                              Ty.path
                                                                                "tracing_core::field::Iter",
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "tracing_core::field::FieldSet",
                                                                                "iter",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "tracing_core::field::FieldSet"
                                                                                        ],
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "tracing_core::metadata::Metadata",
                                                                                        "fields",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.call_closure (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "tracing_core::metadata::Metadata"
                                                                                                ],
                                                                                              M.get_trait_method (|
                                                                                                "tracing_core::callsite::Callsite",
                                                                                                Ty.path
                                                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                                                [],
                                                                                                [],
                                                                                                "metadata",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      get_constant (|
                                                                                                        "openvm_stark_backend::keygen::generate_pk::__CALLSITE'2",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                                                          ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |) in
                                                                          M.alloc (|
                                                                            Ty.path
                                                                              "tracing_core::field::ValueSet",
                                                                            M.call_closure (|
                                                                              Ty.path
                                                                                "tracing_core::field::ValueSet",
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "tracing_core::field::FieldSet",
                                                                                "value_set",
                                                                                [],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        1
                                                                                    ]
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "tracing_core::field::Field"
                                                                                            ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::option::Option")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.dyn
                                                                                                    [
                                                                                                      ("tracing_core::field::Value::Trait",
                                                                                                        [])
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "tracing_core::field::FieldSet"
                                                                                        ],
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "tracing_core::metadata::Metadata",
                                                                                        "fields",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.call_closure (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "tracing_core::metadata::Metadata"
                                                                                                ],
                                                                                              M.get_trait_method (|
                                                                                                "tracing_core::callsite::Callsite",
                                                                                                Ty.path
                                                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                                                [],
                                                                                                [],
                                                                                                "metadata",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      get_constant (|
                                                                                                        "openvm_stark_backend::keygen::generate_pk::__CALLSITE'2",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                                                          ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.alloc (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              1
                                                                                          ]
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "tracing_core::field::Field"
                                                                                                  ];
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::option::Option")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.dyn
                                                                                                          [
                                                                                                            ("tracing_core::field::Value::Trait",
                                                                                                              [])
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                          ],
                                                                                        Value.Array
                                                                                          [
                                                                                            Value.Tuple
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.alloc (|
                                                                                                    Ty.path
                                                                                                      "tracing_core::field::Field",
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "tracing_core::field::Field",
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::option::Option")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "tracing_core::field::Field"
                                                                                                          ],
                                                                                                        "expect",
                                                                                                        [],
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.call_closure (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::option::Option")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "tracing_core::field::Field"
                                                                                                            ],
                                                                                                          M.get_trait_method (|
                                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                                            Ty.path
                                                                                                              "tracing_core::field::Iter",
                                                                                                            [],
                                                                                                            [],
                                                                                                            "next",
                                                                                                            [],
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.MutRef,
                                                                                                              M.deref (|
                                                                                                                M.borrow (|
                                                                                                                  Pointer.Kind.MutRef,
                                                                                                                  iter
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          ]
                                                                                                        |);
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            mk_str (|
                                                                                                              "FieldSet corrupted (this is a bug)"
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |);
                                                                                                Value.StructTuple
                                                                                                  "core::option::Option::Some"
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.dyn
                                                                                                          [
                                                                                                            ("tracing_core::field::Value::Trait",
                                                                                                              [])
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.use
                                                                                                        (M.alloc (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.dyn
                                                                                                                [
                                                                                                                  ("tracing_core::field::Value::Trait",
                                                                                                                    [])
                                                                                                                ]
                                                                                                            ],
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.dyn
                                                                                                                  [
                                                                                                                    ("tracing_core::field::Value::Trait",
                                                                                                                      [])
                                                                                                                  ]
                                                                                                              ],
                                                                                                            M.pointer_coercion
                                                                                                              M.PointerCoercion.Unsize
                                                                                                              (Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "&")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "core::fmt::Arguments"
                                                                                                                ])
                                                                                                              (Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "&")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.dyn
                                                                                                                    [
                                                                                                                      ("tracing_core::field::Value::Trait",
                                                                                                                        [])
                                                                                                                    ]
                                                                                                                ]),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                M.deref (|
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.alloc (|
                                                                                                                      Ty.path
                                                                                                                        "core::fmt::Arguments",
                                                                                                                      M.call_closure (|
                                                                                                                        Ty.path
                                                                                                                          "core::fmt::Arguments",
                                                                                                                        M.get_associated_function (|
                                                                                                                          Ty.path
                                                                                                                            "core::fmt::Arguments",
                                                                                                                          "new_v1_formatted",
                                                                                                                          [],
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.call_closure (|
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "slice")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "&")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.path
                                                                                                                                          "str"
                                                                                                                                      ]
                                                                                                                                  ]
                                                                                                                              ],
                                                                                                                            M.pointer_coercion
                                                                                                                              M.PointerCoercion.Unsize
                                                                                                                              (Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "array")
                                                                                                                                    [
                                                                                                                                      Value.Integer
                                                                                                                                        IntegerKind.Usize
                                                                                                                                        8
                                                                                                                                    ]
                                                                                                                                    [
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "&")
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.path
                                                                                                                                            "str"
                                                                                                                                        ]
                                                                                                                                    ]
                                                                                                                                ])
                                                                                                                              (Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "slice")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "&")
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.path
                                                                                                                                            "str"
                                                                                                                                        ]
                                                                                                                                    ]
                                                                                                                                ]),
                                                                                                                            [
                                                                                                                              M.borrow (|
                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                M.deref (|
                                                                                                                                  M.borrow (|
                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                    M.alloc (|
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "array")
                                                                                                                                        [
                                                                                                                                          Value.Integer
                                                                                                                                            IntegerKind.Usize
                                                                                                                                            8
                                                                                                                                        ]
                                                                                                                                        [
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "&")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.path
                                                                                                                                                "str"
                                                                                                                                            ]
                                                                                                                                        ],
                                                                                                                                      Value.Array
                                                                                                                                        [
                                                                                                                                          mk_str (|
                                                                                                                                            ""
                                                                                                                                          |);
                                                                                                                                          mk_str (|
                                                                                                                                            " | Quotient Deg = "
                                                                                                                                          |);
                                                                                                                                          mk_str (|
                                                                                                                                            " | Prep Cols = "
                                                                                                                                          |);
                                                                                                                                          mk_str (|
                                                                                                                                            " | Main Cols = "
                                                                                                                                          |);
                                                                                                                                          mk_str (|
                                                                                                                                            " | Perm Cols = "
                                                                                                                                          |);
                                                                                                                                          mk_str (|
                                                                                                                                            " | "
                                                                                                                                          |);
                                                                                                                                          mk_str (|
                                                                                                                                            " Constraints | "
                                                                                                                                          |);
                                                                                                                                          mk_str (|
                                                                                                                                            " Interactions On Buses "
                                                                                                                                          |)
                                                                                                                                        ]
                                                                                                                                    |)
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |);
                                                                                                                          M.call_closure (|
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "slice")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.path
                                                                                                                                      "core::fmt::rt::Argument"
                                                                                                                                  ]
                                                                                                                              ],
                                                                                                                            M.pointer_coercion
                                                                                                                              M.PointerCoercion.Unsize
                                                                                                                              (Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "array")
                                                                                                                                    [
                                                                                                                                      Value.Integer
                                                                                                                                        IntegerKind.Usize
                                                                                                                                        8
                                                                                                                                    ]
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "core::fmt::rt::Argument"
                                                                                                                                    ]
                                                                                                                                ])
                                                                                                                              (Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "slice")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "core::fmt::rt::Argument"
                                                                                                                                    ]
                                                                                                                                ]),
                                                                                                                            [
                                                                                                                              M.borrow (|
                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                M.deref (|
                                                                                                                                  M.borrow (|
                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                    M.alloc (|
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "array")
                                                                                                                                        [
                                                                                                                                          Value.Integer
                                                                                                                                            IntegerKind.Usize
                                                                                                                                            8
                                                                                                                                        ]
                                                                                                                                        [
                                                                                                                                          Ty.path
                                                                                                                                            "core::fmt::rt::Argument"
                                                                                                                                        ],
                                                                                                                                      Value.Array
                                                                                                                                        [
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Argument",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Argument",
                                                                                                                                              "new_display",
                                                                                                                                              [],
                                                                                                                                              [
                                                                                                                                                Ty.path
                                                                                                                                                  "alloc::string::String"
                                                                                                                                              ]
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.deref (|
                                                                                                                                                  M.borrow (|
                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                                                                      M.deref (|
                                                                                                                                                        M.read (|
                                                                                                                                                          pk
                                                                                                                                                        |)
                                                                                                                                                      |),
                                                                                                                                                      "openvm_stark_backend::keygen::types::StarkProvingKey",
                                                                                                                                                      "air_name"
                                                                                                                                                    |)
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Argument",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Argument",
                                                                                                                                              "new_display",
                                                                                                                                              [],
                                                                                                                                              [
                                                                                                                                                Ty.path
                                                                                                                                                  "u8"
                                                                                                                                              ]
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.deref (|
                                                                                                                                                  M.borrow (|
                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                                                                                        M.deref (|
                                                                                                                                                          M.read (|
                                                                                                                                                            pk
                                                                                                                                                          |)
                                                                                                                                                        |),
                                                                                                                                                        "openvm_stark_backend::keygen::types::StarkProvingKey",
                                                                                                                                                        "vk"
                                                                                                                                                      |),
                                                                                                                                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey",
                                                                                                                                                      "quotient_degree"
                                                                                                                                                    |)
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Argument",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Argument",
                                                                                                                                              "new_display",
                                                                                                                                              [],
                                                                                                                                              [
                                                                                                                                                Ty.path
                                                                                                                                                  "usize"
                                                                                                                                              ]
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.deref (|
                                                                                                                                                  M.borrow (|
                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                    M.alloc (|
                                                                                                                                                      Ty.path
                                                                                                                                                        "usize",
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        Ty.path
                                                                                                                                                          "usize",
                                                                                                                                                        M.get_associated_function (|
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "core::option::Option")
                                                                                                                                                            []
                                                                                                                                                            [
                                                                                                                                                              Ty.path
                                                                                                                                                                "usize"
                                                                                                                                                            ],
                                                                                                                                                          "unwrap_or",
                                                                                                                                                          [],
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.read (|
                                                                                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                                                                                              M.deref (|
                                                                                                                                                                M.read (|
                                                                                                                                                                  width
                                                                                                                                                                |)
                                                                                                                                                              |),
                                                                                                                                                              "openvm_stark_backend::keygen::types::TraceWidth",
                                                                                                                                                              "preprocessed"
                                                                                                                                                            |)
                                                                                                                                                          |);
                                                                                                                                                          Value.Integer
                                                                                                                                                            IntegerKind.Usize
                                                                                                                                                            0
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    |)
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Argument",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Argument",
                                                                                                                                              "new_display",
                                                                                                                                              [],
                                                                                                                                              [
                                                                                                                                                Ty.path
                                                                                                                                                  "alloc::string::String"
                                                                                                                                              ]
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.deref (|
                                                                                                                                                  M.borrow (|
                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                    M.alloc (|
                                                                                                                                                      Ty.path
                                                                                                                                                        "alloc::string::String",
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        Ty.path
                                                                                                                                                          "alloc::string::String",
                                                                                                                                                        M.get_function (|
                                                                                                                                                          "core::hint::must_use",
                                                                                                                                                          [],
                                                                                                                                                          [
                                                                                                                                                            Ty.path
                                                                                                                                                              "alloc::string::String"
                                                                                                                                                          ]
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.read (|
                                                                                                                                                            let~
                                                                                                                                                                  res :
                                                                                                                                                                Ty.path
                                                                                                                                                                  "alloc::string::String" :=
                                                                                                                                                              M.call_closure (|
                                                                                                                                                                Ty.path
                                                                                                                                                                  "alloc::string::String",
                                                                                                                                                                M.get_function (|
                                                                                                                                                                  "alloc::fmt::format",
                                                                                                                                                                  [],
                                                                                                                                                                  []
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                    Ty.path
                                                                                                                                                                      "core::fmt::Arguments",
                                                                                                                                                                    M.get_associated_function (|
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "core::fmt::Arguments",
                                                                                                                                                                      "new_v1",
                                                                                                                                                                      [
                                                                                                                                                                        Value.Integer
                                                                                                                                                                          IntegerKind.Usize
                                                                                                                                                                          1;
                                                                                                                                                                        Value.Integer
                                                                                                                                                                          IntegerKind.Usize
                                                                                                                                                                          1
                                                                                                                                                                      ],
                                                                                                                                                                      []
                                                                                                                                                                    |),
                                                                                                                                                                    [
                                                                                                                                                                      M.borrow (|
                                                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                                                        M.deref (|
                                                                                                                                                                          M.borrow (|
                                                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                                                            M.alloc (|
                                                                                                                                                                              Ty.apply
                                                                                                                                                                                (Ty.path
                                                                                                                                                                                  "array")
                                                                                                                                                                                [
                                                                                                                                                                                  Value.Integer
                                                                                                                                                                                    IntegerKind.Usize
                                                                                                                                                                                    1
                                                                                                                                                                                ]
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                      "&")
                                                                                                                                                                                    []
                                                                                                                                                                                    [
                                                                                                                                                                                      Ty.path
                                                                                                                                                                                        "str"
                                                                                                                                                                                    ]
                                                                                                                                                                                ],
                                                                                                                                                                              Value.Array
                                                                                                                                                                                [
                                                                                                                                                                                  mk_str (|
                                                                                                                                                                                    ""
                                                                                                                                                                                  |)
                                                                                                                                                                                ]
                                                                                                                                                                            |)
                                                                                                                                                                          |)
                                                                                                                                                                        |)
                                                                                                                                                                      |);
                                                                                                                                                                      M.borrow (|
                                                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                                                        M.deref (|
                                                                                                                                                                          M.borrow (|
                                                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                                                            M.alloc (|
                                                                                                                                                                              Ty.apply
                                                                                                                                                                                (Ty.path
                                                                                                                                                                                  "array")
                                                                                                                                                                                [
                                                                                                                                                                                  Value.Integer
                                                                                                                                                                                    IntegerKind.Usize
                                                                                                                                                                                    1
                                                                                                                                                                                ]
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.path
                                                                                                                                                                                    "core::fmt::rt::Argument"
                                                                                                                                                                                ],
                                                                                                                                                                              Value.Array
                                                                                                                                                                                [
                                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "core::fmt::rt::Argument",
                                                                                                                                                                                    M.get_associated_function (|
                                                                                                                                                                                      Ty.path
                                                                                                                                                                                        "core::fmt::rt::Argument",
                                                                                                                                                                                      "new_debug",
                                                                                                                                                                                      [],
                                                                                                                                                                                      [
                                                                                                                                                                                        Ty.apply
                                                                                                                                                                                          (Ty.path
                                                                                                                                                                                            "alloc::vec::Vec")
                                                                                                                                                                                          []
                                                                                                                                                                                          [
                                                                                                                                                                                            Ty.path
                                                                                                                                                                                              "usize";
                                                                                                                                                                                            Ty.path
                                                                                                                                                                                              "alloc::alloc::Global"
                                                                                                                                                                                          ]
                                                                                                                                                                                      ]
                                                                                                                                                                                    |),
                                                                                                                                                                                    [
                                                                                                                                                                                      M.borrow (|
                                                                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                                                                        M.deref (|
                                                                                                                                                                                          M.borrow (|
                                                                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                                                                            M.alloc (|
                                                                                                                                                                                              Ty.apply
                                                                                                                                                                                                (Ty.path
                                                                                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                                                                                []
                                                                                                                                                                                                [
                                                                                                                                                                                                  Ty.path
                                                                                                                                                                                                    "usize";
                                                                                                                                                                                                  Ty.path
                                                                                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                                                                                ],
                                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                                Ty.apply
                                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                                                                  []
                                                                                                                                                                                                  [
                                                                                                                                                                                                    Ty.path
                                                                                                                                                                                                      "usize";
                                                                                                                                                                                                    Ty.path
                                                                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                                                                  ],
                                                                                                                                                                                                M.get_associated_function (|
                                                                                                                                                                                                  Ty.path
                                                                                                                                                                                                    "openvm_stark_backend::keygen::types::TraceWidth",
                                                                                                                                                                                                  "main_widths",
                                                                                                                                                                                                  [],
                                                                                                                                                                                                  []
                                                                                                                                                                                                |),
                                                                                                                                                                                                [
                                                                                                                                                                                                  M.borrow (|
                                                                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                                                                    M.deref (|
                                                                                                                                                                                                      M.read (|
                                                                                                                                                                                                        width
                                                                                                                                                                                                      |)
                                                                                                                                                                                                    |)
                                                                                                                                                                                                  |)
                                                                                                                                                                                                ]
                                                                                                                                                                                              |)
                                                                                                                                                                                            |)
                                                                                                                                                                                          |)
                                                                                                                                                                                        |)
                                                                                                                                                                                      |)
                                                                                                                                                                                    ]
                                                                                                                                                                                  |)
                                                                                                                                                                                ]
                                                                                                                                                                            |)
                                                                                                                                                                          |)
                                                                                                                                                                        |)
                                                                                                                                                                      |)
                                                                                                                                                                    ]
                                                                                                                                                                  |)
                                                                                                                                                                ]
                                                                                                                                                              |) in
                                                                                                                                                            res
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    |)
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Argument",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Argument",
                                                                                                                                              "new_display",
                                                                                                                                              [],
                                                                                                                                              [
                                                                                                                                                Ty.path
                                                                                                                                                  "alloc::string::String"
                                                                                                                                              ]
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.deref (|
                                                                                                                                                  M.borrow (|
                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                    M.alloc (|
                                                                                                                                                      Ty.path
                                                                                                                                                        "alloc::string::String",
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        Ty.path
                                                                                                                                                          "alloc::string::String",
                                                                                                                                                        M.get_function (|
                                                                                                                                                          "core::hint::must_use",
                                                                                                                                                          [],
                                                                                                                                                          [
                                                                                                                                                            Ty.path
                                                                                                                                                              "alloc::string::String"
                                                                                                                                                          ]
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.read (|
                                                                                                                                                            let~
                                                                                                                                                                  res :
                                                                                                                                                                Ty.path
                                                                                                                                                                  "alloc::string::String" :=
                                                                                                                                                              M.call_closure (|
                                                                                                                                                                Ty.path
                                                                                                                                                                  "alloc::string::String",
                                                                                                                                                                M.get_function (|
                                                                                                                                                                  "alloc::fmt::format",
                                                                                                                                                                  [],
                                                                                                                                                                  []
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                    Ty.path
                                                                                                                                                                      "core::fmt::Arguments",
                                                                                                                                                                    M.get_associated_function (|
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "core::fmt::Arguments",
                                                                                                                                                                      "new_v1",
                                                                                                                                                                      [
                                                                                                                                                                        Value.Integer
                                                                                                                                                                          IntegerKind.Usize
                                                                                                                                                                          1;
                                                                                                                                                                        Value.Integer
                                                                                                                                                                          IntegerKind.Usize
                                                                                                                                                                          1
                                                                                                                                                                      ],
                                                                                                                                                                      []
                                                                                                                                                                    |),
                                                                                                                                                                    [
                                                                                                                                                                      M.borrow (|
                                                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                                                        M.deref (|
                                                                                                                                                                          M.borrow (|
                                                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                                                            M.alloc (|
                                                                                                                                                                              Ty.apply
                                                                                                                                                                                (Ty.path
                                                                                                                                                                                  "array")
                                                                                                                                                                                [
                                                                                                                                                                                  Value.Integer
                                                                                                                                                                                    IntegerKind.Usize
                                                                                                                                                                                    1
                                                                                                                                                                                ]
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                      "&")
                                                                                                                                                                                    []
                                                                                                                                                                                    [
                                                                                                                                                                                      Ty.path
                                                                                                                                                                                        "str"
                                                                                                                                                                                    ]
                                                                                                                                                                                ],
                                                                                                                                                                              Value.Array
                                                                                                                                                                                [
                                                                                                                                                                                  mk_str (|
                                                                                                                                                                                    ""
                                                                                                                                                                                  |)
                                                                                                                                                                                ]
                                                                                                                                                                            |)
                                                                                                                                                                          |)
                                                                                                                                                                        |)
                                                                                                                                                                      |);
                                                                                                                                                                      M.borrow (|
                                                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                                                        M.deref (|
                                                                                                                                                                          M.borrow (|
                                                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                                                            M.alloc (|
                                                                                                                                                                              Ty.apply
                                                                                                                                                                                (Ty.path
                                                                                                                                                                                  "array")
                                                                                                                                                                                [
                                                                                                                                                                                  Value.Integer
                                                                                                                                                                                    IntegerKind.Usize
                                                                                                                                                                                    1
                                                                                                                                                                                ]
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.path
                                                                                                                                                                                    "core::fmt::rt::Argument"
                                                                                                                                                                                ],
                                                                                                                                                                              Value.Array
                                                                                                                                                                                [
                                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "core::fmt::rt::Argument",
                                                                                                                                                                                    M.get_associated_function (|
                                                                                                                                                                                      Ty.path
                                                                                                                                                                                        "core::fmt::rt::Argument",
                                                                                                                                                                                      "new_debug",
                                                                                                                                                                                      [],
                                                                                                                                                                                      [
                                                                                                                                                                                        Ty.apply
                                                                                                                                                                                          (Ty.path
                                                                                                                                                                                            "alloc::vec::Vec")
                                                                                                                                                                                          []
                                                                                                                                                                                          [
                                                                                                                                                                                            Ty.path
                                                                                                                                                                                              "usize";
                                                                                                                                                                                            Ty.path
                                                                                                                                                                                              "alloc::alloc::Global"
                                                                                                                                                                                          ]
                                                                                                                                                                                      ]
                                                                                                                                                                                    |),
                                                                                                                                                                                    [
                                                                                                                                                                                      M.borrow (|
                                                                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                                                                        M.deref (|
                                                                                                                                                                                          M.borrow (|
                                                                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                                                                            M.alloc (|
                                                                                                                                                                                              Ty.apply
                                                                                                                                                                                                (Ty.path
                                                                                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                                                                                []
                                                                                                                                                                                                [
                                                                                                                                                                                                  Ty.path
                                                                                                                                                                                                    "usize";
                                                                                                                                                                                                  Ty.path
                                                                                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                                                                                ],
                                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                                Ty.apply
                                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                                                                  []
                                                                                                                                                                                                  [
                                                                                                                                                                                                    Ty.path
                                                                                                                                                                                                      "usize";
                                                                                                                                                                                                    Ty.path
                                                                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                                                                  ],
                                                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                                                  "itertools::Itertools",
                                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                                      "core::iter::adapters::map::Map")
                                                                                                                                                                                                    []
                                                                                                                                                                                                    [
                                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                                          "core::slice::iter::Iter")
                                                                                                                                                                                                        []
                                                                                                                                                                                                        [
                                                                                                                                                                                                          Ty.path
                                                                                                                                                                                                            "usize"
                                                                                                                                                                                                        ];
                                                                                                                                                                                                      Ty.function
                                                                                                                                                                                                        [
                                                                                                                                                                                                          Ty.apply
                                                                                                                                                                                                            (Ty.path
                                                                                                                                                                                                              "&")
                                                                                                                                                                                                            []
                                                                                                                                                                                                            [
                                                                                                                                                                                                              Ty.path
                                                                                                                                                                                                                "usize"
                                                                                                                                                                                                            ]
                                                                                                                                                                                                        ]
                                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                                          "usize")
                                                                                                                                                                                                    ],
                                                                                                                                                                                                  [],
                                                                                                                                                                                                  [],
                                                                                                                                                                                                  "collect_vec",
                                                                                                                                                                                                  [],
                                                                                                                                                                                                  []
                                                                                                                                                                                                |),
                                                                                                                                                                                                [
                                                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                                                    Ty.apply
                                                                                                                                                                                                      (Ty.path
                                                                                                                                                                                                        "core::iter::adapters::map::Map")
                                                                                                                                                                                                      []
                                                                                                                                                                                                      [
                                                                                                                                                                                                        Ty.apply
                                                                                                                                                                                                          (Ty.path
                                                                                                                                                                                                            "core::slice::iter::Iter")
                                                                                                                                                                                                          []
                                                                                                                                                                                                          [
                                                                                                                                                                                                            Ty.path
                                                                                                                                                                                                              "usize"
                                                                                                                                                                                                          ];
                                                                                                                                                                                                        Ty.function
                                                                                                                                                                                                          [
                                                                                                                                                                                                            Ty.apply
                                                                                                                                                                                                              (Ty.path
                                                                                                                                                                                                                "&")
                                                                                                                                                                                                              []
                                                                                                                                                                                                              [
                                                                                                                                                                                                                Ty.path
                                                                                                                                                                                                                  "usize"
                                                                                                                                                                                                              ]
                                                                                                                                                                                                          ]
                                                                                                                                                                                                          (Ty.path
                                                                                                                                                                                                            "usize")
                                                                                                                                                                                                      ],
                                                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                                          "core::slice::iter::Iter")
                                                                                                                                                                                                        []
                                                                                                                                                                                                        [
                                                                                                                                                                                                          Ty.path
                                                                                                                                                                                                            "usize"
                                                                                                                                                                                                        ],
                                                                                                                                                                                                      [],
                                                                                                                                                                                                      [],
                                                                                                                                                                                                      "map",
                                                                                                                                                                                                      [],
                                                                                                                                                                                                      [
                                                                                                                                                                                                        Ty.path
                                                                                                                                                                                                          "usize";
                                                                                                                                                                                                        Ty.function
                                                                                                                                                                                                          [
                                                                                                                                                                                                            Ty.apply
                                                                                                                                                                                                              (Ty.path
                                                                                                                                                                                                                "&")
                                                                                                                                                                                                              []
                                                                                                                                                                                                              [
                                                                                                                                                                                                                Ty.path
                                                                                                                                                                                                                  "usize"
                                                                                                                                                                                                              ]
                                                                                                                                                                                                          ]
                                                                                                                                                                                                          (Ty.path
                                                                                                                                                                                                            "usize")
                                                                                                                                                                                                      ]
                                                                                                                                                                                                    |),
                                                                                                                                                                                                    [
                                                                                                                                                                                                      M.call_closure (|
                                                                                                                                                                                                        Ty.apply
                                                                                                                                                                                                          (Ty.path
                                                                                                                                                                                                            "core::slice::iter::Iter")
                                                                                                                                                                                                          []
                                                                                                                                                                                                          [
                                                                                                                                                                                                            Ty.path
                                                                                                                                                                                                              "usize"
                                                                                                                                                                                                          ],
                                                                                                                                                                                                        M.get_associated_function (|
                                                                                                                                                                                                          Ty.apply
                                                                                                                                                                                                            (Ty.path
                                                                                                                                                                                                              "slice")
                                                                                                                                                                                                            []
                                                                                                                                                                                                            [
                                                                                                                                                                                                              Ty.path
                                                                                                                                                                                                                "usize"
                                                                                                                                                                                                            ],
                                                                                                                                                                                                          "iter",
                                                                                                                                                                                                          [],
                                                                                                                                                                                                          []
                                                                                                                                                                                                        |),
                                                                                                                                                                                                        [
                                                                                                                                                                                                          M.borrow (|
                                                                                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                                                                                            M.deref (|
                                                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                                                Ty.apply
                                                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                                                    "&")
                                                                                                                                                                                                                  []
                                                                                                                                                                                                                  [
                                                                                                                                                                                                                    Ty.apply
                                                                                                                                                                                                                      (Ty.path
                                                                                                                                                                                                                        "slice")
                                                                                                                                                                                                                      []
                                                                                                                                                                                                                      [
                                                                                                                                                                                                                        Ty.path
                                                                                                                                                                                                                          "usize"
                                                                                                                                                                                                                      ]
                                                                                                                                                                                                                  ],
                                                                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                                                                  "core::ops::deref::Deref",
                                                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                                                      "alloc::vec::Vec")
                                                                                                                                                                                                                    []
                                                                                                                                                                                                                    [
                                                                                                                                                                                                                      Ty.path
                                                                                                                                                                                                                        "usize";
                                                                                                                                                                                                                      Ty.path
                                                                                                                                                                                                                        "alloc::alloc::Global"
                                                                                                                                                                                                                    ],
                                                                                                                                                                                                                  [],
                                                                                                                                                                                                                  [],
                                                                                                                                                                                                                  "deref",
                                                                                                                                                                                                                  [],
                                                                                                                                                                                                                  []
                                                                                                                                                                                                                |),
                                                                                                                                                                                                                [
                                                                                                                                                                                                                  M.borrow (|
                                                                                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                                                                                                                                      M.deref (|
                                                                                                                                                                                                                        M.read (|
                                                                                                                                                                                                                          width
                                                                                                                                                                                                                        |)
                                                                                                                                                                                                                      |),
                                                                                                                                                                                                                      "openvm_stark_backend::keygen::types::TraceWidth",
                                                                                                                                                                                                                      "after_challenge"
                                                                                                                                                                                                                    |)
                                                                                                                                                                                                                  |)
                                                                                                                                                                                                                ]
                                                                                                                                                                                                              |)
                                                                                                                                                                                                            |)
                                                                                                                                                                                                          |)
                                                                                                                                                                                                        ]
                                                                                                                                                                                                      |);
                                                                                                                                                                                                      M.closure
                                                                                                                                                                                                        (fun
                                                                                                                                                                                                            γ =>
                                                                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                                                                            match
                                                                                                                                                                                                              γ
                                                                                                                                                                                                            with
                                                                                                                                                                                                            | [
                                                                                                                                                                                                                  α0
                                                                                                                                                                                                                ] =>
                                                                                                                                                                                                              ltac:(M.monadic
                                                                                                                                                                                                                (M.match_operator (|
                                                                                                                                                                                                                  Ty.path
                                                                                                                                                                                                                    "usize",
                                                                                                                                                                                                                  M.alloc (|
                                                                                                                                                                                                                    Ty.apply
                                                                                                                                                                                                                      (Ty.path
                                                                                                                                                                                                                        "&")
                                                                                                                                                                                                                      []
                                                                                                                                                                                                                      [
                                                                                                                                                                                                                        Ty.path
                                                                                                                                                                                                                          "usize"
                                                                                                                                                                                                                      ],
                                                                                                                                                                                                                    α0
                                                                                                                                                                                                                  |),
                                                                                                                                                                                                                  [
                                                                                                                                                                                                                    fun
                                                                                                                                                                                                                        γ =>
                                                                                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                                                                                        (let
                                                                                                                                                                                                                              γ :=
                                                                                                                                                                                                                          M.deref (|
                                                                                                                                                                                                                            M.read (|
                                                                                                                                                                                                                              γ
                                                                                                                                                                                                                            |)
                                                                                                                                                                                                                          |) in
                                                                                                                                                                                                                        let
                                                                                                                                                                                                                              x :=
                                                                                                                                                                                                                          M.copy (|
                                                                                                                                                                                                                            Ty.path
                                                                                                                                                                                                                              "usize",
                                                                                                                                                                                                                            γ
                                                                                                                                                                                                                          |) in
                                                                                                                                                                                                                        M.call_closure (|
                                                                                                                                                                                                                          Ty.path
                                                                                                                                                                                                                            "usize",
                                                                                                                                                                                                                          BinOp.Wrap.mul,
                                                                                                                                                                                                                          [
                                                                                                                                                                                                                            M.read (|
                                                                                                                                                                                                                              x
                                                                                                                                                                                                                            |);
                                                                                                                                                                                                                            M.read (|
                                                                                                                                                                                                                              get_constant (|
                                                                                                                                                                                                                                "p3_field::field::FieldExtensionAlgebra::D",
                                                                                                                                                                                                                                Ty.path
                                                                                                                                                                                                                                  "usize"
                                                                                                                                                                                                                              |)
                                                                                                                                                                                                                            |)
                                                                                                                                                                                                                          ]
                                                                                                                                                                                                                        |)))
                                                                                                                                                                                                                  ]
                                                                                                                                                                                                                |)))
                                                                                                                                                                                                            | _ =>
                                                                                                                                                                                                              M.impossible
                                                                                                                                                                                                                "wrong number of arguments"
                                                                                                                                                                                                            end))
                                                                                                                                                                                                    ]
                                                                                                                                                                                                  |)
                                                                                                                                                                                                ]
                                                                                                                                                                                              |)
                                                                                                                                                                                            |)
                                                                                                                                                                                          |)
                                                                                                                                                                                        |)
                                                                                                                                                                                      |)
                                                                                                                                                                                    ]
                                                                                                                                                                                  |)
                                                                                                                                                                                ]
                                                                                                                                                                            |)
                                                                                                                                                                          |)
                                                                                                                                                                        |)
                                                                                                                                                                      |)
                                                                                                                                                                    ]
                                                                                                                                                                  |)
                                                                                                                                                                ]
                                                                                                                                                              |) in
                                                                                                                                                            res
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    |)
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Argument",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Argument",
                                                                                                                                              "new_display",
                                                                                                                                              [],
                                                                                                                                              [
                                                                                                                                                Ty.path
                                                                                                                                                  "usize"
                                                                                                                                              ]
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.deref (|
                                                                                                                                                  M.borrow (|
                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                    M.alloc (|
                                                                                                                                                      Ty.path
                                                                                                                                                        "usize",
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        Ty.path
                                                                                                                                                          "usize",
                                                                                                                                                        M.get_associated_function (|
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "alloc::vec::Vec")
                                                                                                                                                            []
                                                                                                                                                            [
                                                                                                                                                              Ty.path
                                                                                                                                                                "usize";
                                                                                                                                                              Ty.path
                                                                                                                                                                "alloc::alloc::Global"
                                                                                                                                                            ],
                                                                                                                                                          "len",
                                                                                                                                                          [],
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.borrow (|
                                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                                                                    M.deref (|
                                                                                                                                                                      M.read (|
                                                                                                                                                                        pk
                                                                                                                                                                      |)
                                                                                                                                                                    |),
                                                                                                                                                                    "openvm_stark_backend::keygen::types::StarkProvingKey",
                                                                                                                                                                    "vk"
                                                                                                                                                                  |),
                                                                                                                                                                  "openvm_stark_backend::keygen::types::StarkVerifyingKey",
                                                                                                                                                                  "symbolic_constraints"
                                                                                                                                                                |),
                                                                                                                                                                "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag",
                                                                                                                                                                "constraints"
                                                                                                                                                              |),
                                                                                                                                                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicExpressionDag",
                                                                                                                                                              "constraint_idx"
                                                                                                                                                            |)
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    |)
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Argument",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Argument",
                                                                                                                                              "new_display",
                                                                                                                                              [],
                                                                                                                                              [
                                                                                                                                                Ty.path
                                                                                                                                                  "usize"
                                                                                                                                              ]
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.deref (|
                                                                                                                                                  M.borrow (|
                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                    M.alloc (|
                                                                                                                                                      Ty.path
                                                                                                                                                        "usize",
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        Ty.path
                                                                                                                                                          "usize",
                                                                                                                                                        M.get_associated_function (|
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "alloc::vec::Vec")
                                                                                                                                                            []
                                                                                                                                                            [
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                []
                                                                                                                                                                [
                                                                                                                                                                  Ty.path
                                                                                                                                                                    "usize"
                                                                                                                                                                ];
                                                                                                                                                              Ty.path
                                                                                                                                                                "alloc::alloc::Global"
                                                                                                                                                            ],
                                                                                                                                                          "len",
                                                                                                                                                          [],
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.borrow (|
                                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                                  M.deref (|
                                                                                                                                                                    M.read (|
                                                                                                                                                                      pk
                                                                                                                                                                    |)
                                                                                                                                                                  |),
                                                                                                                                                                  "openvm_stark_backend::keygen::types::StarkProvingKey",
                                                                                                                                                                  "vk"
                                                                                                                                                                |),
                                                                                                                                                                "openvm_stark_backend::keygen::types::StarkVerifyingKey",
                                                                                                                                                                "symbolic_constraints"
                                                                                                                                                              |),
                                                                                                                                                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag",
                                                                                                                                                              "interactions"
                                                                                                                                                            |)
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    |)
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Argument",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Argument",
                                                                                                                                              "new_debug",
                                                                                                                                              [],
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Ty.path
                                                                                                                                                      "u16";
                                                                                                                                                    Ty.path
                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                  ]
                                                                                                                                              ]
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.deref (|
                                                                                                                                                  M.borrow (|
                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                    M.alloc (|
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "alloc::vec::Vec")
                                                                                                                                                        []
                                                                                                                                                        [
                                                                                                                                                          Ty.path
                                                                                                                                                            "u16";
                                                                                                                                                          Ty.path
                                                                                                                                                            "alloc::alloc::Global"
                                                                                                                                                        ],
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        Ty.apply
                                                                                                                                                          (Ty.path
                                                                                                                                                            "alloc::vec::Vec")
                                                                                                                                                          []
                                                                                                                                                          [
                                                                                                                                                            Ty.path
                                                                                                                                                              "u16";
                                                                                                                                                            Ty.path
                                                                                                                                                              "alloc::alloc::Global"
                                                                                                                                                          ],
                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                          "itertools::Itertools",
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "core::iter::adapters::map::Map")
                                                                                                                                                            []
                                                                                                                                                            [
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "core::slice::iter::Iter")
                                                                                                                                                                []
                                                                                                                                                                [
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                    []
                                                                                                                                                                    [
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "usize"
                                                                                                                                                                    ]
                                                                                                                                                                ];
                                                                                                                                                              Ty.function
                                                                                                                                                                [
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "&")
                                                                                                                                                                    []
                                                                                                                                                                    [
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                        []
                                                                                                                                                                        [
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "usize"
                                                                                                                                                                        ]
                                                                                                                                                                    ]
                                                                                                                                                                ]
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "u16")
                                                                                                                                                            ],
                                                                                                                                                          [],
                                                                                                                                                          [],
                                                                                                                                                          "collect_vec",
                                                                                                                                                          [],
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "core::iter::adapters::map::Map")
                                                                                                                                                              []
                                                                                                                                                              [
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "core::slice::iter::Iter")
                                                                                                                                                                  []
                                                                                                                                                                  [
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                      []
                                                                                                                                                                      [
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "usize"
                                                                                                                                                                      ]
                                                                                                                                                                  ];
                                                                                                                                                                Ty.function
                                                                                                                                                                  [
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "&")
                                                                                                                                                                      []
                                                                                                                                                                      [
                                                                                                                                                                        Ty.apply
                                                                                                                                                                          (Ty.path
                                                                                                                                                                            "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                          []
                                                                                                                                                                          [
                                                                                                                                                                            Ty.path
                                                                                                                                                                              "usize"
                                                                                                                                                                          ]
                                                                                                                                                                      ]
                                                                                                                                                                  ]
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "u16")
                                                                                                                                                              ],
                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                              "core::iter::traits::iterator::Iterator",
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "core::slice::iter::Iter")
                                                                                                                                                                []
                                                                                                                                                                [
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                    []
                                                                                                                                                                    [
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "usize"
                                                                                                                                                                    ]
                                                                                                                                                                ],
                                                                                                                                                              [],
                                                                                                                                                              [],
                                                                                                                                                              "map",
                                                                                                                                                              [],
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "u16";
                                                                                                                                                                Ty.function
                                                                                                                                                                  [
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "&")
                                                                                                                                                                      []
                                                                                                                                                                      [
                                                                                                                                                                        Ty.apply
                                                                                                                                                                          (Ty.path
                                                                                                                                                                            "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                          []
                                                                                                                                                                          [
                                                                                                                                                                            Ty.path
                                                                                                                                                                              "usize"
                                                                                                                                                                          ]
                                                                                                                                                                      ]
                                                                                                                                                                  ]
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "u16")
                                                                                                                                                              ]
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.call_closure (|
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "core::slice::iter::Iter")
                                                                                                                                                                  []
                                                                                                                                                                  [
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                      []
                                                                                                                                                                      [
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "usize"
                                                                                                                                                                      ]
                                                                                                                                                                  ],
                                                                                                                                                                M.get_associated_function (|
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "slice")
                                                                                                                                                                    []
                                                                                                                                                                    [
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                        []
                                                                                                                                                                        [
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "usize"
                                                                                                                                                                        ]
                                                                                                                                                                    ],
                                                                                                                                                                  "iter",
                                                                                                                                                                  [],
                                                                                                                                                                  []
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  M.borrow (|
                                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                                    M.deref (|
                                                                                                                                                                      M.call_closure (|
                                                                                                                                                                        Ty.apply
                                                                                                                                                                          (Ty.path
                                                                                                                                                                            "&")
                                                                                                                                                                          []
                                                                                                                                                                          [
                                                                                                                                                                            Ty.apply
                                                                                                                                                                              (Ty.path
                                                                                                                                                                                "slice")
                                                                                                                                                                              []
                                                                                                                                                                              [
                                                                                                                                                                                Ty.apply
                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                    "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                                  []
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "usize"
                                                                                                                                                                                  ]
                                                                                                                                                                              ]
                                                                                                                                                                          ],
                                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                                          "core::ops::deref::Deref",
                                                                                                                                                                          Ty.apply
                                                                                                                                                                            (Ty.path
                                                                                                                                                                              "alloc::vec::Vec")
                                                                                                                                                                            []
                                                                                                                                                                            [
                                                                                                                                                                              Ty.apply
                                                                                                                                                                                (Ty.path
                                                                                                                                                                                  "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                                []
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.path
                                                                                                                                                                                    "usize"
                                                                                                                                                                                ];
                                                                                                                                                                              Ty.path
                                                                                                                                                                                "alloc::alloc::Global"
                                                                                                                                                                            ],
                                                                                                                                                                          [],
                                                                                                                                                                          [],
                                                                                                                                                                          "deref",
                                                                                                                                                                          [],
                                                                                                                                                                          []
                                                                                                                                                                        |),
                                                                                                                                                                        [
                                                                                                                                                                          M.borrow (|
                                                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                                                  M.deref (|
                                                                                                                                                                                    M.read (|
                                                                                                                                                                                      pk
                                                                                                                                                                                    |)
                                                                                                                                                                                  |),
                                                                                                                                                                                  "openvm_stark_backend::keygen::types::StarkProvingKey",
                                                                                                                                                                                  "vk"
                                                                                                                                                                                |),
                                                                                                                                                                                "openvm_stark_backend::keygen::types::StarkVerifyingKey",
                                                                                                                                                                                "symbolic_constraints"
                                                                                                                                                                              |),
                                                                                                                                                                              "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag",
                                                                                                                                                                              "interactions"
                                                                                                                                                                            |)
                                                                                                                                                                          |)
                                                                                                                                                                        ]
                                                                                                                                                                      |)
                                                                                                                                                                    |)
                                                                                                                                                                  |)
                                                                                                                                                                ]
                                                                                                                                                              |);
                                                                                                                                                              M.closure
                                                                                                                                                                (fun
                                                                                                                                                                    γ =>
                                                                                                                                                                  ltac:(M.monadic
                                                                                                                                                                    match
                                                                                                                                                                      γ
                                                                                                                                                                    with
                                                                                                                                                                    | [
                                                                                                                                                                          α0
                                                                                                                                                                        ] =>
                                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                                        (M.match_operator (|
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "u16",
                                                                                                                                                                          M.alloc (|
                                                                                                                                                                            Ty.apply
                                                                                                                                                                              (Ty.path
                                                                                                                                                                                "&")
                                                                                                                                                                              []
                                                                                                                                                                              [
                                                                                                                                                                                Ty.apply
                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                    "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                                  []
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "usize"
                                                                                                                                                                                  ]
                                                                                                                                                                              ],
                                                                                                                                                                            α0
                                                                                                                                                                          |),
                                                                                                                                                                          [
                                                                                                                                                                            fun
                                                                                                                                                                                γ =>
                                                                                                                                                                              ltac:(M.monadic
                                                                                                                                                                                (let
                                                                                                                                                                                      i :=
                                                                                                                                                                                  M.copy (|
                                                                                                                                                                                    Ty.apply
                                                                                                                                                                                      (Ty.path
                                                                                                                                                                                        "&")
                                                                                                                                                                                      []
                                                                                                                                                                                      [
                                                                                                                                                                                        Ty.apply
                                                                                                                                                                                          (Ty.path
                                                                                                                                                                                            "openvm_stark_backend::interaction::Interaction")
                                                                                                                                                                                          []
                                                                                                                                                                                          [
                                                                                                                                                                                            Ty.path
                                                                                                                                                                                              "usize"
                                                                                                                                                                                          ]
                                                                                                                                                                                      ],
                                                                                                                                                                                    γ
                                                                                                                                                                                  |) in
                                                                                                                                                                                M.read (|
                                                                                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                                                                                    M.deref (|
                                                                                                                                                                                      M.read (|
                                                                                                                                                                                        i
                                                                                                                                                                                      |)
                                                                                                                                                                                    |),
                                                                                                                                                                                    "openvm_stark_backend::interaction::Interaction",
                                                                                                                                                                                    "bus_index"
                                                                                                                                                                                  |)
                                                                                                                                                                                |)))
                                                                                                                                                                          ]
                                                                                                                                                                        |)))
                                                                                                                                                                    | _ =>
                                                                                                                                                                      M.impossible
                                                                                                                                                                        "wrong number of arguments"
                                                                                                                                                                    end))
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    |)
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |)
                                                                                                                                        ]
                                                                                                                                    |)
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |);
                                                                                                                          M.call_closure (|
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "slice")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.path
                                                                                                                                      "core::fmt::rt::Placeholder"
                                                                                                                                  ]
                                                                                                                              ],
                                                                                                                            M.pointer_coercion
                                                                                                                              M.PointerCoercion.Unsize
                                                                                                                              (Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "array")
                                                                                                                                    [
                                                                                                                                      Value.Integer
                                                                                                                                        IntegerKind.Usize
                                                                                                                                        8
                                                                                                                                    ]
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "core::fmt::rt::Placeholder"
                                                                                                                                    ]
                                                                                                                                ])
                                                                                                                              (Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "slice")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "core::fmt::rt::Placeholder"
                                                                                                                                    ]
                                                                                                                                ]),
                                                                                                                            [
                                                                                                                              M.borrow (|
                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                M.deref (|
                                                                                                                                  M.borrow (|
                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                    M.alloc (|
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "array")
                                                                                                                                        [
                                                                                                                                          Value.Integer
                                                                                                                                            IntegerKind.Usize
                                                                                                                                            8
                                                                                                                                        ]
                                                                                                                                        [
                                                                                                                                          Ty.path
                                                                                                                                            "core::fmt::rt::Placeholder"
                                                                                                                                        ],
                                                                                                                                      Value.Array
                                                                                                                                        [
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Placeholder",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Placeholder",
                                                                                                                                              "new",
                                                                                                                                              [],
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.Usize
                                                                                                                                                0;
                                                                                                                                              Value.UnicodeChar
                                                                                                                                                32;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Alignment::Left"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.U32
                                                                                                                                                0;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Implied"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Is"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Value.Integer
                                                                                                                                                    IntegerKind.Usize
                                                                                                                                                    20
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Placeholder",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Placeholder",
                                                                                                                                              "new",
                                                                                                                                              [],
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.Usize
                                                                                                                                                1;
                                                                                                                                              Value.UnicodeChar
                                                                                                                                                32;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Alignment::Left"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.U32
                                                                                                                                                0;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Implied"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Is"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Value.Integer
                                                                                                                                                    IntegerKind.Usize
                                                                                                                                                    2
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Placeholder",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Placeholder",
                                                                                                                                              "new",
                                                                                                                                              [],
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.Usize
                                                                                                                                                2;
                                                                                                                                              Value.UnicodeChar
                                                                                                                                                32;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Alignment::Left"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.U32
                                                                                                                                                0;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Implied"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Is"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Value.Integer
                                                                                                                                                    IntegerKind.Usize
                                                                                                                                                    2
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Placeholder",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Placeholder",
                                                                                                                                              "new",
                                                                                                                                              [],
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.Usize
                                                                                                                                                3;
                                                                                                                                              Value.UnicodeChar
                                                                                                                                                32;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Alignment::Left"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.U32
                                                                                                                                                0;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Implied"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Is"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Value.Integer
                                                                                                                                                    IntegerKind.Usize
                                                                                                                                                    8
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Placeholder",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Placeholder",
                                                                                                                                              "new",
                                                                                                                                              [],
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.Usize
                                                                                                                                                4;
                                                                                                                                              Value.UnicodeChar
                                                                                                                                                32;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Alignment::Left"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.U32
                                                                                                                                                0;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Implied"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Is"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Value.Integer
                                                                                                                                                    IntegerKind.Usize
                                                                                                                                                    4
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Placeholder",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Placeholder",
                                                                                                                                              "new",
                                                                                                                                              [],
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.Usize
                                                                                                                                                5;
                                                                                                                                              Value.UnicodeChar
                                                                                                                                                32;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Alignment::Unknown"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.U32
                                                                                                                                                0;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Implied"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Is"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Value.Integer
                                                                                                                                                    IntegerKind.Usize
                                                                                                                                                    4
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Placeholder",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Placeholder",
                                                                                                                                              "new",
                                                                                                                                              [],
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.Usize
                                                                                                                                                6;
                                                                                                                                              Value.UnicodeChar
                                                                                                                                                32;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Alignment::Unknown"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.U32
                                                                                                                                                0;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Implied"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Is"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Value.Integer
                                                                                                                                                    IntegerKind.Usize
                                                                                                                                                    3
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                          |);
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::rt::Placeholder",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::rt::Placeholder",
                                                                                                                                              "new",
                                                                                                                                              [],
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.Usize
                                                                                                                                                7;
                                                                                                                                              Value.UnicodeChar
                                                                                                                                                32;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Alignment::Unknown"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.Integer
                                                                                                                                                IntegerKind.U32
                                                                                                                                                0;
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Implied"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                [];
                                                                                                                                              Value.StructTuple
                                                                                                                                                "core::fmt::rt::Count::Implied"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                            ]
                                                                                                                                          |)
                                                                                                                                        ]
                                                                                                                                    |)
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |);
                                                                                                                          M.call_closure (|
                                                                                                                            Ty.path
                                                                                                                              "core::fmt::rt::UnsafeArg",
                                                                                                                            M.get_associated_function (|
                                                                                                                              Ty.path
                                                                                                                                "core::fmt::rt::UnsafeArg",
                                                                                                                              "new",
                                                                                                                              [],
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            []
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |))
                                                                                                    |)
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                  ]
                                                                |) in
                                                              M.alloc (|
                                                                Ty.tuple [],
                                                                Value.Tuple []
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)
                                                  |)
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            let~ num_airs : Ty.path "usize" :=
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  "len",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, symbolic_constraints_per_air |) ]
              |) in
            let~ base_order : Ty.path "u32" :=
              M.read (|
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                    M.get_trait_method (|
                      "core::ops::index::Index",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [ Ty.path "usize" ],
                      "index",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                            M.get_associated_function (|
                              Ty.path "num_bigint::biguint::BigUint",
                              "to_u32_digits",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Ty.path "num_bigint::biguint::BigUint",
                                  M.call_closure (|
                                    Ty.path "num_bigint::biguint::BigUint",
                                    M.get_trait_method (|
                                      "p3_field::field::Field",
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val",
                                      [],
                                      [],
                                      "order",
                                      [],
                                      []
                                    |),
                                    []
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |);
                      Value.Integer IntegerKind.Usize 0
                    ]
                  |)
                |)
              |) in
            let~ count_weight_per_air_per_bus_index :
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  []
                  [
                    Ty.path "u16";
                    Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                    Ty.path "std::hash::random::RandomState"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  []
                  [
                    Ty.path "u16";
                    Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                    Ty.path "std::hash::random::RandomState"
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "std::collections::hash::map::HashMap")
                    []
                    [
                      Ty.path "u16";
                      Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                      Ty.path "std::hash::random::RandomState"
                    ],
                  "new",
                  [],
                  []
                |),
                []
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ]
                              ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val"
                                    ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ]
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ],
                                [],
                                [],
                                "enumerate",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ],
                                    "iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val"
                                                    ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              symbolic_constraints_per_air
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ]
                                  ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ]
                                                  ]
                                              ]
                                          ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        ]
                                                    ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ]
                                                  ]
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                            let constraints_per_air :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ]
                                                  ],
                                                γ1_1
                                              |) in
                                            M.read (|
                                              M.use
                                                (M.alloc (|
                                                  Ty.tuple [],
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::interaction::Interaction")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val"
                                                                ]
                                                            ]
                                                        ],
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::interaction::Interaction")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ]
                                                              ]
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::interaction::Interaction")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          [],
                                                          [],
                                                          "into_iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (|
                                                                M.read (| constraints_per_air |)
                                                              |),
                                                              "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                                                              "interactions"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter :=
                                                            M.copy (|
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::interaction::Interaction")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ]
                                                                    ]
                                                                ],
                                                              γ
                                                            |) in
                                                          M.read (|
                                                            M.loop (|
                                                              Ty.tuple [],
                                                              ltac:(M.monadic
                                                                (let~ _ : Ty.tuple [] :=
                                                                  M.match_operator (|
                                                                    Ty.tuple [],
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_stark_backend::interaction::Interaction")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "p3_commit::domain::PolynomialSpace"
                                                                                        []
                                                                                        []
                                                                                        (Ty.associated_in_trait
                                                                                          "p3_commit::pcs::Pcs"
                                                                                          []
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenge";
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenger"
                                                                                          ]
                                                                                          (Ty.associated_in_trait
                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                            []
                                                                                            []
                                                                                            SC
                                                                                            "Pcs")
                                                                                          "Domain")
                                                                                        "Val"
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ],
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_stark_backend::interaction::Interaction")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                      []
                                                                                      [
                                                                                        Ty.associated_in_trait
                                                                                          "p3_commit::domain::PolynomialSpace"
                                                                                          []
                                                                                          []
                                                                                          (Ty.associated_in_trait
                                                                                            "p3_commit::pcs::Pcs"
                                                                                            []
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                []
                                                                                                []
                                                                                                SC
                                                                                                "Challenge";
                                                                                              Ty.associated_in_trait
                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                []
                                                                                                []
                                                                                                SC
                                                                                                "Challenger"
                                                                                            ]
                                                                                            (Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Pcs")
                                                                                            "Domain")
                                                                                          "Val"
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_stark_backend::interaction::Interaction")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "p3_commit::domain::PolynomialSpace"
                                                                                        []
                                                                                        []
                                                                                        (Ty.associated_in_trait
                                                                                          "p3_commit::pcs::Pcs"
                                                                                          []
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenge";
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenger"
                                                                                          ]
                                                                                          (Ty.associated_in_trait
                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                            []
                                                                                            []
                                                                                            SC
                                                                                            "Pcs")
                                                                                          "Domain")
                                                                                        "Val"
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "next",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                iter
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let _ :=
                                                                            M.is_struct_tuple (|
                                                                              γ,
                                                                              "core::option::Option::None"
                                                                            |) in
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              γ,
                                                                              "core::option::Option::Some",
                                                                              0
                                                                            |) in
                                                                          let interaction :=
                                                                            M.copy (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_stark_backend::interaction::Interaction")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_commit::domain::PolynomialSpace"
                                                                                            []
                                                                                            []
                                                                                            (Ty.associated_in_trait
                                                                                              "p3_commit::pcs::Pcs"
                                                                                              []
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Challenge";
                                                                                                Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Challenger"
                                                                                              ]
                                                                                              (Ty.associated_in_trait
                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                []
                                                                                                []
                                                                                                SC
                                                                                                "Pcs")
                                                                                              "Domain")
                                                                                            "Val"
                                                                                        ]
                                                                                    ]
                                                                                ],
                                                                              γ0_0
                                                                            |) in
                                                                          M.read (|
                                                                            let~ max_msg_len :
                                                                                Ty.path "usize" :=
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "openvm_stark_backend::interaction::LogUpSecurityParameters",
                                                                                  "max_message_length",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "openvm_stark_backend::interaction::LogUpSecurityParameters"
                                                                                          ],
                                                                                        M.get_trait_method (|
                                                                                          "openvm_stark_backend::interaction::RapPhaseSeq",
                                                                                          Ty.associated_in_trait
                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                            []
                                                                                            []
                                                                                            SC
                                                                                            "RapPhaseSeq",
                                                                                          [],
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                              []
                                                                                              []
                                                                                              (Ty.associated_in_trait
                                                                                                "p3_commit::pcs::Pcs"
                                                                                                []
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenge";
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenger"
                                                                                                ]
                                                                                                (Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Pcs")
                                                                                                "Domain")
                                                                                              "Val";
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenge";
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenger"
                                                                                          ],
                                                                                          "log_up_security_params",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.deref (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "RapPhaseSeq"
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig",
                                                                                                  SC,
                                                                                                  [],
                                                                                                  [],
                                                                                                  "rap_phase_seq",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                          self,
                                                                                                          "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                                                                                                          "config"
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |) in
                                                                            let~
                                                                                  total_message_length :
                                                                                Ty.path "usize" :=
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.add,
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.path "usize",
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                                            []
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                                []
                                                                                                []
                                                                                                (Ty.associated_in_trait
                                                                                                  "p3_commit::pcs::Pcs"
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "Challenge";
                                                                                                    Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "Challenger"
                                                                                                  ]
                                                                                                  (Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Pcs")
                                                                                                  "Domain")
                                                                                                "Val"
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      "len",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              interaction
                                                                                            |)
                                                                                          |),
                                                                                          "openvm_stark_backend::interaction::Interaction",
                                                                                          "message"
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ]
                                                                              |) in
                                                                            let~ _ : Ty.tuple [] :=
                                                                              M.match_operator (|
                                                                                Ty.tuple [],
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ :=
                                                                                        M.use
                                                                                          (M.alloc (|
                                                                                            Ty.path
                                                                                              "bool",
                                                                                            UnOp.not (|
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "bool",
                                                                                                BinOp.le,
                                                                                                [
                                                                                                  M.read (|
                                                                                                    total_message_length
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    max_msg_len
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)) in
                                                                                      let _ :=
                                                                                        is_constant_or_break_match (|
                                                                                          M.read (|
                                                                                            γ
                                                                                          |),
                                                                                          Value.Bool
                                                                                            true
                                                                                        |) in
                                                                                      M.never_to_any (|
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "never",
                                                                                          M.get_function (|
                                                                                            "core::panicking::panic_fmt",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "core::fmt::Arguments",
                                                                                              M.get_associated_function (|
                                                                                                Ty.path
                                                                                                  "core::fmt::Arguments",
                                                                                                "new_v1",
                                                                                                [
                                                                                                  Value.Integer
                                                                                                    IntegerKind.Usize
                                                                                                    2;
                                                                                                  Value.Integer
                                                                                                    IntegerKind.Usize
                                                                                                    2
                                                                                                ],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.alloc (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "array")
                                                                                                          [
                                                                                                            Value.Integer
                                                                                                              IntegerKind.Usize
                                                                                                              2
                                                                                                          ]
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "str"
                                                                                                              ]
                                                                                                          ],
                                                                                                        Value.Array
                                                                                                          [
                                                                                                            mk_str (|
                                                                                                              "interaction message with bus has length "
                                                                                                            |);
                                                                                                            mk_str (|
                                                                                                              ", which is more than max "
                                                                                                            |)
                                                                                                          ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |);
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.alloc (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "array")
                                                                                                          [
                                                                                                            Value.Integer
                                                                                                              IntegerKind.Usize
                                                                                                              2
                                                                                                          ]
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "core::fmt::rt::Argument"
                                                                                                          ],
                                                                                                        Value.Array
                                                                                                          [
                                                                                                            M.call_closure (|
                                                                                                              Ty.path
                                                                                                                "core::fmt::rt::Argument",
                                                                                                              M.get_associated_function (|
                                                                                                                Ty.path
                                                                                                                  "core::fmt::rt::Argument",
                                                                                                                "new_display",
                                                                                                                [],
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "usize"
                                                                                                                ]
                                                                                                              |),
                                                                                                              [
                                                                                                                M.borrow (|
                                                                                                                  Pointer.Kind.Ref,
                                                                                                                  M.deref (|
                                                                                                                    M.borrow (|
                                                                                                                      Pointer.Kind.Ref,
                                                                                                                      total_message_length
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                            |);
                                                                                                            M.call_closure (|
                                                                                                              Ty.path
                                                                                                                "core::fmt::rt::Argument",
                                                                                                              M.get_associated_function (|
                                                                                                                Ty.path
                                                                                                                  "core::fmt::rt::Argument",
                                                                                                                "new_display",
                                                                                                                [],
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "usize"
                                                                                                                ]
                                                                                                              |),
                                                                                                              [
                                                                                                                M.borrow (|
                                                                                                                  Pointer.Kind.Ref,
                                                                                                                  M.deref (|
                                                                                                                    M.borrow (|
                                                                                                                      Pointer.Kind.Ref,
                                                                                                                      max_msg_len
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (Value.Tuple
                                                                                        []))
                                                                                ]
                                                                              |) in
                                                                            let~ b :
                                                                                Ty.path "u16" :=
                                                                              M.read (|
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interaction
                                                                                    |)
                                                                                  |),
                                                                                  "openvm_stark_backend::interaction::Interaction",
                                                                                  "bus_index"
                                                                                |)
                                                                              |) in
                                                                            let~ constraint :
                                                                                Ty.apply
                                                                                  (Ty.path "&mut")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "openvm_stark_backend::keygen::types::LinearConstraint"
                                                                                  ] :=
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&mut")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "openvm_stark_backend::keygen::types::LinearConstraint"
                                                                                  ],
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "std::collections::hash::map::Entry")
                                                                                    []
                                                                                    [
                                                                                      Ty.path "u16";
                                                                                      Ty.path
                                                                                        "openvm_stark_backend::keygen::types::LinearConstraint"
                                                                                    ],
                                                                                  "or_insert_with",
                                                                                  [],
                                                                                  [
                                                                                    Ty.function
                                                                                      []
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::keygen::types::LinearConstraint")
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "std::collections::hash::map::Entry")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "u16";
                                                                                        Ty.path
                                                                                          "openvm_stark_backend::keygen::types::LinearConstraint"
                                                                                      ],
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "std::collections::hash::map::HashMap")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "u16";
                                                                                          Ty.path
                                                                                            "openvm_stark_backend::keygen::types::LinearConstraint";
                                                                                          Ty.path
                                                                                            "std::hash::random::RandomState"
                                                                                        ],
                                                                                      "entry",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        count_weight_per_air_per_bus_index
                                                                                      |);
                                                                                      M.read (| b |)
                                                                                    ]
                                                                                  |);
                                                                                  M.closure
                                                                                    (fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        match γ with
                                                                                        | [ α0 ] =>
                                                                                          ltac:(M.monadic
                                                                                            (M.match_operator (|
                                                                                              Ty.path
                                                                                                "openvm_stark_backend::keygen::types::LinearConstraint",
                                                                                              M.alloc (|
                                                                                                Ty.tuple
                                                                                                  [],
                                                                                                α0
                                                                                              |),
                                                                                              [
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (Value.mkStructRecord
                                                                                                      "openvm_stark_backend::keygen::types::LinearConstraint"
                                                                                                      []
                                                                                                      []
                                                                                                      [
                                                                                                        ("coefficients",
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "u32";
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ],
                                                                                                            M.get_function (|
                                                                                                              "alloc::vec::from_elem",
                                                                                                              [],
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "u32"
                                                                                                              ]
                                                                                                            |),
                                                                                                            [
                                                                                                              Value.Integer
                                                                                                                IntegerKind.U32
                                                                                                                0;
                                                                                                              M.read (|
                                                                                                                num_airs
                                                                                                              |)
                                                                                                            ]
                                                                                                          |));
                                                                                                        ("threshold",
                                                                                                          M.read (|
                                                                                                            base_order
                                                                                                          |))
                                                                                                      ]))
                                                                                              ]
                                                                                            |)))
                                                                                        | _ =>
                                                                                          M.impossible
                                                                                            "wrong number of arguments"
                                                                                        end))
                                                                                ]
                                                                              |) in
                                                                            let~ _ : Ty.tuple [] :=
                                                                              let β :=
                                                                                M.deref (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "u32"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::index::IndexMut",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "u32";
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      [],
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                      "index_mut",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              constraint
                                                                                            |)
                                                                                          |),
                                                                                          "openvm_stark_backend::keygen::types::LinearConstraint",
                                                                                          "coefficients"
                                                                                        |)
                                                                                      |);
                                                                                      M.read (| i |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.write (|
                                                                                β,
                                                                                M.call_closure (|
                                                                                  Ty.path "u32",
                                                                                  BinOp.Wrap.add,
                                                                                  [
                                                                                    M.read (| β |);
                                                                                    M.read (|
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            interaction
                                                                                          |)
                                                                                        |),
                                                                                        "openvm_stark_backend::interaction::Interaction",
                                                                                        "count_weight"
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |) in
                                                                            M.alloc (|
                                                                              Ty.tuple [],
                                                                              Value.Tuple []
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                M.alloc (|
                                                                  Ty.tuple [],
                                                                  Value.Tuple []
                                                                |)))
                                                            |)
                                                          |)))
                                                    ]
                                                  |)
                                                |))
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            let~ trace_height_constraints :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "itertools::Itertools",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.path "u16";
                              Ty.path "openvm_stark_backend::keygen::types::LinearConstraint"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.path "u16";
                              Ty.path "openvm_stark_backend::keygen::types::LinearConstraint"
                            ]
                        ]
                        (Ty.path "openvm_stark_backend::keygen::types::LinearConstraint")
                    ],
                  [],
                  [],
                  "collect_vec",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.path "u16";
                                Ty.path "openvm_stark_backend::keygen::types::LinearConstraint"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.path "u16";
                                Ty.path "openvm_stark_backend::keygen::types::LinearConstraint"
                              ]
                          ]
                          (Ty.path "openvm_stark_backend::keygen::types::LinearConstraint")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.path "u16";
                              Ty.path "openvm_stark_backend::keygen::types::LinearConstraint"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.path "u16";
                                Ty.path "openvm_stark_backend::keygen::types::LinearConstraint"
                              ]
                          ]
                          (Ty.path "openvm_stark_backend::keygen::types::LinearConstraint")
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.path "u16";
                                Ty.path "openvm_stark_backend::keygen::types::LinearConstraint"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_trait_method (|
                          "itertools::Itertools",
                          Ty.apply
                            (Ty.path "std::collections::hash::map::IntoIter")
                            []
                            [
                              Ty.path "u16";
                              Ty.path "openvm_stark_backend::keygen::types::LinearConstraint"
                            ],
                          [],
                          [],
                          "sorted_by_key",
                          [],
                          [
                            Ty.path "u16";
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "u16";
                                        Ty.path
                                          "openvm_stark_backend::keygen::types::LinearConstraint"
                                      ]
                                  ]
                              ]
                              (Ty.path "u16")
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "std::collections::hash::map::IntoIter")
                              []
                              [
                                Ty.path "u16";
                                Ty.path "openvm_stark_backend::keygen::types::LinearConstraint"
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "std::collections::hash::map::HashMap")
                                []
                                [
                                  Ty.path "u16";
                                  Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                                  Ty.path "std::hash::random::RandomState"
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [ M.read (| count_weight_per_air_per_bus_index |) ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.path "u16",
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "u16";
                                                Ty.path
                                                  "openvm_stark_backend::keygen::types::LinearConstraint"
                                              ]
                                          ],
                                        α0
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.deref (| M.read (| γ |) |) in
                                            let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let bus_index :=
                                              M.alloc (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u16" ],
                                                γ1_0
                                              |) in
                                            M.read (| M.deref (| M.read (| bus_index |) |) |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.path "openvm_stark_backend::keygen::types::LinearConstraint",
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.path "u16";
                                        Ty.path
                                          "openvm_stark_backend::keygen::types::LinearConstraint"
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let constraint :=
                                          M.copy (|
                                            Ty.path
                                              "openvm_stark_backend::keygen::types::LinearConstraint",
                                            γ0_1
                                          |) in
                                        M.read (| constraint |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |) in
            let~ log_up_security_params :
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters" ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::interaction::LogUpSecurityParameters" ],
                M.get_trait_method (|
                  "openvm_stark_backend::interaction::RapPhaseSeq",
                  Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "RapPhaseSeq",
                  [],
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val";
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenger"
                  ],
                  "log_up_security_params",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "RapPhaseSeq"
                          ],
                        M.get_trait_method (|
                          "openvm_stark_backend::config::StarkGenericConfig",
                          SC,
                          [],
                          [],
                          "rap_phase_seq",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                                  "config"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                      Ty.path "alloc::alloc::Global"
                    ],
                  "push",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, trace_height_constraints |);
                  Value.mkStructRecord
                    "openvm_stark_backend::keygen::types::LinearConstraint"
                    []
                    []
                    [
                      ("coefficients",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ];
                                Ty.function
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ]
                                  ]
                                  (Ty.path "u32")
                              ],
                            [],
                            [],
                            "collect",
                            [],
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val"
                                            ]
                                        ]
                                    ]
                                    (Ty.path "u32")
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ],
                                [],
                                [],
                                "map",
                                [],
                                [
                                  Ty.path "u32";
                                  Ty.function
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val"
                                            ]
                                        ]
                                    ]
                                    (Ty.path "u32")
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ],
                                    "iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val"
                                                    ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              symbolic_constraints_per_air
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.path "u32",
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val"
                                                    ]
                                                ],
                                              α0
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let c :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val"
                                                            ]
                                                        ],
                                                      γ
                                                    |) in
                                                  M.cast
                                                    (Ty.path "u32")
                                                    (M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::interaction::Interaction")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::air_builders::symbolic::symbolic_expression::SymbolicExpression")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| c |) |),
                                                            "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints",
                                                            "interactions"
                                                          |)
                                                        |)
                                                      ]
                                                    |))))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |));
                      ("threshold",
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| log_up_security_params |) |),
                            "openvm_stark_backend::interaction::LogUpSecurityParameters",
                            "max_interaction_count"
                          |)
                        |))
                    ]
                ]
              |) in
            let~ pre_vk :
                Ty.apply
                  (Ty.path "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey0")
                  []
                  [ SC ] :=
              Value.mkStructRecord
                "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey0"
                []
                [ SC ]
                [
                  ("per_air",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val";
                              Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Commitment"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                                  []
                                  [ SC ]
                              ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::keygen::types::StarkProvingKey")
                                      []
                                      [ SC ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val";
                                  Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Commitment"
                                ])
                          ],
                        [],
                        [],
                        "collect",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val";
                                  Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Commitment"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                                    []
                                    [ SC ]
                                ];
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::keygen::types::StarkProvingKey")
                                        []
                                        [ SC ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Commitment"
                                  ])
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                                  []
                                  [ SC ]
                              ],
                            [],
                            [],
                            "map",
                            [],
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val";
                                  Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Commitment"
                                ];
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::keygen::types::StarkProvingKey")
                                        []
                                        [ SC ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Commitment"
                                  ])
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                                    []
                                    [ SC ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::keygen::types::StarkProvingKey")
                                      []
                                      [ SC ]
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::keygen::types::StarkProvingKey")
                                                []
                                                [ SC ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::keygen::types::StarkProvingKey")
                                              []
                                              [ SC ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, pk_per_air |) ]
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val";
                                            Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Commitment"
                                          ],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::keygen::types::StarkProvingKey")
                                                []
                                                [ SC ]
                                            ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let pk :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::keygen::types::StarkProvingKey")
                                                        []
                                                        [ SC ]
                                                    ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val";
                                                    Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Commitment"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val";
                                                      Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Commitment"
                                                    ],
                                                  [],
                                                  [],
                                                  "clone",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| pk |) |),
                                                      "openvm_stark_backend::keygen::types::StarkProvingKey",
                                                      "vk"
                                                    |)
                                                  |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |));
                  ("trace_height_constraints",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, trace_height_constraints |) ]
                    |));
                  ("log_up_pow_bits",
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| log_up_security_params |) |),
                        "openvm_stark_backend::interaction::LogUpSecurityParameters",
                        "log_up_pow_bits"
                      |)
                    |))
                ] in
            let~ vk_bytes :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                      Ty.path "bitcode::error::Error"
                    ],
                  "unwrap",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                        Ty.path "bitcode::error::Error"
                      ],
                    M.get_function (|
                      "bitcode::serde::ser::inner::serialize",
                      [],
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey0")
                          []
                          [ SC ]
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.borrow (| Pointer.Kind.Ref, pre_vk |) |)
                      |)
                    ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                let~ enabled : Ty.path "bool" :=
                  LogicalOp.and (|
                    LogicalOp.and (|
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialOrd",
                          Ty.path "tracing_core::metadata::Level",
                          [],
                          [ Ty.path "tracing_core::metadata::LevelFilter" ],
                          "le",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            get_associated_constant (|
                              Ty.path "tracing_core::metadata::Level",
                              "INFO",
                              Ty.path "tracing_core::metadata::Level"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            get_constant (|
                              "tracing::level_filters::STATIC_MAX_LEVEL",
                              Ty.path "tracing_core::metadata::LevelFilter"
                            |)
                          |)
                        ]
                      |),
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.path "bool",
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "tracing_core::metadata::Level",
                            [],
                            [ Ty.path "tracing_core::metadata::LevelFilter" ],
                            "le",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              get_associated_constant (|
                                Ty.path "tracing_core::metadata::Level",
                                "INFO",
                                Ty.path "tracing_core::metadata::Level"
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.path "tracing_core::metadata::LevelFilter",
                                M.call_closure (|
                                  Ty.path "tracing_core::metadata::LevelFilter",
                                  M.get_associated_function (|
                                    Ty.path "tracing_core::metadata::LevelFilter",
                                    "current",
                                    [],
                                    []
                                  |),
                                  []
                                |)
                              |)
                            |)
                          ]
                        |)))
                    |),
                    ltac:(M.monadic
                      (M.read (|
                        let~ interest : Ty.path "tracing_core::subscriber::Interest" :=
                          M.call_closure (|
                            Ty.path "tracing_core::subscriber::Interest",
                            M.get_associated_function (|
                              Ty.path "tracing_core::callsite::DefaultCallsite",
                              "interest",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.read (|
                                    get_constant (|
                                      "openvm_stark_backend::keygen::generate_pk::__CALLSITE'3",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "tracing_core::callsite::DefaultCallsite" ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |) in
                        M.alloc (|
                          Ty.path "bool",
                          LogicalOp.and (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.path "tracing_core::subscriber::Interest",
                                  "is_never",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, interest |) ]
                              |)
                            |),
                            ltac:(M.monadic
                              (M.call_closure (|
                                Ty.path "bool",
                                M.get_function (|
                                  "tracing::__macro_support::__is_enabled",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "tracing_core::metadata::Metadata" ],
                                        M.get_trait_method (|
                                          "tracing_core::callsite::Callsite",
                                          Ty.path "tracing_core::callsite::DefaultCallsite",
                                          [],
                                          [],
                                          "metadata",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.read (|
                                                get_constant (|
                                                  "openvm_stark_backend::keygen::generate_pk::__CALLSITE'3",
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.path
                                                        "tracing_core::callsite::DefaultCallsite"
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.read (| interest |)
                                ]
                              |)))
                          |)
                        |)
                      |)))
                  |) in
                M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use enabled in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "core::ops::function::Fn",
                                  Ty.function
                                    [ Ty.path "tracing_core::field::ValueSet" ]
                                    (Ty.tuple []),
                                  [],
                                  [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ],
                                  "call",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.function
                                        [ Ty.path "tracing_core::field::ValueSet" ]
                                        (Ty.tuple []),
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (|
                                                    Ty.path "tracing_core::field::ValueSet",
                                                    α0
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let value_set :=
                                                          M.copy (|
                                                            Ty.path "tracing_core::field::ValueSet",
                                                            γ
                                                          |) in
                                                        M.read (|
                                                          let~ meta :
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ] :=
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_stark_backend::keygen::generate_pk::__CALLSITE'3",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::event::Event",
                                                                "dispatch",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| meta |) |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      value_set
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                        |)))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    |)
                                  |);
                                  Value.Tuple
                                    [
                                      M.read (|
                                        let~ iter : Ty.path "tracing_core::field::Iter" :=
                                          M.call_closure (|
                                            Ty.path "tracing_core::field::Iter",
                                            M.get_associated_function (|
                                              Ty.path "tracing_core::field::FieldSet",
                                              "iter",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "tracing_core::field::FieldSet" ],
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::metadata::Metadata",
                                                      "fields",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "openvm_stark_backend::keygen::generate_pk::__CALLSITE'3",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |) in
                                        M.alloc (|
                                          Ty.path "tracing_core::field::ValueSet",
                                          M.call_closure (|
                                            Ty.path "tracing_core::field::ValueSet",
                                            M.get_associated_function (|
                                              Ty.path "tracing_core::field::FieldSet",
                                              "value_set",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 1 ]
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "tracing_core::field::Field" ];
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.dyn
                                                                  [
                                                                    ("tracing_core::field::Value::Trait",
                                                                      [])
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "tracing_core::field::FieldSet" ],
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::metadata::Metadata",
                                                      "fields",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "openvm_stark_backend::keygen::generate_pk::__CALLSITE'3",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::field::Field"
                                                                ];
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("tracing_core::field::Value::Trait",
                                                                            [])
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ],
                                                      Value.Array
                                                        [
                                                          Value.Tuple
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path
                                                                    "tracing_core::field::Field",
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "tracing_core::field::Field",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::Field"
                                                                        ],
                                                                      "expect",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::field::Field"
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.path
                                                                            "tracing_core::field::Iter",
                                                                          [],
                                                                          [],
                                                                          "next",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                iter
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          mk_str (|
                                                                            "FieldSet corrupted (this is a bug)"
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              Value.StructTuple
                                                                "core::option::Option::Some"
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("tracing_core::field::Value::Trait",
                                                                            [])
                                                                        ]
                                                                    ]
                                                                ]
                                                                [
                                                                  M.read (|
                                                                    M.use
                                                                      (M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ],
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("tracing_core::field::Value::Trait",
                                                                                    [])
                                                                                ]
                                                                            ],
                                                                          M.pointer_coercion
                                                                            M.PointerCoercion.Unsize
                                                                            (Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "core::fmt::Arguments"
                                                                              ])
                                                                            (Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.dyn
                                                                                  [
                                                                                    ("tracing_core::field::Value::Trait",
                                                                                      [])
                                                                                  ]
                                                                              ]),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.alloc (|
                                                                                    Ty.path
                                                                                      "core::fmt::Arguments",
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "core::fmt::Arguments",
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::Arguments",
                                                                                        "new_v1",
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            2;
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            1
                                                                                        ],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.alloc (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "array")
                                                                                                  [
                                                                                                    Value.Integer
                                                                                                      IntegerKind.Usize
                                                                                                      2
                                                                                                  ]
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "str"
                                                                                                      ]
                                                                                                  ],
                                                                                                Value.Array
                                                                                                  [
                                                                                                    mk_str (|
                                                                                                      "pre-vkey: "
                                                                                                    |);
                                                                                                    mk_str (|
                                                                                                      " bytes"
                                                                                                    |)
                                                                                                  ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |);
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.alloc (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "array")
                                                                                                  [
                                                                                                    Value.Integer
                                                                                                      IntegerKind.Usize
                                                                                                      1
                                                                                                  ]
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "core::fmt::rt::Argument"
                                                                                                  ],
                                                                                                Value.Array
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "core::fmt::rt::Argument",
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.path
                                                                                                          "core::fmt::rt::Argument",
                                                                                                        "new_display",
                                                                                                        [],
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize"
                                                                                                        ]
                                                                                                      |),
                                                                                                      [
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.alloc (|
                                                                                                                Ty.path
                                                                                                                  "usize",
                                                                                                                M.call_closure (|
                                                                                                                  Ty.path
                                                                                                                    "usize",
                                                                                                                  M.get_associated_function (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "alloc::vec::Vec")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "u8";
                                                                                                                        Ty.path
                                                                                                                          "alloc::alloc::Global"
                                                                                                                      ],
                                                                                                                    "len",
                                                                                                                    [],
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.borrow (|
                                                                                                                      Pointer.Kind.Ref,
                                                                                                                      vk_bytes
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |))
                                                                  |)
                                                                ]
                                                            ]
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |)
                |)
              |) in
            let~ vk_as_row :
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val";
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val";
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val";
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val";
                          Ty.path "alloc::alloc::Global"
                        ]
                    ],
                  "new_row",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                          Ty.function
                            [ Ty.path "u8" ]
                            (Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val")
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val";
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                            Ty.function
                              [ Ty.path "u8" ]
                              (Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val")
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val";
                            Ty.function
                              [ Ty.path "u8" ]
                              (Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val")
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [ M.read (| vk_bytes |) ]
                          |);
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val",
                            [],
                            [],
                            "from_canonical_u8",
                            [],
                            []
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let~ pcs :
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Pcs"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Pcs"
                  ],
                M.get_trait_method (|
                  "openvm_stark_backend::config::StarkGenericConfig",
                  SC,
                  [],
                  [],
                  "pcs",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                          "config"
                        |)
                      |)
                    |)
                  |)
                ]
              |) in
            let~ deg_1_domain :
                Ty.associated_in_trait
                  "p3_commit::pcs::Pcs"
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenger"
                  ]
                  (Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Pcs")
                  "Domain" :=
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_commit::pcs::Pcs"
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenger"
                  ]
                  (Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Pcs")
                  "Domain",
                M.get_trait_method (|
                  "p3_commit::pcs::Pcs",
                  Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Pcs",
                  [],
                  [
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenger"
                  ],
                  "natural_domain_for_degree",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| pcs |) |) |);
                  Value.Integer IntegerKind.Usize 1
                ]
              |) in
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_stark_backend::keygen::types::MultiStarkProvingKey")
                []
                [ SC ],
              M.match_operator (|
                Ty.apply
                  (Ty.path "openvm_stark_backend::keygen::types::MultiStarkProvingKey")
                  []
                  [ SC ],
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Commitment";
                      Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "ProverData"
                    ],
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Commitment";
                        Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "ProverData"
                      ],
                    M.get_trait_method (|
                      "p3_commit::pcs::Pcs",
                      Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Pcs",
                      [],
                      [
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ],
                      "commit",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| pcs |) |) |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain";
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain";
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val";
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ]
                            ],
                          "into_vec",
                          [],
                          [ Ty.path "alloc::alloc::Global" ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain";
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val";
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [
                                      Ty.tuple
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain";
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val";
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                              (Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain";
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val";
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ]),
                            [
                              M.read (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [
                                          Ty.tuple
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain";
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val";
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [
                                            Ty.tuple
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain";
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val";
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [
                                          Ty.tuple
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain";
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val";
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                            ]
                                        ],
                                      Value.Array
                                        [
                                          Value.Tuple
                                            [ M.read (| deg_1_domain |); M.read (| vk_as_row |) ]
                                        ]
                                    |)
                                  ]
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let vk_pre_hash :=
                        M.copy (|
                          Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Commitment",
                          γ0_0
                        |) in
                      Value.mkStructRecord
                        "openvm_stark_backend::keygen::types::MultiStarkProvingKey"
                        []
                        [ SC ]
                        [
                          ("per_air", M.read (| pk_per_air |));
                          ("trace_height_constraints", M.read (| trace_height_constraints |));
                          ("max_constraint_degree",
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "openvm_stark_backend::keygen::MultiStarkKeygenBuilder",
                                "max_constraint_degree"
                              |)
                            |));
                          ("log_up_pow_bits",
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| log_up_security_params |) |),
                                "openvm_stark_backend::interaction::LogUpSecurityParameters",
                                "log_up_pow_bits"
                              |)
                            |));
                          ("vk_pre_hash", M.read (| vk_pre_hash |))
                        ]))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_generate_pk :
      forall (SC : Ty.t),
      M.IsAssociatedFunction.C (Self SC) "generate_pk" (generate_pk SC).
    Admitted.
    Global Typeclasses Opaque generate_pk.
  End Impl_openvm_stark_backend_keygen_MultiStarkKeygenBuilder_SC.
  
  Module Impl_openvm_stark_backend_keygen_AirKeygenBuilder_SC.
    Definition Self (SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder") [] [ SC ].
    
    (*
        fn new(pcs: &SC::Pcs, rap_phase_seq_kind: RapPhaseSeqKind, air: Arc<dyn AnyRap<SC>>) -> Self {
            let prep_keygen_data = compute_prep_data_for_air(pcs, air.as_ref());
            AirKeygenBuilder {
                air,
                rap_phase_seq_kind,
                prep_keygen_data,
            }
        }
    *)
    Definition new (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ pcs; rap_phase_seq_kind; air ] =>
        ltac:(M.monadic
          (let pcs :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Pcs"
                ],
              pcs
            |) in
          let rap_phase_seq_kind :=
            M.alloc (|
              Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind",
              rap_phase_seq_kind
            |) in
          let air :=
            M.alloc (|
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ],
              air
            |) in
          M.read (|
            let~ prep_keygen_data :
                Ty.apply (Ty.path "openvm_stark_backend::keygen::PrepKeygenData") [] [ SC ] :=
              M.call_closure (|
                Ty.apply (Ty.path "openvm_stark_backend::keygen::PrepKeygenData") [] [ SC ],
                M.get_function (|
                  "openvm_stark_backend::keygen::compute_prep_data_for_air",
                  [],
                  [ SC ]
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| pcs |) |) |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ] ])
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ] ],
                            M.get_trait_method (|
                              "core::convert::AsRef",
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [ Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ] ],
                              "as_ref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, air |) ]
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |) in
            M.alloc (|
              Ty.apply (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder") [] [ SC ],
              Value.mkStructRecord
                "openvm_stark_backend::keygen::AirKeygenBuilder"
                []
                [ SC ]
                [
                  ("air",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                            Ty.path "alloc::alloc::Global"
                          ])
                        (Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                            Ty.path "alloc::alloc::Global"
                          ]),
                      [ M.read (| air |) ]
                    |));
                  ("rap_phase_seq_kind", M.read (| rap_phase_seq_kind |));
                  ("prep_keygen_data", M.read (| prep_keygen_data |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (SC : Ty.t),
      M.IsAssociatedFunction.C (Self SC) "new" (new SC).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        fn max_constraint_degree(&self) -> usize {
            self.get_symbolic_builder(None)
                .constraints()
                .max_constraint_degree()
        }
    *)
    Definition max_constraint_degree
        (SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder") [] [ SC ] ],
              self
            |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_associated_function (|
              Ty.apply
                (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                []
                [
                  Ty.associated_in_trait
                    "p3_commit::domain::PolynomialSpace"
                    []
                    []
                    (Ty.associated_in_trait
                      "p3_commit::pcs::Pcs"
                      []
                      [
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ]
                      (Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Pcs")
                      "Domain")
                    "Val"
                ],
              "max_constraint_degree",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ],
                      "constraints",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder")
                            []
                            [ SC ],
                          "get_symbolic_builder",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                          Value.StructTuple "core::option::Option::None" [] [ Ty.path "usize" ] []
                        ]
                      |)
                    ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_max_constraint_degree :
      forall (SC : Ty.t),
      M.IsAssociatedFunction.C (Self SC) "max_constraint_degree" (max_constraint_degree SC).
    Admitted.
    Global Typeclasses Opaque max_constraint_degree.
    
    (*
        fn generate_pk(
            self,
            rap_partial_pk: RapPartialProvingKey<SC>,
            max_constraint_degree: usize,
        ) -> StarkProvingKey<SC> {
            let air_name = self.air.name();
    
            let symbolic_builder = self.get_symbolic_builder(Some(max_constraint_degree));
            let params = symbolic_builder.params();
            let symbolic_constraints = symbolic_builder.constraints();
            let log_quotient_degree = symbolic_constraints.get_log_quotient_degree();
            let quotient_degree = 1 << log_quotient_degree;
    
            let Self {
                prep_keygen_data:
                    PrepKeygenData {
                        verifier_data: prep_verifier_data,
                        prover_data: prep_prover_data,
                    },
                ..
            } = self;
    
            let vk: StarkVerifyingKey<Val<SC>, Com<SC>> = StarkVerifyingKey {
                preprocessed_data: prep_verifier_data,
                params,
                symbolic_constraints: symbolic_constraints.into(),
                quotient_degree,
                rap_phase_seq_kind: self.rap_phase_seq_kind,
            };
            StarkProvingKey {
                air_name,
                vk,
                preprocessed_data: prep_prover_data,
                rap_partial_pk,
            }
        }
    *)
    Definition generate_pk (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self; rap_partial_pk; max_constraint_degree ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder") [] [ SC ],
              self
            |) in
          let rap_partial_pk :=
            M.alloc (|
              Ty.associated_in_trait
                "openvm_stark_backend::interaction::RapPhaseSeq"
                []
                [
                  Ty.associated_in_trait
                    "p3_commit::domain::PolynomialSpace"
                    []
                    []
                    (Ty.associated_in_trait
                      "p3_commit::pcs::Pcs"
                      []
                      [
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ]
                      (Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Pcs")
                      "Domain")
                    "Val";
                  Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Challenge";
                  Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Challenger"
                ]
                (Ty.associated_in_trait
                  "openvm_stark_backend::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "RapPhaseSeq")
                "PartialProvingKey",
              rap_partial_pk
            |) in
          let max_constraint_degree := M.alloc (| Ty.path "usize", max_constraint_degree |) in
          M.read (|
            let~ air_name : Ty.path "alloc::string::String" :=
              M.call_closure (|
                Ty.path "alloc::string::String",
                M.get_trait_method (|
                  "openvm_stark_backend::rap::AnyRap",
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ],
                  [],
                  [ SC ],
                  "name",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ] ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "openvm_stark_backend::keygen::AirKeygenBuilder",
                              "air"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |) in
            let~ symbolic_builder :
                Ty.apply
                  (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val"
                  ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder") [] [ SC ],
                  "get_symbolic_builder",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, self |);
                  Value.StructTuple
                    "core::option::Option::Some"
                    []
                    [ Ty.path "usize" ]
                    [ M.read (| max_constraint_degree |) ]
                ]
              |) in
            let~ params : Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingParams" :=
              M.call_closure (|
                Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingParams",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ],
                  "params",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, symbolic_builder |) ]
              |) in
            let~ symbolic_constraints :
                Ty.apply
                  (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val"
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ],
                  "constraints",
                  [],
                  []
                |),
                [ M.read (| symbolic_builder |) ]
              |) in
            let~ log_quotient_degree : Ty.path "usize" :=
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ],
                  "get_log_quotient_degree",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, symbolic_constraints |) ]
              |) in
            let~ quotient_degree : Ty.path "u8" :=
              M.call_closure (|
                Ty.path "u8",
                BinOp.Wrap.shl,
                [ Value.Integer IntegerKind.U8 1; M.read (| log_quotient_degree |) ]
              |) in
            M.alloc (|
              Ty.apply (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey") [] [ SC ],
              M.match_operator (|
                Ty.apply (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey") [] [ SC ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_stark_backend::keygen::AirKeygenBuilder",
                          "prep_keygen_data"
                        |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "openvm_stark_backend::keygen::PrepKeygenData",
                          "verifier_data"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "openvm_stark_backend::keygen::PrepKeygenData",
                          "prover_data"
                        |) in
                      let prep_verifier_data :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Commitment"
                                ]
                            ],
                          γ1_0
                        |) in
                      let prep_prover_data :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                                []
                                [ SC ]
                            ],
                          γ1_1
                        |) in
                      M.read (|
                        let~ vk :
                            Ty.apply
                              (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val";
                                Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Commitment"
                              ] :=
                          Value.mkStructRecord
                            "openvm_stark_backend::keygen::types::StarkVerifyingKey"
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val";
                              Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Commitment"
                            ]
                            [
                              ("preprocessed_data", M.read (| prep_verifier_data |));
                              ("params", M.read (| params |));
                              ("symbolic_constraints",
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val"
                                    ],
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::air_builders::symbolic::SymbolicConstraints")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::air_builders::symbolic::dag::SymbolicConstraintsDag")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ]
                                    ],
                                    "into",
                                    [],
                                    []
                                  |),
                                  [ M.read (| symbolic_constraints |) ]
                                |));
                              ("quotient_degree", M.read (| quotient_degree |));
                              ("rap_phase_seq_kind",
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "openvm_stark_backend::keygen::AirKeygenBuilder",
                                    "rap_phase_seq_kind"
                                  |)
                                |))
                            ] in
                        M.alloc (|
                          Ty.apply
                            (Ty.path "openvm_stark_backend::keygen::types::StarkProvingKey")
                            []
                            [ SC ],
                          Value.mkStructRecord
                            "openvm_stark_backend::keygen::types::StarkProvingKey"
                            []
                            [ SC ]
                            [
                              ("air_name", M.read (| air_name |));
                              ("vk", M.read (| vk |));
                              ("preprocessed_data", M.read (| prep_prover_data |));
                              ("rap_partial_pk", M.read (| rap_partial_pk |))
                            ]
                        |)
                      |)))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_generate_pk :
      forall (SC : Ty.t),
      M.IsAssociatedFunction.C (Self SC) "generate_pk" (generate_pk SC).
    Admitted.
    Global Typeclasses Opaque generate_pk.
    
    (*
        fn get_symbolic_builder(
            &self,
            max_constraint_degree: Option<usize>,
        ) -> SymbolicRapBuilder<Val<SC>> {
            let width = TraceWidth {
                preprocessed: self.prep_keygen_data.width(),
                cached_mains: self.air.cached_main_widths(),
                common_main: self.air.common_main_width(),
                after_challenge: vec![],
            };
            get_symbolic_builder(
                self.air.as_ref(),
                &width,
                &[],
                &[],
                SC::RapPhaseSeq::ID,
                max_constraint_degree.unwrap_or(0),
            )
        }
    *)
    Definition get_symbolic_builder
        (SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self; max_constraint_degree ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::keygen::AirKeygenBuilder") [] [ SC ] ],
              self
            |) in
          let max_constraint_degree :=
            M.alloc (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
              max_constraint_degree
            |) in
          M.read (|
            let~ width : Ty.path "openvm_stark_backend::keygen::types::TraceWidth" :=
              Value.mkStructRecord
                "openvm_stark_backend::keygen::types::TraceWidth"
                []
                []
                [
                  ("preprocessed",
                    M.call_closure (|
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "openvm_stark_backend::keygen::PrepKeygenData") [] [ SC ],
                        "width",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::keygen::AirKeygenBuilder",
                            "prep_keygen_data"
                          |)
                        |)
                      ]
                    |));
                  ("cached_mains",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "openvm_stark_backend::rap::PartitionedBaseAir",
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ],
                        [],
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ],
                        "cached_main_widths",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ] ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_stark_backend::keygen::AirKeygenBuilder",
                                    "air"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("common_main",
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::rap::PartitionedBaseAir",
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ],
                        [],
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ],
                        "common_main_width",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ] ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_stark_backend::keygen::AirKeygenBuilder",
                                    "air"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("after_challenge",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                        "new",
                        [],
                        []
                      |),
                      []
                    |))
                ] in
            M.alloc (|
              Ty.apply
                (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                []
                [
                  Ty.associated_in_trait
                    "p3_commit::domain::PolynomialSpace"
                    []
                    []
                    (Ty.associated_in_trait
                      "p3_commit::pcs::Pcs"
                      []
                      [
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ]
                      (Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Pcs")
                      "Domain")
                    "Val"
                ],
              M.call_closure (|
                Ty.apply
                  (Ty.path "openvm_stark_backend::air_builders::symbolic::SymbolicRapBuilder")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val"
                  ],
                M.get_function (|
                  "openvm_stark_backend::air_builders::symbolic::get_symbolic_builder",
                  [],
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val";
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ]
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ] ],
                        M.get_trait_method (|
                          "core::convert::AsRef",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [ Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ] ],
                          "as_ref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::keygen::AirKeygenBuilder",
                              "air"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, width |) |)
                  |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 0 ]
                            [ Ty.path "usize" ]
                        ])
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 0 ]
                                [ Ty.path "usize" ],
                              Value.Array []
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 0 ]
                            [ Ty.path "usize" ]
                        ])
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 0 ]
                                [ Ty.path "usize" ],
                              Value.Array []
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.read (|
                    get_constant (|
                      "openvm_stark_backend::interaction::RapPhaseSeq::ID",
                      Ty.path "openvm_stark_backend::interaction::RapPhaseSeqKind"
                    |)
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                      "unwrap_or",
                      [],
                      []
                    |),
                    [ M.read (| max_constraint_degree |); Value.Integer IntegerKind.Usize 0 ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get_symbolic_builder :
      forall (SC : Ty.t),
      M.IsAssociatedFunction.C (Self SC) "get_symbolic_builder" (get_symbolic_builder SC).
    Admitted.
    Global Typeclasses Opaque get_symbolic_builder.
  End Impl_openvm_stark_backend_keygen_AirKeygenBuilder_SC.
  
  (* StructRecord
    {
      name := "PrepKeygenData";
      const_params := [];
      ty_params := [ "SC" ];
      fields :=
        [
          ("verifier_data",
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [
                Ty.apply
                  (Ty.path "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::pcs::Pcs"
                      []
                      [
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ]
                      (Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Pcs")
                      "Commitment"
                  ]
              ]);
          ("prover_data",
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [
                Ty.apply
                  (Ty.path "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                  []
                  [ SC ]
              ])
        ];
    } *)
  
  Module Impl_openvm_stark_backend_keygen_PrepKeygenData_SC.
    Definition Self (SC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_stark_backend::keygen::PrepKeygenData") [] [ SC ].
    
    (*
        pub fn width(&self) -> Option<usize> {
            self.prover_data.as_ref().map(|d| d.trace.width())
        }
    *)
    Definition width (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::keygen::PrepKeygenData") [] [ SC ] ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                        []
                        [ SC ]
                    ]
                ],
              "map",
              [],
              [
                Ty.path "usize";
                Ty.function
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                          []
                          [ SC ]
                      ]
                  ]
                  (Ty.path "usize")
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                          []
                          [ SC ]
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                        []
                        [ SC ]
                    ],
                  "as_ref",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_stark_backend::keygen::PrepKeygenData",
                      "prover_data"
                    |)
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.path "usize",
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                                  []
                                  [ SC ]
                              ],
                            α0
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let d :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                                          []
                                          [ SC ]
                                      ],
                                    γ
                                  |) in
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_trait_method (|
                                    "p3_matrix::Matrix",
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val";
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val"
                                    ],
                                    "width",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val";
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val";
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| d |) |),
                                                "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData",
                                                "trace"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_width :
      forall (SC : Ty.t),
      M.IsAssociatedFunction.C (Self SC) "width" (width SC).
    Admitted.
    Global Typeclasses Opaque width.
  End Impl_openvm_stark_backend_keygen_PrepKeygenData_SC.
  
  (*
  fn compute_prep_data_for_air<SC: StarkGenericConfig>(
      pcs: &SC::Pcs,
      air: &dyn AnyRap<SC>,
  ) -> PrepKeygenData<SC> {
      let preprocessed_trace = air.preprocessed_trace();
      let vpdata_opt = preprocessed_trace.map(|trace| {
          let domain = pcs.natural_domain_for_degree(trace.height());
          let (commit, data) = pcs.commit(vec![(domain, trace.clone())]);
          let vdata = VerifierSinglePreprocessedData { commit };
          let pdata = ProverOnlySinglePreprocessedData {
              trace: Arc::new(trace),
              data: Arc::new(data),
          };
          (vdata, pdata)
      });
      if let Some((vdata, pdata)) = vpdata_opt {
          PrepKeygenData {
              prover_data: Some(pdata),
              verifier_data: Some(vdata),
          }
      } else {
          PrepKeygenData {
              prover_data: None,
              verifier_data: None,
          }
      }
  }
  *)
  Definition compute_prep_data_for_air (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ SC ], [ pcs; air ] =>
      ltac:(M.monadic
        (let pcs :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.associated_in_trait
                  "openvm_stark_backend::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Pcs"
              ],
            pcs
          |) in
        let air :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [ Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ] ],
            air
          |) in
        M.read (|
          let~ preprocessed_trace :
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val";
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val";
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                ] :=
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val";
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val";
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                ],
              M.get_trait_method (|
                "p3_air::air::BaseAir",
                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ],
                [],
                [
                  Ty.associated_in_trait
                    "p3_commit::domain::PolynomialSpace"
                    []
                    []
                    (Ty.associated_in_trait
                      "p3_commit::pcs::Pcs"
                      []
                      [
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ]
                      (Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Pcs")
                      "Domain")
                    "Val"
                ],
                "preprocessed_trace",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| air |) |) |) ]
            |) in
          let~ vpdata_opt :
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Commitment"
                        ];
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                        []
                        [ SC ]
                    ]
                ] :=
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Commitment"
                        ];
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                        []
                        [ SC ]
                    ]
                ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val";
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                  ],
                "map",
                [],
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Commitment"
                        ];
                      Ty.apply
                        (Ty.path
                          "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                        []
                        [ SC ]
                    ];
                  Ty.function
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val";
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val";
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                    ]
                    (Ty.tuple
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Commitment"
                          ];
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                          []
                          [ SC ]
                      ])
                ]
              |),
              [
                M.read (| preprocessed_trace |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Commitment"
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                                  []
                                  [ SC ]
                              ],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val";
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              α0
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let trace :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val";
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val";
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      γ
                                    |) in
                                  M.read (|
                                    let~ domain :
                                        Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain" :=
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain",
                                        M.get_trait_method (|
                                          "p3_commit::pcs::Pcs",
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ],
                                          "natural_domain_for_degree",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| pcs |) |)
                                          |);
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "p3_matrix::Matrix",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val";
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              [],
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ],
                                              "height",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, trace |) ]
                                          |)
                                        ]
                                      |) in
                                    M.alloc (|
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Commitment"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                                            []
                                            [ SC ]
                                        ],
                                      M.match_operator (|
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Commitment"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                                              []
                                              [ SC ]
                                          ],
                                        M.alloc (|
                                          Ty.tuple
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Commitment";
                                              Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "ProverData"
                                            ],
                                          M.call_closure (|
                                            Ty.tuple
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Commitment";
                                                Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "ProverData"
                                              ],
                                            M.get_trait_method (|
                                              "p3_commit::pcs::Pcs",
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs",
                                              [],
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ],
                                              "commit",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| pcs |) |)
                                              |);
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain";
                                                        Ty.apply
                                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val";
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_commit::domain::PolynomialSpace"
                                                                  []
                                                                  []
                                                                  (Ty.associated_in_trait
                                                                    "p3_commit::pcs::Pcs"
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenge";
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenger"
                                                                    ]
                                                                    (Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Pcs")
                                                                    "Domain")
                                                                  "Val";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain";
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_matrix::dense::DenseMatrix")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val";
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ]
                                                    ],
                                                  "into_vec",
                                                  [],
                                                  [ Ty.path "alloc::alloc::Global" ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain";
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val";
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_commit::domain::PolynomialSpace"
                                                                          []
                                                                          []
                                                                          (Ty.associated_in_trait
                                                                            "p3_commit::pcs::Pcs"
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenge";
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenger"
                                                                            ]
                                                                            (Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Pcs")
                                                                            "Domain")
                                                                          "Val";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    M.pointer_coercion
                                                      M.PointerCoercion.Unsize
                                                      (Ty.apply
                                                        (Ty.path "alloc::boxed::Box")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 1 ]
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::pcs::Pcs"
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenge";
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenger"
                                                                    ]
                                                                    (Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Pcs")
                                                                    "Domain";
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val";
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ])
                                                      (Ty.apply
                                                        (Ty.path "alloc::boxed::Box")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::pcs::Pcs"
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenge";
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenger"
                                                                    ]
                                                                    (Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Pcs")
                                                                    "Domain";
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val";
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]),
                                                    [
                                                      M.read (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "alloc::boxed::Box")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 1
                                                                ]
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain";
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_matrix::dense::DenseMatrix")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val";
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                []
                                                                                []
                                                                                (Ty.associated_in_trait
                                                                                  "p3_commit::pcs::Pcs"
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenge";
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenger"
                                                                                  ]
                                                                                  (Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Pcs")
                                                                                  "Domain")
                                                                                "Val";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain";
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_matrix::dense::DenseMatrix")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::domain::PolynomialSpace"
                                                                              []
                                                                              []
                                                                              (Ty.associated_in_trait
                                                                                "p3_commit::pcs::Pcs"
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenge";
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenger"
                                                                                ]
                                                                                (Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Pcs")
                                                                                "Domain")
                                                                              "Val";
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                  []
                                                                                  []
                                                                                  (Ty.associated_in_trait
                                                                                    "p3_commit::pcs::Pcs"
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenge";
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenger"
                                                                                    ]
                                                                                    (Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Pcs")
                                                                                    "Domain")
                                                                                  "Val";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 1
                                                                ]
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain";
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_matrix::dense::DenseMatrix")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val";
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                []
                                                                                []
                                                                                (Ty.associated_in_trait
                                                                                  "p3_commit::pcs::Pcs"
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenge";
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenger"
                                                                                  ]
                                                                                  (Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Pcs")
                                                                                  "Domain")
                                                                                "Val";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ],
                                                              Value.Array
                                                                [
                                                                  Value.Tuple
                                                                    [
                                                                      M.read (| domain |);
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_matrix::dense::DenseMatrix")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::domain::PolynomialSpace"
                                                                              []
                                                                              []
                                                                              (Ty.associated_in_trait
                                                                                "p3_commit::pcs::Pcs"
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenge";
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenger"
                                                                                ]
                                                                                (Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Pcs")
                                                                                "Domain")
                                                                              "Val";
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                  []
                                                                                  []
                                                                                  (Ty.associated_in_trait
                                                                                    "p3_commit::pcs::Pcs"
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenge";
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenger"
                                                                                    ]
                                                                                    (Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Pcs")
                                                                                    "Domain")
                                                                                  "Val";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::clone::Clone",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_matrix::dense::DenseMatrix")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                []
                                                                                []
                                                                                (Ty.associated_in_trait
                                                                                  "p3_commit::pcs::Pcs"
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenge";
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenger"
                                                                                  ]
                                                                                  (Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Pcs")
                                                                                  "Domain")
                                                                                "Val";
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "p3_commit::domain::PolynomialSpace"
                                                                                    []
                                                                                    []
                                                                                    (Ty.associated_in_trait
                                                                                      "p3_commit::pcs::Pcs"
                                                                                      []
                                                                                      [
                                                                                        Ty.associated_in_trait
                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                          []
                                                                                          []
                                                                                          SC
                                                                                          "Challenge";
                                                                                        Ty.associated_in_trait
                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                          []
                                                                                          []
                                                                                          SC
                                                                                          "Challenger"
                                                                                      ]
                                                                                      (Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Pcs")
                                                                                      "Domain")
                                                                                    "Val";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "clone",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            trace
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                ]
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let commit :=
                                                M.copy (|
                                                  Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Commitment",
                                                  γ0_0
                                                |) in
                                              let data :=
                                                M.copy (|
                                                  Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "ProverData",
                                                  γ0_1
                                                |) in
                                              M.read (|
                                                let~ vdata :
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Commitment"
                                                      ] :=
                                                  Value.mkStructRecord
                                                    "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Commitment"
                                                    ]
                                                    [ ("commit", M.read (| commit |)) ] in
                                                let~ pdata :
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                                                      []
                                                      [ SC ] :=
                                                  Value.mkStructRecord
                                                    "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData"
                                                    []
                                                    [ SC ]
                                                    [
                                                      ("trace",
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_matrix::dense::DenseMatrix")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val";
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val";
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_commit::domain::PolynomialSpace"
                                                                          []
                                                                          []
                                                                          (Ty.associated_in_trait
                                                                            "p3_commit::pcs::Pcs"
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenge";
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenger"
                                                                            ]
                                                                            (Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Pcs")
                                                                            "Domain")
                                                                          "Val";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.read (| trace |) ]
                                                        |));
                                                      ("data",
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "ProverData";
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "ProverData";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.read (| data |) ]
                                                        |))
                                                    ] in
                                                M.alloc (|
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Commitment"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                                                        []
                                                        [ SC ]
                                                    ],
                                                  Value.Tuple
                                                    [ M.read (| vdata |); M.read (| pdata |) ]
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |)
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |) in
          M.alloc (|
            Ty.apply (Ty.path "openvm_stark_backend::keygen::PrepKeygenData") [] [ SC ],
            M.match_operator (|
              Ty.apply (Ty.path "openvm_stark_backend::keygen::PrepKeygenData") [] [ SC ],
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := vpdata_opt in
                    let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                    let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                    let vdata :=
                      M.copy (|
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Commitment"
                          ],
                        γ1_0
                      |) in
                    let pdata :=
                      M.copy (|
                        Ty.apply
                          (Ty.path
                            "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                          []
                          [ SC ],
                        γ1_1
                      |) in
                    Value.mkStructRecord
                      "openvm_stark_backend::keygen::PrepKeygenData"
                      []
                      [ SC ]
                      [
                        ("prover_data",
                          Value.StructTuple
                            "core::option::Option::Some"
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                                []
                                [ SC ]
                            ]
                            [ M.read (| pdata |) ]);
                        ("verifier_data",
                          Value.StructTuple
                            "core::option::Option::Some"
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Commitment"
                                ]
                            ]
                            [ M.read (| vdata |) ])
                      ]));
                fun γ =>
                  ltac:(M.monadic
                    (Value.mkStructRecord
                      "openvm_stark_backend::keygen::PrepKeygenData"
                      []
                      [ SC ]
                      [
                        ("prover_data",
                          Value.StructTuple
                            "core::option::Option::None"
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::keygen::types::ProverOnlySinglePreprocessedData")
                                []
                                [ SC ]
                            ]
                            []);
                        ("verifier_data",
                          Value.StructTuple
                            "core::option::Option::None"
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Commitment"
                                ]
                            ]
                            [])
                      ]))
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_compute_prep_data_for_air :
    M.IsFunction.C
      "openvm_stark_backend::keygen::compute_prep_data_for_air"
      compute_prep_data_for_air.
  Admitted.
  Global Typeclasses Opaque compute_prep_data_for_air.
End keygen.
