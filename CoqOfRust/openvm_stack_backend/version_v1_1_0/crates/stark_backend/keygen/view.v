(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module keygen.
  Module view.
    (* StructRecord
      {
        name := "MultiStarkVerifyingKeyView";
        const_params := [];
        ty_params := [ "Val"; "Com" ];
        fields :=
          [
            ("per_air",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                        []
                        [ Val; Com ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("trace_height_constraints",
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "slice")
                    []
                    [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ]
                ]);
            ("pre_hash", Com)
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_Val_where_core_clone_Clone_Com_for_openvm_stark_backend_keygen_view_MultiStarkVerifyingKeyView_Val_Com.
      Definition Self (Val Com : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView")
          []
          [ Val; Com ].
      
      (* Clone *)
      Definition clone (Val Com : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self Val Com in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView")
                      []
                      [ Val; Com ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView"
              []
              [ Val; Com ]
              [
                ("per_air",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                              []
                              [ Val; Com ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                []
                                [ Val; Com ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView",
                              "per_air"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("trace_height_constraints",
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ]
                          ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ]
                            ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView",
                                  "trace_height_constraints"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |));
                ("pre_hash",
                  M.call_closure (|
                    Com,
                    M.get_trait_method (| "core::clone::Clone", Com, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView",
                              "pre_hash"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (Val Com : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self Val Com)
          (* Instance *) [ ("clone", InstanceField.Method (clone Val Com)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_Val_where_core_clone_Clone_Com_for_openvm_stark_backend_keygen_view_MultiStarkVerifyingKeyView_Val_Com.
    
    Module Impl_openvm_stark_backend_keygen_view_MultiStarkVerifyingKeyView_Val_Com.
      Definition Self (Val Com : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView")
          []
          [ Val; Com ].
      
      (* derive_new::new *)
      Definition new (Val Com : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self Val Com in
        match ε, τ, α with
        | [], [], [ per_air; trace_height_constraints; pre_hash ] =>
          ltac:(M.monadic
            (let per_air :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                          []
                          [ Val; Com ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                per_air
              |) in
            let trace_height_constraints :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ]
                  ],
                trace_height_constraints
              |) in
            let pre_hash := M.alloc (| Com, pre_hash |) in
            Value.mkStructRecord
              "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView"
              []
              [ Val; Com ]
              [
                ("per_air", M.read (| per_air |));
                ("trace_height_constraints",
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.read (| trace_height_constraints |) |)
                  |));
                ("pre_hash", M.read (| pre_hash |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (Val Com : Ty.t),
        M.IsAssociatedFunction.C (Self Val Com) "new" (new Val Com).
      Admitted.
      Global Typeclasses Opaque new.
      (*
          pub fn preprocessed_commits(&self) -> Vec<Option<Com>> {
              self.per_air
                  .iter()
                  .map(|vk| {
                      vk.preprocessed_data
                          .as_ref()
                          .map(|data| data.commit.clone())
                  })
                  .collect()
          }
      *)
      Definition preprocessed_commits
          (Val Com : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self Val Com in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView")
                      []
                      [ Val; Com ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply (Ty.path "core::option::Option") [] [ Com ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                              []
                              [ Val; Com ]
                          ]
                      ];
                    Ty.function
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                  []
                                  [ Val; Com ]
                              ]
                          ]
                      ]
                      (Ty.apply (Ty.path "core::option::Option") [] [ Com ])
                  ],
                [],
                [],
                "collect",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply (Ty.path "core::option::Option") [] [ Com ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                []
                                [ Val; Com ]
                            ]
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                    []
                                    [ Val; Com ]
                                ]
                            ]
                        ]
                        (Ty.apply (Ty.path "core::option::Option") [] [ Com ])
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                              []
                              [ Val; Com ]
                          ]
                      ],
                    [],
                    [],
                    "map",
                    [],
                    [
                      Ty.apply (Ty.path "core::option::Option") [] [ Com ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                    []
                                    [ Val; Com ]
                                ]
                            ]
                        ]
                        (Ty.apply (Ty.path "core::option::Option") [] [ Com ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                []
                                [ Val; Com ]
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                  []
                                  [ Val; Com ]
                              ]
                          ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                            []
                                            [ Val; Com ]
                                        ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                          []
                                          [ Val; Com ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView",
                                    "per_air"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Com ],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                            []
                                            [ Val; Com ]
                                        ]
                                    ],
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let vk :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                    []
                                                    [ Val; Com ]
                                                ]
                                            ],
                                          γ
                                        |) in
                                      M.call_closure (|
                                        Ty.apply (Ty.path "core::option::Option") [] [ Com ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                                    []
                                                    [ Com ]
                                                ]
                                            ],
                                          "map",
                                          [],
                                          [
                                            Com;
                                            Ty.function
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                                      []
                                                      [ Com ]
                                                  ]
                                              ]
                                              Com
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                                      []
                                                      [ Com ]
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                                    []
                                                    [ Com ]
                                                ],
                                              "as_ref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (|
                                                    M.read (| M.deref (| M.read (| vk |) |) |)
                                                  |),
                                                  "openvm_stark_backend::keygen::types::StarkVerifyingKey",
                                                  "preprocessed_data"
                                                |)
                                              |)
                                            ]
                                          |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      Com,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                                              []
                                                              [ Com ]
                                                          ],
                                                        α0
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let data :=
                                                              M.copy (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData")
                                                                      []
                                                                      [ Com ]
                                                                  ],
                                                                γ
                                                              |) in
                                                            M.call_closure (|
                                                              Com,
                                                              M.get_trait_method (|
                                                                "core::clone::Clone",
                                                                Com,
                                                                [],
                                                                [],
                                                                "clone",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (| M.read (| data |) |),
                                                                    "openvm_stark_backend::keygen::types::VerifierSinglePreprocessedData",
                                                                    "commit"
                                                                  |)
                                                                |)
                                                              ]
                                                            |)))
                                                      ]
                                                    |)))
                                                | _ => M.impossible "wrong number of arguments"
                                                end))
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_preprocessed_commits :
        forall (Val Com : Ty.t),
        M.IsAssociatedFunction.C
          (Self Val Com)
          "preprocessed_commits"
          (preprocessed_commits Val Com).
      Admitted.
      Global Typeclasses Opaque preprocessed_commits.
      
      (*
          pub fn flattened_preprocessed_commits(&self) -> Vec<Com> {
              self.preprocessed_commits().into_iter().flatten().collect()
          }
      *)
      Definition flattened_preprocessed_commits
          (Val Com : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self Val Com in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView")
                      []
                      [ Val; Com ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ Com; Ty.path "alloc::alloc::Global" ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::flatten::Flatten")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [
                        Ty.apply (Ty.path "core::option::Option") [] [ Com ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ],
                [],
                [],
                "collect",
                [],
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ Com; Ty.path "alloc::alloc::Global" ] ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::flatten::Flatten")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply (Ty.path "core::option::Option") [] [ Com ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [
                        Ty.apply (Ty.path "core::option::Option") [] [ Com ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "flatten",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply (Ty.path "core::option::Option") [] [ Com ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply (Ty.path "core::option::Option") [] [ Com ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply (Ty.path "core::option::Option") [] [ Com ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView")
                              []
                              [ Val; Com ],
                            "preprocessed_commits",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_flattened_preprocessed_commits :
        forall (Val Com : Ty.t),
        M.IsAssociatedFunction.C
          (Self Val Com)
          "flattened_preprocessed_commits"
          (flattened_preprocessed_commits Val Com).
      Admitted.
      Global Typeclasses Opaque flattened_preprocessed_commits.
      
      (*
          pub fn num_phases(&self) -> usize {
              self.per_air
                  .iter()
                  .map(|vk| {
                      // Consistency check
                      let num = vk.params.width.after_challenge.len();
                      assert_eq!(num, vk.params.num_challenges_to_sample.len());
                      assert_eq!(num, vk.params.num_exposed_values_after_challenge.len());
                      num
                  })
                  .max()
                  .unwrap_or(0)
          }
      *)
      Definition num_phases
          (Val Com : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self Val Com in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView")
                      []
                      [ Val; Com ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                "unwrap_or",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                  []
                                  [ Val; Com ]
                              ]
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                      []
                                      [ Val; Com ]
                                  ]
                              ]
                          ]
                          (Ty.path "usize")
                      ],
                    [],
                    [],
                    "max",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                    []
                                    [ Val; Com ]
                                ]
                            ];
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                        []
                                        [ Val; Com ]
                                    ]
                                ]
                            ]
                            (Ty.path "usize")
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                  []
                                  [ Val; Com ]
                              ]
                          ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.path "usize";
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                        []
                                        [ Val; Com ]
                                    ]
                                ]
                            ]
                            (Ty.path "usize")
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                    []
                                    [ Val; Com ]
                                ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                      []
                                      [ Val; Com ]
                                  ]
                              ],
                            "iter",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                []
                                                [ Val; Com ]
                                            ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                              []
                                              [ Val; Com ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView",
                                        "per_air"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.path "usize",
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                []
                                                [ Val; Com ]
                                            ]
                                        ],
                                      α0
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let vk :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                        []
                                                        [ Val; Com ]
                                                    ]
                                                ],
                                              γ
                                            |) in
                                          M.read (|
                                            let~ num : Ty.path "usize" :=
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (|
                                                            M.read (|
                                                              M.deref (| M.read (| vk |) |)
                                                            |)
                                                          |),
                                                          "openvm_stark_backend::keygen::types::StarkVerifyingKey",
                                                          "params"
                                                        |),
                                                        "openvm_stark_backend::keygen::types::StarkVerifyingParams",
                                                        "width"
                                                      |),
                                                      "openvm_stark_backend::keygen::types::TraceWidth",
                                                      "after_challenge"
                                                    |)
                                                  |)
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (|
                                                  Ty.tuple
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                    ],
                                                  Value.Tuple
                                                    [
                                                      M.borrow (| Pointer.Kind.Ref, num |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.path "usize",
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "len",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (|
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| vk |)
                                                                        |)
                                                                      |)
                                                                    |),
                                                                    "openvm_stark_backend::keygen::types::StarkVerifyingKey",
                                                                    "params"
                                                                  |),
                                                                  "openvm_stark_backend::keygen::types::StarkVerifyingParams",
                                                                  "num_challenges_to_sample"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let left_val :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          γ0_0
                                                        |) in
                                                      let right_val :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          γ0_1
                                                        |) in
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    Ty.path "bool",
                                                                    UnOp.not (|
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        BinOp.eq,
                                                                        [
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |);
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  let~ kind :
                                                                      Ty.path
                                                                        "core::panicking::AssertKind" :=
                                                                    Value.StructTuple
                                                                      "core::panicking::AssertKind::Eq"
                                                                      []
                                                                      []
                                                                      [] in
                                                                  M.alloc (|
                                                                    Ty.path "never",
                                                                    M.call_closure (|
                                                                      Ty.path "never",
                                                                      M.get_function (|
                                                                        "core::panicking::assert_failed",
                                                                        [],
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.path "usize"
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.read (| kind |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  left_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  right_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        Value.StructTuple
                                                                          "core::option::Option::None"
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "core::fmt::Arguments"
                                                                          ]
                                                                          []
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                                        ]
                                                      |)))
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (|
                                                  Ty.tuple
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                    ],
                                                  Value.Tuple
                                                    [
                                                      M.borrow (| Pointer.Kind.Ref, num |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.path "usize",
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "len",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (|
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| vk |)
                                                                        |)
                                                                      |)
                                                                    |),
                                                                    "openvm_stark_backend::keygen::types::StarkVerifyingKey",
                                                                    "params"
                                                                  |),
                                                                  "openvm_stark_backend::keygen::types::StarkVerifyingParams",
                                                                  "num_exposed_values_after_challenge"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let left_val :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          γ0_0
                                                        |) in
                                                      let right_val :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          γ0_1
                                                        |) in
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    Ty.path "bool",
                                                                    UnOp.not (|
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        BinOp.eq,
                                                                        [
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |);
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  let~ kind :
                                                                      Ty.path
                                                                        "core::panicking::AssertKind" :=
                                                                    Value.StructTuple
                                                                      "core::panicking::AssertKind::Eq"
                                                                      []
                                                                      []
                                                                      [] in
                                                                  M.alloc (|
                                                                    Ty.path "never",
                                                                    M.call_closure (|
                                                                      Ty.path "never",
                                                                      M.get_function (|
                                                                        "core::panicking::assert_failed",
                                                                        [],
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.path "usize"
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.read (| kind |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  left_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  right_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        Value.StructTuple
                                                                          "core::option::Option::None"
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "core::fmt::Arguments"
                                                                          ]
                                                                          []
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                                        ]
                                                      |)))
                                                ]
                                              |) in
                                            num
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |);
                Value.Integer IntegerKind.Usize 0
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_num_phases :
        forall (Val Com : Ty.t),
        M.IsAssociatedFunction.C (Self Val Com) "num_phases" (num_phases Val Com).
      Admitted.
      Global Typeclasses Opaque num_phases.
      
      (*
          pub fn num_challenges_per_phase(&self) -> Vec<usize> {
              let num_phases = self.num_phases();
              (0..num_phases)
                  .map(|phase_idx| self.num_challenges_in_phase(phase_idx))
                  .collect()
          }
      *)
      Definition num_challenges_per_phase
          (Val Com : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self Val Com in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView")
                      []
                      [ Val; Com ]
                  ],
                self
              |) in
            M.read (|
              let~ num_phases : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView")
                      []
                      [ Val; Com ],
                    "num_phases",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function [ Ty.path "usize" ] (Ty.path "usize")
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                          Ty.function [ Ty.path "usize" ] (Ty.path "usize")
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "map",
                        [],
                        [ Ty.path "usize"; Ty.function [ Ty.path "usize" ] (Ty.path "usize") ]
                      |),
                      [
                        Value.mkStructRecord
                          "core::ops::range::Range"
                          []
                          [ Ty.path "usize" ]
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_", M.read (| num_phases |))
                          ];
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.path "usize",
                                    M.alloc (| Ty.path "usize", α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let phase_idx := M.copy (| Ty.path "usize", γ |) in
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView")
                                                []
                                                [ Val; Com ],
                                              "num_challenges_in_phase",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| self |) |)
                                              |);
                                              M.read (| phase_idx |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_num_challenges_per_phase :
        forall (Val Com : Ty.t),
        M.IsAssociatedFunction.C
          (Self Val Com)
          "num_challenges_per_phase"
          (num_challenges_per_phase Val Com).
      Admitted.
      Global Typeclasses Opaque num_challenges_per_phase.
      
      (*
          pub fn num_challenges_in_phase(&self, phase_idx: usize) -> usize {
              self.per_air
                  .iter()
                  .flat_map(|vk| vk.params.num_challenges_to_sample.get(phase_idx))
                  .copied()
                  .max()
                  .unwrap_or_else(|| panic!("No challenges used in challenge phase {phase_idx}"))
          }
      *)
      Definition num_challenges_in_phase
          (Val Com : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self Val Com in
        match ε, τ, α with
        | [], [], [ self; phase_idx ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView")
                      []
                      [ Val; Com ]
                  ],
                self
              |) in
            let phase_idx := M.alloc (| Ty.path "usize", phase_idx |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                "unwrap_or_else",
                [],
                [ Ty.function [] (Ty.path "usize") ]
              |),
              [
                M.call_closure (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::copied::Copied")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                      []
                                      [ Val; Com ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                          []
                                          [ Val; Com ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                          ]
                      ],
                    [],
                    [],
                    "max",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::copied::Copied")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                        []
                                        [ Val; Com ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ];
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                            []
                                            [ Val; Com ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                      []
                                      [ Val; Com ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                          []
                                          [ Val; Com ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                          ],
                        [],
                        [],
                        "copied",
                        [],
                        [ Ty.path "usize" ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                        []
                                        [ Val; Com ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ];
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                            []
                                            [ Val; Com ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                      []
                                      [ Val; Com ]
                                  ]
                              ],
                            [],
                            [],
                            "flat_map",
                            [],
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ];
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                            []
                                            [ Val; Com ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                        []
                                        [ Val; Com ]
                                    ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                          []
                                          [ Val; Com ]
                                      ]
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                    []
                                                    [ Val; Com ]
                                                ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                  []
                                                  [ Val; Com ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView",
                                            "per_air"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                    []
                                                    [ Val; Com ]
                                                ]
                                            ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let vk :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                            []
                                                            [ Val; Com ]
                                                        ]
                                                    ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                                                  "get",
                                                  [],
                                                  [ Ty.path "usize" ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.path "usize" ]
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.path "usize";
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          [],
                                                          "deref",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (|
                                                                  M.read (|
                                                                    M.deref (| M.read (| vk |) |)
                                                                  |)
                                                                |),
                                                                "openvm_stark_backend::keygen::types::StarkVerifyingKey",
                                                                "params"
                                                              |),
                                                              "openvm_stark_backend::keygen::types::StarkVerifyingParams",
                                                              "num_challenges_to_sample"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.read (| phase_idx |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.path "usize",
                            M.alloc (| Ty.tuple [], α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::Arguments",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::Arguments",
                                            "new_v1",
                                            [
                                              Value.Integer IntegerKind.Usize 1;
                                              Value.Integer IntegerKind.Usize 1
                                            ],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 1 ]
                                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                                      ],
                                                    Value.Array
                                                      [
                                                        mk_str (|
                                                          "No challenges used in challenge phase "
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 1 ]
                                                      [ Ty.path "core::fmt::rt::Argument" ],
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            "new_display",
                                                            [],
                                                            [ Ty.path "usize" ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  phase_idx
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_num_challenges_in_phase :
        forall (Val Com : Ty.t),
        M.IsAssociatedFunction.C
          (Self Val Com)
          "num_challenges_in_phase"
          (num_challenges_in_phase Val Com).
      Admitted.
      Global Typeclasses Opaque num_challenges_in_phase.
    End Impl_openvm_stark_backend_keygen_view_MultiStarkVerifyingKeyView_Val_Com.
    
    Module Impl_openvm_stark_backend_keygen_types_MultiStarkVerifyingKey_SC.
      Definition Self (SC : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey") [] [ SC ].
      
      (*
          pub(crate) fn full_view(&self) -> MultiStarkVerifyingKeyView<Val<SC>, Com<SC>> {
              self.view(&(0..self.inner.per_air.len()).collect_vec())
          }
      *)
      Definition full_view (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey")
                      []
                      [ SC ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView")
                []
                [
                  Ty.associated_in_trait
                    "p3_commit::domain::PolynomialSpace"
                    []
                    []
                    (Ty.associated_in_trait
                      "p3_commit::pcs::Pcs"
                      []
                      [
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ]
                      (Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Pcs")
                      "Domain")
                    "Val";
                  Ty.associated_in_trait
                    "p3_commit::pcs::Pcs"
                    []
                    [
                      Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenge";
                      Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenger"
                    ]
                    (Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Pcs")
                    "Commitment"
                ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey")
                  []
                  [ SC ],
                "view",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                        [],
                        [],
                        "deref",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                  M.get_trait_method (|
                                    "itertools::Itertools",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "collect_vec",
                                    [],
                                    []
                                  |),
                                  [
                                    Value.mkStructRecord
                                      "core::ops::range::Range"
                                      []
                                      [ Ty.path "usize" ]
                                      [
                                        ("start", Value.Integer IntegerKind.Usize 0);
                                        ("end_",
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val";
                                                      Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Commitment"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "len",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey",
                                                    "inner"
                                                  |),
                                                  "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey0",
                                                  "per_air"
                                                |)
                                              |)
                                            ]
                                          |))
                                      ]
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_full_view :
        forall (SC : Ty.t),
        M.IsAssociatedFunction.C (Self SC) "full_view" (full_view SC).
      Admitted.
      Global Typeclasses Opaque full_view.
      
      (*
          pub(crate) fn view(&self, air_ids: &[usize]) -> MultiStarkVerifyingKeyView<Val<SC>, Com<SC>> {
              MultiStarkVerifyingKeyView {
                  per_air: air_ids.iter().map(|&id| &self.inner.per_air[id]).collect(),
                  trace_height_constraints: &self.inner.trace_height_constraints,
                  pre_hash: self.pre_hash.clone(),
              }
          }
      *)
      Definition view (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [], [ self; air_ids ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey")
                      []
                      [ SC ]
                  ],
                self
              |) in
            let air_ids :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                air_ids
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::keygen::view::MultiStarkVerifyingKeyView"
              []
              [
                Ty.associated_in_trait
                  "p3_commit::domain::PolynomialSpace"
                  []
                  []
                  (Ty.associated_in_trait
                    "p3_commit::pcs::Pcs"
                    []
                    [
                      Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenge";
                      Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenger"
                    ]
                    (Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Pcs")
                    "Domain")
                  "Val";
                Ty.associated_in_trait
                  "p3_commit::pcs::Pcs"
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenger"
                  ]
                  (Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Pcs")
                  "Commitment"
              ]
              [
                ("per_air",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val";
                                Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Commitment"
                              ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ];
                          Ty.function
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Commitment"
                                  ]
                              ])
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Commitment"
                                  ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ];
                            Ty.function
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val";
                                      Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Commitment"
                                    ]
                                ])
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Commitment"
                                  ]
                              ];
                            Ty.function
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val";
                                      Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Commitment"
                                    ]
                                ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                              "iter",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| air_ids |) |) |) ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val";
                                              Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Commitment"
                                            ]
                                        ],
                                      M.alloc (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        α0
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.deref (| M.read (| γ |) |) in
                                            let id := M.copy (| Ty.path "usize", γ |) in
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val";
                                                          Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Commitment"
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::index::Index",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val";
                                                            Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Commitment"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [ Ty.path "usize" ],
                                                    "index",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| self |) |),
                                                          "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey",
                                                          "inner"
                                                        |),
                                                        "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey0",
                                                        "per_air"
                                                      |)
                                                    |);
                                                    M.read (| id |)
                                                  ]
                                                |)
                                              |)
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |));
                ("trace_height_constraints",
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ]
                          ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey",
                                    "inner"
                                  |),
                                  "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey0",
                                  "trace_height_constraints"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |));
                ("pre_hash",
                  M.call_closure (|
                    Ty.associated_in_trait
                      "p3_commit::pcs::Pcs"
                      []
                      [
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ]
                      (Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Pcs")
                      "Commitment",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Commitment",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey",
                          "pre_hash"
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_view :
        forall (SC : Ty.t),
        M.IsAssociatedFunction.C (Self SC) "view" (view SC).
      Admitted.
      Global Typeclasses Opaque view.
    End Impl_openvm_stark_backend_keygen_types_MultiStarkVerifyingKey_SC.
    
  End view.
End keygen.
