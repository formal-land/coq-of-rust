(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module poly.
  Module uni.
    (* StructRecord
      {
        name := "UnivariatePolynomial";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("coeffs",
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                      []
                      [ F ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "UnivariatePolynomial" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "coeffs" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                "coeffs"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                      []
                      [ F ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::poly::uni::UnivariatePolynomial"
              []
              [ F ]
              [
                ("coeffs",
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                              "coeffs"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
    
    Module Impl_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*
          pub fn from_coeffs(coeffs: Vec<F>) -> Self {
              let mut polynomial = Self { coeffs };
              polynomial.trim_leading_zeroes();
              polynomial
          }
      *)
      Definition from_coeffs (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ coeffs ] =>
          ltac:(M.monadic
            (let coeffs :=
              M.alloc (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                coeffs
              |) in
            M.read (|
              let~ polynomial :
                  Ty.apply
                    (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                    []
                    [ F ] :=
                Value.mkStructRecord
                  "openvm_stark_backend::poly::uni::UnivariatePolynomial"
                  []
                  [ F ]
                  [ ("coeffs", M.read (| coeffs |)) ] in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                      []
                      [ F ],
                    "trim_leading_zeroes",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, polynomial |) ]
                |) in
              polynomial
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_coeffs :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "from_coeffs" (from_coeffs F).
      Admitted.
      Global Typeclasses Opaque from_coeffs.
      
      (*
          pub fn zero() -> Self {
              Self { coeffs: vec![] }
          }
      *)
      Definition zero (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "openvm_stark_backend::poly::uni::UnivariatePolynomial"
              []
              [ F ]
              [
                ("coeffs",
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_zero :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "zero" (zero F).
      Admitted.
      Global Typeclasses Opaque zero.
      
      (*
          fn one() -> Self {
              Self {
                  coeffs: vec![F::ONE],
              }
          }
      *)
      Definition one (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "openvm_stark_backend::poly::uni::UnivariatePolynomial"
              []
              [ F ]
              [
                ("coeffs",
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ F ],
                      "into_vec",
                      [],
                      [ Ty.path "alloc::alloc::Global" ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ F ]; Ty.path "alloc::alloc::Global" ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ F ]; Ty.path "alloc::alloc::Global"
                            ]),
                        [
                          M.read (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ F ],
                                  Value.Array
                                    [
                                      M.read (|
                                        get_constant (| "p3_field::field::FieldAlgebra::ONE", F |)
                                      |)
                                    ]
                                |)
                              ]
                            |)
                          |)
                        ]
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_one :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "one" (one F).
      Admitted.
      Global Typeclasses Opaque one.
      
      (*
          fn is_zero(&self) -> bool {
              self.coeffs.iter().all(F::is_zero)
          }
      *)
      Definition is_zero (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                [],
                [],
                "all",
                [],
                [ Ty.function [ Ty.apply (Ty.path "&") [] [ F ] ] (Ty.path "bool") ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.alloc (|
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                    M.call_closure (|
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ F ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                    "coeffs"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |);
                M.get_trait_method (| "p3_field::field::Field", F, [], [], "is_zero", [], [] |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_zero :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "is_zero" (is_zero F).
      Admitted.
      Global Typeclasses Opaque is_zero.
      
      (*
          pub fn evaluate(&self, x: F) -> F {
              self.coeffs
                  .iter()
                  .rfold(F::ZERO, |acc, coeff| acc * x + *coeff)
          }
      *)
      Definition evaluate (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; x ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                      []
                      [ F ]
                  ],
                self
              |) in
            let x := M.alloc (| F, x |) in
            M.call_closure (|
              F,
              M.get_trait_method (|
                "core::iter::traits::double_ended::DoubleEndedIterator",
                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                [],
                [],
                "rfold",
                [],
                [ F; Ty.function [ F; Ty.apply (Ty.path "&") [] [ F ] ] F ]
              |),
              [
                M.call_closure (|
                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ F ],
                    "iter",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                "coeffs"
                              |)
                            |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |);
                M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0; α1 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            F,
                            M.alloc (| F, α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let acc := M.copy (| F, γ |) in
                                  M.match_operator (|
                                    F,
                                    M.alloc (| Ty.apply (Ty.path "&") [] [ F ], α1 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let coeff :=
                                            M.copy (| Ty.apply (Ty.path "&") [] [ F ], γ |) in
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "core::ops::arith::Add",
                                              F,
                                              [],
                                              [ F ],
                                              "add",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                F,
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  F,
                                                  [],
                                                  [ F ],
                                                  "mul",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| acc |); M.read (| x |) ]
                                              |);
                                              M.read (| M.deref (| M.read (| coeff |) |) |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_evaluate :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "evaluate" (evaluate F).
      Admitted.
      Global Typeclasses Opaque evaluate.
      
      (*
          pub fn degree(&self) -> usize {
              self.coeffs.iter().rposition(|&v| !v.is_zero()).unwrap_or(0)
          }
      *)
      Definition degree (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                "unwrap_or",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                    [],
                    [],
                    "rposition",
                    [],
                    [ Ty.function [ Ty.apply (Ty.path "&") [] [ F ] ] (Ty.path "bool") ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ F ],
                            "iter",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                        "coeffs"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.path "bool",
                                M.alloc (| Ty.apply (Ty.path "&") [] [ F ], α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.read (| γ |) in
                                      let v := M.copy (| F, γ |) in
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_trait_method (|
                                            "p3_field::field::Field",
                                            F,
                                            [],
                                            [],
                                            "is_zero",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, v |) ]
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |);
                Value.Integer IntegerKind.Usize 0
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_degree :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "degree" (degree F).
      Admitted.
      Global Typeclasses Opaque degree.
      
      (*
          pub fn from_interpolation(points: &[(F, F)]) -> Self {
              let mut coeffs = Self::zero();
      
              for (i, &(xi, yi)) in points.iter().enumerate() {
                  let mut num = UnivariatePolynomial::one();
                  let mut denom = F::ONE;
      
                  for (j, &(xj, _)) in points.iter().enumerate() {
                      if i != j {
                          num = num * (Self::identity() - xj.into());
                          denom *= xi - xj;
                      }
                  }
      
                  let selector = num * denom.inverse();
                  coeffs = coeffs + selector * yi;
              }
      
              coeffs.trim_leading_zeroes();
              coeffs
          }
      *)
      Definition from_interpolation
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ points ] =>
          ltac:(M.monadic
            (let points :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.tuple [ F; F ] ] ],
                points
              |) in
            M.read (|
              let~ coeffs :
                  Ty.apply
                    (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                    []
                    [ F ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                    []
                    [ F ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                      []
                      [ F ],
                    "zero",
                    [],
                    []
                  |),
                  []
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.tuple [ F; F ] ]
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.tuple [ F; F ] ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.tuple [ F; F ] ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.tuple [ F; F ] ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.tuple [ F; F ] ],
                                  [],
                                  [],
                                  "enumerate",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.tuple [ F; F ] ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.tuple [ F; F ] ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| points |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.tuple [ F; F ] ]
                                    ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply (Ty.path "&") [] [ Ty.tuple [ F; F ] ]
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.path "usize";
                                                    Ty.apply (Ty.path "&") [] [ Ty.tuple [ F; F ] ]
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Ty.tuple [ F; F ] ]
                                                ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let γ1_0 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                              let γ1_1 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                              let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                              let γ1_1 := M.read (| γ1_1 |) in
                                              let γ3_0 :=
                                                M.SubPointer.get_tuple_field (| γ1_1, 0 |) in
                                              let γ3_1 :=
                                                M.SubPointer.get_tuple_field (| γ1_1, 1 |) in
                                              let xi := M.copy (| F, γ3_0 |) in
                                              let yi := M.copy (| F, γ3_1 |) in
                                              M.read (|
                                                let~ num :
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                      []
                                                      [ F ] :=
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                      []
                                                      [ F ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                        []
                                                        [ F ],
                                                      "one",
                                                      [],
                                                      []
                                                    |),
                                                    []
                                                  |) in
                                                let~ denom : F :=
                                                  M.read (|
                                                    get_constant (|
                                                      "p3_field::field::FieldAlgebra::ONE",
                                                      F
                                                    |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.read (|
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.tuple [],
                                                        M.match_operator (|
                                                          Ty.tuple [],
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::enumerate::Enumerate")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [ Ty.tuple [ F; F ] ]
                                                              ],
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::enumerate::Enumerate")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [ Ty.tuple [ F; F ] ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::IntoIterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [ Ty.tuple [ F; F ] ]
                                                                  ],
                                                                [],
                                                                [],
                                                                "into_iter",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::enumerate::Enumerate")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ Ty.tuple [ F; F ] ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [ Ty.tuple [ F; F ] ],
                                                                    [],
                                                                    [],
                                                                    "enumerate",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ Ty.tuple [ F; F ] ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Ty.tuple [ F; F ] ],
                                                                        "iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| points |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let iter :=
                                                                  M.copy (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [ Ty.tuple [ F; F ] ]
                                                                      ],
                                                                    γ
                                                                  |) in
                                                                M.read (|
                                                                  M.loop (|
                                                                    Ty.tuple [],
                                                                    ltac:(M.monadic
                                                                      (let~ _ : Ty.tuple [] :=
                                                                        M.match_operator (|
                                                                          Ty.tuple [],
                                                                          M.alloc (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [ F; F ]
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                []
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize";
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [ F; F ]
                                                                                        ]
                                                                                    ]
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::Iter")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [ F; F ]
                                                                                      ]
                                                                                  ],
                                                                                [],
                                                                                [],
                                                                                "next",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      iter
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let _ :=
                                                                                  M.is_struct_tuple (|
                                                                                    γ,
                                                                                    "core::option::Option::None"
                                                                                  |) in
                                                                                M.never_to_any (|
                                                                                  M.read (|
                                                                                    M.break (||)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::option::Option::Some",
                                                                                    0
                                                                                  |) in
                                                                                let γ1_0 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    0
                                                                                  |) in
                                                                                let γ1_1 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    1
                                                                                  |) in
                                                                                let j :=
                                                                                  M.copy (|
                                                                                    Ty.path "usize",
                                                                                    γ1_0
                                                                                  |) in
                                                                                let γ1_1 :=
                                                                                  M.read (|
                                                                                    γ1_1
                                                                                  |) in
                                                                                let γ3_0 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ1_1,
                                                                                    0
                                                                                  |) in
                                                                                let γ3_1 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ1_1,
                                                                                    1
                                                                                  |) in
                                                                                let xj :=
                                                                                  M.copy (|
                                                                                    F,
                                                                                    γ3_0
                                                                                  |) in
                                                                                M.match_operator (|
                                                                                  Ty.tuple [],
                                                                                  M.alloc (|
                                                                                    Ty.tuple [],
                                                                                    Value.Tuple []
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ :=
                                                                                          M.use
                                                                                            (M.alloc (|
                                                                                              Ty.path
                                                                                                "bool",
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "bool",
                                                                                                BinOp.ne,
                                                                                                [
                                                                                                  M.read (|
                                                                                                    i
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    j
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)) in
                                                                                        let _ :=
                                                                                          is_constant_or_break_match (|
                                                                                            M.read (|
                                                                                              γ
                                                                                            |),
                                                                                            Value.Bool
                                                                                              true
                                                                                          |) in
                                                                                        M.read (|
                                                                                          let~ _ :
                                                                                              Ty.tuple
                                                                                                [] :=
                                                                                            M.write (|
                                                                                              num,
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                                                                  []
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::arith::Mul",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                                                                    []
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                                                                      []
                                                                                                      [
                                                                                                        F
                                                                                                      ]
                                                                                                  ],
                                                                                                  "mul",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    num
                                                                                                  |);
                                                                                                  M.call_closure (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                                                                      []
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    M.get_trait_method (|
                                                                                                      "core::ops::arith::Sub",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                                                                        []
                                                                                                        [
                                                                                                          F
                                                                                                        ],
                                                                                                      [],
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                                                                          []
                                                                                                          [
                                                                                                            F
                                                                                                          ]
                                                                                                      ],
                                                                                                      "sub",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.call_closure (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                                                                          []
                                                                                                          [
                                                                                                            F
                                                                                                          ],
                                                                                                        M.get_associated_function (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                                                                            []
                                                                                                            [
                                                                                                              F
                                                                                                            ],
                                                                                                          "identity",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        []
                                                                                                      |);
                                                                                                      M.call_closure (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                                                                          []
                                                                                                          [
                                                                                                            F
                                                                                                          ],
                                                                                                        M.get_trait_method (|
                                                                                                          "core::convert::Into",
                                                                                                          F,
                                                                                                          [],
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                                                                              []
                                                                                                              [
                                                                                                                F
                                                                                                              ]
                                                                                                          ],
                                                                                                          "into",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            xj
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |) in
                                                                                          let~ _ :
                                                                                              Ty.tuple
                                                                                                [] :=
                                                                                            M.call_closure (|
                                                                                              Ty.tuple
                                                                                                [],
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::arith::MulAssign",
                                                                                                F,
                                                                                                [],
                                                                                                [ F
                                                                                                ],
                                                                                                "mul_assign",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  denom
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  F,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Sub",
                                                                                                    F,
                                                                                                    [],
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                    "sub",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      xi
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      xj
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            Ty.tuple
                                                                                              [],
                                                                                            Value.Tuple
                                                                                              []
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (Value.Tuple
                                                                                          []))
                                                                                  ]
                                                                                |)))
                                                                          ]
                                                                        |) in
                                                                      M.alloc (|
                                                                        Ty.tuple [],
                                                                        Value.Tuple []
                                                                      |)))
                                                                  |)
                                                                |)))
                                                          ]
                                                        |)
                                                      |))
                                                  |) in
                                                let~ selector :
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                      []
                                                      [ F ] :=
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                      []
                                                      [ F ],
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Mul",
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                        []
                                                        [ F ],
                                                      [],
                                                      [ F ],
                                                      "mul",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| num |);
                                                      M.call_closure (|
                                                        F,
                                                        M.get_trait_method (|
                                                          "p3_field::field::Field",
                                                          F,
                                                          [],
                                                          [],
                                                          "inverse",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.borrow (| Pointer.Kind.Ref, denom |) ]
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.write (|
                                                    coeffs,
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                        []
                                                        [ F ],
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Add",
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                          []
                                                          [ F ],
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                            []
                                                            [ F ]
                                                        ],
                                                        "add",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (| coeffs |);
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                            []
                                                            [ F ],
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Mul",
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                                              []
                                                              [ F ],
                                                            [],
                                                            [ F ],
                                                            "mul",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.read (| selector |); M.read (| yi |) ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                      []
                      [ F ],
                    "trim_leading_zeroes",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, coeffs |) ]
                |) in
              coeffs
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_interpolation :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "from_interpolation" (from_interpolation F).
      Admitted.
      Global Typeclasses Opaque from_interpolation.
      
      (*
          fn identity() -> Self {
              Self {
                  coeffs: vec![F::ZERO, F::ONE],
              }
          }
      *)
      Definition identity (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "openvm_stark_backend::poly::uni::UnivariatePolynomial"
              []
              [ F ]
              [
                ("coeffs",
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ F ],
                      "into_vec",
                      [],
                      [ Ty.path "alloc::alloc::Global" ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ F ]; Ty.path "alloc::alloc::Global" ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ F ]; Ty.path "alloc::alloc::Global"
                            ]),
                        [
                          M.read (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ],
                                  Value.Array
                                    [
                                      M.read (|
                                        get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |)
                                      |);
                                      M.read (|
                                        get_constant (| "p3_field::field::FieldAlgebra::ONE", F |)
                                      |)
                                    ]
                                |)
                              ]
                            |)
                          |)
                        ]
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_identity :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "identity" (identity F).
      Admitted.
      Global Typeclasses Opaque identity.
      
      (*
          fn trim_leading_zeroes(&mut self) {
              if let Some(non_zero_idx) = self.coeffs.iter().rposition(|&coeff| !coeff.is_zero()) {
                  self.coeffs.truncate(non_zero_idx + 1);
              } else {
                  self.coeffs.clear();
              }
          }
      *)
      Definition trim_leading_zeroes
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.tuple [],
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.alloc (|
                        Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                            [],
                            [],
                            "rposition",
                            [],
                            [ Ty.function [ Ty.apply (Ty.path "&") [] [ F ] ] (Ty.path "bool") ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.alloc (|
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ F ],
                                    "iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                                "coeffs"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "bool",
                                        M.alloc (| Ty.apply (Ty.path "&") [] [ F ], α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ := M.read (| γ |) in
                                              let coeff := M.copy (| F, γ |) in
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_trait_method (|
                                                    "p3_field::field::Field",
                                                    F,
                                                    [],
                                                    [],
                                                    "is_zero",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, coeff |) ]
                                                |)
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      |) in
                    let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let non_zero_idx := M.copy (| Ty.path "usize", γ0_0 |) in
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            "truncate",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                "coeffs"
                              |)
                            |);
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.add,
                              [ M.read (| non_zero_idx |); Value.Integer IntegerKind.Usize 1 ]
                            |)
                          ]
                        |) in
                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            "clear",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                "coeffs"
                              |)
                            |)
                          ]
                        |) in
                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_trim_leading_zeroes :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "trim_leading_zeroes" (trim_leading_zeroes F).
      Admitted.
      Global Typeclasses Opaque trim_leading_zeroes.
      
      (*
          pub fn into_coeffs(self) -> Vec<F> {
              self.coeffs
          }
      *)
      Definition into_coeffs (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                self,
                "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                "coeffs"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_into_coeffs :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "into_coeffs" (into_coeffs F).
      Admitted.
      Global Typeclasses Opaque into_coeffs.
    End Impl_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
    
    Module Impl_core_default_Default_where_p3_field_field_Field_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*
          fn default() -> Self {
              Self::zero()
          }
      *)
      Definition default (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                "zero",
                [],
                []
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("default", InstanceField.Method (default F)) ].
    End Impl_core_default_Default_where_p3_field_field_Field_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
    
    Module Impl_core_convert_From_where_p3_field_field_Field_F_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*
          fn from(value: F) -> Self {
              Self::from_coeffs(vec![value])
          }
      *)
      Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value := M.alloc (| F, value |) in
            M.call_closure (|
              Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                "from_coeffs",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ F ],
                    "into_vec",
                    [],
                    [ Ty.path "alloc::alloc::Global" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::boxed::Box")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ F ]; Ty.path "alloc::alloc::Global" ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          []
                          [
                            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 1 ] [ F ];
                            Ty.path "alloc::alloc::Global"
                          ])
                        (Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ F ]; Ty.path "alloc::alloc::Global" ]),
                      [
                        M.read (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 1 ]
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              [],
                              []
                            |),
                            [
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 1 ]
                                  [ F ],
                                Value.Array [ M.read (| value |) ]
                              |)
                            ]
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *) [ ("from", InstanceField.Method (from F)) ].
    End Impl_core_convert_From_where_p3_field_field_Field_F_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
    
    Module Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*     type Output = Self; *)
      Definition _Output (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*
          fn mul(mut self, rhs: F) -> Self {
              for coeff in &mut self.coeffs {
                  *coeff *= rhs;
              }
              self
          }
      *)
      Definition mul (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; rhs ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                self
              |) in
            let rhs := M.alloc (| F, rhs |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ F ],
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ F ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                  "coeffs"
                                |)
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ F ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.apply (Ty.path "&mut") [] [ F ] ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.apply (Ty.path "&mut") [] [ F ] ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [ F ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let coeff :=
                                                M.copy (|
                                                  Ty.apply (Ty.path "&mut") [] [ F ],
                                                  γ0_0
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "core::ops::arith::MulAssign",
                                                      F,
                                                      [],
                                                      [ F ],
                                                      "mul_assign",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| coeff |) |)
                                                      |);
                                                      M.read (| rhs |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              self
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::ops::arith::Mul"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *)
          [ ("Output", InstanceField.Ty (_Output F)); ("mul", InstanceField.Method (mul F)) ].
    End Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
    
    Module Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_openvm_stark_backend_poly_uni_UnivariatePolynomial_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*     type Output = Self; *)
      Definition _Output (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*
          fn mul(mut self, mut rhs: Self) -> Self {
              if self.is_zero() || rhs.is_zero() {
                  return Self::zero();
              }
      
              self.trim_leading_zeroes();
              rhs.trim_leading_zeroes();
      
              let mut res = vec![F::ZERO; self.coeffs.len() + rhs.coeffs.len() - 1];
      
              for (i, coeff_a) in self.coeffs.into_iter().enumerate() {
                  for (j, coeff_b) in rhs.coeffs.iter().enumerate() {
                      res[i + j] += coeff_a * *coeff_b;
                  }
              }
      
              Self::from_coeffs(res)
          }
      *)
      Definition mul (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; rhs ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                self
              |) in
            let rhs :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                rhs
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                []
                [ F ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  LogicalOp.or (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                          []
                                          [ F ],
                                        "is_zero",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                            []
                                            [ F ],
                                          "is_zero",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
                                      |)))
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                      []
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                                        []
                                        [ F ],
                                      "zero",
                                      [],
                                      []
                                    |),
                                    []
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                          []
                          [ F ],
                        "trim_leading_zeroes",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, self |) ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                          []
                          [ F ],
                        "trim_leading_zeroes",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, rhs |) ]
                    |) in
                  let~ res :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ F; Ty.path "alloc::alloc::Global" ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      M.get_function (| "alloc::vec::from_elem", [], [ F ] |),
                      [
                        M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |);
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.add,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        self,
                                        "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                        "coeffs"
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        rhs,
                                        "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                        "coeffs"
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            Value.Integer IntegerKind.Usize 1
                          ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.use
                        (M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ]
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ]
                                    ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [ F; Ty.path "alloc::alloc::Global" ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      [],
                                      "enumerate",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [ F; Ty.path "alloc::alloc::Global" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ],
                                          [],
                                          [],
                                          "into_iter",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              self,
                                              "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                              "coeffs"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ]
                                        ],
                                      γ
                                    |) in
                                  M.read (|
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.tuple [ Ty.path "usize"; F ] ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.tuple [ Ty.path "usize"; F ] ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::enumerate::Enumerate")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.never_to_any (| M.read (| M.break (||) |) |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let γ1_0 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                  let γ1_1 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                  let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                                  let coeff_a := M.copy (| F, γ1_1 |) in
                                                  M.read (|
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.tuple [],
                                                        M.match_operator (|
                                                          Ty.tuple [],
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::enumerate::Enumerate")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [ F ]
                                                              ],
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::enumerate::Enumerate")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [ F ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::IntoIterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [ F ]
                                                                  ],
                                                                [],
                                                                [],
                                                                "into_iter",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::enumerate::Enumerate")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ F ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [ F ],
                                                                    [],
                                                                    [],
                                                                    "enumerate",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [ F ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ F ],
                                                                        "iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [ F ]
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::deref::Deref",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    F;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [],
                                                                                [],
                                                                                "deref",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    rhs,
                                                                                    "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                                                                    "coeffs"
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let iter :=
                                                                  M.copy (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [ F ]
                                                                      ],
                                                                    γ
                                                                  |) in
                                                                M.read (|
                                                                  M.loop (|
                                                                    Ty.tuple [],
                                                                    ltac:(M.monadic
                                                                      (let~ _ : Ty.tuple [] :=
                                                                        M.match_operator (|
                                                                          Ty.tuple [],
                                                                          M.alloc (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [ F ]
                                                                                  ]
                                                                              ],
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                []
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize";
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [ F ]
                                                                                    ]
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::Iter")
                                                                                      []
                                                                                      [ F ]
                                                                                  ],
                                                                                [],
                                                                                [],
                                                                                "next",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      iter
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let _ :=
                                                                                  M.is_struct_tuple (|
                                                                                    γ,
                                                                                    "core::option::Option::None"
                                                                                  |) in
                                                                                M.never_to_any (|
                                                                                  M.read (|
                                                                                    M.break (||)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::option::Option::Some",
                                                                                    0
                                                                                  |) in
                                                                                let γ1_0 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    0
                                                                                  |) in
                                                                                let γ1_1 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    1
                                                                                  |) in
                                                                                let j :=
                                                                                  M.copy (|
                                                                                    Ty.path "usize",
                                                                                    γ1_0
                                                                                  |) in
                                                                                let coeff_b :=
                                                                                  M.copy (|
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [ F ],
                                                                                    γ1_1
                                                                                  |) in
                                                                                M.read (|
                                                                                  let~ _ :
                                                                                      Ty.tuple [] :=
                                                                                    M.call_closure (|
                                                                                      Ty.tuple [],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::AddAssign",
                                                                                        F,
                                                                                        [],
                                                                                        [ F ],
                                                                                        "add_assign",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.call_closure (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&mut")
                                                                                                []
                                                                                                [ F
                                                                                                ],
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::index::IndexMut",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  []
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ],
                                                                                                [],
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize"
                                                                                                ],
                                                                                                "index_mut",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  res
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  BinOp.Wrap.add,
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      i
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      j
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          F,
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Mul",
                                                                                            F,
                                                                                            [],
                                                                                            [ F ],
                                                                                            "mul",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              coeff_a
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.deref (|
                                                                                                M.read (|
                                                                                                  coeff_b
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    Ty.tuple [],
                                                                                    Value.Tuple []
                                                                                  |)
                                                                                |)))
                                                                          ]
                                                                        |) in
                                                                      M.alloc (|
                                                                        Ty.tuple [],
                                                                        Value.Tuple []
                                                                      |)))
                                                                  |)
                                                                |)))
                                                          ]
                                                        |)
                                                      |))
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)))
                            ]
                          |)
                        |))
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                      []
                      [ F ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                        []
                        [ F ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                          []
                          [ F ],
                        "from_coeffs",
                        [],
                        []
                      |),
                      [ M.read (| res |) ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::ops::arith::Mul"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ] ]
          (Self F)
          (* Instance *)
          [ ("Output", InstanceField.Ty (_Output F)); ("mul", InstanceField.Method (mul F)) ].
    End Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_openvm_stark_backend_poly_uni_UnivariatePolynomial_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
    
    Module Impl_core_ops_arith_Add_where_p3_field_field_Field_F_openvm_stark_backend_poly_uni_UnivariatePolynomial_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*     type Output = Self; *)
      Definition _Output (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*
          fn add(self, rhs: Self) -> Self {
              let n = self.coeffs.len().max(rhs.coeffs.len());
              let mut coeffs = Vec::with_capacity(n);
      
              for i in 0..n {
                  let a = self.coeffs.get(i).copied().unwrap_or(F::ZERO);
                  let b = rhs.coeffs.get(i).copied().unwrap_or(F::ZERO);
                  coeffs.push(a + b);
              }
      
              Self { coeffs }
          }
      *)
      Definition add (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; rhs ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                self
              |) in
            let rhs :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                rhs
              |) in
            M.read (|
              let~ n : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (| "core::cmp::Ord", Ty.path "usize", [], [], "max", [], [] |),
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ],
                        "len",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                            "coeffs"
                          |)
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ],
                        "len",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            rhs,
                            "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                            "coeffs"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ coeffs :
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    "with_capacity",
                    [],
                    []
                  |),
                  [ M.read (| n |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.call_closure (|
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              Value.mkStructRecord
                                "core::ops::range::Range"
                                []
                                [ Ty.path "usize" ]
                                [
                                  ("start", Value.Integer IntegerKind.Usize 0);
                                  ("end_", M.read (| n |))
                                ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                              M.read (|
                                                let~ a : F :=
                                                  M.call_closure (|
                                                    F,
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ F ],
                                                      "unwrap_or",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ F ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Ty.apply (Ty.path "&") [] [ F ] ],
                                                          "copied",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [ Ty.apply (Ty.path "&") [] [ F ] ],
                                                            M.get_associated_function (|
                                                              Ty.apply (Ty.path "slice") [] [ F ],
                                                              "get",
                                                              [],
                                                              [ Ty.path "usize" ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ F ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "deref",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          self,
                                                                          "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                                                          "coeffs"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              M.read (| i |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_field::field::FieldAlgebra::ZERO",
                                                          F
                                                        |)
                                                      |)
                                                    ]
                                                  |) in
                                                let~ b : F :=
                                                  M.call_closure (|
                                                    F,
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ F ],
                                                      "unwrap_or",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ F ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Ty.apply (Ty.path "&") [] [ F ] ],
                                                          "copied",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [ Ty.apply (Ty.path "&") [] [ F ] ],
                                                            M.get_associated_function (|
                                                              Ty.apply (Ty.path "slice") [] [ F ],
                                                              "get",
                                                              [],
                                                              [ Ty.path "usize" ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ F ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "deref",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          rhs,
                                                                          "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                                                          "coeffs"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              M.read (| i |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_field::field::FieldAlgebra::ZERO",
                                                          F
                                                        |)
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ],
                                                      "push",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (| Pointer.Kind.MutRef, coeffs |);
                                                      M.call_closure (|
                                                        F,
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Add",
                                                          F,
                                                          [],
                                                          [ F ],
                                                          "add",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| a |); M.read (| b |) ]
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                Value.mkStructRecord
                  "openvm_stark_backend::poly::uni::UnivariatePolynomial"
                  []
                  [ F ]
                  [ ("coeffs", M.read (| coeffs |)) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::ops::arith::Add"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ] ]
          (Self F)
          (* Instance *)
          [ ("Output", InstanceField.Ty (_Output F)); ("add", InstanceField.Method (add F)) ].
    End Impl_core_ops_arith_Add_where_p3_field_field_Field_F_openvm_stark_backend_poly_uni_UnivariatePolynomial_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
    
    Module Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_openvm_stark_backend_poly_uni_UnivariatePolynomial_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*     type Output = Self; *)
      Definition _Output (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*
          fn sub(self, rhs: Self) -> Self {
              self + (-rhs)
          }
      *)
      Definition sub (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; rhs ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                self
              |) in
            let rhs :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                rhs
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
              M.get_trait_method (|
                "core::ops::arith::Add",
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                [],
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                    []
                    [ F ]
                ],
                "add",
                [],
                []
              |),
              [
                M.read (| self |);
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                    []
                    [ F ],
                  M.get_trait_method (|
                    "core::ops::arith::Neg",
                    Ty.apply
                      (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                      []
                      [ F ],
                    [],
                    [],
                    "neg",
                    [],
                    []
                  |),
                  [ M.read (| rhs |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::ops::arith::Sub"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ] ]
          (Self F)
          (* Instance *)
          [ ("Output", InstanceField.Ty (_Output F)); ("sub", InstanceField.Method (sub F)) ].
    End Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_openvm_stark_backend_poly_uni_UnivariatePolynomial_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
    
    Module Impl_core_ops_arith_Neg_where_p3_field_field_Field_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*     type Output = Self; *)
      Definition _Output (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*
          fn neg(self) -> Self {
              Self {
                  coeffs: self.coeffs.into_iter().map(|v| -v).collect(),
              }
          }
      *)
      Definition neg (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ],
                self
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::poly::uni::UnivariatePolynomial"
              []
              [ F ]
              [
                ("coeffs",
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.function [ F ] F
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ];
                            Ty.function [ F ] F
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "map",
                          [],
                          [ F; Ty.function [ F ] F ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                                  "coeffs"
                                |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      F,
                                      M.alloc (| F, α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let v := M.copy (| F, γ |) in
                                            M.call_closure (|
                                              F,
                                              M.get_trait_method (|
                                                "core::ops::arith::Neg",
                                                F,
                                                [],
                                                [],
                                                "neg",
                                                [],
                                                []
                                              |),
                                              [ M.read (| v |) ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::ops::arith::Neg"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [ ("Output", InstanceField.Ty (_Output F)); ("neg", InstanceField.Method (neg F)) ].
    End Impl_core_ops_arith_Neg_where_p3_field_field_Field_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
    
    Module Impl_core_ops_deref_Deref_where_p3_field_field_Field_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial") [] [ F ].
      
      (*     type Target = [F]; *)
      Definition _Target (F : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ F ].
      
      (*
          fn deref(&self) -> &Self::Target {
              &self.coeffs
          }
      *)
      Definition deref (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::poly::uni::UnivariatePolynomial")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                  M.get_trait_method (|
                    "core::ops::deref::Deref",
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    [],
                    [],
                    "deref",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::poly::uni::UnivariatePolynomial",
                            "coeffs"
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::ops::deref::Deref"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [ ("Target", InstanceField.Ty (_Target F)); ("deref", InstanceField.Method (deref F)) ].
    End Impl_core_ops_deref_Deref_where_p3_field_field_Field_F_for_openvm_stark_backend_poly_uni_UnivariatePolynomial_F.
    
    (*
    pub fn evaluate_on_slice<F: Field>(coeffs: &[F], x: F) -> F {
        coeffs.iter().rfold(F::ZERO, |acc, &coeff| acc * x + coeff)
    }
    *)
    Definition evaluate_on_slice (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ F ], [ coeffs; x ] =>
        ltac:(M.monadic
          (let coeffs :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
              coeffs
            |) in
          let x := M.alloc (| F, x |) in
          M.call_closure (|
            F,
            M.get_trait_method (|
              "core::iter::traits::double_ended::DoubleEndedIterator",
              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
              [],
              [],
              "rfold",
              [],
              [ F; Ty.function [ F; Ty.apply (Ty.path "&") [] [ F ] ] F ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                M.get_associated_function (| Ty.apply (Ty.path "slice") [] [ F ], "iter", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| coeffs |) |) |) ]
              |);
              M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0; α1 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          F,
                          M.alloc (| F, α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let acc := M.copy (| F, γ |) in
                                M.match_operator (|
                                  F,
                                  M.alloc (| Ty.apply (Ty.path "&") [] [ F ], α1 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.read (| γ |) in
                                        let coeff := M.copy (| F, γ |) in
                                        M.call_closure (|
                                          F,
                                          M.get_trait_method (|
                                            "core::ops::arith::Add",
                                            F,
                                            [],
                                            [ F ],
                                            "add",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              F,
                                              M.get_trait_method (|
                                                "core::ops::arith::Mul",
                                                F,
                                                [],
                                                [ F ],
                                                "mul",
                                                [],
                                                []
                                              |),
                                              [ M.read (| acc |); M.read (| x |) ]
                                            |);
                                            M.read (| coeff |)
                                          ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_evaluate_on_slice :
      M.IsFunction.C "openvm_stark_backend::poly::uni::evaluate_on_slice" evaluate_on_slice.
    Admitted.
    Global Typeclasses Opaque evaluate_on_slice.
    
    (*
    pub fn random_linear_combination<F: Field>(v: &[F], alpha: F) -> F {
        evaluate_on_slice(v, alpha)
    }
    *)
    Definition random_linear_combination
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ F ], [ v; alpha ] =>
        ltac:(M.monadic
          (let v :=
            M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ], v |) in
          let alpha := M.alloc (| F, alpha |) in
          M.call_closure (|
            F,
            M.get_function (| "openvm_stark_backend::poly::uni::evaluate_on_slice", [], [ F ] |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| v |) |) |); M.read (| alpha |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_random_linear_combination :
      M.IsFunction.C
        "openvm_stark_backend::poly::uni::random_linear_combination"
        random_linear_combination.
    Admitted.
    Global Typeclasses Opaque random_linear_combination.
    
    (* StructRecord
      {
        name := "Fraction";
        const_params := [];
        ty_params := [ "T" ];
        fields := [ ("numerator", T); ("denominator", T) ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_stark_backend_poly_uni_Fraction_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ T ].
      
      (* Debug *)
      Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ T ] ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Fraction" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "numerator" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ T ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::poly::uni::Fraction",
                            "numerator"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "denominator" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ T ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply (Ty.path "&") [] [ T ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::poly::uni::Fraction",
                                "denominator"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_stark_backend_poly_uni_Fraction_T.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_stark_backend_poly_uni_Fraction_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ T ].
      
      (* Clone *)
      Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ T ] ],
                self
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::poly::uni::Fraction"
              []
              [ T ]
              [
                ("numerator",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::poly::uni::Fraction",
                              "numerator"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("denominator",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::poly::uni::Fraction",
                              "denominator"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_stark_backend_poly_uni_Fraction_T.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_stark_backend_poly_uni_Fraction_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ T ].
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_stark_backend_poly_uni_Fraction_T.
    
    Module Impl_openvm_stark_backend_poly_uni_Fraction_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ T ].
      
      (*
          pub const fn new(numerator: T, denominator: T) -> Self {
              Self {
                  numerator,
                  denominator,
              }
          }
      *)
      Definition new (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ numerator; denominator ] =>
          ltac:(M.monadic
            (let numerator := M.alloc (| T, numerator |) in
            let denominator := M.alloc (| T, denominator |) in
            Value.mkStructRecord
              "openvm_stark_backend::poly::uni::Fraction"
              []
              [ T ]
              [ ("numerator", M.read (| numerator |)); ("denominator", M.read (| denominator |)) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "new" (new T).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_stark_backend_poly_uni_Fraction_T.
    
    Module Impl_core_ops_arith_Add_where_core_clone_Clone_T_where_core_ops_arith_Add_T_where_core_ops_arith_Mul_T_openvm_stark_backend_poly_uni_Fraction_T_for_openvm_stark_backend_poly_uni_Fraction_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ T ].
      
      (*     type Output = Fraction<T>; *)
      Definition _Output (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ T ].
      
      (*
          fn add(self, rhs: Self) -> Fraction<T> {
              Fraction {
                  numerator: rhs.denominator.clone() * self.numerator.clone()
                      + self.denominator.clone() * rhs.numerator.clone(),
                  denominator: self.denominator * rhs.denominator,
              }
          }
      *)
      Definition add (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; rhs ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ T ],
                self
              |) in
            let rhs :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ T ],
                rhs
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::poly::uni::Fraction"
              []
              [ T ]
              [
                ("numerator",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::ops::arith::Add", T, [], [ T ], "add", [], [] |),
                    [
                      M.call_closure (|
                        T,
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          T,
                          [],
                          [ T ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            T,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              T,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  rhs,
                                  "openvm_stark_backend::poly::uni::Fraction",
                                  "denominator"
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            T,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              T,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_stark_backend::poly::uni::Fraction",
                                  "numerator"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        T,
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          T,
                          [],
                          [ T ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            T,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              T,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_stark_backend::poly::uni::Fraction",
                                  "denominator"
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            T,
                            M.get_trait_method (|
                              "core::clone::Clone",
                              T,
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  rhs,
                                  "openvm_stark_backend::poly::uni::Fraction",
                                  "numerator"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |));
                ("denominator",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::ops::arith::Mul", T, [], [ T ], "mul", [], [] |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "openvm_stark_backend::poly::uni::Fraction",
                          "denominator"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          rhs,
                          "openvm_stark_backend::poly::uni::Fraction",
                          "denominator"
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::ops::arith::Add"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ T ] ]
          (Self T)
          (* Instance *)
          [ ("Output", InstanceField.Ty (_Output T)); ("add", InstanceField.Method (add T)) ].
    End Impl_core_ops_arith_Add_where_core_clone_Clone_T_where_core_ops_arith_Add_T_where_core_ops_arith_Mul_T_openvm_stark_backend_poly_uni_Fraction_T_for_openvm_stark_backend_poly_uni_Fraction_T.
    
    Module Impl_openvm_stark_backend_poly_uni_Fraction_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ].
      
      (*     const ZERO: Self = Self::new(F::ZERO, F::ONE); *)
      (* Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ] *)
      Definition value_ZERO (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        ltac:(M.monadic
          (M.alloc (|
            Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ],
            M.call_closure (|
              Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ],
                "new",
                [],
                []
              |),
              [
                M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |);
                M.read (| get_constant (| "p3_field::field::FieldAlgebra::ONE", F |) |)
              ]
            |)
          |))).
      
      Global Instance AssociatedConstant_value_ZERO :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "ZERO" (value_ZERO F).
      Admitted.
      Global Typeclasses Opaque value_ZERO.
      
      (*
          pub fn is_zero(&self) -> bool {
              self.numerator.is_zero() && !self.denominator.is_zero()
          }
      *)
      Definition is_zero (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ] ],
                self
              |) in
            LogicalOp.and (|
              M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (| "p3_field::field::Field", F, [], [], "is_zero", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_stark_backend::poly::uni::Fraction",
                      "numerator"
                    |)
                  |)
                ]
              |),
              ltac:(M.monadic
                (UnOp.not (|
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (| "p3_field::field::Field", F, [], [], "is_zero", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_stark_backend::poly::uni::Fraction",
                          "denominator"
                        |)
                      |)
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_zero :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "is_zero" (is_zero F).
      Admitted.
      Global Typeclasses Opaque is_zero.
    End Impl_openvm_stark_backend_poly_uni_Fraction_F.
    
    Module Impl_core_iter_traits_accum_Sum_where_p3_field_field_Field_F_openvm_stark_backend_poly_uni_Fraction_F_for_openvm_stark_backend_poly_uni_Fraction_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ].
      
      (*
          fn sum<I: Iterator<Item = Self>>(iter: I) -> Self {
              iter.fold(Self::ZERO, |a, b| a + b)
          }
      *)
      Definition sum (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [ _ as I ], [ iter ] =>
          ltac:(M.monadic
            (let iter := M.alloc (| I, iter |) in
            M.call_closure (|
              Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                I,
                [],
                [],
                "fold",
                [],
                [
                  Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ];
                  Ty.function
                    [
                      Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ];
                      Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ]
                    ]
                    (Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ])
                ]
              |),
              [
                M.read (| iter |);
                M.read (|
                  get_associated_constant (|
                    Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ],
                    "ZERO",
                    Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ]
                  |)
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0; α1 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "openvm_stark_backend::poly::uni::Fraction")
                                []
                                [ F ],
                              α0
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let a :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::poly::uni::Fraction")
                                        []
                                        [ F ],
                                      γ
                                    |) in
                                  M.match_operator (|
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::poly::uni::Fraction")
                                      []
                                      [ F ],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::poly::uni::Fraction")
                                        []
                                        [ F ],
                                      α1
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let b :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::poly::uni::Fraction")
                                                []
                                                [ F ],
                                              γ
                                            |) in
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "openvm_stark_backend::poly::uni::Fraction")
                                              []
                                              [ F ],
                                            M.get_trait_method (|
                                              "core::ops::arith::Add",
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::poly::uni::Fraction")
                                                []
                                                [ F ],
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::poly::uni::Fraction")
                                                  []
                                                  [ F ]
                                              ],
                                              "add",
                                              [],
                                              []
                                            |),
                                            [ M.read (| a |); M.read (| b |) ]
                                          |)))
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::iter::traits::accum::Sum"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "openvm_stark_backend::poly::uni::Fraction") [] [ F ] ]
          (Self F)
          (* Instance *) [ ("sum", InstanceField.Method (sum F)) ].
    End Impl_core_iter_traits_accum_Sum_where_p3_field_field_Field_F_openvm_stark_backend_poly_uni_Fraction_F_for_openvm_stark_backend_poly_uni_Fraction_F.
  End uni.
End poly.
