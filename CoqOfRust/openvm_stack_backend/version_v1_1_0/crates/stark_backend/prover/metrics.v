(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module prover.
  Module metrics.
    (* StructRecord
      {
        name := "TraceMetrics";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("per_air",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                  Ty.path "alloc::alloc::Global"
                ]);
            ("total_cells", Ty.path "usize");
            ("trace_height_inequalities",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ]; Ty.path "alloc::alloc::Global" ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_openvm_stark_backend_prover_metrics_TraceMetrics.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::prover::metrics::TraceMetrics".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::prover::metrics::TraceMetrics" ],
                self
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::prover::metrics::TraceMetrics"
              []
              []
              [
                ("per_air",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::prover::metrics::TraceMetrics",
                              "per_air"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("total_cells",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "usize",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::prover::metrics::TraceMetrics",
                              "total_cells"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("trace_height_inequalities",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::prover::metrics::TraceMetrics",
                              "trace_height_inequalities"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_stark_backend_prover_metrics_TraceMetrics.
    
    Module Impl_core_fmt_Debug_for_openvm_stark_backend_prover_metrics_TraceMetrics.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::prover::metrics::TraceMetrics".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::prover::metrics::TraceMetrics" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field3_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "TraceMetrics" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "per_air" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                            Ty.path "alloc::alloc::Global"
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::prover::metrics::TraceMetrics",
                            "per_air"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "total_cells" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::prover::metrics::TraceMetrics",
                            "total_cells"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "trace_height_inequalities" |) |)
                |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::prover::metrics::TraceMetrics",
                                "trace_height_inequalities"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_stark_backend_prover_metrics_TraceMetrics.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_for_openvm_stark_backend_prover_metrics_TraceMetrics.
        Definition Self : Ty.t := Ty.path "openvm_stark_backend::prover::metrics::TraceMetrics".
        
        (* Serialize *)
        Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_stark_backend::prover::metrics::TraceMetrics" ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "TraceMetrics" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.cast (Ty.path "usize") (Value.Bool false);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path
                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "per_air" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::prover::metrics::TraceMetrics",
                                          "per_air"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "total_cells" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::prover::metrics::TraceMetrics",
                                          "total_cells"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "trace_height_inequalities" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::prover::metrics::TraceMetrics",
                                          "trace_height_inequalities"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_openvm_stark_backend_prover_metrics_TraceMetrics.
      Module Impl_serde_de_Deserialize_for_openvm_stark_backend_prover_metrics_TraceMetrics.
        Definition Self : Ty.t := Ty.path "openvm_stark_backend::prover::metrics::TraceMetrics".
        
        (* Deserialize *)
        Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "openvm_stark_backend::prover::metrics::TraceMetrics";
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [ Ty.path "openvm_stark_backend::prover::metrics::_'1::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "TraceMetrics" |);
                  M.read (|
                    get_constant (|
                      "openvm_stark_backend::prover::metrics::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_stark_backend::prover::metrics::_'1::deserialize::__Visitor"
                    []
                    []
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.path "openvm_stark_backend::prover::metrics::TraceMetrics" ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_openvm_stark_backend_prover_metrics_TraceMetrics.
      Module Impl_serde_ser_Serialize_for_openvm_stark_backend_prover_metrics_SingleTraceMetrics.
        Definition Self : Ty.t :=
          Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics".
        
        (* Serialize *)
        Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics" ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "SingleTraceMetrics" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.cast
                                                            (Ty.path "usize")
                                                            (Value.Bool false);
                                                          Value.Integer IntegerKind.Usize 1
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "alloc::string::String" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "air_name" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                          "air_name"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "height" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                          "height"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "openvm_stark_backend::keygen::types::TraceWidth" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "width" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                          "width"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "openvm_stark_backend::prover::metrics::TraceCells" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "cells" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                          "cells"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "total_cells" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                          "total_cells"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "quotient_poly_cells" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                          "quotient_poly_cells"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_openvm_stark_backend_prover_metrics_SingleTraceMetrics.
      Module Impl_serde_de_Deserialize_for_openvm_stark_backend_prover_metrics_SingleTraceMetrics.
        Definition Self : Ty.t :=
          Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics".
        
        (* Deserialize *)
        Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [ Ty.path "openvm_stark_backend::prover::metrics::_'3::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "SingleTraceMetrics" |);
                  M.read (|
                    get_constant (|
                      "openvm_stark_backend::prover::metrics::_'3::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_stark_backend::prover::metrics::_'3::deserialize::__Visitor"
                    []
                    []
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics" ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_openvm_stark_backend_prover_metrics_SingleTraceMetrics.
      Module Impl_serde_ser_Serialize_for_openvm_stark_backend_prover_metrics_TraceCells.
        Definition Self : Ty.t := Ty.path "openvm_stark_backend::prover::metrics::TraceCells".
        
        (* Serialize *)
        Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_stark_backend::prover::metrics::TraceCells" ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "TraceCells" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.cast (Ty.path "usize") (Value.Bool false);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "preprocessed" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::prover::metrics::TraceCells",
                                          "preprocessed"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "cached_mains" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::prover::metrics::TraceCells",
                                          "cached_mains"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "common_main" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::prover::metrics::TraceCells",
                                          "common_main"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "after_challenge" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_stark_backend::prover::metrics::TraceCells",
                                          "after_challenge"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_openvm_stark_backend_prover_metrics_TraceCells.
      Module Impl_serde_de_Deserialize_for_openvm_stark_backend_prover_metrics_TraceCells.
        Definition Self : Ty.t := Ty.path "openvm_stark_backend::prover::metrics::TraceCells".
        
        (* Deserialize *)
        Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "openvm_stark_backend::prover::metrics::TraceCells";
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [ Ty.path "openvm_stark_backend::prover::metrics::_'5::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "TraceCells" |);
                  M.read (|
                    get_constant (|
                      "openvm_stark_backend::prover::metrics::_'5::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_stark_backend::prover::metrics::_'5::deserialize::__Visitor"
                    []
                    []
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.path "openvm_stark_backend::prover::metrics::TraceCells" ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_openvm_stark_backend_prover_metrics_TraceCells.
    End underscore.
    
    
    (* StructRecord
      {
        name := "SingleTraceMetrics";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("air_name", Ty.path "alloc::string::String");
            ("height", Ty.path "usize");
            ("width", Ty.path "openvm_stark_backend::keygen::types::TraceWidth");
            ("cells", Ty.path "openvm_stark_backend::prover::metrics::TraceCells");
            ("total_cells", Ty.path "usize");
            ("quotient_poly_cells", Ty.path "usize")
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_openvm_stark_backend_prover_metrics_SingleTraceMetrics.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics" ],
                self
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
              []
              []
              [
                ("air_name",
                  M.call_closure (|
                    Ty.path "alloc::string::String",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "alloc::string::String",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                              "air_name"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("height",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "usize",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                              "height"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("width",
                  M.call_closure (|
                    Ty.path "openvm_stark_backend::keygen::types::TraceWidth",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_stark_backend::keygen::types::TraceWidth",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                              "width"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("cells",
                  M.call_closure (|
                    Ty.path "openvm_stark_backend::prover::metrics::TraceCells",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_stark_backend::prover::metrics::TraceCells",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                              "cells"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("total_cells",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "usize",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                              "total_cells"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("quotient_poly_cells",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "usize",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                              "quotient_poly_cells"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_stark_backend_prover_metrics_SingleTraceMetrics.
    
    Module Impl_core_fmt_Debug_for_openvm_stark_backend_prover_metrics_SingleTraceMetrics.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.read (|
              let~ names :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 6 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 6 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                        Value.Array
                          [
                            mk_str (| "air_name" |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "height" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "width" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "cells" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "total_cells" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "quotient_poly_cells" |) |)
                            |)
                          ]
                      |)
                    |)
                  |)
                |) in
              let~ values :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 6 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ])
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 6 ]
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                              ],
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "alloc::string::String" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                            "air_name"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                            "height"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "openvm_stark_backend::keygen::types::TraceWidth" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                            "width"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "openvm_stark_backend::prover::metrics::TraceCells"
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                            "cells"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                            "total_cells"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                                "quotient_poly_cells"
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "SingleTraceMetrics" |) |)
                    |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 6 ]
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ])
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_stark_backend_prover_metrics_SingleTraceMetrics.
    
    
    
    (* StructRecord
      {
        name := "TraceCells";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("preprocessed", Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ]);
            ("cached_mains",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]);
            ("common_main", Ty.path "usize");
            ("after_challenge",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_openvm_stark_backend_prover_metrics_TraceCells.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::prover::metrics::TraceCells".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::prover::metrics::TraceCells" ],
                self
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::prover::metrics::TraceCells"
              []
              []
              [
                ("preprocessed",
                  M.call_closure (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::prover::metrics::TraceCells",
                              "preprocessed"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("cached_mains",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::prover::metrics::TraceCells",
                              "cached_mains"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("common_main",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "usize",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::prover::metrics::TraceCells",
                              "common_main"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("after_challenge",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_stark_backend::prover::metrics::TraceCells",
                              "after_challenge"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_stark_backend_prover_metrics_TraceCells.
    
    Module Impl_core_fmt_Debug_for_openvm_stark_backend_prover_metrics_TraceCells.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::prover::metrics::TraceCells".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::prover::metrics::TraceCells" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field4_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "TraceCells" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "preprocessed" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::prover::metrics::TraceCells",
                            "preprocessed"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "cached_mains" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::prover::metrics::TraceCells",
                            "cached_mains"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "common_main" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_stark_backend::prover::metrics::TraceCells",
                            "common_main"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "after_challenge" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_stark_backend::prover::metrics::TraceCells",
                                "after_challenge"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_stark_backend_prover_metrics_TraceCells.
    
    
    
    Module Impl_core_fmt_Display_for_openvm_stark_backend_prover_metrics_TraceMetrics.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::prover::metrics::TraceMetrics".
      
      (*
          fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
              writeln!(
                  f,
                  "total_trace_cells = {} (excluding preprocessed)",
                  format_number_with_underscores(self.total_cells)
              )?;
              writeln!(
                  f,
                  "preprocessed_trace_cells = {}",
                  format_number_with_underscores(
                      self.per_air
                          .iter()
                          .map(|m| m.cells.preprocessed.unwrap_or(0))
                          .sum::<usize>()
                  )
              )?;
              writeln!(
                  f,
                  "main_trace_cells = {}",
                  format_number_with_underscores(
                      self.per_air
                          .iter()
                          .map(|m| m.cells.cached_mains.iter().sum::<usize>() + m.cells.common_main)
                          .sum::<usize>()
                  )
              )?;
              writeln!(
                  f,
                  "perm_trace_cells = {}",
                  format_number_with_underscores(
                      self.per_air
                          .iter()
                          .map(|m| m.cells.after_challenge.iter().sum::<usize>())
                          .sum::<usize>()
                  )
              )?;
              writeln!(
                  f,
                  "quotient_poly_cells = {}",
                  format_number_with_underscores(
                      self.per_air
                          .iter()
                          .map(|m| m.quotient_poly_cells)
                          .sum::<usize>()
                  )
              )?;
              for (i, (weighted_sum, threshold)) in self.trace_height_inequalities.iter().enumerate() {
                  writeln!(
                      f,
                      "trace_height_constraint_{i} | weighted_sum = {:<10} | threshold = {:<10}",
                      format_number_with_underscores( *weighted_sum),
                      format_number_with_underscores( *threshold)
                  )?;
              }
              for trace_metrics in &self.per_air {
                  writeln!(f, "{}", trace_metrics)?;
              }
              Ok(())
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::prover::metrics::TraceMetrics" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                              M.get_associated_function (|
                                Ty.path "core::fmt::Formatter",
                                "write_fmt",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 1
                                    ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                            Value.Array
                                              [
                                                mk_str (| "total_trace_cells = " |);
                                                mk_str (| " (excluding preprocessed)
" |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.path "core::fmt::rt::Argument" ],
                                            Value.Array
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::rt::Argument",
                                                    "new_display",
                                                    [],
                                                    [ Ty.path "alloc::string::String" ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "alloc::string::String",
                                                            M.call_closure (|
                                                              Ty.path "alloc::string::String",
                                                              M.get_function (|
                                                                "openvm_stark_backend::prover::metrics::format_number_with_underscores",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (| M.read (| self |) |),
                                                                    "openvm_stark_backend::prover::metrics::TraceMetrics",
                                                                    "total_cells"
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                              M.get_associated_function (|
                                Ty.path "core::fmt::Formatter",
                                "write_fmt",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 1
                                    ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                            Value.Array
                                              [
                                                mk_str (| "preprocessed_trace_cells = " |);
                                                mk_str (| "
" |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.path "core::fmt::rt::Argument" ],
                                            Value.Array
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::rt::Argument",
                                                    "new_display",
                                                    [],
                                                    [ Ty.path "alloc::string::String" ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "alloc::string::String",
                                                            M.call_closure (|
                                                              Ty.path "alloc::string::String",
                                                              M.get_function (|
                                                                "openvm_stark_backend::prover::metrics::format_number_with_underscores",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::map::Map")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                              ]
                                                                          ]
                                                                          (Ty.path "usize")
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "sum",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::map::Map")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                            ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                ]
                                                                            ]
                                                                            (Ty.path "usize")
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "map",
                                                                        [],
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.function
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                ]
                                                                            ]
                                                                            (Ty.path "usize")
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                            ],
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                              ],
                                                                            "iter",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                        ]
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::deref::Deref",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [],
                                                                                    [],
                                                                                    "deref",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            self
                                                                                          |)
                                                                                        |),
                                                                                        "openvm_stark_backend::prover::metrics::TraceMetrics",
                                                                                        "per_air"
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                ltac:(M.monadic
                                                                                  (M.match_operator (|
                                                                                    Ty.path "usize",
                                                                                    M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                        ],
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let m :=
                                                                                            M.copy (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                                ],
                                                                                              γ
                                                                                            |) in
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "usize",
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::option::Option")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize"
                                                                                                ],
                                                                                              "unwrap_or",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        m
                                                                                                      |)
                                                                                                    |),
                                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                                                                                    "cells"
                                                                                                  |),
                                                                                                  "openvm_stark_backend::prover::metrics::TraceCells",
                                                                                                  "preprocessed"
                                                                                                |)
                                                                                              |);
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                0
                                                                                            ]
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                              | _ =>
                                                                                M.impossible
                                                                                  "wrong number of arguments"
                                                                              end))
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                              M.get_associated_function (|
                                Ty.path "core::fmt::Formatter",
                                "write_fmt",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 1
                                    ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                            Value.Array
                                              [ mk_str (| "main_trace_cells = " |); mk_str (| "
" |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.path "core::fmt::rt::Argument" ],
                                            Value.Array
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::rt::Argument",
                                                    "new_display",
                                                    [],
                                                    [ Ty.path "alloc::string::String" ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "alloc::string::String",
                                                            M.call_closure (|
                                                              Ty.path "alloc::string::String",
                                                              M.get_function (|
                                                                "openvm_stark_backend::prover::metrics::format_number_with_underscores",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::map::Map")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                              ]
                                                                          ]
                                                                          (Ty.path "usize")
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "sum",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::map::Map")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                            ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                ]
                                                                            ]
                                                                            (Ty.path "usize")
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "map",
                                                                        [],
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.function
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                ]
                                                                            ]
                                                                            (Ty.path "usize")
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                            ],
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                              ],
                                                                            "iter",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                        ]
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::deref::Deref",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [],
                                                                                    [],
                                                                                    "deref",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            self
                                                                                          |)
                                                                                        |),
                                                                                        "openvm_stark_backend::prover::metrics::TraceMetrics",
                                                                                        "per_air"
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                ltac:(M.monadic
                                                                                  (M.match_operator (|
                                                                                    Ty.path "usize",
                                                                                    M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                        ],
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let m :=
                                                                                            M.copy (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                                ],
                                                                                              γ
                                                                                            |) in
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "usize",
                                                                                            BinOp.Wrap.add,
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "usize",
                                                                                                M.get_trait_method (|
                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::slice::iter::Iter")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize"
                                                                                                    ],
                                                                                                  [],
                                                                                                  [],
                                                                                                  "sum",
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::Iter")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "usize"
                                                                                                      ],
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "slice")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize"
                                                                                                        ],
                                                                                                      "iter",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        M.deref (|
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "slice")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "usize"
                                                                                                                  ]
                                                                                                              ],
                                                                                                            M.get_trait_method (|
                                                                                                              "core::ops::deref::Deref",
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::vec::Vec")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "usize";
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ],
                                                                                                              [],
                                                                                                              [],
                                                                                                              "deref",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                    M.deref (|
                                                                                                                      M.read (|
                                                                                                                        m
                                                                                                                      |)
                                                                                                                    |),
                                                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                                                                                                    "cells"
                                                                                                                  |),
                                                                                                                  "openvm_stark_backend::prover::metrics::TraceCells",
                                                                                                                  "cached_mains"
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                              |);
                                                                                              M.read (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        m
                                                                                                      |)
                                                                                                    |),
                                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                                                                                    "cells"
                                                                                                  |),
                                                                                                  "openvm_stark_backend::prover::metrics::TraceCells",
                                                                                                  "common_main"
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                              | _ =>
                                                                                M.impossible
                                                                                  "wrong number of arguments"
                                                                              end))
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                              M.get_associated_function (|
                                Ty.path "core::fmt::Formatter",
                                "write_fmt",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 1
                                    ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                            Value.Array
                                              [ mk_str (| "perm_trace_cells = " |); mk_str (| "
" |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.path "core::fmt::rt::Argument" ],
                                            Value.Array
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::rt::Argument",
                                                    "new_display",
                                                    [],
                                                    [ Ty.path "alloc::string::String" ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "alloc::string::String",
                                                            M.call_closure (|
                                                              Ty.path "alloc::string::String",
                                                              M.get_function (|
                                                                "openvm_stark_backend::prover::metrics::format_number_with_underscores",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::map::Map")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                              ]
                                                                          ]
                                                                          (Ty.path "usize")
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "sum",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::map::Map")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                            ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                ]
                                                                            ]
                                                                            (Ty.path "usize")
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "map",
                                                                        [],
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.function
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                ]
                                                                            ]
                                                                            (Ty.path "usize")
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                            ],
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                              ],
                                                                            "iter",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                        ]
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::deref::Deref",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [],
                                                                                    [],
                                                                                    "deref",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            self
                                                                                          |)
                                                                                        |),
                                                                                        "openvm_stark_backend::prover::metrics::TraceMetrics",
                                                                                        "per_air"
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                ltac:(M.monadic
                                                                                  (M.match_operator (|
                                                                                    Ty.path "usize",
                                                                                    M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                        ],
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let m :=
                                                                                            M.copy (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                                ],
                                                                                              γ
                                                                                            |) in
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "usize",
                                                                                            M.get_trait_method (|
                                                                                              "core::iter::traits::iterator::Iterator",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::slice::iter::Iter")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize"
                                                                                                ],
                                                                                              [],
                                                                                              [],
                                                                                              "sum",
                                                                                              [],
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ]
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::slice::iter::Iter")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                M.get_associated_function (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "slice")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize"
                                                                                                    ],
                                                                                                  "iter",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "slice")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "usize"
                                                                                                              ]
                                                                                                          ],
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::deref::Deref",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "usize";
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ],
                                                                                                          [],
                                                                                                          [],
                                                                                                          "deref",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                M.deref (|
                                                                                                                  M.read (|
                                                                                                                    m
                                                                                                                  |)
                                                                                                                |),
                                                                                                                "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                                                                                                "cells"
                                                                                                              |),
                                                                                                              "openvm_stark_backend::prover::metrics::TraceCells",
                                                                                                              "after_challenge"
                                                                                                            |)
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                              | _ =>
                                                                                M.impossible
                                                                                  "wrong number of arguments"
                                                                              end))
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                              M.get_associated_function (|
                                Ty.path "core::fmt::Formatter",
                                "write_fmt",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 1
                                    ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                            Value.Array
                                              [
                                                mk_str (| "quotient_poly_cells = " |);
                                                mk_str (| "
" |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.path "core::fmt::rt::Argument" ],
                                            Value.Array
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::rt::Argument",
                                                    "new_display",
                                                    [],
                                                    [ Ty.path "alloc::string::String" ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "alloc::string::String",
                                                            M.call_closure (|
                                                              Ty.path "alloc::string::String",
                                                              M.get_function (|
                                                                "openvm_stark_backend::prover::metrics::format_number_with_underscores",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::map::Map")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                              ]
                                                                          ]
                                                                          (Ty.path "usize")
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "sum",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::map::Map")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                            ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                ]
                                                                            ]
                                                                            (Ty.path "usize")
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "map",
                                                                        [],
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.function
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                ]
                                                                            ]
                                                                            (Ty.path "usize")
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                            ],
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                              ],
                                                                            "iter",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                        ]
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::deref::Deref",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [],
                                                                                    [],
                                                                                    "deref",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            self
                                                                                          |)
                                                                                        |),
                                                                                        "openvm_stark_backend::prover::metrics::TraceMetrics",
                                                                                        "per_air"
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                ltac:(M.monadic
                                                                                  (M.match_operator (|
                                                                                    Ty.path "usize",
                                                                                    M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                        ],
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let m :=
                                                                                            M.copy (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                                ],
                                                                                              γ
                                                                                            |) in
                                                                                          M.read (|
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.deref (|
                                                                                                M.read (|
                                                                                                  m
                                                                                                |)
                                                                                              |),
                                                                                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                                                                              "quotient_poly_cells"
                                                                                            |)
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                              | _ =>
                                                                                M.impossible
                                                                                  "wrong number of arguments"
                                                                              end))
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.use
                        (M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ]
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ]
                                    ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                                      [],
                                      [],
                                      "enumerate",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                                          "iter",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.tuple
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [],
                                                  "deref",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "openvm_stark_backend::prover::metrics::TraceMetrics",
                                                      "trace_height_inequalities"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ]
                                        ],
                                      γ
                                    |) in
                                  M.read (|
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "usize";
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.tuple
                                                            [ Ty.path "usize"; Ty.path "usize" ]
                                                        ]
                                                    ]
                                                ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "usize";
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "usize"; Ty.path "usize" ]
                                                          ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::enumerate::Enumerate")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [
                                                          Ty.tuple
                                                            [ Ty.path "usize"; Ty.path "usize" ]
                                                        ]
                                                    ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.never_to_any (| M.read (| M.break (||) |) |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let γ1_0 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                  let γ1_1 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                  let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                                  let γ1_1 := M.deref (| M.read (| γ1_1 |) |) in
                                                  let γ3_0 :=
                                                    M.SubPointer.get_tuple_field (| γ1_1, 0 |) in
                                                  let γ3_1 :=
                                                    M.SubPointer.get_tuple_field (| γ1_1, 1 |) in
                                                  let weighted_sum :=
                                                    M.alloc (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ3_0
                                                    |) in
                                                  let threshold :=
                                                    M.alloc (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ3_1
                                                    |) in
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::ops::control_flow::ControlFlow")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path "core::fmt::Error"
                                                                ];
                                                              Ty.tuple []
                                                            ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::control_flow::ControlFlow")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path "core::fmt::Error"
                                                                  ];
                                                                Ty.tuple []
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::Try",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "core::fmt::Error"
                                                                ],
                                                              [],
                                                              [],
                                                              "branch",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path "core::fmt::Error"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Formatter",
                                                                  "write_fmt",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (| M.read (| f |) |)
                                                                  |);
                                                                  M.call_closure (|
                                                                    Ty.path "core::fmt::Arguments",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "core::fmt::Arguments",
                                                                      "new_v1_formatted",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ Ty.path "str" ]
                                                                              ]
                                                                          ],
                                                                        M.pointer_coercion
                                                                          M.PointerCoercion.Unsize
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    4
                                                                                ]
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [ Ty.path "str"
                                                                                    ]
                                                                                ]
                                                                            ])
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [ Ty.path "str"
                                                                                    ]
                                                                                ]
                                                                            ]),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.alloc (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        4
                                                                                    ]
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "str"
                                                                                        ]
                                                                                    ],
                                                                                  Value.Array
                                                                                    [
                                                                                      mk_str (|
                                                                                        "trace_height_constraint_"
                                                                                      |);
                                                                                      mk_str (|
                                                                                        " | weighted_sum = "
                                                                                      |);
                                                                                      mk_str (|
                                                                                        " | threshold = "
                                                                                      |);
                                                                                      mk_str (|
                                                                                        "
"
                                                                                      |)
                                                                                    ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "core::fmt::rt::Argument"
                                                                              ]
                                                                          ],
                                                                        M.pointer_coercion
                                                                          M.PointerCoercion.Unsize
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    3
                                                                                ]
                                                                                [
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument"
                                                                                ]
                                                                            ])
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument"
                                                                                ]
                                                                            ]),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.alloc (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        3
                                                                                    ]
                                                                                    [
                                                                                      Ty.path
                                                                                        "core::fmt::rt::Argument"
                                                                                    ],
                                                                                  M.match_operator (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "array")
                                                                                      [
                                                                                        Value.Integer
                                                                                          IntegerKind.Usize
                                                                                          3
                                                                                      ]
                                                                                      [
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument"
                                                                                      ],
                                                                                    M.alloc (|
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "alloc::string::String"
                                                                                            ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "alloc::string::String"
                                                                                            ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ]
                                                                                        ],
                                                                                      Value.Tuple
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.alloc (|
                                                                                              Ty.path
                                                                                                "alloc::string::String",
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "alloc::string::String",
                                                                                                M.get_function (|
                                                                                                  "openvm_stark_backend::prover::metrics::format_number_with_underscores",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        weighted_sum
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |);
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.alloc (|
                                                                                              Ty.path
                                                                                                "alloc::string::String",
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "alloc::string::String",
                                                                                                M.get_function (|
                                                                                                  "openvm_stark_backend::prover::metrics::format_number_with_underscores",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        threshold
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |);
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            i
                                                                                          |)
                                                                                        ]
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                args :=
                                                                                            M.copy (|
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "alloc::string::String"
                                                                                                    ];
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "alloc::string::String"
                                                                                                    ];
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize"
                                                                                                    ]
                                                                                                ],
                                                                                              γ
                                                                                            |) in
                                                                                          Value.Array
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "core::fmt::rt::Argument",
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "core::fmt::rt::Argument",
                                                                                                  "new_display",
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                          args,
                                                                                                          2
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |);
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "core::fmt::rt::Argument",
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "core::fmt::rt::Argument",
                                                                                                  "new_display",
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "alloc::string::String"
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                          args,
                                                                                                          0
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |);
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "core::fmt::rt::Argument",
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "core::fmt::rt::Argument",
                                                                                                  "new_display",
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "alloc::string::String"
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                          args,
                                                                                                          1
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]))
                                                                                    ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "core::fmt::rt::Placeholder"
                                                                              ]
                                                                          ],
                                                                        M.pointer_coercion
                                                                          M.PointerCoercion.Unsize
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    3
                                                                                ]
                                                                                [
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Placeholder"
                                                                                ]
                                                                            ])
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Placeholder"
                                                                                ]
                                                                            ]),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.alloc (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        3
                                                                                    ]
                                                                                    [
                                                                                      Ty.path
                                                                                        "core::fmt::rt::Placeholder"
                                                                                    ],
                                                                                  Value.Array
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Placeholder",
                                                                                        M.get_associated_function (|
                                                                                          Ty.path
                                                                                            "core::fmt::rt::Placeholder",
                                                                                          "new",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            0;
                                                                                          Value.UnicodeChar
                                                                                            32;
                                                                                          Value.StructTuple
                                                                                            "core::fmt::rt::Alignment::Unknown"
                                                                                            []
                                                                                            []
                                                                                            [];
                                                                                          Value.Integer
                                                                                            IntegerKind.U32
                                                                                            0;
                                                                                          Value.StructTuple
                                                                                            "core::fmt::rt::Count::Implied"
                                                                                            []
                                                                                            []
                                                                                            [];
                                                                                          Value.StructTuple
                                                                                            "core::fmt::rt::Count::Implied"
                                                                                            []
                                                                                            []
                                                                                            []
                                                                                        ]
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Placeholder",
                                                                                        M.get_associated_function (|
                                                                                          Ty.path
                                                                                            "core::fmt::rt::Placeholder",
                                                                                          "new",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            1;
                                                                                          Value.UnicodeChar
                                                                                            32;
                                                                                          Value.StructTuple
                                                                                            "core::fmt::rt::Alignment::Left"
                                                                                            []
                                                                                            []
                                                                                            [];
                                                                                          Value.Integer
                                                                                            IntegerKind.U32
                                                                                            0;
                                                                                          Value.StructTuple
                                                                                            "core::fmt::rt::Count::Implied"
                                                                                            []
                                                                                            []
                                                                                            [];
                                                                                          Value.StructTuple
                                                                                            "core::fmt::rt::Count::Is"
                                                                                            []
                                                                                            []
                                                                                            [
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                10
                                                                                            ]
                                                                                        ]
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Placeholder",
                                                                                        M.get_associated_function (|
                                                                                          Ty.path
                                                                                            "core::fmt::rt::Placeholder",
                                                                                          "new",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            2;
                                                                                          Value.UnicodeChar
                                                                                            32;
                                                                                          Value.StructTuple
                                                                                            "core::fmt::rt::Alignment::Left"
                                                                                            []
                                                                                            []
                                                                                            [];
                                                                                          Value.Integer
                                                                                            IntegerKind.U32
                                                                                            0;
                                                                                          Value.StructTuple
                                                                                            "core::fmt::rt::Count::Implied"
                                                                                            []
                                                                                            []
                                                                                            [];
                                                                                          Value.StructTuple
                                                                                            "core::fmt::rt::Count::Is"
                                                                                            []
                                                                                            []
                                                                                            [
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                10
                                                                                            ]
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        Ty.path
                                                                          "core::fmt::rt::UnsafeArg",
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "core::fmt::rt::UnsafeArg",
                                                                          "new",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                  0
                                                                |) in
                                                              let residual :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path "core::fmt::Error"
                                                                    ],
                                                                  γ0_0
                                                                |) in
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        []
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path "core::fmt::Error"
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.tuple [];
                                                                            Ty.path
                                                                              "core::fmt::Error"
                                                                          ],
                                                                        [],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "core::fmt::Error"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                  0
                                                                |) in
                                                              let val :=
                                                                M.copy (| Ty.tuple [], γ0_0 |) in
                                                              M.read (| val |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)))
                            ]
                          |)
                        |))
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.use
                        (M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.path
                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [
                                    Ty.path
                                      "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.path
                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_stark_backend::prover::metrics::TraceMetrics",
                                      "per_air"
                                    |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.path
                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                        ],
                                      γ
                                    |) in
                                  M.read (|
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.path
                                                        "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                    ]
                                                ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.path
                                                        "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                    ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.never_to_any (| M.read (| M.break (||) |) |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let trace_metrics :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.path
                                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                        ],
                                                      γ0_0
                                                    |) in
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::ops::control_flow::ControlFlow")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path "core::fmt::Error"
                                                                ];
                                                              Ty.tuple []
                                                            ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::control_flow::ControlFlow")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path "core::fmt::Error"
                                                                  ];
                                                                Ty.tuple []
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::Try",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "core::fmt::Error"
                                                                ],
                                                              [],
                                                              [],
                                                              "branch",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path "core::fmt::Error"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Formatter",
                                                                  "write_fmt",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (| M.read (| f |) |)
                                                                  |);
                                                                  M.call_closure (|
                                                                    Ty.path "core::fmt::Arguments",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "core::fmt::Arguments",
                                                                      "new_v1",
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2;
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.alloc (|
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    2
                                                                                ]
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [ Ty.path "str"
                                                                                    ]
                                                                                ],
                                                                              Value.Array
                                                                                [
                                                                                  mk_str (| "" |);
                                                                                  mk_str (| "
" |)
                                                                                ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.alloc (|
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ]
                                                                                [
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument"
                                                                                ],
                                                                              Value.Array
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.path
                                                                                      "core::fmt::rt::Argument",
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "core::fmt::rt::Argument",
                                                                                      "new_display",
                                                                                      [],
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                                                                          ]
                                                                                      ]
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            trace_metrics
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                  0
                                                                |) in
                                                              let residual :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path "core::fmt::Error"
                                                                    ],
                                                                  γ0_0
                                                                |) in
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        []
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path "core::fmt::Error"
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.tuple [];
                                                                            Ty.path
                                                                              "core::fmt::Error"
                                                                          ],
                                                                        [],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "core::fmt::Error"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                  0
                                                                |) in
                                                              let val :=
                                                                M.copy (| Ty.tuple [], γ0_0 |) in
                                                              M.read (| val |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)))
                            ]
                          |)
                        |))
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ]
                      [ Value.Tuple [] ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_openvm_stark_backend_prover_metrics_TraceMetrics.
    
    Module Impl_core_fmt_Display_for_openvm_stark_backend_prover_metrics_SingleTraceMetrics.
      Definition Self : Ty.t := Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics".
      
      (*
          fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
              write!(
                  f,
                  "{:<20} | Rows = {:<10} | Cells = {:<11} | Prep Cols = {:<5} | Main Cols = {:<5} | Perm Cols = {:<5}",
                  self.air_name, format_number_with_underscores(self.height), format_number_with_underscores(self.total_cells), self.width.preprocessed.unwrap_or(0),
                  format!("{:?}", self.width.main_widths()),
                  format!("{:?}",self.width.after_challenge),
              )?;
              Ok(())
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error" ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                              M.get_associated_function (|
                                Ty.path "core::fmt::Formatter",
                                "write_fmt",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1_formatted",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                        ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 6 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                          ])
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                          ]),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 6 ]
                                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                                Value.Array
                                                  [
                                                    mk_str (| "" |);
                                                    mk_str (| " | Rows = " |);
                                                    mk_str (| " | Cells = " |);
                                                    mk_str (| " | Prep Cols = " |);
                                                    mk_str (| " | Main Cols = " |);
                                                    mk_str (| " | Perm Cols = " |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [ Ty.path "core::fmt::rt::Argument" ]
                                        ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 6 ]
                                              [ Ty.path "core::fmt::rt::Argument" ]
                                          ])
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [ Ty.path "core::fmt::rt::Argument" ]
                                          ]),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 6 ]
                                                  [ Ty.path "core::fmt::rt::Argument" ],
                                                Value.Array
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Argument",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        "new_display",
                                                        [],
                                                        [ Ty.path "alloc::string::String" ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| self |) |),
                                                                "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                                                "air_name"
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Argument",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        "new_display",
                                                        [],
                                                        [ Ty.path "alloc::string::String" ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Ty.path "alloc::string::String",
                                                                M.call_closure (|
                                                                  Ty.path "alloc::string::String",
                                                                  M.get_function (|
                                                                    "openvm_stark_backend::prover::metrics::format_number_with_underscores",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| self |)
                                                                        |),
                                                                        "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                                                        "height"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Argument",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        "new_display",
                                                        [],
                                                        [ Ty.path "alloc::string::String" ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Ty.path "alloc::string::String",
                                                                M.call_closure (|
                                                                  Ty.path "alloc::string::String",
                                                                  M.get_function (|
                                                                    "openvm_stark_backend::prover::metrics::format_number_with_underscores",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| self |)
                                                                        |),
                                                                        "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                                                        "total_cells"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Argument",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        "new_display",
                                                        [],
                                                        [ Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Ty.path "usize",
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [ Ty.path "usize" ],
                                                                    "unwrap_or",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| self |)
                                                                          |),
                                                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                                                          "width"
                                                                        |),
                                                                        "openvm_stark_backend::keygen::types::TraceWidth",
                                                                        "preprocessed"
                                                                      |)
                                                                    |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      0
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Argument",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        "new_display",
                                                        [],
                                                        [ Ty.path "alloc::string::String" ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Ty.path "alloc::string::String",
                                                                M.call_closure (|
                                                                  Ty.path "alloc::string::String",
                                                                  M.get_function (|
                                                                    "core::hint::must_use",
                                                                    [],
                                                                    [
                                                                      Ty.path
                                                                        "alloc::string::String"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      let~ res :
                                                                          Ty.path
                                                                            "alloc::string::String" :=
                                                                        M.call_closure (|
                                                                          Ty.path
                                                                            "alloc::string::String",
                                                                          M.get_function (|
                                                                            "alloc::fmt::format",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.path
                                                                                "core::fmt::Arguments",
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "core::fmt::Arguments",
                                                                                "new_v1",
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1;
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.alloc (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              1
                                                                                          ]
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "str"
                                                                                              ]
                                                                                          ],
                                                                                        Value.Array
                                                                                          [
                                                                                            mk_str (|
                                                                                              ""
                                                                                            |)
                                                                                          ]
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.alloc (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              1
                                                                                          ]
                                                                                          [
                                                                                            Ty.path
                                                                                              "core::fmt::rt::Argument"
                                                                                          ],
                                                                                        Value.Array
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "core::fmt::rt::Argument",
                                                                                              M.get_associated_function (|
                                                                                                Ty.path
                                                                                                  "core::fmt::rt::Argument",
                                                                                                "new_debug",
                                                                                                [],
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize";
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ]
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.alloc (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize";
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ],
                                                                                                        M.call_closure (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "usize";
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ],
                                                                                                          M.get_associated_function (|
                                                                                                            Ty.path
                                                                                                              "openvm_stark_backend::keygen::types::TraceWidth",
                                                                                                            "main_widths",
                                                                                                            [],
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                M.deref (|
                                                                                                                  M.read (|
                                                                                                                    self
                                                                                                                  |)
                                                                                                                |),
                                                                                                                "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                                                                                                "width"
                                                                                                              |)
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |) in
                                                                      res
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Argument",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        "new_display",
                                                        [],
                                                        [ Ty.path "alloc::string::String" ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Ty.path "alloc::string::String",
                                                                M.call_closure (|
                                                                  Ty.path "alloc::string::String",
                                                                  M.get_function (|
                                                                    "core::hint::must_use",
                                                                    [],
                                                                    [
                                                                      Ty.path
                                                                        "alloc::string::String"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      let~ res :
                                                                          Ty.path
                                                                            "alloc::string::String" :=
                                                                        M.call_closure (|
                                                                          Ty.path
                                                                            "alloc::string::String",
                                                                          M.get_function (|
                                                                            "alloc::fmt::format",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.path
                                                                                "core::fmt::Arguments",
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "core::fmt::Arguments",
                                                                                "new_v1",
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1;
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.alloc (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              1
                                                                                          ]
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "str"
                                                                                              ]
                                                                                          ],
                                                                                        Value.Array
                                                                                          [
                                                                                            mk_str (|
                                                                                              ""
                                                                                            |)
                                                                                          ]
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.alloc (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              1
                                                                                          ]
                                                                                          [
                                                                                            Ty.path
                                                                                              "core::fmt::rt::Argument"
                                                                                          ],
                                                                                        Value.Array
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "core::fmt::rt::Argument",
                                                                                              M.get_associated_function (|
                                                                                                Ty.path
                                                                                                  "core::fmt::rt::Argument",
                                                                                                "new_debug",
                                                                                                [],
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize";
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ]
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                          M.deref (|
                                                                                                            M.read (|
                                                                                                              self
                                                                                                            |)
                                                                                                          |),
                                                                                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                                                                                          "width"
                                                                                                        |),
                                                                                                        "openvm_stark_backend::keygen::types::TraceWidth",
                                                                                                        "after_challenge"
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |) in
                                                                      res
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [ Ty.path "core::fmt::rt::Placeholder" ]
                                        ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 6 ]
                                              [ Ty.path "core::fmt::rt::Placeholder" ]
                                          ])
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [ Ty.path "core::fmt::rt::Placeholder" ]
                                          ]),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 6 ]
                                                  [ Ty.path "core::fmt::rt::Placeholder" ],
                                                Value.Array
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Placeholder",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Placeholder",
                                                        "new",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        Value.Integer IntegerKind.Usize 0;
                                                        Value.UnicodeChar 32;
                                                        Value.StructTuple
                                                          "core::fmt::rt::Alignment::Left"
                                                          []
                                                          []
                                                          [];
                                                        Value.Integer IntegerKind.U32 0;
                                                        Value.StructTuple
                                                          "core::fmt::rt::Count::Implied"
                                                          []
                                                          []
                                                          [];
                                                        Value.StructTuple
                                                          "core::fmt::rt::Count::Is"
                                                          []
                                                          []
                                                          [ Value.Integer IntegerKind.Usize 20 ]
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Placeholder",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Placeholder",
                                                        "new",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        Value.Integer IntegerKind.Usize 1;
                                                        Value.UnicodeChar 32;
                                                        Value.StructTuple
                                                          "core::fmt::rt::Alignment::Left"
                                                          []
                                                          []
                                                          [];
                                                        Value.Integer IntegerKind.U32 0;
                                                        Value.StructTuple
                                                          "core::fmt::rt::Count::Implied"
                                                          []
                                                          []
                                                          [];
                                                        Value.StructTuple
                                                          "core::fmt::rt::Count::Is"
                                                          []
                                                          []
                                                          [ Value.Integer IntegerKind.Usize 10 ]
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Placeholder",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Placeholder",
                                                        "new",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        Value.Integer IntegerKind.Usize 2;
                                                        Value.UnicodeChar 32;
                                                        Value.StructTuple
                                                          "core::fmt::rt::Alignment::Left"
                                                          []
                                                          []
                                                          [];
                                                        Value.Integer IntegerKind.U32 0;
                                                        Value.StructTuple
                                                          "core::fmt::rt::Count::Implied"
                                                          []
                                                          []
                                                          [];
                                                        Value.StructTuple
                                                          "core::fmt::rt::Count::Is"
                                                          []
                                                          []
                                                          [ Value.Integer IntegerKind.Usize 11 ]
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Placeholder",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Placeholder",
                                                        "new",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        Value.Integer IntegerKind.Usize 3;
                                                        Value.UnicodeChar 32;
                                                        Value.StructTuple
                                                          "core::fmt::rt::Alignment::Left"
                                                          []
                                                          []
                                                          [];
                                                        Value.Integer IntegerKind.U32 0;
                                                        Value.StructTuple
                                                          "core::fmt::rt::Count::Implied"
                                                          []
                                                          []
                                                          [];
                                                        Value.StructTuple
                                                          "core::fmt::rt::Count::Is"
                                                          []
                                                          []
                                                          [ Value.Integer IntegerKind.Usize 5 ]
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Placeholder",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Placeholder",
                                                        "new",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        Value.Integer IntegerKind.Usize 4;
                                                        Value.UnicodeChar 32;
                                                        Value.StructTuple
                                                          "core::fmt::rt::Alignment::Left"
                                                          []
                                                          []
                                                          [];
                                                        Value.Integer IntegerKind.U32 0;
                                                        Value.StructTuple
                                                          "core::fmt::rt::Count::Implied"
                                                          []
                                                          []
                                                          [];
                                                        Value.StructTuple
                                                          "core::fmt::rt::Count::Is"
                                                          []
                                                          []
                                                          [ Value.Integer IntegerKind.Usize 5 ]
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Placeholder",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Placeholder",
                                                        "new",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        Value.Integer IntegerKind.Usize 5;
                                                        Value.UnicodeChar 32;
                                                        Value.StructTuple
                                                          "core::fmt::rt::Alignment::Left"
                                                          []
                                                          []
                                                          [];
                                                        Value.Integer IntegerKind.U32 0;
                                                        Value.StructTuple
                                                          "core::fmt::rt::Count::Implied"
                                                          []
                                                          []
                                                          [];
                                                        Value.StructTuple
                                                          "core::fmt::rt::Count::Is"
                                                          []
                                                          []
                                                          [ Value.Integer IntegerKind.Usize 5 ]
                                                      ]
                                                    |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.path "core::fmt::rt::UnsafeArg",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::rt::UnsafeArg",
                                        "new",
                                        [],
                                        []
                                      |),
                                      []
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "core::convert::Infallible"; Ty.path "core::fmt::Error"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "core::fmt::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ]
                      [ Value.Tuple [] ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_openvm_stark_backend_prover_metrics_SingleTraceMetrics.
    
    (*
    pub fn trace_metrics<PB: ProverBackend>(
        mpk: &DeviceMultiStarkProvingKey<PB>,
        log_trace_heights: &[u8],
    ) -> TraceMetrics {
        let heights = log_trace_heights
            .iter()
            .map(|&h| 1usize << h)
            .collect::<Vec<_>>();
        let trace_height_inequalities = mpk
            .trace_height_constraints
            .iter()
            .map(|trace_height_constraint| {
                let weighted_sum = heights
                    .iter()
                    .enumerate()
                    .map(|(j, h)| {
                        let air_id = mpk.air_ids[j];
                        (trace_height_constraint.coefficients[air_id] as usize) * h
                    })
                    .sum::<usize>();
                (weighted_sum, trace_height_constraint.threshold as usize)
            })
            .collect::<Vec<_>>();
        let per_air: Vec<_> = zip_eq(&mpk.per_air, heights)
            .map(|(pk, height)| {
                let air_name = pk.air_name;
                let mut width = pk.vk.params.width.clone();
                let ext_degree = PB::CHALLENGE_EXT_DEGREE as usize;
                for w in &mut width.after_challenge {
                    *w *= ext_degree;
                }
                let cells = TraceCells {
                    preprocessed: width.preprocessed.map(|w| w * height),
                    cached_mains: width.cached_mains.iter().map(|w| w * height).collect(),
                    common_main: width.common_main * height,
                    after_challenge: width.after_challenge.iter().map(|w| w * height).collect(),
                };
                let total_cells = cells
                    .cached_mains
                    .iter()
                    .chain([&cells.common_main])
                    .chain(cells.after_challenge.iter())
                    .sum::<usize>();
                SingleTraceMetrics {
                    air_name: air_name.to_string(),
                    height,
                    width,
                    cells,
                    total_cells,
                    quotient_poly_cells: height * (pk.vk.quotient_degree as usize) * ext_degree,
                }
            })
            .collect();
        let total_cells = per_air.iter().map(|m| m.total_cells).sum();
        let metrics = TraceMetrics {
            per_air,
            total_cells,
            trace_height_inequalities,
        };
        info!("{}", metrics);
        metrics
    }
    *)
    Definition trace_metrics (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ PB ], [ mpk; log_trace_heights ] =>
        ltac:(M.monadic
          (let mpk :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::prover::types::DeviceMultiStarkProvingKey")
                    []
                    [ PB ]
                ],
              mpk
            |) in
          let log_trace_heights :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
              log_trace_heights
            |) in
          M.read (|
            let~ heights :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ];
                      Ty.function [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ] (Ty.path "usize")
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ];
                        Ty.function [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ] (Ty.path "usize")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.path "usize";
                        Ty.function [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ] (Ty.path "usize")
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| log_trace_heights |) |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.path "usize",
                                  M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u8" ], α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.deref (| M.read (| γ |) |) in
                                        let h := M.copy (| Ty.path "u8", γ |) in
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.shl,
                                          [ Value.Integer IntegerKind.Usize 1; M.read (| h |) ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |) in
            let~ trace_height_inequalities :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ]; Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ]; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ]
                        ]
                        (Ty.tuple [ Ty.path "usize"; Ty.path "usize" ])
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ]
                          ]
                          (Ty.tuple [ Ty.path "usize"; Ty.path "usize" ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ]
                          ]
                          (Ty.tuple [ Ty.path "usize"; Ty.path "usize" ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.path
                                          "openvm_stark_backend::keygen::types::LinearConstraint"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path
                                        "openvm_stark_backend::keygen::types::LinearConstraint";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| mpk |) |),
                                      "openvm_stark_backend::prover::types::DeviceMultiStarkProvingKey",
                                      "trace_height_constraints"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.tuple [ Ty.path "usize"; Ty.path "usize" ],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.path
                                          "openvm_stark_backend::keygen::types::LinearConstraint"
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let trace_height_constraint :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_stark_backend::keygen::types::LinearConstraint"
                                              ],
                                            γ
                                          |) in
                                        M.read (|
                                          let~ weighted_sum : Ty.path "usize" :=
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "usize";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ]
                                                          ]
                                                      ]
                                                      (Ty.path "usize")
                                                  ],
                                                [],
                                                [],
                                                "sum",
                                                [],
                                                [ Ty.path "usize" ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::map::Map")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.path "usize")
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ],
                                                    [],
                                                    [],
                                                    "map",
                                                    [],
                                                    [
                                                      Ty.path "usize";
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.path "usize")
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        [],
                                                        [],
                                                        "enumerate",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            "iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ Ty.path "usize" ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "deref",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      heights
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |);
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            ltac:(M.monadic
                                                              (M.match_operator (|
                                                                Ty.path "usize",
                                                                M.alloc (|
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "usize" ]
                                                                    ],
                                                                  α0
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          0
                                                                        |) in
                                                                      let γ0_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          1
                                                                        |) in
                                                                      let j :=
                                                                        M.copy (|
                                                                          Ty.path "usize",
                                                                          γ0_0
                                                                        |) in
                                                                      let h :=
                                                                        M.copy (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "usize" ],
                                                                          γ0_1
                                                                        |) in
                                                                      M.read (|
                                                                        let~ air_id :
                                                                            Ty.path "usize" :=
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "core::ops::index::Index",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize";
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [],
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                  "index",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          mpk
                                                                                        |)
                                                                                      |),
                                                                                      "openvm_stark_backend::prover::types::DeviceMultiStarkProvingKey",
                                                                                      "air_ids"
                                                                                    |)
                                                                                  |);
                                                                                  M.read (| j |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Ty.path "usize",
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            M.get_trait_method (|
                                                                              "core::ops::arith::Mul",
                                                                              Ty.path "usize",
                                                                              [],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ Ty.path "usize"
                                                                                  ]
                                                                              ],
                                                                              "mul",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.cast
                                                                                (Ty.path "usize")
                                                                                (M.read (|
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "u32"
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::index::Index",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "u32";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [],
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                        "index",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                trace_height_constraint
                                                                                              |)
                                                                                            |),
                                                                                            "openvm_stark_backend::keygen::types::LinearConstraint",
                                                                                            "coefficients"
                                                                                          |)
                                                                                        |);
                                                                                        M.read (|
                                                                                          air_id
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |));
                                                                              M.read (| h |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)))
                                                                ]
                                                              |)))
                                                          | _ =>
                                                            M.impossible "wrong number of arguments"
                                                          end))
                                                  ]
                                                |)
                                              ]
                                            |) in
                                          M.alloc (|
                                            Ty.tuple [ Ty.path "usize"; Ty.path "usize" ],
                                            Value.Tuple
                                              [
                                                M.read (| weighted_sum |);
                                                M.cast
                                                  (Ty.path "usize")
                                                  (M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (|
                                                        M.read (| trace_height_constraint |)
                                                      |),
                                                      "openvm_stark_backend::keygen::types::LinearConstraint",
                                                      "threshold"
                                                    |)
                                                  |))
                                              ]
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |) in
            let~ per_air :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                    Ty.path "alloc::alloc::Global"
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "itertools::zip_eq_impl::ZipEq")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::prover::types::DeviceStarkProvingKey")
                                []
                                [ PB ]
                            ];
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_stark_backend::prover::types::DeviceStarkProvingKey")
                                    []
                                    [ PB ]
                                ];
                              Ty.path "usize"
                            ]
                        ]
                        (Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics")
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "itertools::zip_eq_impl::ZipEq")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::prover::types::DeviceStarkProvingKey")
                                  []
                                  [ PB ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::prover::types::DeviceStarkProvingKey")
                                      []
                                      [ PB ]
                                  ];
                                Ty.path "usize"
                              ]
                          ]
                          (Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "itertools::zip_eq_impl::ZipEq")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::prover::types::DeviceStarkProvingKey")
                                []
                                [ PB ]
                            ];
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::prover::types::DeviceStarkProvingKey")
                                      []
                                      [ PB ]
                                  ];
                                Ty.path "usize"
                              ]
                          ]
                          (Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics")
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "itertools::zip_eq_impl::ZipEq")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_stark_backend::prover::types::DeviceStarkProvingKey")
                                  []
                                  [ PB ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.get_function (|
                          "itertools::zip_eq_impl::zip_eq",
                          [],
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_backend::prover::types::DeviceStarkProvingKey")
                                      []
                                      [ PB ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                          ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| mpk |) |),
                              "openvm_stark_backend::prover::types::DeviceMultiStarkProvingKey",
                              "per_air"
                            |)
                          |);
                          M.read (| heights |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.path
                                    "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::prover::types::DeviceStarkProvingKey")
                                              []
                                              [ PB ]
                                          ];
                                        Ty.path "usize"
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let pk :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::prover::types::DeviceStarkProvingKey")
                                                  []
                                                  [ PB ]
                                              ],
                                            γ0_0
                                          |) in
                                        let height := M.copy (| Ty.path "usize", γ0_1 |) in
                                        M.read (|
                                          let~ air_name :
                                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| pk |) |),
                                                "openvm_stark_backend::prover::types::DeviceStarkProvingKey",
                                                "air_name"
                                              |)
                                            |) in
                                          let~ width :
                                              Ty.path
                                                "openvm_stark_backend::keygen::types::TraceWidth" :=
                                            M.call_closure (|
                                              Ty.path
                                                "openvm_stark_backend::keygen::types::TraceWidth",
                                              M.get_trait_method (|
                                                "core::clone::Clone",
                                                Ty.path
                                                  "openvm_stark_backend::keygen::types::TraceWidth",
                                                [],
                                                [],
                                                "clone",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (|
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| pk |) |),
                                                            "openvm_stark_backend::prover::types::DeviceStarkProvingKey",
                                                            "vk"
                                                          |)
                                                        |)
                                                      |),
                                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey",
                                                      "params"
                                                    |),
                                                    "openvm_stark_backend::keygen::types::StarkVerifyingParams",
                                                    "width"
                                                  |)
                                                |)
                                              ]
                                            |) in
                                          let~ ext_degree : Ty.path "usize" :=
                                            M.cast
                                              (Ty.path "usize")
                                              (M.read (|
                                                get_constant (|
                                                  "openvm_stark_backend::prover::hal::ProverBackend::CHALLENGE_EXT_DEGREE",
                                                  Ty.path "u8"
                                                |)
                                              |)) in
                                          let~ _ : Ty.tuple [] :=
                                            M.read (|
                                              M.use
                                                (M.alloc (|
                                                  Ty.tuple [],
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        []
                                                        [ Ty.path "usize" ],
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::IterMut")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          [],
                                                          [],
                                                          "into_iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.SubPointer.get_struct_record_field (|
                                                              width,
                                                              "openvm_stark_backend::keygen::types::TraceWidth",
                                                              "after_challenge"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter :=
                                                            M.copy (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              γ
                                                            |) in
                                                          M.read (|
                                                            M.loop (|
                                                              Ty.tuple [],
                                                              ltac:(M.monadic
                                                                (let~ _ : Ty.tuple [] :=
                                                                  M.match_operator (|
                                                                    Ty.tuple [],
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [ Ty.path "usize" ]
                                                                        ],
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              []
                                                                              [ Ty.path "usize" ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::IterMut")
                                                                            []
                                                                            [ Ty.path "usize" ],
                                                                          [],
                                                                          [],
                                                                          "next",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                iter
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let _ :=
                                                                            M.is_struct_tuple (|
                                                                              γ,
                                                                              "core::option::Option::None"
                                                                            |) in
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              γ,
                                                                              "core::option::Option::Some",
                                                                              0
                                                                            |) in
                                                                          let w :=
                                                                            M.copy (|
                                                                              Ty.apply
                                                                                (Ty.path "&mut")
                                                                                []
                                                                                [ Ty.path "usize" ],
                                                                              γ0_0
                                                                            |) in
                                                                          M.read (|
                                                                            let~ _ : Ty.tuple [] :=
                                                                              let β :=
                                                                                M.deref (|
                                                                                  M.read (| w |)
                                                                                |) in
                                                                              M.write (|
                                                                                β,
                                                                                M.call_closure (|
                                                                                  Ty.path "usize",
                                                                                  BinOp.Wrap.mul,
                                                                                  [
                                                                                    M.read (| β |);
                                                                                    M.read (|
                                                                                      ext_degree
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |) in
                                                                            M.alloc (|
                                                                              Ty.tuple [],
                                                                              Value.Tuple []
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                M.alloc (|
                                                                  Ty.tuple [],
                                                                  Value.Tuple []
                                                                |)))
                                                            |)
                                                          |)))
                                                    ]
                                                  |)
                                                |))
                                            |) in
                                          let~ cells :
                                              Ty.path
                                                "openvm_stark_backend::prover::metrics::TraceCells" :=
                                            Value.mkStructRecord
                                              "openvm_stark_backend::prover::metrics::TraceCells"
                                              []
                                              []
                                              [
                                                ("preprocessed",
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "usize" ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ Ty.path "usize" ],
                                                      "map",
                                                      [],
                                                      [
                                                        Ty.path "usize";
                                                        Ty.function
                                                          [ Ty.path "usize" ]
                                                          (Ty.path "usize")
                                                      ]
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          width,
                                                          "openvm_stark_backend::keygen::types::TraceWidth",
                                                          "preprocessed"
                                                        |)
                                                      |);
                                                      M.closure
                                                        (fun γ =>
                                                          ltac:(M.monadic
                                                            match γ with
                                                            | [ α0 ] =>
                                                              ltac:(M.monadic
                                                                (M.match_operator (|
                                                                  Ty.path "usize",
                                                                  M.alloc (| Ty.path "usize", α0 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let w :=
                                                                          M.copy (|
                                                                            Ty.path "usize",
                                                                            γ
                                                                          |) in
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.mul,
                                                                          [
                                                                            M.read (| w |);
                                                                            M.read (| height |)
                                                                          ]
                                                                        |)))
                                                                  ]
                                                                |)))
                                                            | _ =>
                                                              M.impossible
                                                                "wrong number of arguments"
                                                            end))
                                                    ]
                                                  |));
                                                ("cached_mains",
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.path "usize";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "usize" ];
                                                          Ty.function
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ]
                                                            (Ty.path "usize")
                                                        ],
                                                      [],
                                                      [],
                                                      "collect",
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path "usize";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              []
                                                              [ Ty.path "usize" ];
                                                            Ty.function
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                              (Ty.path "usize")
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          [],
                                                          "map",
                                                          [],
                                                          [
                                                            Ty.path "usize";
                                                            Ty.function
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                              (Ty.path "usize")
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              "iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Ty.path "usize" ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "deref",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          width,
                                                                          "openvm_stark_backend::keygen::types::TraceWidth",
                                                                          "cached_mains"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.path "usize",
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        α0
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let w :=
                                                                              M.copy (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                γ
                                                                              |) in
                                                                            M.call_closure (|
                                                                              Ty.path "usize",
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Mul",
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                [],
                                                                                [ Ty.path "usize" ],
                                                                                "mul",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| w |);
                                                                                M.read (| height |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |));
                                                ("common_main",
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.mul,
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          width,
                                                          "openvm_stark_backend::keygen::types::TraceWidth",
                                                          "common_main"
                                                        |)
                                                      |);
                                                      M.read (| height |)
                                                    ]
                                                  |));
                                                ("after_challenge",
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.path "usize";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "usize" ];
                                                          Ty.function
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ]
                                                            (Ty.path "usize")
                                                        ],
                                                      [],
                                                      [],
                                                      "collect",
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path "usize";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              []
                                                              [ Ty.path "usize" ];
                                                            Ty.function
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                              (Ty.path "usize")
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          [],
                                                          "map",
                                                          [],
                                                          [
                                                            Ty.path "usize";
                                                            Ty.function
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                              (Ty.path "usize")
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              "iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Ty.path "usize" ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "deref",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          width,
                                                                          "openvm_stark_backend::keygen::types::TraceWidth",
                                                                          "after_challenge"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.path "usize",
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        α0
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let w :=
                                                                              M.copy (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                γ
                                                                              |) in
                                                                            M.call_closure (|
                                                                              Ty.path "usize",
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Mul",
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                [],
                                                                                [ Ty.path "usize" ],
                                                                                "mul",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| w |);
                                                                                M.read (| height |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |))
                                              ] in
                                          let~ total_cells : Ty.path "usize" :=
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::chain::Chain")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::chain::Chain")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path "core::array::iter::IntoIter")
                                                          [ Value.Integer IntegerKind.Usize 1 ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                [],
                                                [],
                                                "sum",
                                                [],
                                                [ Ty.path "usize" ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::chain::Chain")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::chain::Chain")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "usize" ];
                                                          Ty.apply
                                                            (Ty.path "core::array::iter::IntoIter")
                                                            [ Value.Integer IntegerKind.Usize 1 ]
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.path "usize" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::chain::Chain")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path "core::array::iter::IntoIter")
                                                          [ Value.Integer IntegerKind.Usize 1 ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ]
                                                          ]
                                                      ],
                                                    [],
                                                    [],
                                                    "chain",
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.path "usize" ]
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::chain::Chain")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "usize" ];
                                                          Ty.apply
                                                            (Ty.path "core::array::iter::IntoIter")
                                                            [ Value.Integer IntegerKind.Usize 1 ]
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        [],
                                                        [],
                                                        "chain",
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 1 ]
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            "iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ Ty.path "usize" ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "deref",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        cells,
                                                                        "openvm_stark_backend::prover::metrics::TraceCells",
                                                                        "cached_mains"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        Value.Array
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.SubPointer.get_struct_record_field (|
                                                                cells,
                                                                "openvm_stark_backend::prover::metrics::TraceCells",
                                                                "common_main"
                                                              |)
                                                            |)
                                                          ]
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Ty.path "usize" ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        "iter",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "usize" ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                [],
                                                                "deref",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    cells,
                                                                    "openvm_stark_backend::prover::metrics::TraceCells",
                                                                    "after_challenge"
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |) in
                                          M.alloc (|
                                            Ty.path
                                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                            Value.mkStructRecord
                                              "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                              []
                                              []
                                              [
                                                ("air_name",
                                                  M.call_closure (|
                                                    Ty.path "alloc::string::String",
                                                    M.get_trait_method (|
                                                      "alloc::string::ToString",
                                                      Ty.path "str",
                                                      [],
                                                      [],
                                                      "to_string",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| air_name |) |)
                                                      |)
                                                    ]
                                                  |));
                                                ("height", M.read (| height |));
                                                ("width", M.read (| width |));
                                                ("cells", M.read (| cells |));
                                                ("total_cells", M.read (| total_cells |));
                                                ("quotient_poly_cells",
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.mul,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.mul,
                                                        [
                                                          M.read (| height |);
                                                          M.cast
                                                            (Ty.path "usize")
                                                            (M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (|
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (| M.read (| pk |) |),
                                                                      "openvm_stark_backend::prover::types::DeviceStarkProvingKey",
                                                                      "vk"
                                                                    |)
                                                                  |)
                                                                |),
                                                                "openvm_stark_backend::keygen::types::StarkVerifyingKey",
                                                                "quotient_degree"
                                                              |)
                                                            |))
                                                        ]
                                                      |);
                                                      M.read (| ext_degree |)
                                                    ]
                                                  |))
                                              ]
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |) in
            let~ total_cells : Ty.path "usize" :=
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics" ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics" ]
                        ]
                        (Ty.path "usize")
                    ],
                  [],
                  [],
                  "sum",
                  [],
                  [ Ty.path "usize" ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics" ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                              ]
                          ]
                          (Ty.path "usize")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics" ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.path "usize";
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                              ]
                          ]
                          (Ty.path "usize")
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics" ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.path "openvm_stark_backend::prover::metrics::SingleTraceMetrics" ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.path
                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path
                                        "openvm_stark_backend::prover::metrics::SingleTraceMetrics";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, per_air |) ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.path "usize",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.path
                                          "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let m :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_stark_backend::prover::metrics::SingleTraceMetrics"
                                              ],
                                            γ
                                          |) in
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| m |) |),
                                            "openvm_stark_backend::prover::metrics::SingleTraceMetrics",
                                            "total_cells"
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |) in
            let~ metrics : Ty.path "openvm_stark_backend::prover::metrics::TraceMetrics" :=
              Value.mkStructRecord
                "openvm_stark_backend::prover::metrics::TraceMetrics"
                []
                []
                [
                  ("per_air", M.read (| per_air |));
                  ("total_cells", M.read (| total_cells |));
                  ("trace_height_inequalities", M.read (| trace_height_inequalities |))
                ] in
            let~ _ : Ty.tuple [] :=
              M.read (|
                let~ enabled : Ty.path "bool" :=
                  LogicalOp.and (|
                    LogicalOp.and (|
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialOrd",
                          Ty.path "tracing_core::metadata::Level",
                          [],
                          [ Ty.path "tracing_core::metadata::LevelFilter" ],
                          "le",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            get_associated_constant (|
                              Ty.path "tracing_core::metadata::Level",
                              "INFO",
                              Ty.path "tracing_core::metadata::Level"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            get_constant (|
                              "tracing::level_filters::STATIC_MAX_LEVEL",
                              Ty.path "tracing_core::metadata::LevelFilter"
                            |)
                          |)
                        ]
                      |),
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.path "bool",
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "tracing_core::metadata::Level",
                            [],
                            [ Ty.path "tracing_core::metadata::LevelFilter" ],
                            "le",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              get_associated_constant (|
                                Ty.path "tracing_core::metadata::Level",
                                "INFO",
                                Ty.path "tracing_core::metadata::Level"
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.path "tracing_core::metadata::LevelFilter",
                                M.call_closure (|
                                  Ty.path "tracing_core::metadata::LevelFilter",
                                  M.get_associated_function (|
                                    Ty.path "tracing_core::metadata::LevelFilter",
                                    "current",
                                    [],
                                    []
                                  |),
                                  []
                                |)
                              |)
                            |)
                          ]
                        |)))
                    |),
                    ltac:(M.monadic
                      (M.read (|
                        let~ interest : Ty.path "tracing_core::subscriber::Interest" :=
                          M.call_closure (|
                            Ty.path "tracing_core::subscriber::Interest",
                            M.get_associated_function (|
                              Ty.path "tracing_core::callsite::DefaultCallsite",
                              "interest",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.read (|
                                    get_constant (|
                                      "openvm_stark_backend::prover::metrics::trace_metrics::__CALLSITE",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "tracing_core::callsite::DefaultCallsite" ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |) in
                        M.alloc (|
                          Ty.path "bool",
                          LogicalOp.and (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.path "tracing_core::subscriber::Interest",
                                  "is_never",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, interest |) ]
                              |)
                            |),
                            ltac:(M.monadic
                              (M.call_closure (|
                                Ty.path "bool",
                                M.get_function (|
                                  "tracing::__macro_support::__is_enabled",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "tracing_core::metadata::Metadata" ],
                                        M.get_trait_method (|
                                          "tracing_core::callsite::Callsite",
                                          Ty.path "tracing_core::callsite::DefaultCallsite",
                                          [],
                                          [],
                                          "metadata",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.read (|
                                                get_constant (|
                                                  "openvm_stark_backend::prover::metrics::trace_metrics::__CALLSITE",
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.path
                                                        "tracing_core::callsite::DefaultCallsite"
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.read (| interest |)
                                ]
                              |)))
                          |)
                        |)
                      |)))
                  |) in
                M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use enabled in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "core::ops::function::Fn",
                                  Ty.function
                                    [ Ty.path "tracing_core::field::ValueSet" ]
                                    (Ty.tuple []),
                                  [],
                                  [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ],
                                  "call",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.function
                                        [ Ty.path "tracing_core::field::ValueSet" ]
                                        (Ty.tuple []),
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (|
                                                    Ty.path "tracing_core::field::ValueSet",
                                                    α0
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let value_set :=
                                                          M.copy (|
                                                            Ty.path "tracing_core::field::ValueSet",
                                                            γ
                                                          |) in
                                                        M.read (|
                                                          let~ meta :
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ] :=
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_stark_backend::prover::metrics::trace_metrics::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::event::Event",
                                                                "dispatch",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| meta |) |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      value_set
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                        |)))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    |)
                                  |);
                                  Value.Tuple
                                    [
                                      M.read (|
                                        let~ iter : Ty.path "tracing_core::field::Iter" :=
                                          M.call_closure (|
                                            Ty.path "tracing_core::field::Iter",
                                            M.get_associated_function (|
                                              Ty.path "tracing_core::field::FieldSet",
                                              "iter",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "tracing_core::field::FieldSet" ],
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::metadata::Metadata",
                                                      "fields",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "openvm_stark_backend::prover::metrics::trace_metrics::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |) in
                                        M.alloc (|
                                          Ty.path "tracing_core::field::ValueSet",
                                          M.call_closure (|
                                            Ty.path "tracing_core::field::ValueSet",
                                            M.get_associated_function (|
                                              Ty.path "tracing_core::field::FieldSet",
                                              "value_set",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 1 ]
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "tracing_core::field::Field" ];
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.dyn
                                                                  [
                                                                    ("tracing_core::field::Value::Trait",
                                                                      [])
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "tracing_core::field::FieldSet" ],
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::metadata::Metadata",
                                                      "fields",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "openvm_stark_backend::prover::metrics::trace_metrics::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::field::Field"
                                                                ];
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("tracing_core::field::Value::Trait",
                                                                            [])
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ],
                                                      Value.Array
                                                        [
                                                          Value.Tuple
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path
                                                                    "tracing_core::field::Field",
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "tracing_core::field::Field",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::Field"
                                                                        ],
                                                                      "expect",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::field::Field"
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.path
                                                                            "tracing_core::field::Iter",
                                                                          [],
                                                                          [],
                                                                          "next",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                iter
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          mk_str (|
                                                                            "FieldSet corrupted (this is a bug)"
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              Value.StructTuple
                                                                "core::option::Option::Some"
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("tracing_core::field::Value::Trait",
                                                                            [])
                                                                        ]
                                                                    ]
                                                                ]
                                                                [
                                                                  M.read (|
                                                                    M.use
                                                                      (M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ],
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("tracing_core::field::Value::Trait",
                                                                                    [])
                                                                                ]
                                                                            ],
                                                                          M.pointer_coercion
                                                                            M.PointerCoercion.Unsize
                                                                            (Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "core::fmt::Arguments"
                                                                              ])
                                                                            (Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.dyn
                                                                                  [
                                                                                    ("tracing_core::field::Value::Trait",
                                                                                      [])
                                                                                  ]
                                                                              ]),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.alloc (|
                                                                                    Ty.path
                                                                                      "core::fmt::Arguments",
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "core::fmt::Arguments",
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::Arguments",
                                                                                        "new_v1",
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            1;
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            1
                                                                                        ],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.alloc (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "array")
                                                                                                  [
                                                                                                    Value.Integer
                                                                                                      IntegerKind.Usize
                                                                                                      1
                                                                                                  ]
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "str"
                                                                                                      ]
                                                                                                  ],
                                                                                                Value.Array
                                                                                                  [
                                                                                                    mk_str (|
                                                                                                      ""
                                                                                                    |)
                                                                                                  ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |);
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.alloc (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "array")
                                                                                                  [
                                                                                                    Value.Integer
                                                                                                      IntegerKind.Usize
                                                                                                      1
                                                                                                  ]
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "core::fmt::rt::Argument"
                                                                                                  ],
                                                                                                Value.Array
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "core::fmt::rt::Argument",
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.path
                                                                                                          "core::fmt::rt::Argument",
                                                                                                        "new_display",
                                                                                                        [],
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "openvm_stark_backend::prover::metrics::TraceMetrics"
                                                                                                        ]
                                                                                                      |),
                                                                                                      [
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              metrics
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |))
                                                                  |)
                                                                ]
                                                            ]
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |)
                |)
              |) in
            metrics
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_trace_metrics :
      M.IsFunction.C "openvm_stark_backend::prover::metrics::trace_metrics" trace_metrics.
    Admitted.
    Global Typeclasses Opaque trace_metrics.
    
    (*
    pub fn format_number_with_underscores(n: usize) -> String {
        let num_str = n.to_string();
        let mut result = String::new();
    
        // Start adding characters from the end of num_str
        for (i, c) in num_str.chars().rev().enumerate() {
            if i > 0 && i % 3 == 0 {
                result.push('_');
            }
            result.push(c);
        }
    
        // Reverse the result to get the correct order
        result.chars().rev().collect()
    }
    *)
    Definition format_number_with_underscores
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ n ] =>
        ltac:(M.monadic
          (let n := M.alloc (| Ty.path "usize", n |) in
          M.read (|
            let~ num_str : Ty.path "alloc::string::String" :=
              M.call_closure (|
                Ty.path "alloc::string::String",
                M.get_trait_method (|
                  "alloc::string::ToString",
                  Ty.path "usize",
                  [],
                  [],
                  "to_string",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, n |) ]
              |) in
            let~ result : Ty.path "alloc::string::String" :=
              M.call_closure (|
                Ty.path "alloc::string::String",
                M.get_associated_function (| Ty.path "alloc::string::String", "new", [], [] |),
                []
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.path "core::str::iter::Chars" ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                []
                                [ Ty.path "core::str::iter::Chars" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [ Ty.path "core::str::iter::Chars" ]
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::rev::Rev")
                                    []
                                    [ Ty.path "core::str::iter::Chars" ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [ Ty.path "core::str::iter::Chars" ],
                                [],
                                [],
                                "enumerate",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::rev::Rev")
                                    []
                                    [ Ty.path "core::str::iter::Chars" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.path "core::str::iter::Chars",
                                    [],
                                    [],
                                    "rev",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.path "core::str::iter::Chars",
                                      M.get_associated_function (|
                                        Ty.path "str",
                                        "chars",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.path "alloc::string::String",
                                                [],
                                                [],
                                                "deref",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, num_str |) ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::rev::Rev")
                                      []
                                      [ Ty.path "core::str::iter::Chars" ]
                                  ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.tuple [ Ty.path "usize"; Ty.path "char" ] ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.tuple [ Ty.path "usize"; Ty.path "char" ] ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::rev::Rev")
                                                  []
                                                  [ Ty.path "core::str::iter::Chars" ]
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                            let c := M.copy (| Ty.path "char", γ1_1 |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              LogicalOp.and (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.gt,
                                                                  [
                                                                    M.read (| i |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      0
                                                                  ]
                                                                |),
                                                                ltac:(M.monadic
                                                                  (M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.eq,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.rem,
                                                                        [
                                                                          M.read (| i |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            3
                                                                        ]
                                                                      |);
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        0
                                                                    ]
                                                                  |)))
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_associated_function (|
                                                                Ty.path "alloc::string::String",
                                                                "push",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  result
                                                                |);
                                                                Value.UnicodeChar 95
                                                              ]
                                                            |) in
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.path "alloc::string::String",
                                                    "push",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (| Pointer.Kind.MutRef, result |);
                                                    M.read (| c |)
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            M.alloc (|
              Ty.path "alloc::string::String",
              M.call_closure (|
                Ty.path "alloc::string::String",
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::rev::Rev")
                    []
                    [ Ty.path "core::str::iter::Chars" ],
                  [],
                  [],
                  "collect",
                  [],
                  [ Ty.path "alloc::string::String" ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::rev::Rev")
                      []
                      [ Ty.path "core::str::iter::Chars" ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.path "core::str::iter::Chars",
                      [],
                      [],
                      "rev",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "core::str::iter::Chars",
                        M.get_associated_function (| Ty.path "str", "chars", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.path "alloc::string::String",
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, result |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_format_number_with_underscores :
      M.IsFunction.C
        "openvm_stark_backend::prover::metrics::format_number_with_underscores"
        format_number_with_underscores.
    Admitted.
    Global Typeclasses Opaque format_number_with_underscores.
  End metrics.
End prover.
