(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module rap.
  (* Trait *)
  Module BaseAirWithPublicValues.
    Definition num_public_values
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| Ty.apply (Ty.path "&") [] [ Self ], self |) in
          Value.Integer IntegerKind.Usize 0))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_num_public_values :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "openvm_stark_backend::rap::BaseAirWithPublicValues"
        "num_public_values"
        (num_public_values F).
  End BaseAirWithPublicValues.
  
  (* Trait *)
  Module PartitionedBaseAir.
    Definition cached_main_widths
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| Ty.apply (Ty.path "&") [] [ Self ], self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
              "new",
              [],
              []
            |),
            []
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_cached_main_widths :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "openvm_stark_backend::rap::PartitionedBaseAir"
        "cached_main_widths"
        (cached_main_widths F).
    Definition common_main_width
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| Ty.apply (Ty.path "&") [] [ Self ], self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_trait_method (| "p3_air::air::BaseAir", Self, [], [ F ], "width", [], [] |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_common_main_width :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "openvm_stark_backend::rap::PartitionedBaseAir"
        "common_main_width"
        (common_main_width F).
  End PartitionedBaseAir.
  
  (* Trait *)
  (* Empty module 'Rap' *)
  
  (* Trait *)
  (* Empty module 'PermutationAirBuilderWithExposedValues' *)
  
  Axiom AirRef :
    forall (SC : Ty.t),
    (Ty.apply (Ty.path "openvm_stark_backend::rap::AirRef") [] [ SC ]) =
      (Ty.apply
        (Ty.path "alloc::sync::Arc")
        []
        [
          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
          Ty.path "alloc::alloc::Global"
        ]).
  
  (* Trait *)
  (* Empty module 'AnyRap' *)
  
  Module Impl_openvm_stark_backend_rap_AnyRap_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_openvm_stark_backend_rap_Rap_T_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_where_openvm_stark_backend_rap_Rap_T_openvm_stark_backend_air_builders_debug_DebugConstraintBuilder_SC_where_openvm_stark_backend_rap_BaseAirWithPublicValues_T_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_where_openvm_stark_backend_rap_PartitionedBaseAir_T_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_where_core_marker_Send_T_where_core_marker_Sync_T_SC_for_T.
    Definition Self (SC T : Ty.t) : Ty.t := T.
    
    (*
        fn as_any(&self) -> &dyn Any {
            self
        }
    *)
    Definition as_any (SC T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| Ty.apply (Ty.path "&") [] [ T ], self |) in
          M.call_closure (|
            Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
            M.pointer_coercion
              M.PointerCoercion.Unsize
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
              (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ T ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn name(&self) -> String {
            get_air_name(self)
        }
    *)
    Definition name (SC T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SC T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| Ty.apply (Ty.path "&") [] [ T ], self |) in
          M.call_closure (|
            Ty.path "alloc::string::String",
            M.get_function (| "openvm_stark_backend::rap::get_air_name", [], [ T ] |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (SC T : Ty.t),
      M.IsTraitInstance
        "openvm_stark_backend::rap::AnyRap"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ SC ]
        (Self SC T)
        (* Instance *)
        [ ("as_any", InstanceField.Method (as_any SC T)); ("name", InstanceField.Method (name SC T))
        ].
  End Impl_openvm_stark_backend_rap_AnyRap_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_openvm_stark_backend_rap_Rap_T_openvm_stark_backend_air_builders_symbolic_SymbolicRapBuilder_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_where_openvm_stark_backend_rap_Rap_T_openvm_stark_backend_air_builders_debug_DebugConstraintBuilder_SC_where_openvm_stark_backend_rap_BaseAirWithPublicValues_T_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_where_openvm_stark_backend_rap_PartitionedBaseAir_T_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_where_core_marker_Send_T_where_core_marker_Sync_T_SC_for_T.
  
  (*
  pub fn get_air_name<T>(_rap: &T) -> String {
      let full_name = type_name::<T>().to_string();
      // Split the input by the first '<' to separate the main type from its generics
      if let Some((main_part, generics_part)) = full_name.split_once('<') {
          // Extract the last segment of the main type
          let main_type = main_part.split("::").last().unwrap_or("");
  
          // Remove the trailing '>' from the generics part and split by ", " to handle multiple generics
          let generics: Vec<String> = generics_part
              .trim_end_matches('>')
              .split(", ")
              .map(|generic| {
                  // For each generic type, extract the last segment after "::"
                  generic.split("::").last().unwrap_or("").to_string()
              })
              .collect();
  
          // Join the simplified generics back together with ", " and format the result
          format!("{}<{}>", main_type, generics.join(", "))
      } else {
          // If there's no generic part, just return the last segment after "::"
          full_name.split("::").last().unwrap_or("").to_string()
      }
  }
  *)
  Definition get_air_name (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ T ], [ _rap ] =>
      ltac:(M.monadic
        (let _rap := M.alloc (| Ty.apply (Ty.path "&") [] [ T ], _rap |) in
        M.read (|
          let~ full_name : Ty.path "alloc::string::String" :=
            M.call_closure (|
              Ty.path "alloc::string::String",
              M.get_trait_method (|
                "alloc::string::ToString",
                Ty.path "str",
                [],
                [],
                "to_string",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                      M.get_function (| "core::any::type_name", [], [ T ] |),
                      []
                    |)
                  |)
                |)
              ]
            |) in
          M.alloc (|
            Ty.path "alloc::string::String",
            M.match_operator (|
              Ty.path "alloc::string::String",
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                              ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                                  Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                ]
                            ],
                          M.get_associated_function (|
                            Ty.path "str",
                            "split_once",
                            [],
                            [ Ty.path "char" ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.path "alloc::string::String",
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, full_name |) ]
                                |)
                              |)
                            |);
                            Value.UnicodeChar 60
                          ]
                        |)
                      |) in
                    let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                    let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                    let main_part :=
                      M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "str" ], γ1_0 |) in
                    let generics_part :=
                      M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "str" ], γ1_1 |) in
                    M.read (|
                      let~ main_type : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                            "unwrap_or",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::str::iter::Split")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                [],
                                [],
                                "last",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::str::iter::Split")
                                    []
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                  M.get_associated_function (|
                                    Ty.path "str",
                                    "split",
                                    [],
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| main_part |) |)
                                    |);
                                    mk_str (| "::" |)
                                  ]
                                |)
                              ]
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "" |) |) |)
                          ]
                        |) in
                      let~ generics :
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ] :=
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::str::iter::Split")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ];
                                Ty.function
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                  (Ty.path "alloc::string::String")
                              ],
                            [],
                            [],
                            "collect",
                            [],
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::str::iter::Split")
                                    []
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ];
                                  Ty.function
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                    (Ty.path "alloc::string::String")
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::str::iter::Split")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                [],
                                [],
                                "map",
                                [],
                                [
                                  Ty.path "alloc::string::String";
                                  Ty.function
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                    (Ty.path "alloc::string::String")
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::str::iter::Split")
                                    []
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                  M.get_associated_function (|
                                    Ty.path "str",
                                    "split",
                                    [],
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                          M.get_associated_function (|
                                            Ty.path "str",
                                            "trim_end_matches",
                                            [],
                                            [ Ty.path "char" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| generics_part |) |)
                                            |);
                                            Value.UnicodeChar 62
                                          ]
                                        |)
                                      |)
                                    |);
                                    mk_str (| ", " |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.path "alloc::string::String",
                                            M.alloc (|
                                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                              α0
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let generic :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                                      γ
                                                    |) in
                                                  M.call_closure (|
                                                    Ty.path "alloc::string::String",
                                                    M.get_trait_method (|
                                                      "alloc::string::ToString",
                                                      Ty.path "str",
                                                      [],
                                                      [],
                                                      "to_string",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "str" ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "str" ]
                                                                ],
                                                              "unwrap_or",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Ty.path "str" ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::str::iter::Split")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "last",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::str::iter::Split")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "str" ]
                                                                      ],
                                                                    M.get_associated_function (|
                                                                      Ty.path "str",
                                                                      "split",
                                                                      [],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "str" ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| generic |)
                                                                        |)
                                                                      |);
                                                                      mk_str (| "::" |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| mk_str (| "" |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |) in
                      M.alloc (|
                        Ty.path "alloc::string::String",
                        M.call_closure (|
                          Ty.path "alloc::string::String",
                          M.get_function (|
                            "core::hint::must_use",
                            [],
                            [ Ty.path "alloc::string::String" ]
                          |),
                          [
                            M.read (|
                              let~ res : Ty.path "alloc::string::String" :=
                                M.call_closure (|
                                  Ty.path "alloc::string::String",
                                  M.get_function (| "alloc::fmt::format", [], [] |),
                                  [
                                    M.call_closure (|
                                      Ty.path "core::fmt::Arguments",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Arguments",
                                        "new_v1",
                                        [
                                          Value.Integer IntegerKind.Usize 3;
                                          Value.Integer IntegerKind.Usize 2
                                        ],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 3 ]
                                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                                Value.Array
                                                  [
                                                    mk_str (| "" |);
                                                    mk_str (| "<" |);
                                                    mk_str (| ">" |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [ Ty.path "core::fmt::rt::Argument" ],
                                                Value.Array
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Argument",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        "new_display",
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ]
                                                        ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              main_type
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Argument",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        "new_display",
                                                        [],
                                                        [ Ty.path "alloc::string::String" ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Ty.path "alloc::string::String",
                                                                M.call_closure (|
                                                                  Ty.path "alloc::string::String",
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "alloc::string::String"
                                                                      ],
                                                                    "join",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "alloc::string::String"
                                                                                ]
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::deref::Deref",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "alloc::string::String";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            [],
                                                                            "deref",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              generics
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        mk_str (| ", " |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |) in
                              res
                            |)
                          ]
                        |)
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_trait_method (|
                        "alloc::string::ToString",
                        Ty.path "str",
                        [],
                        [],
                        "to_string",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                "unwrap_or",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::str::iter::Split")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    [],
                                    [],
                                    "last",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::str::iter::Split")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                      M.get_associated_function (|
                                        Ty.path "str",
                                        "split",
                                        [],
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.path "alloc::string::String",
                                                [],
                                                [],
                                                "deref",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, full_name |) ]
                                            |)
                                          |)
                                        |);
                                        mk_str (| "::" |)
                                      ]
                                    |)
                                  ]
                                |);
                                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "" |) |) |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)))
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_get_air_name :
    M.IsFunction.C "openvm_stark_backend::rap::get_air_name" get_air_name.
  Admitted.
  Global Typeclasses Opaque get_air_name.
End rap.
