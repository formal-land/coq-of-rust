(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module utils.
  (*
  pub fn batch_multiplicative_inverse_allowing_zero<F: Field>(values: Vec<F>) -> Vec<F> {
      // Check if values are zero, and construct a new vector with only nonzero values
      let mut nonzero_values = Vec::with_capacity(values.len());
      let mut indices = Vec::with_capacity(values.len());
      for (i, value) in values.iter().cloned().enumerate() {
          if value.is_zero() {
              continue;
          }
          nonzero_values.push(value);
          indices.push(i);
      }
  
      // Compute the multiplicative inverse of nonzero values
      let inverse_nonzero_values = p3_field::batch_multiplicative_inverse(&nonzero_values);
  
      // Reconstruct the original vector
      let mut result = values.clone();
      for (i, index) in indices.into_iter().enumerate() {
          result[index] = inverse_nonzero_values[i];
      }
  
      result
  }
  *)
  Definition batch_multiplicative_inverse_allowing_zero
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F ], [ values ] =>
      ltac:(M.monadic
        (let values :=
          M.alloc (|
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
            values
          |) in
        M.catch_return
          (Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]) (|
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.tuple [] := Value.Tuple [] in
              let __tracing_attr_span := M.read (| Value.DeclaredButUndefined |) in
              let __tracing_attr_guard := M.read (| Value.DeclaredButUndefined |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              LogicalOp.or (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.path "tracing_core::metadata::Level",
                                      [],
                                      [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                      "le",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_associated_constant (|
                                          Ty.path "tracing_core::metadata::Level",
                                          "INFO",
                                          Ty.path "tracing_core::metadata::Level"
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "tracing::level_filters::STATIC_MAX_LEVEL",
                                          Ty.path "tracing_core::metadata::LevelFilter"
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "INFO",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "tracing_core::metadata::LevelFilter",
                                            M.call_closure (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                "current",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic (Value.Bool false))
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              __tracing_attr_span,
                              M.read (|
                                let~ interest : Ty.path "tracing_core::subscriber::Interest" :=
                                  M.call_closure (|
                                    Ty.path "tracing_core::subscriber::Interest",
                                    M.get_associated_function (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      "never",
                                      [],
                                      []
                                    |),
                                    []
                                  |) in
                                M.alloc (|
                                  Ty.path "tracing::span::Span",
                                  M.match_operator (|
                                    Ty.path "tracing::span::Span",
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                Ty.path "bool",
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    LogicalOp.and (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "INFO",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_constant (|
                                                              "tracing::level_filters::STATIC_MAX_LEVEL",
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            |)
                                                          |)
                                                        ]
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "tracing_core::metadata::Level",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            ],
                                                            "le",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_associated_constant (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                "INFO",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter",
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter",
                                                                    "current",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)))
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.read (|
                                                        let~ _ : Ty.tuple [] :=
                                                          M.write (|
                                                            interest,
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                "interest",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_stark_backend::utils::batch_multiplicative_inverse_allowing_zero::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                "is_never",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  interest
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_function (|
                                                        "tracing::__macro_support::__is_enabled",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_stark_backend::utils::batch_multiplicative_inverse_allowing_zero::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.read (| interest |)
                                                      ]
                                                    |)))
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.read (|
                                            let~ meta :
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ] :=
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ],
                                                M.get_trait_method (|
                                                  "tracing_core::callsite::Callsite",
                                                  Ty.path "tracing_core::callsite::DefaultCallsite",
                                                  [],
                                                  [],
                                                  "metadata",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.read (|
                                                        get_constant (|
                                                          "openvm_stark_backend::utils::batch_multiplicative_inverse_allowing_zero::__CALLSITE",
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite"
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |) in
                                            M.alloc (|
                                              Ty.path "tracing::span::Span",
                                              M.call_closure (|
                                                Ty.path "tracing::span::Span",
                                                M.get_associated_function (|
                                                  Ty.path "tracing::span::Span",
                                                  "new",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| meta |) |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.path "tracing_core::field::ValueSet",
                                                          M.call_closure (|
                                                            Ty.path "tracing_core::field::ValueSet",
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::field::FieldSet",
                                                              "value_set",
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      0
                                                                  ]
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::field::Field"
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.dyn
                                                                                  [
                                                                                    ("tracing_core::field::Value::Trait",
                                                                                      [])
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::FieldSet"
                                                                      ],
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::metadata::Metadata",
                                                                      "fields",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| meta |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            0
                                                                        ]
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "tracing_core::field::Field"
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.dyn
                                                                                        [
                                                                                          ("tracing_core::field::Value::Trait",
                                                                                            [])
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ],
                                                                      Value.Array []
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.read (|
                                            let~ span : Ty.path "tracing::span::Span" :=
                                              M.call_closure (|
                                                Ty.path "tracing::span::Span",
                                                M.get_function (|
                                                  "tracing::__macro_support::__disabled_span",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::Metadata"
                                                          ],
                                                        M.get_trait_method (|
                                                          "tracing_core::callsite::Callsite",
                                                          Ty.path
                                                            "tracing_core::callsite::DefaultCallsite",
                                                          [],
                                                          [],
                                                          "metadata",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.read (|
                                                                get_constant (|
                                                                  "openvm_stark_backend::utils::batch_multiplicative_inverse_allowing_zero::__CALLSITE",
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::callsite::DefaultCallsite"
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] := Value.Tuple [] in
                                            span
                                          |)))
                                    ]
                                  |)
                                |)
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              __tracing_attr_guard,
                              M.call_closure (|
                                Ty.path "tracing::span::Entered",
                                M.get_associated_function (|
                                  Ty.path "tracing::span::Span",
                                  "enter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                              |)
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool false |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.never_to_any (|
                          M.read (|
                            let~ __tracing_attr_fake_return :
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ] :=
                              M.never_to_any (|
                                M.read (|
                                  M.loop (|
                                    Ty.path "never",
                                    ltac:(M.monadic (M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)
                              |) in
                            M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              let~ nonzero_values :
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    "with_capacity",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ],
                        "len",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, values |) ]
                    |)
                  ]
                |) in
              let~ indices :
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    "with_capacity",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ],
                        "len",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, values |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::cloned::Cloned")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::cloned::Cloned")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::cloned::Cloned")
                                    []
                                    [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::cloned::Cloned")
                                      []
                                      [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::cloned::Cloned")
                                    []
                                    [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ],
                                  [],
                                  [],
                                  "enumerate",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::cloned::Cloned")
                                      []
                                      [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                      [],
                                      [],
                                      "cloned",
                                      [],
                                      [ F ]
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ F ],
                                          "iter",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ],
                                                  [],
                                                  [],
                                                  "deref",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, values |) ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::cloned::Cloned")
                                        []
                                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                                    ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.tuple [ Ty.path "usize"; F ] ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.tuple [ Ty.path "usize"; F ] ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::cloned::Cloned")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ F ]
                                                    ]
                                                ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let γ1_0 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                              let γ1_1 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                              let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                              let value := M.copy (| F, γ1_1 |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.path "bool",
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  M.get_trait_method (|
                                                                    "p3_field::field::Field",
                                                                    F,
                                                                    [],
                                                                    [],
                                                                    "is_zero",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      value
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.never_to_any (|
                                                            M.read (| M.continue (||) |)
                                                          |)));
                                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ],
                                                      "push",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        nonzero_values
                                                      |);
                                                      M.read (| value |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.path "usize";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "push",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (| Pointer.Kind.MutRef, indices |);
                                                      M.read (| i |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ inverse_nonzero_values :
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                  M.get_function (|
                    "p3_field::batch_inverse::batch_multiplicative_inverse",
                    [],
                    [ F ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, nonzero_values |) |)
                            |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ result :
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, values |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [],
                                  "enumerate",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      [],
                                      "into_iter",
                                      [],
                                      []
                                    |),
                                    [ M.read (| indices |) ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                    ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let γ1_0 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                              let γ1_1 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                              let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                              let index := M.copy (| Ty.path "usize", γ1_1 |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.write (|
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply (Ty.path "&mut") [] [ F ],
                                                        M.get_trait_method (|
                                                          "core::ops::index::IndexMut",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ F; Ty.path "alloc::alloc::Global" ],
                                                          [],
                                                          [ Ty.path "usize" ],
                                                          "index_mut",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            result
                                                          |);
                                                          M.read (| index |)
                                                        ]
                                                      |)
                                                    |),
                                                    M.read (|
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply (Ty.path "&") [] [ F ],
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [ F; Ty.path "alloc::alloc::Global" ],
                                                            [],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              inverse_nonzero_values
                                                            |);
                                                            M.read (| i |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              result
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_batch_multiplicative_inverse_allowing_zero :
    M.IsFunction.C
      "openvm_stark_backend::utils::batch_multiplicative_inverse_allowing_zero"
      batch_multiplicative_inverse_allowing_zero.
  Admitted.
  Global Typeclasses Opaque batch_multiplicative_inverse_allowing_zero.
  
  (*
  pub fn disable_debug_builder() {
      USE_DEBUG_BUILDER.with(|debug| {
          *debug.lock().unwrap() = false;
      });
  }
  *)
  Definition disable_debug_builder (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "std::thread::local::LocalKey")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply (Ty.path "std::sync::mutex::Mutex") [] [ Ty.path "bool" ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ],
                "with",
                [],
                [
                  Ty.function
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply (Ty.path "std::sync::mutex::Mutex") [] [ Ty.path "bool" ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                    ]
                    (Ty.tuple []);
                  Ty.tuple []
                ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  get_constant (|
                    "openvm_stark_backend::air_builders::debug::USE_DEBUG_BUILDER",
                    Ty.apply
                      (Ty.path "std::thread::local::LocalKey")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply (Ty.path "std::sync::mutex::Mutex") [] [ Ty.path "bool" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                  |)
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        []
                                        [ Ty.path "bool" ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              α0
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let debug :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "std::sync::mutex::Mutex")
                                                []
                                                [ Ty.path "bool" ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      γ
                                    |) in
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.write (|
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply (Ty.path "&mut") [] [ Ty.path "bool" ],
                                            M.get_trait_method (|
                                              "core::ops::deref::DerefMut",
                                              Ty.apply
                                                (Ty.path "std::sync::mutex::MutexGuard")
                                                []
                                                [ Ty.path "bool" ],
                                              [],
                                              [],
                                              "deref_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "std::sync::mutex::MutexGuard")
                                                    []
                                                    [ Ty.path "bool" ],
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "std::sync::mutex::MutexGuard")
                                                      []
                                                      [ Ty.path "bool" ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "std::sync::mutex::MutexGuard")
                                                            []
                                                            [ Ty.path "bool" ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "std::sync::poison::PoisonError")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "std::sync::mutex::MutexGuard")
                                                                []
                                                                [ Ty.path "bool" ]
                                                            ]
                                                        ],
                                                      "unwrap",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "std::sync::mutex::MutexGuard")
                                                              []
                                                              [ Ty.path "bool" ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "std::sync::poison::PoisonError")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "std::sync::mutex::MutexGuard")
                                                                  []
                                                                  [ Ty.path "bool" ]
                                                              ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "std::sync::mutex::Mutex")
                                                            []
                                                            [ Ty.path "bool" ],
                                                          "lock",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "std::sync::mutex::Mutex")
                                                                      []
                                                                      [ Ty.path "bool" ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "std::sync::mutex::Mutex")
                                                                        []
                                                                        [ Ty.path "bool" ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| debug |) |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        Value.Bool false
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |) in
          M.alloc (| Ty.tuple [], Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_disable_debug_builder :
    M.IsFunction.C "openvm_stark_backend::utils::disable_debug_builder" disable_debug_builder.
  Admitted.
  Global Typeclasses Opaque disable_debug_builder.
  
  (*
  pub fn metrics_span<R, F: FnOnce() -> R>(name: impl Into<Cow<'static, str>>, f: F) -> R {
      cfg_if! {
          if #[cfg(feature = "bench-metrics")] {
              let start = std::time::Instant::now();
              let res = f();
              metrics::gauge!(name.into()).set(start.elapsed().as_millis() as f64);
              res
          } else {
              f()
          }
      }
  }
  *)
  Definition metrics_span (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ R; F; impl_Into_Cow_'static__str__ ], [ name; f ] =>
      ltac:(M.monadic
        (let name := M.alloc (| impl_Into_Cow_'static__str__, name |) in
        let f := M.alloc (| F, f |) in
        M.call_closure (|
          R,
          M.get_trait_method (|
            "core::ops::function::FnOnce",
            F,
            [],
            [ Ty.tuple [] ],
            "call_once",
            [],
            []
          |),
          [ M.read (| f |); Value.Tuple [] ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_metrics_span :
    M.IsFunction.C "openvm_stark_backend::utils::metrics_span" metrics_span.
  Admitted.
  Global Typeclasses Opaque metrics_span.
End utils.
