(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module entrypoint.
  (*
  fn log_error(error: &ProgramError) {
      pinocchio::log::sol_log(error.to_str::<TokenError>());
  }
  *)
  Definition log_error (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ error ] =>
      ltac:(M.monadic
        (let error := M.alloc (| error |) in
        M.read (|
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_function (| "pinocchio::log::sol_log", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                      M.get_trait_method (|
                        "pinocchio::program_error::ToStr",
                        Ty.path "pinocchio::program_error::ProgramError",
                        [],
                        [],
                        "to_str",
                        [],
                        [ Ty.path "spl_token_interface::error::TokenError" ]
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| error |) |) |) ]
                    |)
                  |)
                |)
              ]
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_log_error :
    M.IsFunction.C "pinocchio_token_program::entrypoint::log_error" log_error.
  Admitted.
  Global Typeclasses Opaque log_error.
  
  (*
  pub fn process_instruction(
      _program_id: &Pubkey,
      accounts: &[AccountInfo],
      instruction_data: &[u8],
  ) -> ProgramResult {
      let [discriminator, remaining @ ..] = instruction_data else {
          return Err(TokenError::InvalidInstruction.into());
      };
  
      let result = if *discriminator == 255 {
          // 255 - Batch
          #[cfg(feature = "logging")]
          pinocchio::msg!("Instruction: Batch");
  
          process_batch(accounts, remaining)
      } else {
          inner_process_instruction(accounts, instruction_data)
      };
  
      result.inspect_err(log_error)
  }
  *)
  Definition process_instruction (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ _program_id; accounts; instruction_data ] =>
      ltac:(M.monadic
        (let _program_id := M.alloc (| _program_id |) in
        let accounts := M.alloc (| accounts |) in
        let instruction_data := M.alloc (| instruction_data |) in
        M.read (|
          M.match_operator (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
            instruction_data,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                  let γ1_rest := M.SubPointer.get_slice_rest (| γ, 1, 0 |) in
                  let discriminator := M.alloc (| γ1_0 |) in
                  let remaining := M.alloc (| γ1_rest |) in
                  let~ result :
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ] :=
                    M.read (|
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [
                                        M.read (| M.deref (| M.read (| discriminator |) |) |);
                                        Value.Integer IntegerKind.U8 255
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError"
                                    ],
                                  M.get_function (|
                                    "pinocchio_token_program::processor::batch::process_batch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| accounts |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| remaining |) |)
                                    |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError"
                                    ],
                                  M.get_function (|
                                    "pinocchio_token_program::entrypoint::inner_process_instruction",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| accounts |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| instruction_data |) |)
                                    |)
                                  ]
                                |)
                              |)))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                        "inspect_err",
                        [],
                        [
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "pinocchio::program_error::ProgramError" ]
                            ]
                            (Ty.tuple [])
                        ]
                      |),
                      [
                        M.read (| result |);
                        M.get_function (|
                          "pinocchio_token_program::entrypoint::log_error",
                          [],
                          []
                        |)
                      ]
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_process_instruction :
    M.IsFunction.C "pinocchio_token_program::entrypoint::process_instruction" process_instruction.
  Admitted.
  Global Typeclasses Opaque process_instruction.
  
  (*
  pub(crate) fn inner_process_instruction(
      accounts: &[AccountInfo],
      instruction_data: &[u8],
  ) -> ProgramResult {
      let [discriminator, instruction_data @ ..] = instruction_data else {
          return Err(TokenError::InvalidInstruction.into());
      };
  
      match *discriminator {
          // 0 - InitializeMint
          0 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: InitializeMint");
  
              process_initialize_mint(accounts, instruction_data)
          }
          // 1 - InitializeAccount
          1 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: InitializeAccount");
  
              process_initialize_account(accounts)
          }
          // 3 - Transfer
          3 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: Transfer");
  
              process_transfer(accounts, instruction_data)
          }
          // 7 - MintTo
          7 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: MintTo");
  
              process_mint_to(accounts, instruction_data)
          }
          // 8 - Burn
          8 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: Burn");
  
              process_burn(accounts, instruction_data)
          }
          // 9 - CloseAccount
          9 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: CloseAccount");
  
              process_close_account(accounts)
          }
          // 12 - TransferChecked
          12 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: TransferChecked");
  
              process_transfer_checked(accounts, instruction_data)
          }
          // 15 - BurnChecked
          15 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: BurnChecked");
  
              process_burn_checked(accounts, instruction_data)
          }
          // 16 - InitializeAccount2
          16 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: InitializeAccount2");
  
              process_initialize_account2(accounts, instruction_data)
          }
          // 18 - InitializeAccount3
          18 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: InitializeAccount3");
  
              process_initialize_account3(accounts, instruction_data)
          }
          // 20 - InitializeMint2
          20 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: InitializeMint2");
  
              process_initialize_mint2(accounts, instruction_data)
          }
          d => inner_process_remaining_instruction(accounts, instruction_data, d),
      }
  }
  *)
  Definition inner_process_instruction (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ accounts; instruction_data ] =>
      ltac:(M.monadic
        (let accounts := M.alloc (| accounts |) in
        let instruction_data := M.alloc (| instruction_data |) in
        M.read (|
          M.match_operator (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
            instruction_data,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                  let γ1_rest := M.SubPointer.get_slice_rest (| γ, 1, 0 |) in
                  let discriminator := M.alloc (| γ1_0 |) in
                  let instruction_data := M.alloc (| γ1_rest |) in
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                    M.deref (| M.read (| discriminator |) |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.U8 0
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              M.get_function (|
                                "pinocchio_token_program::processor::initialize_mint::process_initialize_mint",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| accounts |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| instruction_data |) |)
                                |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.U8 1
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              M.get_function (|
                                "pinocchio_token_program::processor::initialize_account::process_initialize_account",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.U8 3
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              M.get_function (|
                                "pinocchio_token_program::processor::transfer::process_transfer",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| accounts |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| instruction_data |) |)
                                |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.U8 7
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              M.get_function (|
                                "pinocchio_token_program::processor::mint_to::process_mint_to",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| accounts |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| instruction_data |) |)
                                |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.U8 8
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              M.get_function (|
                                "pinocchio_token_program::processor::burn::process_burn",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| accounts |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| instruction_data |) |)
                                |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.U8 9
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              M.get_function (|
                                "pinocchio_token_program::processor::close_account::process_close_account",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.U8 12
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              M.get_function (|
                                "pinocchio_token_program::processor::transfer_checked::process_transfer_checked",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| accounts |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| instruction_data |) |)
                                |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.U8 15
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              M.get_function (|
                                "pinocchio_token_program::processor::burn_checked::process_burn_checked",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| accounts |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| instruction_data |) |)
                                |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.U8 16
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              M.get_function (|
                                "pinocchio_token_program::processor::initialize_account2::process_initialize_account2",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| accounts |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| instruction_data |) |)
                                |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.U8 18
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              M.get_function (|
                                "pinocchio_token_program::processor::initialize_account3::process_initialize_account3",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| accounts |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| instruction_data |) |)
                                |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.U8 20
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              M.get_function (|
                                "pinocchio_token_program::processor::initialize_mint2::process_initialize_mint2",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| accounts |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| instruction_data |) |)
                                |)
                              ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let d := M.copy (| γ |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              M.get_function (|
                                "pinocchio_token_program::entrypoint::inner_process_remaining_instruction",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| accounts |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| instruction_data |) |)
                                |);
                                M.read (| d |)
                              ]
                            |)
                          |)))
                    ]
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_inner_process_instruction :
    M.IsFunction.C
      "pinocchio_token_program::entrypoint::inner_process_instruction"
      inner_process_instruction.
  Admitted.
  Global Typeclasses Opaque inner_process_instruction.
  
  (*
  fn inner_process_remaining_instruction(
      accounts: &[AccountInfo],
      instruction_data: &[u8],
      discriminator: u8,
  ) -> ProgramResult {
      match discriminator {
          // 2 - InitializeMultisig
          2 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: InitializeMultisig");
  
              process_initialize_multisig(accounts, instruction_data)
          }
          // 4 - Approve
          4 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: Approve");
  
              process_approve(accounts, instruction_data)
          }
          // 5 - Revoke
          5 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: Revoke");
  
              process_revoke(accounts)
          }
          // 6 - SetAuthority
          6 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: SetAuthority");
  
              process_set_authority(accounts, instruction_data)
          }
          // 10 - FreezeAccount
          10 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: FreezeAccount");
  
              process_freeze_account(accounts)
          }
          // 11 - ThawAccount
          11 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: ThawAccount");
  
              process_thaw_account(accounts)
          }
          // 13 - ApproveChecked
          13 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: ApproveChecked");
  
              process_approve_checked(accounts, instruction_data)
          }
          // 14 - MintToChecked
          14 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: MintToChecked");
  
              process_mint_to_checked(accounts, instruction_data)
          }
          // 17 - SyncNative
          17 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: SyncNative");
  
              process_sync_native(accounts)
          }
          // 19 - InitializeMultisig2
          19 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: InitializeMultisig2");
  
              process_initialize_multisig2(accounts, instruction_data)
          }
          // 21 - GetAccountDataSize
          21 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: GetAccountDataSize");
  
              process_get_account_data_size(accounts)
          }
          // 22 - InitializeImmutableOwner
          22 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: InitializeImmutableOwner");
  
              process_initialize_immutable_owner(accounts)
          }
          // 23 - AmountToUiAmount
          23 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: AmountToUiAmount");
  
              process_amount_to_ui_amount(accounts, instruction_data)
          }
          // 24 - UiAmountToAmount
          24 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: UiAmountToAmount");
  
              process_ui_amount_to_amount(accounts, instruction_data)
          }
          // 38 - WithdrawExcessLamports
          38 => {
              #[cfg(feature = "logging")]
              pinocchio::msg!("Instruction: WithdrawExcessLamports");
  
              process_withdraw_excess_lamports(accounts)
          }
          _ => Err(TokenError::InvalidInstruction.into()),
      }
  }
  *)
  Definition inner_process_remaining_instruction
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [], [ accounts; instruction_data; discriminator ] =>
      ltac:(M.monadic
        (let accounts := M.alloc (| accounts |) in
        let instruction_data := M.alloc (| instruction_data |) in
        let discriminator := M.alloc (| discriminator |) in
        M.read (|
          M.match_operator (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
            discriminator,
            [
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 2
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::initialize_multisig::process_initialize_multisig",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction_data |) |) |)
                      ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 4
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::approve::process_approve",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction_data |) |) |)
                      ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 5
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::revoke::process_revoke",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |) ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 6
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::set_authority::process_set_authority",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction_data |) |) |)
                      ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 10
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::freeze_account::process_freeze_account",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |) ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 11
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::thaw_account::process_thaw_account",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |) ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 13
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::approve_checked::process_approve_checked",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction_data |) |) |)
                      ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 14
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::mint_to_checked::process_mint_to_checked",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction_data |) |) |)
                      ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 17
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::sync_native::process_sync_native",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |) ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 19
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::initialize_multisig2::process_initialize_multisig2",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction_data |) |) |)
                      ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 21
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::get_account_data_size::process_get_account_data_size",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |) ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 22
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::initialize_immutable_owner::process_initialize_immutable_owner",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |) ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 23
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::amount_to_ui_amount::process_amount_to_ui_amount",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction_data |) |) |)
                      ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 24
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::ui_amount_to_amount::process_ui_amount_to_amount",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction_data |) |) |)
                      ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U8 38
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_function (|
                        "pinocchio_token_program::processor::withdraw_excess_lamports::process_withdraw_excess_lamports",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |) ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Err"
                      []
                      [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                      [
                        M.call_closure (|
                          Ty.path "pinocchio::program_error::ProgramError",
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.path "spl_token_interface::error::TokenError",
                            [],
                            [ Ty.path "pinocchio::program_error::ProgramError" ],
                            "into",
                            [],
                            []
                          |),
                          [
                            Value.StructTuple
                              "spl_token_interface::error::TokenError::InvalidInstruction"
                              []
                              []
                              []
                          ]
                        |)
                      ]
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_inner_process_remaining_instruction :
    M.IsFunction.C
      "pinocchio_token_program::entrypoint::inner_process_remaining_instruction"
      inner_process_remaining_instruction.
  Admitted.
  Global Typeclasses Opaque inner_process_remaining_instruction.
End entrypoint.
