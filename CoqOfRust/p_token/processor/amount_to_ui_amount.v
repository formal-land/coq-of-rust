(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Module amount_to_ui_amount.
    (*
    pub fn process_amount_to_ui_amount(
        accounts: &[AccountInfo],
        instruction_data: &[u8],
    ) -> ProgramResult {
        let amount = unpack_amount(instruction_data)?;
    
        let mint_info = accounts.first().ok_or(ProgramError::NotEnoughAccountKeys)?;
        check_account_owner(mint_info)?;
        // SAFETY: single immutable borrow to `mint_info` account data and
        // `load` validates that the mint is initialized.
        let mint = unsafe {
            load::<Mint>(mint_info.borrow_data_unchecked()).map_err(|_| TokenError::InvalidMint)?
        };
    
        let mut logger = Logger::<MAX_FORMATTED_DIGITS>::default();
        logger.append_with_args(amount, &[Argument::Precision(mint.decimals)]);
        // "Extract" the formatted string from the logger.
        //
        // SAFETY: the logger is guaranteed to be a valid UTF-8 string.
        let mut s = unsafe { from_utf8_unchecked(&logger) };
    
        if mint.decimals > 0 && s.contains('.') {
            let zeros_trimmed = s.trim_end_matches('0');
            s = zeros_trimmed.trim_end_matches('.');
        }
    
        set_return_data(s.as_bytes());
    
        Ok(())
    }
    *)
    Definition process_amount_to_ui_amount
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ accounts; instruction_data ] =>
        ltac:(M.monadic
          (let accounts := M.alloc (| accounts |) in
          let instruction_data := M.alloc (| instruction_data |) in
          M.read (|
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
              ltac:(M.monadic
                (M.alloc (|
                  M.read (|
                    let~ amount : Ty.path "u64" :=
                      M.read (|
                        M.match_operator (|
                          Ty.path "u64",
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.path "spl_token_interface::error::TokenError"
                                    ];
                                  Ty.path "u64"
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "u64"; Ty.path "spl_token_interface::error::TokenError"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "u64";
                                      Ty.path "spl_token_interface::error::TokenError"
                                    ],
                                  M.get_function (|
                                    "pinocchio_token_program::processor::unpack_amount",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| instruction_data |) |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.tuple [];
                                                Ty.path "pinocchio::program_error::ProgramError"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "spl_token_interface::error::TokenError"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let~ mint_info :
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "pinocchio::account_info::AccountInfo" ] :=
                      M.read (|
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "pinocchio::account_info::AccountInfo" ],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ];
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "pinocchio::account_info::AccountInfo" ];
                                    Ty.path "pinocchio::program_error::ProgramError"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "pinocchio::account_info::AccountInfo" ];
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                      ],
                                    "ok_or",
                                    [],
                                    [ Ty.path "pinocchio::program_error::ProgramError" ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [ Ty.path "pinocchio::account_info::AccountInfo" ],
                                        "first",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| accounts |) |)
                                        |)
                                      ]
                                    |);
                                    Value.StructTuple
                                      "pinocchio::program_error::ProgramError::NotEnoughAccountKeys"
                                      []
                                      []
                                      []
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.tuple [];
                                                Ty.path "pinocchio::program_error::ProgramError"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "pinocchio::program_error::ProgramError"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.read (|
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError"
                                    ],
                                  M.get_function (|
                                    "pinocchio_token_program::processor::check_account_owner",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| mint_info |) |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.tuple [];
                                                Ty.path "pinocchio::program_error::ProgramError"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "pinocchio::program_error::ProgramError"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let~ mint :
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "spl_token_interface::state::mint::Mint" ] :=
                      M.read (|
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "spl_token_interface::state::mint::Mint" ],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.path "spl_token_interface::error::TokenError"
                                    ];
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "spl_token_interface::state::mint::Mint" ]
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "spl_token_interface::state::mint::Mint" ];
                                    Ty.path "spl_token_interface::error::TokenError"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "spl_token_interface::state::mint::Mint" ];
                                      Ty.path "spl_token_interface::error::TokenError"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "spl_token_interface::state::mint::Mint" ];
                                        Ty.path "pinocchio::program_error::ProgramError"
                                      ],
                                    "map_err",
                                    [],
                                    [
                                      Ty.path "spl_token_interface::error::TokenError";
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [ Ty.path "pinocchio::program_error::ProgramError" ]
                                        ]
                                        (Ty.path "spl_token_interface::error::TokenError")
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "spl_token_interface::state::mint::Mint" ];
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ],
                                      M.get_function (|
                                        "spl_token_interface::state::load",
                                        [],
                                        [ Ty.path "spl_token_interface::state::mint::Mint" ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                              M.get_associated_function (|
                                                Ty.path "pinocchio::account_info::AccountInfo",
                                                "borrow_data_unchecked",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| mint_info |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError"
                                                      ]
                                                  ]
                                                  (Ty.path
                                                    "spl_token_interface::error::TokenError"),
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (Value.StructTuple
                                                        "spl_token_interface::error::TokenError::InvalidMint"
                                                        []
                                                        []
                                                        []))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.tuple [];
                                                Ty.path "pinocchio::program_error::ProgramError"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "spl_token_interface::error::TokenError"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let~ logger :
                        Ty.apply
                          (Ty.path "pinocchio_log::logger::Logger")
                          [ Value.Integer IntegerKind.Usize 257 ]
                          [] :=
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "pinocchio_log::logger::Logger")
                          [ Value.Integer IntegerKind.Usize 257 ]
                          [],
                        M.get_trait_method (|
                          "core::default::Default",
                          Ty.apply
                            (Ty.path "pinocchio_log::logger::Logger")
                            [ Value.Integer IntegerKind.Usize 257 ]
                            [],
                          [],
                          [],
                          "default",
                          [],
                          []
                        |),
                        []
                      |) in
                    let~ _ :
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "pinocchio_log::logger::Logger")
                              [ Value.Integer IntegerKind.Usize 257 ]
                              []
                          ] :=
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "pinocchio_log::logger::Logger")
                              [ Value.Integer IntegerKind.Usize 257 ]
                              []
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "pinocchio_log::logger::Logger")
                            [ Value.Integer IntegerKind.Usize 257 ]
                            [],
                          "append_with_args",
                          [],
                          [ Ty.path "u64" ]
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, logger |);
                          M.read (| amount |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Value.Array
                                      [
                                        Value.StructTuple
                                          "pinocchio_log::logger::Argument::Precision"
                                          []
                                          []
                                          [
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| mint |) |),
                                                "spl_token_interface::state::mint::Mint",
                                                "decimals"
                                              |)
                                            |)
                                          ]
                                      ]
                                  |)
                                |)
                              |)
                            |))
                        ]
                      |) in
                    let~ s : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_function (| "core::str::converts::from_utf8_unchecked", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "pinocchio_log::logger::Logger")
                                    [ Value.Integer IntegerKind.Usize 257 ]
                                    [],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.borrow (| Pointer.Kind.Ref, logger |) |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.read (|
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      LogicalOp.and (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.gt,
                                          [
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| mint |) |),
                                                "spl_token_interface::state::mint::Mint",
                                                "decimals"
                                              |)
                                            |);
                                            Value.Integer IntegerKind.U8 0
                                          ]
                                        |),
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Ty.path "bool",
                                            M.get_associated_function (|
                                              Ty.path "str",
                                              "contains",
                                              [],
                                              [ Ty.path "char" ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| s |) |)
                                              |);
                                              Value.UnicodeChar 46
                                            ]
                                          |)))
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ zeros_trimmed : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
                                  M.call_closure (|
                                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                    M.get_associated_function (|
                                      Ty.path "str",
                                      "trim_end_matches",
                                      [],
                                      [ Ty.path "char" ]
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |);
                                      Value.UnicodeChar 48
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.write (|
                                    s,
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                          M.get_associated_function (|
                                            Ty.path "str",
                                            "trim_end_matches",
                                            [],
                                            [ Ty.path "char" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| zeros_trimmed |) |)
                                            |);
                                            Value.UnicodeChar 46
                                          ]
                                        |)
                                      |)
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_function (| "pinocchio::cpi::set_return_data", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_associated_function (| Ty.path "str", "as_bytes", [], [] |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                              |)
                            |)
                          |)
                        ]
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                        [ Value.Tuple [] ]
                    |)
                  |)
                |)))
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_process_amount_to_ui_amount :
      M.IsFunction.C
        "pinocchio_token_program::processor::amount_to_ui_amount::process_amount_to_ui_amount"
        process_amount_to_ui_amount.
    Admitted.
    Global Typeclasses Opaque process_amount_to_ui_amount.
  End amount_to_ui_amount.
End processor.
