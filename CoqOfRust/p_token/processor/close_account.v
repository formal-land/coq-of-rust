(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Module close_account.
    (*
    pub fn process_close_account(accounts: &[AccountInfo]) -> ProgramResult {
        let [source_account_info, destination_account_info, authority_info, remaining @ ..] = accounts
        else {
            return Err(ProgramError::NotEnoughAccountKeys);
        };
    
        // Comparing whether the AccountInfo's "point" to the same account or
        // not - this is a faster comparison since it just checks the internal
        // raw pointer.
        if source_account_info == destination_account_info {
            return Err(ProgramError::InvalidAccountData);
        } else {
            // SAFETY: scoped immutable borrow to `source_account_info` account data and
            // `load` validates that the account is initialized.
            let source_account =
                unsafe { load::<Account>(source_account_info.borrow_data_unchecked())? };
    
            if !source_account.is_native() && source_account.amount() != 0 {
                return Err(TokenError::NonNativeHasBalance.into());
            }
    
            let authority = source_account
                .close_authority()
                .unwrap_or(&source_account.owner);
    
            if !source_account.is_owned_by_system_program_or_incinerator() {
                validate_owner(authority, authority_info, remaining)?;
            } else if destination_account_info.key() != &INCINERATOR_ID {
                return Err(ProgramError::InvalidAccountData);
            }
        }
    
        let destination_starting_lamports = destination_account_info.lamports();
        // SAFETY: single mutable borrow to `destination_account_info` lamports and
        // there are no "active" borrows of `source_account_info` account data.
        unsafe {
            // Moves the lamports to the destination account.
            *destination_account_info.borrow_mut_lamports_unchecked() = destination_starting_lamports
                .checked_add(source_account_info.lamports())
                .ok_or(TokenError::Overflow)?;
            // Closes the source account.
            source_account_info.close_unchecked();
        }
    
        Ok(())
    }
    *)
    Definition process_close_account (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ accounts ] =>
        ltac:(M.monadic
          (let accounts := M.alloc (| accounts |) in
          M.read (|
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
              ltac:(M.monadic
                (M.alloc (|
                  M.read (|
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      accounts,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                            let γ1_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                            let γ1_2 := M.SubPointer.get_slice_index (| γ, 2 |) in
                            let γ1_rest := M.SubPointer.get_slice_rest (| γ, 3, 0 |) in
                            let source_account_info := M.alloc (| γ1_0 |) in
                            let destination_account_info := M.alloc (| γ1_1 |) in
                            let authority_info := M.alloc (| γ1_2 |) in
                            let remaining := M.alloc (| γ1_rest |) in
                            let~ _ : Ty.tuple [] :=
                              M.read (|
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                M.get_trait_method (|
                                                  "core::cmp::PartialEq",
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "pinocchio::account_info::AccountInfo"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "pinocchio::account_info::AccountInfo"
                                                      ]
                                                  ],
                                                  "eq",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    source_account_info
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    destination_account_info
                                                  |)
                                                ]
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                Value.StructTuple
                                                  "core::result::Result::Err"
                                                  []
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ]
                                                  [
                                                    Value.StructTuple
                                                      "pinocchio::program_error::ProgramError::InvalidAccountData"
                                                      []
                                                      []
                                                      []
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let~ source_account :
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.path
                                                  "spl_token_interface::state::account::Account"
                                              ] :=
                                          M.read (|
                                            M.match_operator (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.path
                                                    "spl_token_interface::state::account::Account"
                                                ],
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.path
                                                            "spl_token_interface::state::account::Account"
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "spl_token_interface::state::account::Account"
                                                          ];
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError"
                                                      ],
                                                    [],
                                                    [],
                                                    "branch",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "spl_token_interface::state::account::Account"
                                                            ];
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ],
                                                      M.get_function (|
                                                        "spl_token_interface::state::load",
                                                        [],
                                                        [
                                                          Ty.path
                                                            "spl_token_interface::state::account::Account"
                                                        ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u8" ]
                                                                ],
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "pinocchio::account_info::AccountInfo",
                                                                "borrow_data_unchecked",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| source_account_info |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "pinocchio::program_error::ProgramError"
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                [],
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.read (|
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          LogicalOp.and (|
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "spl_token_interface::state::account::Account",
                                                                  "is_native",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| source_account |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            ltac:(M.monadic
                                                              (M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.ne,
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "u64",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "spl_token_interface::state::account::Account",
                                                                      "amount",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            source_account
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  Value.Integer IntegerKind.U64 0
                                                                ]
                                                              |)))
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            Value.StructTuple
                                                              "core::result::Result::Err"
                                                              []
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError"
                                                              ]
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "pinocchio::program_error::ProgramError",
                                                                  M.get_trait_method (|
                                                                    "core::convert::Into",
                                                                    Ty.path
                                                                      "spl_token_interface::error::TokenError",
                                                                    [],
                                                                    [
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError"
                                                                    ],
                                                                    "into",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    Value.StructTuple
                                                                      "spl_token_interface::error::TokenError::NonNativeHasBalance"
                                                                      []
                                                                      []
                                                                      []
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)
                                          |) in
                                        let~ authority :
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 32 ]
                                                  [ Ty.path "u8" ]
                                              ] :=
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 32 ]
                                                  [ Ty.path "u8" ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 32 ]
                                                        [ Ty.path "u8" ]
                                                    ]
                                                ],
                                              "unwrap_or",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 32 ]
                                                          [ Ty.path "u8" ]
                                                      ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.path
                                                    "spl_token_interface::state::account::Account",
                                                  "close_authority",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| source_account |) |)
                                                  |)
                                                ]
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| source_account |) |),
                                                      "spl_token_interface::state::account::Account",
                                                      "owner"
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "spl_token_interface::state::account::Account",
                                                            "is_owned_by_system_program_or_incinerator",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.read (| source_account |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.read (|
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::ops::control_flow::ControlFlow")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "pinocchio::program_error::ProgramError"
                                                                ];
                                                              Ty.tuple []
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::Try",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError"
                                                              ],
                                                            [],
                                                            [],
                                                            "branch",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "pinocchio::program_error::ProgramError"
                                                                ],
                                                              M.get_function (|
                                                                "pinocchio_token_program::processor::validate_owner",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| authority |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| authority_info |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| remaining |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                0
                                                              |) in
                                                            let residual := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        []
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "pinocchio::program_error::ProgramError"
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.tuple [];
                                                                            Ty.path
                                                                              "pinocchio::program_error::ProgramError"
                                                                          ],
                                                                        [],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "pinocchio::program_error::ProgramError"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                0
                                                              |) in
                                                            let val := M.copy (| γ0_0 |) in
                                                            val))
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_trait_method (|
                                                                  "core::cmp::PartialEq",
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            32
                                                                        ]
                                                                        [ Ty.path "u8" ]
                                                                    ],
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              32
                                                                          ]
                                                                          [ Ty.path "u8" ]
                                                                      ]
                                                                  ],
                                                                  "ne",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  32
                                                                              ]
                                                                              [ Ty.path "u8" ]
                                                                          ],
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "pinocchio::account_info::AccountInfo",
                                                                          "key",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (|
                                                                                destination_account_info
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        get_constant (|
                                                                          "spl_token_interface::state::account::INCINERATOR_ID",
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                32
                                                                            ]
                                                                            [ Ty.path "u8" ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                Value.StructTuple
                                                                  "core::result::Result::Err"
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ]
                                                                  [
                                                                    Value.StructTuple
                                                                      "pinocchio::program_error::ProgramError::InvalidAccountData"
                                                                      []
                                                                      []
                                                                      []
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)
                              |) in
                            let~ destination_starting_lamports : Ty.path "u64" :=
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_associated_function (|
                                  Ty.path "pinocchio::account_info::AccountInfo",
                                  "lamports",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.read (| destination_account_info |) |)
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.write (|
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ],
                                        M.get_associated_function (|
                                          Ty.path "pinocchio::account_info::AccountInfo",
                                          "borrow_mut_lamports_unchecked",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| destination_account_info |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    M.read (|
                                      M.match_operator (|
                                        Ty.path "u64",
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::ops::control_flow::ControlFlow")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "spl_token_interface::error::TokenError"
                                                  ];
                                                Ty.path "u64"
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "u64";
                                                  Ty.path "spl_token_interface::error::TokenError"
                                                ],
                                              [],
                                              [],
                                              "branch",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "u64";
                                                    Ty.path "spl_token_interface::error::TokenError"
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Ty.path "u64" ],
                                                  "ok_or",
                                                  [],
                                                  [ Ty.path "spl_token_interface::error::TokenError"
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "u64" ],
                                                    M.get_associated_function (|
                                                      Ty.path "u64",
                                                      "checked_add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| destination_starting_lamports |);
                                                      M.call_closure (|
                                                        Ty.path "u64",
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "pinocchio::account_info::AccountInfo",
                                                          "lamports",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.read (| source_account_info |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |);
                                                  Value.StructTuple
                                                    "spl_token_interface::error::TokenError::Overflow"
                                                    []
                                                    []
                                                    []
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "pinocchio::program_error::ProgramError"
                                                            ],
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "spl_token_interface::error::TokenError"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |)
                                    |)
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.path "pinocchio::account_info::AccountInfo",
                                      "close_unchecked",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| source_account_info |) |)
                                      |)
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)
                              |) in
                            M.alloc (|
                              Value.StructTuple
                                "core::result::Result::Ok"
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                                [ Value.Tuple [] ]
                            |)))
                      ]
                    |)
                  |)
                |)))
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_process_close_account :
      M.IsFunction.C
        "pinocchio_token_program::processor::close_account::process_close_account"
        process_close_account.
    Admitted.
    Global Typeclasses Opaque process_close_account.
  End close_account.
End processor.
