(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Module get_account_data_size.
    (*
    pub fn process_get_account_data_size(accounts: &[AccountInfo]) -> ProgramResult {
        let [mint_info, _remaining @ ..] = accounts else {
            return Err(ProgramError::NotEnoughAccountKeys);
        };
    
        // Make sure the mint is valid.
        check_account_owner(mint_info)?;
    
        // SAFETY: single immutable borrow to `mint_info` account data and
        // `load` validates that the mint is initialized.
        let _ = unsafe {
            load::<Mint>(mint_info.borrow_data_unchecked()).map_err(|_| TokenError::InvalidMint)?
        };
    
        set_return_data(&Account::LEN.to_le_bytes());
    
        Ok(())
    }
    *)
    Definition process_get_account_data_size
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ accounts ] =>
        ltac:(M.monadic
          (let accounts := M.alloc (| accounts |) in
          M.read (|
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
              ltac:(M.monadic
                (M.alloc (|
                  M.read (|
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      accounts,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                            let γ1_rest := M.SubPointer.get_slice_rest (| γ, 1, 0 |) in
                            let mint_info := M.alloc (| γ1_0 |) in
                            let _remaining := M.alloc (| γ1_rest |) in
                            let~ _ : Ty.tuple [] :=
                              M.read (|
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path "pinocchio::program_error::ProgramError"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ],
                                          M.get_function (|
                                            "pinocchio_token_program::processor::check_account_owner",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| mint_info |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError"
                                                      ],
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |) in
                            M.match_operator (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              M.match_operator (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.path "spl_token_interface::state::mint::Mint" ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "spl_token_interface::error::TokenError"
                                          ];
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "spl_token_interface::state::mint::Mint" ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "spl_token_interface::state::mint::Mint" ];
                                          Ty.path "spl_token_interface::error::TokenError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "spl_token_interface::state::mint::Mint" ];
                                            Ty.path "spl_token_interface::error::TokenError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "spl_token_interface::state::mint::Mint"
                                                ];
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ],
                                          "map_err",
                                          [],
                                          [
                                            Ty.path "spl_token_interface::error::TokenError";
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [ Ty.path "pinocchio::program_error::ProgramError"
                                                  ]
                                              ]
                                              (Ty.path "spl_token_interface::error::TokenError")
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "spl_token_interface::state::mint::Mint"
                                                  ];
                                                Ty.path "pinocchio::program_error::ProgramError"
                                              ],
                                            M.get_function (|
                                              "spl_token_interface::state::load",
                                              [],
                                              [ Ty.path "spl_token_interface::state::mint::Mint" ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "pinocchio::account_info::AccountInfo",
                                                      "borrow_data_unchecked",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| mint_info |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path
                                                                "pinocchio::program_error::ProgramError"
                                                            ]
                                                        ]
                                                        (Ty.path
                                                          "spl_token_interface::error::TokenError"),
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (Value.StructTuple
                                                              "spl_token_interface::error::TokenError::InvalidMint"
                                                              []
                                                              []
                                                              []))
                                                      ]
                                                    |)))
                                                | _ => M.impossible "wrong number of arguments"
                                                end))
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path
                                                          "spl_token_interface::error::TokenError"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_function (|
                                          "pinocchio::cpi::set_return_data",
                                          [],
                                          []
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 8 ]
                                                        [ Ty.path "u8" ],
                                                      M.get_associated_function (|
                                                        Ty.path "usize",
                                                        "to_le_bytes",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          get_constant (|
                                                            "spl_token_interface::state::Transmutable::LEN",
                                                            Ty.path "usize"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |))
                                        ]
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::result::Result::Ok"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                        [ Value.Tuple [] ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)
                  |)
                |)))
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_process_get_account_data_size :
      M.IsFunction.C
        "pinocchio_token_program::processor::get_account_data_size::process_get_account_data_size"
        process_get_account_data_size.
    Admitted.
    Global Typeclasses Opaque process_get_account_data_size.
  End get_account_data_size.
End processor.
