(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Module initialize_account.
    (*
    pub fn process_initialize_account(accounts: &[AccountInfo]) -> ProgramResult {
        shared::initialize_account::process_initialize_account(accounts, None, true)
    }
    *)
    Definition process_initialize_account
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ accounts ] =>
        ltac:(M.monadic
          (let accounts := M.alloc (| accounts |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
            M.get_function (|
              "pinocchio_token_program::processor::shared::initialize_account::process_initialize_account",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |);
              Value.StructTuple
                "core::option::Option::None"
                []
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ]
                ]
                [];
              Value.Bool true
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_process_initialize_account :
      M.IsFunction.C
        "pinocchio_token_program::processor::initialize_account::process_initialize_account"
        process_initialize_account.
    Admitted.
    Global Typeclasses Opaque process_initialize_account.
  End initialize_account.
End processor.
