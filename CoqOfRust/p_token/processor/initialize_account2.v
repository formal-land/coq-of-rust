(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Module initialize_account2.
    (*
    pub fn process_initialize_account2(
        accounts: &[AccountInfo],
        instruction_data: &[u8],
    ) -> ProgramResult {
        let owner = if instruction_data.len() >= PUBKEY_BYTES {
            // SAFETY: The minimum size of the instruction data is `PUBKEY_BYTES` bytes.
            unsafe { &*(instruction_data.as_ptr() as *const Pubkey) }
        } else {
            return Err(TokenError::InvalidInstruction.into());
        };
    
        shared::initialize_account::process_initialize_account(accounts, Some(owner), true)
    }
    *)
    Definition process_initialize_account2
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ accounts; instruction_data ] =>
        ltac:(M.monadic
          (let accounts := M.alloc (| accounts |) in
          let instruction_data := M.alloc (| instruction_data |) in
          M.read (|
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
              ltac:(M.monadic
                (M.alloc (|
                  M.read (|
                    let~ owner :
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8" ]
                          ] :=
                      M.read (|
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ Ty.path "u8" ]
                            ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.ge,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                              "len",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| instruction_data |) |)
                                              |)
                                            ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "pinocchio::pubkey::PUBKEY_BYTES",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.cast
                                        (Ty.apply
                                          (Ty.path "*const")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 32 ]
                                              [ Ty.path "u8" ]
                                          ])
                                        (M.call_closure (|
                                          Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                            "as_ptr",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| instruction_data |) |)
                                            |)
                                          ]
                                        |))
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        Value.StructTuple
                                          "core::result::Result::Err"
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path "pinocchio::program_error::ProgramError"
                                          ]
                                          [
                                            M.call_closure (|
                                              Ty.path "pinocchio::program_error::ProgramError",
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                Ty.path "spl_token_interface::error::TokenError",
                                                [],
                                                [ Ty.path "pinocchio::program_error::ProgramError"
                                                ],
                                                "into",
                                                [],
                                                []
                                              |),
                                              [
                                                Value.StructTuple
                                                  "spl_token_interface::error::TokenError::InvalidInstruction"
                                                  []
                                                  []
                                                  []
                                              ]
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                        M.get_function (|
                          "pinocchio_token_program::processor::shared::initialize_account::process_initialize_account",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |);
                          Value.StructTuple
                            "core::option::Option::Some"
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8" ]
                                ]
                            ]
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| owner |) |) |) ];
                          Value.Bool true
                        ]
                      |)
                    |)
                  |)
                |)))
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_process_initialize_account2 :
      M.IsFunction.C
        "pinocchio_token_program::processor::initialize_account2::process_initialize_account2"
        process_initialize_account2.
    Admitted.
    Global Typeclasses Opaque process_initialize_account2.
  End initialize_account2.
End processor.
