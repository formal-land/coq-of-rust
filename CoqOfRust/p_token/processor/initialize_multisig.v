(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Module initialize_multisig.
    (*
    pub fn process_initialize_multisig(
        accounts: &[AccountInfo],
        instruction_data: &[u8],
    ) -> ProgramResult {
        let m = instruction_data
            .first()
            .ok_or(TokenError::InvalidInstruction)?;
    
        shared::initialize_multisig::process_initialize_multisig(accounts, *m, true)
    }
    *)
    Definition process_initialize_multisig
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ accounts; instruction_data ] =>
        ltac:(M.monadic
          (let accounts := M.alloc (| accounts |) in
          let instruction_data := M.alloc (| instruction_data |) in
          M.read (|
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
              ltac:(M.monadic
                (M.alloc (|
                  M.read (|
                    let~ m : Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] :=
                      M.read (|
                        M.match_operator (|
                          Ty.apply (Ty.path "&") [] [ Ty.path "u8" ],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.path "spl_token_interface::error::TokenError"
                                    ];
                                  Ty.apply (Ty.path "&") [] [ Ty.path "u8" ]
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "u8" ];
                                    Ty.path "spl_token_interface::error::TokenError"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ Ty.path "u8" ];
                                      Ty.path "spl_token_interface::error::TokenError"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ],
                                    "ok_or",
                                    [],
                                    [ Ty.path "spl_token_interface::error::TokenError" ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                        "first",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| instruction_data |) |)
                                        |)
                                      ]
                                    |);
                                    Value.StructTuple
                                      "spl_token_interface::error::TokenError::InvalidInstruction"
                                      []
                                      []
                                      []
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.tuple [];
                                                Ty.path "pinocchio::program_error::ProgramError"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "spl_token_interface::error::TokenError"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                        M.get_function (|
                          "pinocchio_token_program::processor::shared::initialize_multisig::process_initialize_multisig",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |);
                          M.read (| M.deref (| M.read (| m |) |) |);
                          Value.Bool true
                        ]
                      |)
                    |)
                  |)
                |)))
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_process_initialize_multisig :
      M.IsFunction.C
        "pinocchio_token_program::processor::initialize_multisig::process_initialize_multisig"
        process_initialize_multisig.
    Admitted.
    Global Typeclasses Opaque process_initialize_multisig.
  End initialize_multisig.
End processor.
