(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Definition value_U64_BYTES (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        M.call_closure (|
          Ty.path "usize",
          M.get_function (| "core::mem::size_of", [], [ Ty.path "u64" ] |),
          []
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_U64_BYTES :
    M.IsFunction.C "pinocchio_token_program::processor::U64_BYTES" value_U64_BYTES.
  Admitted.
  Global Typeclasses Opaque value_U64_BYTES.
  
  Definition value_MAX_FORMATTED_DIGITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        M.call_closure (|
          Ty.path "usize",
          BinOp.Wrap.add,
          [
            M.cast
              (Ty.path "usize")
              (M.read (| get_associated_constant (| Ty.path "u8", "MAX", Ty.path "u8" |) |));
            Value.Integer IntegerKind.Usize 2
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_MAX_FORMATTED_DIGITS :
    M.IsFunction.C
      "pinocchio_token_program::processor::MAX_FORMATTED_DIGITS"
      value_MAX_FORMATTED_DIGITS.
  Admitted.
  Global Typeclasses Opaque value_MAX_FORMATTED_DIGITS.
  
  (*
  fn check_account_owner(account_info: &AccountInfo) -> ProgramResult {
      if account_info.is_owned_by(&TOKEN_PROGRAM_ID) {
          Ok(())
      } else {
          Err(ProgramError::IncorrectProgramId)
      }
  }
  *)
  Definition check_account_owner (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ account_info ] =>
      ltac:(M.monadic
        (let account_info := M.alloc (| account_info |) in
        M.read (|
          M.match_operator (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        M.call_closure (|
                          Ty.path "bool",
                          M.get_associated_function (|
                            Ty.path "pinocchio::account_info::AccountInfo",
                            "is_owned_by",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| account_info |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  get_constant (|
                                    "spl_token_interface::program::ID",
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [ Ty.path "u8" ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                      [ Value.Tuple [] ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Err"
                      []
                      [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                      [
                        Value.StructTuple
                          "pinocchio::program_error::ProgramError::IncorrectProgramId"
                          []
                          []
                          []
                      ]
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_check_account_owner :
    M.IsFunction.C "pinocchio_token_program::processor::check_account_owner" check_account_owner.
  Admitted.
  Global Typeclasses Opaque check_account_owner.
  
  (*
  fn validate_owner(
      expected_owner: &Pubkey,
      owner_account_info: &AccountInfo,
      signers: &[AccountInfo],
  ) -> ProgramResult {
      if expected_owner != owner_account_info.key() {
          return Err(TokenError::OwnerMismatch.into());
      }
  
      if owner_account_info.data_len() == Multisig::LEN
          && owner_account_info.is_owned_by(&TOKEN_PROGRAM_ID)
      {
          // SAFETY: the caller guarantees that there are no mutable borrows of
          // `owner_account_info` account data and the `load` validates that the
          // account is initialized; additionally, `Multisig` accounts are only
          // ever loaded in this function, which means that previous loads will
          // have already failed by the time we get here.
          let multisig = unsafe { load::<Multisig>(owner_account_info.borrow_data_unchecked())? };
  
          let mut num_signers = 0;
          let mut matched = [false; MAX_SIGNERS as usize];
  
          for signer in signers.iter() {
              for (position, key) in multisig.signers[0..multisig.n as usize].iter().enumerate() {
                  if key == signer.key() && !matched[position] {
                      if !signer.is_signer() {
                          return Err(ProgramError::MissingRequiredSignature);
                      }
                      matched[position] = true;
                      num_signers += 1;
                  }
              }
          }
          if num_signers < multisig.m {
              return Err(ProgramError::MissingRequiredSignature);
          }
      } else if !owner_account_info.is_signer() {
          return Err(ProgramError::MissingRequiredSignature);
      }
  
      Ok(())
  }
  *)
  Definition validate_owner (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ expected_owner; owner_account_info; signers ] =>
      ltac:(M.monadic
        (let expected_owner := M.alloc (| expected_owner |) in
        let owner_account_info := M.alloc (| owner_account_info |) in
        let signers := M.alloc (| signers |) in
        M.read (|
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
            ltac:(M.monadic
              (M.alloc (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 32 ]
                                              [ Ty.path "u8" ]
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 32 ]
                                                [ Ty.path "u8" ]
                                            ]
                                        ],
                                        "ne",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, expected_owner |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 32 ]
                                                    [ Ty.path "u8" ]
                                                ],
                                              M.get_associated_function (|
                                                Ty.path "pinocchio::account_info::AccountInfo",
                                                "key",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| owner_account_info |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                        [
                                          M.call_closure (|
                                            Ty.path "pinocchio::program_error::ProgramError",
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.path "spl_token_interface::error::TokenError",
                                              [],
                                              [ Ty.path "pinocchio::program_error::ProgramError" ],
                                              "into",
                                              [],
                                              []
                                            |),
                                            [
                                              Value.StructTuple
                                                "spl_token_interface::error::TokenError::OwnerMismatch"
                                                []
                                                []
                                                []
                                            ]
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    LogicalOp.and (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.path "pinocchio::account_info::AccountInfo",
                                              "data_len",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| owner_account_info |) |)
                                              |)
                                            ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "spl_token_interface::state::Transmutable::LEN",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |),
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          Ty.path "bool",
                                          M.get_associated_function (|
                                            Ty.path "pinocchio::account_info::AccountInfo",
                                            "is_owned_by",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| owner_account_info |) |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  get_constant (|
                                                    "spl_token_interface::program::ID",
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 32 ]
                                                      [ Ty.path "u8" ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)))
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ multisig :
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "spl_token_interface::state::multisig::Multisig" ] :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "spl_token_interface::state::multisig::Multisig" ],
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::ops::control_flow::ControlFlow")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "pinocchio::program_error::ProgramError"
                                              ];
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.path
                                                  "spl_token_interface::state::multisig::Multisig"
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.path
                                                    "spl_token_interface::state::multisig::Multisig"
                                                ];
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ],
                                          [],
                                          [],
                                          "branch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.path
                                                      "spl_token_interface::state::multisig::Multisig"
                                                  ];
                                                Ty.path "pinocchio::program_error::ProgramError"
                                              ],
                                            M.get_function (|
                                              "spl_token_interface::state::load",
                                              [],
                                              [
                                                Ty.path
                                                  "spl_token_interface::state::multisig::Multisig"
                                              ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "pinocchio::account_info::AccountInfo",
                                                      "borrow_data_unchecked",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.read (| owner_account_info |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError"
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ],
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |) in
                              let~ num_signers : Ty.path "u8" := Value.Integer IntegerKind.U8 0 in
                              let~ matched :
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 11 ]
                                    [ Ty.path "bool" ] :=
                                repeat (| Value.Bool false, Value.Integer IntegerKind.Usize 11 |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.use
                                    (M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.path "pinocchio::account_info::AccountInfo" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::collect::IntoIterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.path "pinocchio::account_info::AccountInfo" ],
                                            [],
                                            [],
                                            "into_iter",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [ Ty.path "pinocchio::account_info::AccountInfo" ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [ Ty.path "pinocchio::account_info::AccountInfo"
                                                  ],
                                                "iter",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| signers |) |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let iter := M.copy (| γ |) in
                                            M.loop (|
                                              Ty.tuple [],
                                              ltac:(M.monadic
                                                (let~ _ : Ty.tuple [] :=
                                                  M.read (|
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "pinocchio::account_info::AccountInfo"
                                                                ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "pinocchio::account_info::AccountInfo"
                                                              ],
                                                            [],
                                                            [],
                                                            "next",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  iter
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "core::option::Option::None"
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let signer := M.copy (| γ0_0 |) in
                                                            M.use
                                                              (M.match_operator (|
                                                                Ty.tuple [],
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  32
                                                                              ]
                                                                              [ Ty.path "u8" ]
                                                                          ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::collect::IntoIterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    32
                                                                                ]
                                                                                [ Ty.path "u8" ]
                                                                            ]
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "into_iter",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      32
                                                                                  ]
                                                                                  [ Ty.path "u8" ]
                                                                              ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    32
                                                                                ]
                                                                                [ Ty.path "u8" ]
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "enumerate",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      32
                                                                                  ]
                                                                                  [ Ty.path "u8" ]
                                                                              ],
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        32
                                                                                    ]
                                                                                    [ Ty.path "u8" ]
                                                                                ],
                                                                              "iter",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "array")
                                                                                              [
                                                                                                Value.Integer
                                                                                                  IntegerKind.Usize
                                                                                                  32
                                                                                              ]
                                                                                              [
                                                                                                Ty.path
                                                                                                  "u8"
                                                                                              ]
                                                                                          ]
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::index::Index",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "array")
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            11
                                                                                        ]
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "array")
                                                                                            [
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                32
                                                                                            ]
                                                                                            [
                                                                                              Ty.path
                                                                                                "u8"
                                                                                            ]
                                                                                        ],
                                                                                      [],
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::ops::range::Range")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ]
                                                                                      ],
                                                                                      "index",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              multisig
                                                                                            |)
                                                                                          |),
                                                                                          "spl_token_interface::state::multisig::Multisig",
                                                                                          "signers"
                                                                                        |)
                                                                                      |);
                                                                                      Value.StructRecord
                                                                                        "core::ops::range::Range"
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                        [
                                                                                          ("start",
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              0);
                                                                                          ("end_",
                                                                                            M.cast
                                                                                              (Ty.path
                                                                                                "usize")
                                                                                              (M.read (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      multisig
                                                                                                    |)
                                                                                                  |),
                                                                                                  "spl_token_interface::state::multisig::Multisig",
                                                                                                  "n"
                                                                                                |)
                                                                                              |)))
                                                                                        ]
                                                                                    ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let iter := M.copy (| γ |) in
                                                                      M.loop (|
                                                                        Ty.tuple [],
                                                                        ltac:(M.monadic
                                                                          (let~ _ : Ty.tuple [] :=
                                                                            M.read (|
                                                                              M.match_operator (|
                                                                                Ty.tuple [],
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "array")
                                                                                                  [
                                                                                                    Value.Integer
                                                                                                      IntegerKind.Usize
                                                                                                      32
                                                                                                  ]
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "u8"
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::Iter")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "array")
                                                                                                [
                                                                                                  Value.Integer
                                                                                                    IntegerKind.Usize
                                                                                                    32
                                                                                                ]
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "u8"
                                                                                                ]
                                                                                            ]
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.is_struct_tuple (|
                                                                                          γ,
                                                                                          "core::option::Option::None"
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.break (||)
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::option::Option::Some",
                                                                                          0
                                                                                        |) in
                                                                                      let γ1_0 :=
                                                                                        M.SubPointer.get_tuple_field (|
                                                                                          γ0_0,
                                                                                          0
                                                                                        |) in
                                                                                      let γ1_1 :=
                                                                                        M.SubPointer.get_tuple_field (|
                                                                                          γ0_0,
                                                                                          1
                                                                                        |) in
                                                                                      let
                                                                                            position :=
                                                                                        M.copy (|
                                                                                          γ1_0
                                                                                        |) in
                                                                                      let key :=
                                                                                        M.copy (|
                                                                                          γ1_1
                                                                                        |) in
                                                                                      M.match_operator (|
                                                                                        Ty.tuple [],
                                                                                        M.alloc (|
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |),
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ :=
                                                                                                M.use
                                                                                                  (M.alloc (|
                                                                                                    LogicalOp.and (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.path
                                                                                                          "bool",
                                                                                                        M.get_trait_method (|
                                                                                                          "core::cmp::PartialEq",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "array")
                                                                                                                [
                                                                                                                  Value.Integer
                                                                                                                    IntegerKind.Usize
                                                                                                                    32
                                                                                                                ]
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "u8"
                                                                                                                ]
                                                                                                            ],
                                                                                                          [],
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "array")
                                                                                                                  [
                                                                                                                    Value.Integer
                                                                                                                      IntegerKind.Usize
                                                                                                                      32
                                                                                                                  ]
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "u8"
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ],
                                                                                                          "eq",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            key
                                                                                                          |);
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.alloc (|
                                                                                                              M.call_closure (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "&")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "array")
                                                                                                                      [
                                                                                                                        Value.Integer
                                                                                                                          IntegerKind.Usize
                                                                                                                          32
                                                                                                                      ]
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "u8"
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                M.get_associated_function (|
                                                                                                                  Ty.path
                                                                                                                    "pinocchio::account_info::AccountInfo",
                                                                                                                  "key",
                                                                                                                  [],
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.deref (|
                                                                                                                      M.read (|
                                                                                                                        signer
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        ]
                                                                                                      |),
                                                                                                      ltac:(M.monadic
                                                                                                        (UnOp.not (|
                                                                                                          M.read (|
                                                                                                            M.SubPointer.get_array_field (|
                                                                                                              matched,
                                                                                                              M.read (|
                                                                                                                position
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)))
                                                                                                    |)
                                                                                                  |)) in
                                                                                              let
                                                                                                    _ :=
                                                                                                is_constant_or_break_match (|
                                                                                                  M.read (|
                                                                                                    γ
                                                                                                  |),
                                                                                                  Value.Bool
                                                                                                    true
                                                                                                |) in
                                                                                              let~
                                                                                                    _ :
                                                                                                  Ty.tuple
                                                                                                    [] :=
                                                                                                M.read (|
                                                                                                  M.match_operator (|
                                                                                                    Ty.tuple
                                                                                                      [],
                                                                                                    M.alloc (|
                                                                                                      Value.Tuple
                                                                                                        []
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (let
                                                                                                                γ :=
                                                                                                            M.use
                                                                                                              (M.alloc (|
                                                                                                                UnOp.not (|
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.path
                                                                                                                      "bool",
                                                                                                                    M.get_associated_function (|
                                                                                                                      Ty.path
                                                                                                                        "pinocchio::account_info::AccountInfo",
                                                                                                                      "is_signer",
                                                                                                                      [],
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.Ref,
                                                                                                                        M.deref (|
                                                                                                                          M.read (|
                                                                                                                            signer
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)) in
                                                                                                          let
                                                                                                                _ :=
                                                                                                            is_constant_or_break_match (|
                                                                                                              M.read (|
                                                                                                                γ
                                                                                                              |),
                                                                                                              Value.Bool
                                                                                                                true
                                                                                                            |) in
                                                                                                          M.alloc (|
                                                                                                            M.never_to_any (|
                                                                                                              M.read (|
                                                                                                                M.return_ (|
                                                                                                                  Value.StructTuple
                                                                                                                    "core::result::Result::Err"
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.tuple
                                                                                                                        [];
                                                                                                                      Ty.path
                                                                                                                        "pinocchio::program_error::ProgramError"
                                                                                                                    ]
                                                                                                                    [
                                                                                                                      Value.StructTuple
                                                                                                                        "pinocchio::program_error::ProgramError::MissingRequiredSignature"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        []
                                                                                                                    ]
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)));
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (M.alloc (|
                                                                                                            Value.Tuple
                                                                                                              []
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                |) in
                                                                                              let~
                                                                                                    _ :
                                                                                                  Ty.tuple
                                                                                                    [] :=
                                                                                                M.write (|
                                                                                                  M.SubPointer.get_array_field (|
                                                                                                    matched,
                                                                                                    M.read (|
                                                                                                      position
                                                                                                    |)
                                                                                                  |),
                                                                                                  Value.Bool
                                                                                                    true
                                                                                                |) in
                                                                                              let~
                                                                                                    _ :
                                                                                                  Ty.tuple
                                                                                                    [] :=
                                                                                                let
                                                                                                      β :=
                                                                                                  num_signers in
                                                                                                M.write (|
                                                                                                  β,
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "u8",
                                                                                                    BinOp.Wrap.add,
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        β
                                                                                                      |);
                                                                                                      Value.Integer
                                                                                                        IntegerKind.U8
                                                                                                        1
                                                                                                    ]
                                                                                                  |)
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                Value.Tuple
                                                                                                  []
                                                                                              |)));
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (M.alloc (|
                                                                                                Value.Tuple
                                                                                                  []
                                                                                              |)))
                                                                                        ]
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |)))
                                                                      |)))
                                                                ]
                                                              |))))
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                            |)))
                                      ]
                                    |))
                                |) in
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.lt,
                                              [
                                                M.read (| num_signers |);
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| multisig |) |),
                                                    "spl_token_interface::state::multisig::Multisig",
                                                    "m"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              Value.StructTuple
                                                "core::result::Result::Err"
                                                []
                                                [
                                                  Ty.tuple [];
                                                  Ty.path "pinocchio::program_error::ProgramError"
                                                ]
                                                [
                                                  Value.StructTuple
                                                    "pinocchio::program_error::ProgramError::MissingRequiredSignature"
                                                    []
                                                    []
                                                    []
                                                ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                M.get_associated_function (|
                                                  Ty.path "pinocchio::account_info::AccountInfo",
                                                  "is_signer",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| owner_account_info |) |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              Value.StructTuple
                                                "core::result::Result::Err"
                                                []
                                                [
                                                  Ty.tuple [];
                                                  Ty.path "pinocchio::program_error::ProgramError"
                                                ]
                                                [
                                                  Value.StructTuple
                                                    "pinocchio::program_error::ProgramError::MissingRequiredSignature"
                                                    []
                                                    []
                                                    []
                                                ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |)))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                      [ Value.Tuple [] ]
                  |)
                |)
              |)))
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_validate_owner :
    M.IsFunction.C "pinocchio_token_program::processor::validate_owner" validate_owner.
  Admitted.
  Global Typeclasses Opaque validate_owner.
  
  (*
  fn try_ui_amount_into_amount(ui_amount: &str, decimals: u8) -> Result<u64, ProgramError> {
      let decimals = decimals as usize;
      let mut parts = ui_amount.split('.');
  
      // Splitting a string, even an empty one, will always yield an iterator of at
      // least length == 1.
      let amount_str = parts.next().unwrap();
      let after_decimal = parts.next().unwrap_or("");
      // Clean up trailing zeros.
      let after_decimal = after_decimal.trim_end_matches('0');
  
      // Validates the input.
  
      let length = amount_str.len();
  
      if (amount_str.is_empty() && after_decimal.is_empty())
          || parts.next().is_some()
          || after_decimal.len() > decimals
          || (length + decimals) > MAX_FORMATTED_DIGITS
      {
          return Err(ProgramError::InvalidArgument);
      }
  
      let mut digits = [b'0'; MAX_FORMATTED_DIGITS];
  
      // SAFETY: the total length of `amount_str` and `after_decimal` is less than
      // `MAX_FORMATTED_DIGITS`.
      unsafe {
          sol_memcpy_(digits.as_mut_ptr(), amount_str.as_ptr(), length as u64);
  
          sol_memcpy_(
              digits.as_mut_ptr().add(length),
              after_decimal.as_ptr(),
              after_decimal.len() as u64,
          );
      }
  
      let length = amount_str.len() + decimals;
  
      // SAFETY: `digits` only contains valid UTF-8 bytes.
      unsafe {
          from_utf8_unchecked(from_raw_parts(digits.as_ptr(), length))
              .parse::<u64>()
              .map_err(|_| ProgramError::InvalidArgument)
      }
  }
  *)
  Definition try_ui_amount_into_amount (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ ui_amount; decimals ] =>
      ltac:(M.monadic
        (let ui_amount := M.alloc (| ui_amount |) in
        let decimals := M.alloc (| decimals |) in
        M.read (|
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.path "u64"; Ty.path "pinocchio::program_error::ProgramError" ]) (|
            ltac:(M.monadic
              (M.alloc (|
                M.read (|
                  let~ decimals : Ty.path "usize" :=
                    M.cast (Ty.path "usize") (M.read (| decimals |)) in
                  let~ parts : Ty.apply (Ty.path "core::str::iter::Split") [] [ Ty.path "char" ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "core::str::iter::Split") [] [ Ty.path "char" ],
                      M.get_associated_function (|
                        Ty.path "str",
                        "split",
                        [],
                        [ Ty.path "char" ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| ui_amount |) |) |);
                        Value.UnicodeChar 46
                      ]
                    |) in
                  let~ amount_str : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                        "unwrap",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::str::iter::Split") [] [ Ty.path "char" ],
                            [],
                            [],
                            "next",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, parts |) ]
                        |)
                      ]
                    |) in
                  let~ after_decimal : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                        "unwrap_or",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::str::iter::Split") [] [ Ty.path "char" ],
                            [],
                            [],
                            "next",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, parts |) ]
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "" |) |) |)
                      ]
                    |) in
                  let~ after_decimal : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                      M.get_associated_function (|
                        Ty.path "str",
                        "trim_end_matches",
                        [],
                        [ Ty.path "char" ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| after_decimal |) |) |);
                        Value.UnicodeChar 48
                      ]
                    |) in
                  let~ length : Ty.path "usize" :=
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (| Ty.path "str", "len", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| amount_str |) |) |) ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    LogicalOp.or (|
                                      LogicalOp.or (|
                                        LogicalOp.or (|
                                          LogicalOp.and (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.path "str",
                                                "is_empty",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| amount_str |) |)
                                                |)
                                              ]
                                            |),
                                            ltac:(M.monadic
                                              (M.call_closure (|
                                                Ty.path "bool",
                                                M.get_associated_function (|
                                                  Ty.path "str",
                                                  "is_empty",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| after_decimal |) |)
                                                  |)
                                                ]
                                              |)))
                                          |),
                                          ltac:(M.monadic
                                            (M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                                "is_some",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::str::iter::Split")
                                                          []
                                                          [ Ty.path "char" ],
                                                        [],
                                                        [],
                                                        "next",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.MutRef, parts |) ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)))
                                        |),
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.gt,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.path "str",
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| after_decimal |) |)
                                                  |)
                                                ]
                                              |);
                                              M.read (| decimals |)
                                            ]
                                          |)))
                                      |),
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.gt,
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [ M.read (| length |); M.read (| decimals |) ]
                                            |);
                                            M.read (|
                                              get_constant (|
                                                "pinocchio_token_program::processor::MAX_FORMATTED_DIGITS",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)))
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        []
                                        [
                                          Ty.path "u64";
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                        [
                                          Value.StructTuple
                                            "pinocchio::program_error::ProgramError::InvalidArgument"
                                            []
                                            []
                                            []
                                        ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)
                    |) in
                  let~ digits :
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 257 ]
                        [ Ty.path "u8" ] :=
                    repeat (|
                      M.read (| UnsupportedLiteral |),
                      Value.Integer IntegerKind.Usize 257
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_function (| "pinocchio::syscalls::sol_memcpy_", [], [] |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                "as_mut_ptr",
                                [],
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion (M.borrow (| Pointer.Kind.MutRef, digits |))
                              ]
                            |);
                            M.call_closure (|
                              Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                              M.get_associated_function (| Ty.path "str", "as_ptr", [], [] |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| amount_str |) |)
                                |)
                              ]
                            |);
                            M.cast (Ty.path "u64") (M.read (| length |))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_function (| "pinocchio::syscalls::sol_memcpy_", [], [] |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                "add",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    "as_mut_ptr",
                                    [],
                                    []
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion (M.borrow (| Pointer.Kind.MutRef, digits |))
                                  ]
                                |);
                                M.read (| length |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                              M.get_associated_function (| Ty.path "str", "as_ptr", [], [] |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| after_decimal |) |)
                                |)
                              ]
                            |);
                            M.cast
                              (Ty.path "u64")
                              (M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (| Ty.path "str", "len", [], [] |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.read (| after_decimal |) |)
                                  |)
                                ]
                              |))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)
                    |) in
                  let~ length : Ty.path "usize" :=
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.add,
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (| Ty.path "str", "len", [], [] |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| amount_str |) |) |) ]
                        |);
                        M.read (| decimals |)
                      ]
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.path "u64"; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.path "u64"; Ty.path "core::num::error::ParseIntError" ],
                        "map_err",
                        [],
                        [
                          Ty.path "pinocchio::program_error::ProgramError";
                          Ty.function
                            [ Ty.tuple [ Ty.path "core::num::error::ParseIntError" ] ]
                            (Ty.path "pinocchio::program_error::ProgramError")
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.path "u64"; Ty.path "core::num::error::ParseIntError" ],
                          M.get_associated_function (|
                            Ty.path "str",
                            "parse",
                            [],
                            [ Ty.path "u64" ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                  M.get_function (|
                                    "core::str::converts::from_utf8_unchecked",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                          M.get_function (|
                                            "core::slice::raw::from_raw_parts",
                                            [],
                                            [ Ty.path "u8" ]
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                                "as_ptr",
                                                [],
                                                []
                                              |),
                                              [
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.borrow (| Pointer.Kind.Ref, digits |))
                                              ]
                                            |);
                                            M.read (| length |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "core::num::error::ParseIntError" ] ]
                                      (Ty.path "pinocchio::program_error::ProgramError"),
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (Value.StructTuple
                                            "pinocchio::program_error::ProgramError::InvalidArgument"
                                            []
                                            []
                                            []))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  |)
                |)
              |)))
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_try_ui_amount_into_amount :
    M.IsFunction.C
      "pinocchio_token_program::processor::try_ui_amount_into_amount"
      try_ui_amount_into_amount.
  Admitted.
  Global Typeclasses Opaque try_ui_amount_into_amount.
  
  (*
  const fn unpack_amount(instruction_data: &[u8]) -> Result<u64, TokenError> {
      // expected u64 (8)
      if instruction_data.len() >= U64_BYTES {
          // SAFETY: The minimum size of the instruction data is `U64_BYTES` bytes.
          Ok(unsafe { u64::from_le_bytes( *(instruction_data.as_ptr() as *const [u8; U64_BYTES])) })
      } else {
          Err(TokenError::InvalidInstruction)
      }
  }
  *)
  Definition unpack_amount (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ instruction_data ] =>
      ltac:(M.monadic
        (let instruction_data := M.alloc (| instruction_data |) in
        M.read (|
          M.match_operator (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.path "u64"; Ty.path "spl_token_interface::error::TokenError" ],
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        M.call_closure (|
                          Ty.path "bool",
                          BinOp.ge,
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                "len",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| instruction_data |) |)
                                |)
                              ]
                            |);
                            M.read (|
                              get_constant (|
                                "pinocchio_token_program::processor::U64_BYTES",
                                Ty.path "usize"
                              |)
                            |)
                          ]
                        |)
                      |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [ Ty.path "u64"; Ty.path "spl_token_interface::error::TokenError" ]
                      [
                        M.call_closure (|
                          Ty.path "u64",
                          M.get_associated_function (| Ty.path "u64", "from_le_bytes", [], [] |),
                          [
                            M.read (|
                              M.deref (|
                                M.cast
                                  (Ty.apply
                                    (Ty.path "*const")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ Ty.path "u8" ]
                                    ])
                                  (M.call_closure (|
                                    Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      "as_ptr",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| instruction_data |) |)
                                      |)
                                    ]
                                  |))
                              |)
                            |)
                          ]
                        |)
                      ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Err"
                      []
                      [ Ty.path "u64"; Ty.path "spl_token_interface::error::TokenError" ]
                      [
                        Value.StructTuple
                          "spl_token_interface::error::TokenError::InvalidInstruction"
                          []
                          []
                          []
                      ]
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_unpack_amount :
    M.IsFunction.C "pinocchio_token_program::processor::unpack_amount" unpack_amount.
  Admitted.
  Global Typeclasses Opaque unpack_amount.
  
  (*
  const fn unpack_amount_and_decimals(instruction_data: &[u8]) -> Result<(u64, u8), TokenError> {
      // expected u64 (8) + u8 (1)
      if instruction_data.len() >= 9 {
          let (amount, decimals) = instruction_data.split_at(U64_BYTES);
          Ok((
              // SAFETY: The size of `amount` is `U64_BYTES` bytes.
              unsafe { u64::from_le_bytes( *(amount.as_ptr() as *const [u8; U64_BYTES])) },
              decimals[0],
          ))
      } else {
          Err(TokenError::InvalidInstruction)
      }
  }
  *)
  Definition unpack_amount_and_decimals (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ instruction_data ] =>
      ltac:(M.monadic
        (let instruction_data := M.alloc (| instruction_data |) in
        M.read (|
          M.match_operator (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.tuple [ Ty.path "u64"; Ty.path "u8" ];
                Ty.path "spl_token_interface::error::TokenError"
              ],
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        M.call_closure (|
                          Ty.path "bool",
                          BinOp.ge,
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                "len",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| instruction_data |) |)
                                |)
                              ]
                            |);
                            Value.Integer IntegerKind.Usize 9
                          ]
                        |)
                      |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.tuple [ Ty.path "u64"; Ty.path "u8" ];
                        Ty.path "spl_token_interface::error::TokenError"
                      ],
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                          ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                          "split_at",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.read (| instruction_data |) |)
                          |);
                          M.read (|
                            get_constant (|
                              "pinocchio_token_program::processor::U64_BYTES",
                              Ty.path "usize"
                            |)
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let amount := M.copy (| γ0_0 |) in
                          let decimals := M.copy (| γ0_1 |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              []
                              [
                                Ty.tuple [ Ty.path "u64"; Ty.path "u8" ];
                                Ty.path "spl_token_interface::error::TokenError"
                              ]
                              [
                                Value.Tuple
                                  [
                                    M.call_closure (|
                                      Ty.path "u64",
                                      M.get_associated_function (|
                                        Ty.path "u64",
                                        "from_le_bytes",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.deref (|
                                            M.cast
                                              (Ty.apply
                                                (Ty.path "*const")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 8 ]
                                                    [ Ty.path "u8" ]
                                                ])
                                              (M.call_closure (|
                                                Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                                  "as_ptr",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| amount |) |)
                                                  |)
                                                ]
                                              |))
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.read (|
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| decimals |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  ]
                              ]
                          |)))
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Err"
                      []
                      [
                        Ty.tuple [ Ty.path "u64"; Ty.path "u8" ];
                        Ty.path "spl_token_interface::error::TokenError"
                      ]
                      [
                        Value.StructTuple
                          "spl_token_interface::error::TokenError::InvalidInstruction"
                          []
                          []
                          []
                      ]
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_unpack_amount_and_decimals :
    M.IsFunction.C
      "pinocchio_token_program::processor::unpack_amount_and_decimals"
      unpack_amount_and_decimals.
  Admitted.
  Global Typeclasses Opaque unpack_amount_and_decimals.
End processor.
