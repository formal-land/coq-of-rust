(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Module shared.
    Module initialize_multisig.
      (*
      pub fn process_initialize_multisig(
          accounts: &[AccountInfo],
          m: u8,
          rent_sysvar_account_provided: bool,
      ) -> ProgramResult {
          // Accounts expected depend on whether we have the `rent_sysvar` account or not.
      
          let (multisig_info, rent_sysvar_info, remaining) = if rent_sysvar_account_provided {
              let [multisig_info, rent_sysvar_info, remaining @ ..] = accounts else {
                  return Err(ProgramError::NotEnoughAccountKeys);
              };
              (multisig_info, Some(rent_sysvar_info), remaining)
          } else {
              let [multisig_info, remaining @ ..] = accounts else {
                  return Err(ProgramError::NotEnoughAccountKeys);
              };
              (multisig_info, None, remaining)
          };
      
          let multisig_info_data_len = multisig_info.data_len();
      
          let is_exempt = if let Some(rent_sysvar_info) = rent_sysvar_info {
              // SAFETY: single immutable borrow to `rent_sysvar_info`; account ID and length
              // are checked by `from_account_info_unchecked`.
              let rent = unsafe { Rent::from_account_info_unchecked(rent_sysvar_info)? };
              rent.is_exempt(multisig_info.lamports(), multisig_info_data_len)
          } else {
              Rent::get()?.is_exempt(multisig_info.lamports(), multisig_info_data_len)
          };
      
          // SAFETY: single mutable borrow to `multisig_info` account data.
          let multisig =
              unsafe { load_mut_unchecked::<Multisig>(multisig_info.borrow_mut_data_unchecked())? };
      
          if multisig.is_initialized()? {
              return Err(TokenError::AlreadyInUse.into());
          }
      
          if !is_exempt {
              return Err(TokenError::NotRentExempt.into());
          }
      
          // Initialize the multisig account.
      
          multisig.m = m;
          multisig.n = remaining.len() as u8;
      
          if !Multisig::is_valid_signer_index(multisig.n) {
              return Err(TokenError::InvalidNumberOfProvidedSigners.into());
          }
          if !Multisig::is_valid_signer_index(multisig.m) {
              return Err(TokenError::InvalidNumberOfRequiredSigners.into());
          }
      
          for (i, signer_info) in remaining.iter().enumerate() {
              multisig.signers[i] = *signer_info.key();
          }
      
          multisig.set_initialized(true);
      
          Ok(())
      }
      *)
      Definition process_initialize_multisig
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ accounts; m; rent_sysvar_account_provided ] =>
          ltac:(M.monadic
            (let accounts := M.alloc (| accounts |) in
            let m := M.alloc (| m |) in
            let rent_sysvar_account_provided := M.alloc (| rent_sysvar_account_provided |) in
            M.read (|
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
                ltac:(M.monadic
                  (M.alloc (|
                    M.read (|
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                        M.match_operator (|
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "pinocchio::account_info::AccountInfo" ];
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                ]
                            ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use rent_sysvar_account_provided in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.match_operator (|
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "pinocchio::account_info::AccountInfo" ];
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                        ];
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                        ]
                                    ],
                                  accounts,
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.read (| γ |) in
                                        let γ1_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                                        let γ1_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                                        let γ1_rest := M.SubPointer.get_slice_rest (| γ, 2, 0 |) in
                                        let multisig_info := M.alloc (| γ1_0 |) in
                                        let rent_sysvar_info := M.alloc (| γ1_1 |) in
                                        let remaining := M.alloc (| γ1_rest |) in
                                        M.alloc (|
                                          Value.Tuple
                                            [
                                              M.read (| multisig_info |);
                                              Value.StructTuple
                                                "core::option::Option::Some"
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "pinocchio::account_info::AccountInfo"
                                                    ]
                                                ]
                                                [ M.read (| rent_sysvar_info |) ];
                                              M.read (| remaining |)
                                            ]
                                        |)))
                                  ]
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "pinocchio::account_info::AccountInfo" ];
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                        ];
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                        ]
                                    ],
                                  accounts,
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.read (| γ |) in
                                        let γ1_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                                        let γ1_rest := M.SubPointer.get_slice_rest (| γ, 1, 0 |) in
                                        let multisig_info := M.alloc (| γ1_0 |) in
                                        let remaining := M.alloc (| γ1_rest |) in
                                        M.alloc (|
                                          Value.Tuple
                                            [
                                              M.read (| multisig_info |);
                                              Value.StructTuple
                                                "core::option::Option::None"
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "pinocchio::account_info::AccountInfo"
                                                    ]
                                                ]
                                                [];
                                              M.read (| remaining |)
                                            ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                              let multisig_info := M.copy (| γ0_0 |) in
                              let rent_sysvar_info := M.copy (| γ0_1 |) in
                              let remaining := M.copy (| γ0_2 |) in
                              let~ multisig_info_data_len : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.path "pinocchio::account_info::AccountInfo",
                                    "data_len",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| multisig_info |) |)
                                    |)
                                  ]
                                |) in
                              let~ is_exempt : Ty.path "bool" :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.path "bool",
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ := rent_sysvar_info in
                                          let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let rent_sysvar_info := M.copy (| γ0_0 |) in
                                          let~ rent :
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "pinocchio::sysvars::rent::Rent" ] :=
                                            M.read (|
                                              M.match_operator (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "pinocchio::sysvars::rent::Rent" ],
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::ops::control_flow::ControlFlow")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "pinocchio::sysvars::rent::Rent"
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "pinocchio::sysvars::rent::Rent"
                                                            ];
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ],
                                                      [],
                                                      [],
                                                      "branch",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "pinocchio::sysvars::rent::Rent"
                                                              ];
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.path "pinocchio::sysvars::rent::Rent",
                                                          "from_account_info_unchecked",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.read (| rent_sysvar_info |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError"
                                                                    ],
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  [],
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.path "pinocchio::sysvars::rent::Rent",
                                                "is_exempt",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| rent |) |)
                                                |);
                                                M.call_closure (|
                                                  Ty.path "u64",
                                                  M.get_associated_function (|
                                                    Ty.path "pinocchio::account_info::AccountInfo",
                                                    "lamports",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| multisig_info |) |)
                                                    |)
                                                  ]
                                                |);
                                                M.read (| multisig_info_data_len |)
                                              ]
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.path "pinocchio::sysvars::rent::Rent",
                                                "is_exempt",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.match_operator (|
                                                    Ty.path "pinocchio::sysvars::rent::Rent",
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::ops::control_flow::ControlFlow")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError"
                                                              ];
                                                            Ty.path "pinocchio::sysvars::rent::Rent"
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.path
                                                                "pinocchio::sysvars::rent::Rent";
                                                              Ty.path
                                                                "pinocchio::program_error::ProgramError"
                                                            ],
                                                          [],
                                                          [],
                                                          "branch",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "pinocchio::sysvars::rent::Rent";
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError"
                                                              ],
                                                            M.get_trait_method (|
                                                              "pinocchio::sysvars::Sysvar",
                                                              Ty.path
                                                                "pinocchio::sysvars::rent::Rent",
                                                              [],
                                                              [],
                                                              "get",
                                                              [],
                                                              []
                                                            |),
                                                            []
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        []
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "pinocchio::program_error::ProgramError"
                                                                        ],
                                                                      [],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "pinocchio::program_error::ProgramError"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |)
                                                |);
                                                M.call_closure (|
                                                  Ty.path "u64",
                                                  M.get_associated_function (|
                                                    Ty.path "pinocchio::account_info::AccountInfo",
                                                    "lamports",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| multisig_info |) |)
                                                    |)
                                                  ]
                                                |);
                                                M.read (| multisig_info_data_len |)
                                              ]
                                            |)
                                          |)))
                                    ]
                                  |)
                                |) in
                              let~ multisig :
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.path "spl_token_interface::state::multisig::Multisig" ] :=
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.path "spl_token_interface::state::multisig::Multisig"
                                          ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::ops::control_flow::ControlFlow")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ];
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [
                                                    Ty.path
                                                      "spl_token_interface::state::multisig::Multisig"
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.path
                                                        "spl_token_interface::state::multisig::Multisig"
                                                    ];
                                                  Ty.path "pinocchio::program_error::ProgramError"
                                                ],
                                              [],
                                              [],
                                              "branch",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [
                                                        Ty.path
                                                          "spl_token_interface::state::multisig::Multisig"
                                                      ];
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ],
                                                M.get_function (|
                                                  "spl_token_interface::state::load_mut_unchecked",
                                                  [],
                                                  [
                                                    Ty.path
                                                      "spl_token_interface::state::multisig::Multisig"
                                                  ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.path "u8" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "pinocchio::account_info::AccountInfo",
                                                          "borrow_mut_data_unchecked",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| multisig_info |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "pinocchio::program_error::ProgramError"
                                                            ],
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |)
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.match_operator (|
                                                Ty.path "bool",
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::ops::control_flow::ControlFlow")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ];
                                                        Ty.path "bool"
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "bool";
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ],
                                                      [],
                                                      [],
                                                      "branch",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "bool";
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                        M.get_trait_method (|
                                                          "spl_token_interface::state::Initializable",
                                                          Ty.path
                                                            "spl_token_interface::state::multisig::Multisig",
                                                          [],
                                                          [],
                                                          "is_initialized",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| multisig |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError"
                                                                    ],
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  [],
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  Value.StructTuple
                                                    "core::result::Result::Err"
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ]
                                                    [
                                                      M.call_closure (|
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError",
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path
                                                            "spl_token_interface::error::TokenError",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                          "into",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          Value.StructTuple
                                                            "spl_token_interface::error::TokenError::AlreadyInUse"
                                                            []
                                                            []
                                                            []
                                                        ]
                                                      |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (| M.read (| is_exempt |) |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  Value.StructTuple
                                                    "core::result::Result::Err"
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ]
                                                    [
                                                      M.call_closure (|
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError",
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path
                                                            "spl_token_interface::error::TokenError",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                          "into",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          Value.StructTuple
                                                            "spl_token_interface::error::TokenError::NotRentExempt"
                                                            []
                                                            []
                                                            []
                                                        ]
                                                      |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.write (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| multisig |) |),
                                    "spl_token_interface::state::multisig::Multisig",
                                    "m"
                                  |),
                                  M.read (| m |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.write (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| multisig |) |),
                                    "spl_token_interface::state::multisig::Multisig",
                                    "n"
                                  |),
                                  M.cast
                                    (Ty.path "u8")
                                    (M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [ Ty.path "pinocchio::account_info::AccountInfo" ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| remaining |) |)
                                        |)
                                      ]
                                    |))
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "spl_token_interface::state::multisig::Multisig",
                                                      "is_valid_signer_index",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| multisig |) |),
                                                          "spl_token_interface::state::multisig::Multisig",
                                                          "n"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  Value.StructTuple
                                                    "core::result::Result::Err"
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ]
                                                    [
                                                      M.call_closure (|
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError",
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path
                                                            "spl_token_interface::error::TokenError",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                          "into",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          Value.StructTuple
                                                            "spl_token_interface::error::TokenError::InvalidNumberOfProvidedSigners"
                                                            []
                                                            []
                                                            []
                                                        ]
                                                      |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "spl_token_interface::state::multisig::Multisig",
                                                      "is_valid_signer_index",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| multisig |) |),
                                                          "spl_token_interface::state::multisig::Multisig",
                                                          "m"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  Value.StructTuple
                                                    "core::result::Result::Err"
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ]
                                                    [
                                                      M.call_closure (|
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError",
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path
                                                            "spl_token_interface::error::TokenError",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                          "into",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          Value.StructTuple
                                                            "spl_token_interface::error::TokenError::InvalidNumberOfRequiredSigners"
                                                            []
                                                            []
                                                            []
                                                        ]
                                                      |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.use
                                    (M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::collect::IntoIterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                              ],
                                            [],
                                            [],
                                            "into_iter",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Ty.path "pinocchio::account_info::AccountInfo"
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ Ty.path "pinocchio::account_info::AccountInfo"
                                                  ],
                                                [],
                                                [],
                                                "enumerate",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Ty.path "pinocchio::account_info::AccountInfo"
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.path
                                                          "pinocchio::account_info::AccountInfo"
                                                      ],
                                                    "iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| remaining |) |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let iter := M.copy (| γ |) in
                                            M.loop (|
                                              Ty.tuple [],
                                              ltac:(M.monadic
                                                (let~ _ : Ty.tuple [] :=
                                                  M.read (|
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "pinocchio::account_info::AccountInfo"
                                                                    ]
                                                                ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::enumerate::Enumerate")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "pinocchio::account_info::AccountInfo"
                                                                  ]
                                                              ],
                                                            [],
                                                            [],
                                                            "next",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  iter
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "core::option::Option::None"
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let γ1_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                0
                                                              |) in
                                                            let γ1_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                1
                                                              |) in
                                                            let i := M.copy (| γ1_0 |) in
                                                            let signer_info := M.copy (| γ1_1 |) in
                                                            let~ _ : Ty.tuple [] :=
                                                              M.write (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (|
                                                                      M.read (| multisig |)
                                                                    |),
                                                                    "spl_token_interface::state::multisig::Multisig",
                                                                    "signers"
                                                                  |),
                                                                  M.read (| i |)
                                                                |),
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                32
                                                                            ]
                                                                            [ Ty.path "u8" ]
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "pinocchio::account_info::AccountInfo",
                                                                        "key",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| signer_info |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                            |)))
                                      ]
                                    |))
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_associated_function (|
                                    Ty.path "spl_token_interface::state::multisig::Multisig",
                                    "set_initialized",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| multisig |) |)
                                    |);
                                    Value.Bool true
                                  ]
                                |) in
                              M.alloc (|
                                Value.StructTuple
                                  "core::result::Result::Ok"
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                                  [ Value.Tuple [] ]
                              |)))
                        ]
                      |)
                    |)
                  |)))
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_process_initialize_multisig :
        M.IsFunction.C
          "pinocchio_token_program::processor::shared::initialize_multisig::process_initialize_multisig"
          process_initialize_multisig.
      Admitted.
      Global Typeclasses Opaque process_initialize_multisig.
    End initialize_multisig.
  End shared.
End processor.
