(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Module shared.
    Module mint_to.
      (*
      pub fn process_mint_to(
          accounts: &[AccountInfo],
          amount: u64,
          expected_decimals: Option<u8>,
      ) -> ProgramResult {
          let [mint_info, destination_account_info, owner_info, remaining @ ..] = accounts else {
              return Err(ProgramError::NotEnoughAccountKeys);
          };
      
          // Validates the destination account.
      
          // SAFETY: single mutable borrow to `destination_account_info` account data and
          // `load_mut` validates that the account is initialized.
          let destination_account =
              unsafe { load_mut::<Account>(destination_account_info.borrow_mut_data_unchecked())? };
      
          if destination_account.is_frozen()? {
              return Err(TokenError::AccountFrozen.into());
          }
      
          if destination_account.is_native() {
              return Err(TokenError::NativeNotSupported.into());
          }
      
          if mint_info.key() != &destination_account.mint {
              return Err(TokenError::MintMismatch.into());
          }
      
          // SAFETY: single mutable borrow to `mint_info` account data and
          // `load_mut` validates that the mint is initialized.
          let mint = unsafe { load_mut::<Mint>(mint_info.borrow_mut_data_unchecked())? };
      
          if let Some(expected_decimals) = expected_decimals {
              if expected_decimals != mint.decimals {
                  return Err(TokenError::MintDecimalsMismatch.into());
              }
          }
      
          match mint.mint_authority() {
              Some(mint_authority) => validate_owner(mint_authority, owner_info, remaining)?,
              None => return Err(TokenError::FixedSupply.into()),
          }
      
          if amount == 0 {
              // Validates the accounts' owner since we are not writing
              // to these account.
              check_account_owner(mint_info)?;
              check_account_owner(destination_account_info)?;
          } else {
              let mint_supply = mint
                  .supply()
                  .checked_add(amount)
                  .ok_or(TokenError::Overflow)?;
              mint.set_supply(mint_supply);
      
              // This should not fail since there is no overflow on the mint supply.
              destination_account.set_amount(destination_account.amount() + amount);
          }
      
          Ok(())
      }
      *)
      Definition process_mint_to (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ accounts; amount; expected_decimals ] =>
          ltac:(M.monadic
            (let accounts := M.alloc (| accounts |) in
            let amount := M.alloc (| amount |) in
            let expected_decimals := M.alloc (| expected_decimals |) in
            M.read (|
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
                ltac:(M.monadic
                  (M.alloc (|
                    M.read (|
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                        accounts,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                              let γ1_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                              let γ1_2 := M.SubPointer.get_slice_index (| γ, 2 |) in
                              let γ1_rest := M.SubPointer.get_slice_rest (| γ, 3, 0 |) in
                              let mint_info := M.alloc (| γ1_0 |) in
                              let destination_account_info := M.alloc (| γ1_1 |) in
                              let owner_info := M.alloc (| γ1_2 |) in
                              let remaining := M.alloc (| γ1_rest |) in
                              let~ destination_account :
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.path "spl_token_interface::state::account::Account" ] :=
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.path "spl_token_interface::state::account::Account"
                                          ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::ops::control_flow::ControlFlow")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ];
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [
                                                    Ty.path
                                                      "spl_token_interface::state::account::Account"
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.path
                                                        "spl_token_interface::state::account::Account"
                                                    ];
                                                  Ty.path "pinocchio::program_error::ProgramError"
                                                ],
                                              [],
                                              [],
                                              "branch",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [
                                                        Ty.path
                                                          "spl_token_interface::state::account::Account"
                                                      ];
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ],
                                                M.get_function (|
                                                  "spl_token_interface::state::load_mut",
                                                  [],
                                                  [
                                                    Ty.path
                                                      "spl_token_interface::state::account::Account"
                                                  ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.path "u8" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "pinocchio::account_info::AccountInfo",
                                                          "borrow_mut_data_unchecked",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.read (| destination_account_info |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "pinocchio::program_error::ProgramError"
                                                            ],
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |)
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.match_operator (|
                                                Ty.path "bool",
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::ops::control_flow::ControlFlow")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ];
                                                        Ty.path "bool"
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "bool";
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ],
                                                      [],
                                                      [],
                                                      "branch",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "bool";
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "spl_token_interface::state::account::Account",
                                                          "is_frozen",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.read (| destination_account |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError"
                                                                    ],
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  [],
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  Value.StructTuple
                                                    "core::result::Result::Err"
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ]
                                                    [
                                                      M.call_closure (|
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError",
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path
                                                            "spl_token_interface::error::TokenError",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                          "into",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          Value.StructTuple
                                                            "spl_token_interface::error::TokenError::AccountFrozen"
                                                            []
                                                            []
                                                            []
                                                        ]
                                                      |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.path
                                                      "spl_token_interface::state::account::Account",
                                                    "is_native",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| destination_account |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  Value.StructTuple
                                                    "core::result::Result::Err"
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ]
                                                    [
                                                      M.call_closure (|
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError",
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path
                                                            "spl_token_interface::error::TokenError",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                          "into",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          Value.StructTuple
                                                            "spl_token_interface::error::TokenError::NativeNotSupported"
                                                            []
                                                            []
                                                            []
                                                        ]
                                                      |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_trait_method (|
                                                    "core::cmp::PartialEq",
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 32 ]
                                                          [ Ty.path "u8" ]
                                                      ],
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 32 ]
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ],
                                                    "ne",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 32
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "pinocchio::account_info::AccountInfo",
                                                            "key",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| mint_info |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (|
                                                              M.read (| destination_account |)
                                                            |),
                                                            "spl_token_interface::state::account::Account",
                                                            "mint"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  Value.StructTuple
                                                    "core::result::Result::Err"
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ]
                                                    [
                                                      M.call_closure (|
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError",
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path
                                                            "spl_token_interface::error::TokenError",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                          "into",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          Value.StructTuple
                                                            "spl_token_interface::error::TokenError::MintMismatch"
                                                            []
                                                            []
                                                            []
                                                        ]
                                                      |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)
                                |) in
                              let~ mint :
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.path "spl_token_interface::state::mint::Mint" ] :=
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.path "spl_token_interface::state::mint::Mint" ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::ops::control_flow::ControlFlow")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ];
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [ Ty.path "spl_token_interface::state::mint::Mint"
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.path
                                                        "spl_token_interface::state::mint::Mint"
                                                    ];
                                                  Ty.path "pinocchio::program_error::ProgramError"
                                                ],
                                              [],
                                              [],
                                              "branch",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [
                                                        Ty.path
                                                          "spl_token_interface::state::mint::Mint"
                                                      ];
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ],
                                                M.get_function (|
                                                  "spl_token_interface::state::load_mut",
                                                  [],
                                                  [ Ty.path "spl_token_interface::state::mint::Mint"
                                                  ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.path "u8" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "pinocchio::account_info::AccountInfo",
                                                          "borrow_mut_data_unchecked",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| mint_info |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "pinocchio::program_error::ProgramError"
                                                            ],
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |)
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ := expected_decimals in
                                          let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let expected_decimals := M.copy (| γ0_0 |) in
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.ne,
                                                          [
                                                            M.read (| expected_decimals |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| mint |) |),
                                                                "spl_token_interface::state::mint::Mint",
                                                                "decimals"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          Value.StructTuple
                                                            "core::result::Result::Err"
                                                            []
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "pinocchio::program_error::ProgramError"
                                                            ]
                                                            [
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError",
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path
                                                                    "spl_token_interface::error::TokenError",
                                                                  [],
                                                                  [
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                  "into",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  Value.StructTuple
                                                                    "spl_token_interface::error::TokenError::MintDecimalsMismatch"
                                                                    []
                                                                    []
                                                                    []
                                                                ]
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 32 ]
                                                  [ Ty.path "u8" ]
                                              ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.path "spl_token_interface::state::mint::Mint",
                                          "mint_authority",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| mint |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let mint_authority := M.copy (| γ0_0 |) in
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError"
                                                      ];
                                                    Ty.tuple []
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ],
                                                  [],
                                                  [],
                                                  "branch",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError"
                                                      ],
                                                    M.get_function (|
                                                      "pinocchio_token_program::processor::validate_owner",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| mint_authority |) |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| owner_info |) |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| remaining |) |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError"
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "pinocchio::program_error::ProgramError"
                                                                ],
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  Value.StructTuple
                                                    "core::result::Result::Err"
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ]
                                                    [
                                                      M.call_closure (|
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError",
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path
                                                            "spl_token_interface::error::TokenError",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                          "into",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          Value.StructTuple
                                                            "spl_token_interface::error::TokenError::FixedSupply"
                                                            []
                                                            []
                                                            []
                                                        ]
                                                      |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)))
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.eq,
                                                  [
                                                    M.read (| amount |);
                                                    Value.Integer IntegerKind.U64 0
                                                  ]
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.read (|
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::ops::control_flow::ControlFlow")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ];
                                                        Ty.tuple []
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ],
                                                      [],
                                                      [],
                                                      "branch",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                        M.get_function (|
                                                          "pinocchio_token_program::processor::check_account_owner",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| mint_info |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError"
                                                                    ],
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  [],
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.read (|
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::ops::control_flow::ControlFlow")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ];
                                                        Ty.tuple []
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ],
                                                      [],
                                                      [],
                                                      "branch",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                        M.get_function (|
                                                          "pinocchio_token_program::processor::check_account_owner",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.read (| destination_account_info |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError"
                                                                    ],
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  [],
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let~ mint_supply : Ty.path "u64" :=
                                            M.read (|
                                              M.match_operator (|
                                                Ty.path "u64",
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::ops::control_flow::ControlFlow")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "spl_token_interface::error::TokenError"
                                                          ];
                                                        Ty.path "u64"
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path "u64";
                                                          Ty.path
                                                            "spl_token_interface::error::TokenError"
                                                        ],
                                                      [],
                                                      [],
                                                      "branch",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "u64";
                                                            Ty.path
                                                              "spl_token_interface::error::TokenError"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Ty.path "u64" ],
                                                          "ok_or",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "spl_token_interface::error::TokenError"
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [ Ty.path "u64" ],
                                                            M.get_associated_function (|
                                                              Ty.path "u64",
                                                              "checked_add",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "u64",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "spl_token_interface::state::mint::Mint",
                                                                  "supply",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| mint |) |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.read (| amount |)
                                                            ]
                                                          |);
                                                          Value.StructTuple
                                                            "spl_token_interface::error::TokenError::Overflow"
                                                            []
                                                            []
                                                            []
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError"
                                                                    ],
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "spl_token_interface::error::TokenError"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  [],
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_associated_function (|
                                                Ty.path "spl_token_interface::state::mint::Mint",
                                                "set_supply",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| mint |) |)
                                                |);
                                                M.read (| mint_supply |)
                                              ]
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_associated_function (|
                                                Ty.path
                                                  "spl_token_interface::state::account::Account",
                                                "set_amount",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| destination_account |) |)
                                                |);
                                                M.call_closure (|
                                                  Ty.path "u64",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u64",
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "spl_token_interface::state::account::Account",
                                                        "amount",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (| destination_account |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.read (| amount |)
                                                  ]
                                                |)
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)
                                |) in
                              M.alloc (|
                                Value.StructTuple
                                  "core::result::Result::Ok"
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                                  [ Value.Tuple [] ]
                              |)))
                        ]
                      |)
                    |)
                  |)))
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_process_mint_to :
        M.IsFunction.C
          "pinocchio_token_program::processor::shared::mint_to::process_mint_to"
          process_mint_to.
      Admitted.
      Global Typeclasses Opaque process_mint_to.
    End mint_to.
  End shared.
End processor.
