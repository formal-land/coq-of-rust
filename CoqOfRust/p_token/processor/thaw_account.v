(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Module thaw_account.
    (*
    pub fn process_thaw_account(accounts: &[AccountInfo]) -> ProgramResult {
        process_toggle_account_state(accounts, false)
    }
    *)
    Definition process_thaw_account (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ accounts ] =>
        ltac:(M.monadic
          (let accounts := M.alloc (| accounts |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
            M.get_function (|
              "pinocchio_token_program::processor::shared::toggle_account_state::process_toggle_account_state",
              [],
              []
            |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |); Value.Bool false
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_process_thaw_account :
      M.IsFunction.C
        "pinocchio_token_program::processor::thaw_account::process_thaw_account"
        process_thaw_account.
    Admitted.
    Global Typeclasses Opaque process_thaw_account.
  End thaw_account.
End processor.
