(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Module batch.
    Definition value_IX_HEADER_SIZE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 2 |))).
    
    Global Instance Instance_IsConstant_value_IX_HEADER_SIZE :
      M.IsFunction.C
        "pinocchio_token_program::processor::batch::IX_HEADER_SIZE"
        value_IX_HEADER_SIZE.
    Admitted.
    Global Typeclasses Opaque value_IX_HEADER_SIZE.
    
    (*
    pub fn process_batch(mut accounts: &[AccountInfo], mut instruction_data: &[u8]) -> ProgramResult {
        loop {
            // Validates the instruction data and accounts offset.
    
            if instruction_data.len() < IX_HEADER_SIZE {
                // The instruction data must have at least two bytes.
                return Err(TokenError::InvalidInstruction.into());
            }
    
            // SAFETY: The instruction data is guaranteed to have at least two bytes
            // (header) + one byte (discriminator) and the values are within the bounds
            // of an `usize`.
            let expected_accounts = unsafe { *instruction_data.get_unchecked(0) as usize };
            let data_offset = IX_HEADER_SIZE + unsafe { *instruction_data.get_unchecked(1) as usize };
    
            if instruction_data.len() < data_offset || data_offset == IX_HEADER_SIZE {
                return Err(TokenError::InvalidInstruction.into());
            }
    
            if accounts.len() < expected_accounts {
                return Err(ProgramError::NotEnoughAccountKeys);
            }
    
            // Process the instruction.
    
            // SAFETY: The instruction data and accounts lengths are already validated so
            // all slices are guaranteed to be valid.
            let (ix_accounts, ix_data) = unsafe {
                (
                    accounts.get_unchecked(..expected_accounts),
                    instruction_data.get_unchecked(IX_HEADER_SIZE..data_offset),
                )
            };
    
            inner_process_instruction(ix_accounts, ix_data)?;
    
            if data_offset == instruction_data.len() {
                // The batch is complete.
                break;
            }
    
            accounts = &accounts[expected_accounts..];
            instruction_data = &instruction_data[data_offset..];
        }
    
        Ok(())
    }
    *)
    Definition process_batch (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ accounts; instruction_data ] =>
        ltac:(M.monadic
          (let accounts := M.alloc (| accounts |) in
          let instruction_data := M.alloc (| instruction_data |) in
          M.read (|
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
              ltac:(M.monadic
                (M.alloc (|
                  M.read (|
                    let~ _ : Ty.tuple [] :=
                      M.read (|
                        M.loop (|
                          Ty.tuple [],
                          ltac:(M.monadic
                            (let~ _ : Ty.tuple [] :=
                              M.read (|
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.lt,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [ Ty.path "u8" ],
                                                      "len",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| instruction_data |) |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.read (|
                                                    get_constant (|
                                                      "pinocchio_token_program::processor::batch::IX_HEADER_SIZE",
                                                      Ty.path "usize"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                Value.StructTuple
                                                  "core::result::Result::Err"
                                                  []
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ]
                                                  [
                                                    M.call_closure (|
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError",
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.path
                                                          "spl_token_interface::error::TokenError",
                                                        [],
                                                        [
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ],
                                                        "into",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        Value.StructTuple
                                                          "spl_token_interface::error::TokenError::InvalidInstruction"
                                                          []
                                                          []
                                                          []
                                                      ]
                                                    |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)
                              |) in
                            let~ expected_accounts : Ty.path "usize" :=
                              M.cast
                                (Ty.path "usize")
                                (M.read (|
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply (Ty.path "&") [] [ Ty.path "u8" ],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                        "get_unchecked",
                                        [],
                                        [ Ty.path "usize" ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| instruction_data |) |)
                                        |);
                                        Value.Integer IntegerKind.Usize 0
                                      ]
                                    |)
                                  |)
                                |)) in
                            let~ data_offset : Ty.path "usize" :=
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.add,
                                [
                                  M.read (|
                                    get_constant (|
                                      "pinocchio_token_program::processor::batch::IX_HEADER_SIZE",
                                      Ty.path "usize"
                                    |)
                                  |);
                                  M.cast
                                    (Ty.path "usize")
                                    (M.read (|
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "u8" ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                            "get_unchecked",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| instruction_data |) |)
                                            |);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |)
                                      |)
                                    |))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.read (|
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              LogicalOp.or (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.lt,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (| instruction_data |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.read (| data_offset |)
                                                  ]
                                                |),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.eq,
                                                    [
                                                      M.read (| data_offset |);
                                                      M.read (|
                                                        get_constant (|
                                                          "pinocchio_token_program::processor::batch::IX_HEADER_SIZE",
                                                          Ty.path "usize"
                                                        |)
                                                      |)
                                                    ]
                                                  |)))
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                Value.StructTuple
                                                  "core::result::Result::Err"
                                                  []
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ]
                                                  [
                                                    M.call_closure (|
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError",
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.path
                                                          "spl_token_interface::error::TokenError",
                                                        [],
                                                        [
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ],
                                                        "into",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        Value.StructTuple
                                                          "spl_token_interface::error::TokenError::InvalidInstruction"
                                                          []
                                                          []
                                                          []
                                                      ]
                                                    |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.read (|
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.lt,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.path
                                                            "pinocchio::account_info::AccountInfo"
                                                        ],
                                                      "len",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| accounts |) |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.read (| expected_accounts |)
                                                ]
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                Value.StructTuple
                                                  "core::result::Result::Err"
                                                  []
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ]
                                                  [
                                                    Value.StructTuple
                                                      "pinocchio::program_error::ProgramError::NotEnoughAccountKeys"
                                                      []
                                                      []
                                                      []
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)
                              |) in
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Value.Tuple
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [ Ty.path "pinocchio::account_info::AccountInfo" ],
                                        "get_unchecked",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeTo")
                                            []
                                            [ Ty.path "usize" ]
                                        ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| accounts |) |)
                                        |);
                                        Value.StructRecord
                                          "core::ops::range::RangeTo"
                                          []
                                          [ Ty.path "usize" ]
                                          [ ("end_", M.read (| expected_accounts |)) ]
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                        "get_unchecked",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ]
                                        ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| instruction_data |) |)
                                        |);
                                        Value.StructRecord
                                          "core::ops::range::Range"
                                          []
                                          [ Ty.path "usize" ]
                                          [
                                            ("start",
                                              M.read (|
                                                get_constant (|
                                                  "pinocchio_token_program::processor::batch::IX_HEADER_SIZE",
                                                  Ty.path "usize"
                                                |)
                                              |));
                                            ("end_", M.read (| data_offset |))
                                          ]
                                      ]
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let ix_accounts := M.copy (| γ0_0 |) in
                                    let ix_data := M.copy (| γ0_1 |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.read (|
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::ops::control_flow::ControlFlow")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ];
                                                  Ty.tuple []
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ],
                                                [],
                                                [],
                                                "branch",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ],
                                                  M.get_function (|
                                                    "pinocchio_token_program::entrypoint::inner_process_instruction",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| ix_accounts |) |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| ix_data |) |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "pinocchio::program_error::ProgramError"
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError"
                                                              ],
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "pinocchio::program_error::ProgramError"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |)
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.read (|
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.eq,
                                                        [
                                                          M.read (| data_offset |);
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [ Ty.path "u8" ],
                                                              "len",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (| instruction_data |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.write (|
                                        accounts,
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.path
                                                            "pinocchio::account_info::AccountInfo"
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::index::Index",
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.path
                                                          "pinocchio::account_info::AccountInfo"
                                                      ],
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::RangeFrom")
                                                        []
                                                        [ Ty.path "usize" ]
                                                    ],
                                                    "index",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| accounts |) |)
                                                    |);
                                                    Value.StructRecord
                                                      "core::ops::range::RangeFrom"
                                                      []
                                                      [ Ty.path "usize" ]
                                                      [ ("start", M.read (| expected_accounts |)) ]
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.write (|
                                        instruction_data,
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::index::Index",
                                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::RangeFrom")
                                                        []
                                                        [ Ty.path "usize" ]
                                                    ],
                                                    "index",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| instruction_data |) |)
                                                    |);
                                                    Value.StructRecord
                                                      "core::ops::range::RangeFrom"
                                                      []
                                                      [ Ty.path "usize" ]
                                                      [ ("start", M.read (| data_offset |)) ]
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |)))
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                        [ Value.Tuple [] ]
                    |)
                  |)
                |)))
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_process_batch :
      M.IsFunction.C "pinocchio_token_program::processor::batch::process_batch" process_batch.
    Admitted.
    Global Typeclasses Opaque process_batch.
  End batch.
End processor.
