(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Module set_authority.
    (*
    pub fn process_set_authority(accounts: &[AccountInfo], instruction_data: &[u8]) -> ProgramResult {
        // Validates the instruction data.
    
        let (authority_type, new_authority) = if instruction_data.len() >= 2 {
            // SAFETY: The expected size of the instruction data is either 2 or 34 bytes:
            //   - authority_type (1 byte)
            //   - option + new_authority (1 byte + 32 bytes)
            unsafe {
                let authority_type = AuthorityType::try_from( *instruction_data.get_unchecked(0))?;
                let new_authority = if *instruction_data.get_unchecked(1) == 0 {
                    None
                } else if *instruction_data.get_unchecked(1) == 1 && instruction_data.len() >= 34 {
                    Some(&*(instruction_data.as_ptr().add(2) as *const Pubkey))
                } else {
                    return Err(TokenError::InvalidInstruction.into());
                };
                (authority_type, new_authority)
            }
        } else {
            return Err(TokenError::InvalidInstruction.into());
        };
    
        // Validates the accounts.
    
        let [account_info, authority_info, remaining @ ..] = accounts else {
            return Err(ProgramError::NotEnoughAccountKeys);
        };
    
        if account_info.data_len() == Account::LEN {
            // SAFETY: single mutable borrow to `account_info` account data and
            // `load_mut` validates that the account is initialized.
            let account = unsafe { load_mut::<Account>(account_info.borrow_mut_data_unchecked())? };
    
            if account.is_frozen()? {
                return Err(TokenError::AccountFrozen.into());
            }
    
            match authority_type {
                AuthorityType::AccountOwner => {
                    validate_owner(&account.owner, authority_info, remaining)?;
    
                    if let Some(authority) = new_authority {
                        account.owner = *authority;
                    } else {
                        return Err(TokenError::InvalidInstruction.into());
                    }
    
                    account.clear_delegate();
                    account.set_delegated_amount(0);
    
                    if account.is_native() {
                        account.clear_close_authority();
                    }
                }
                AuthorityType::CloseAccount => {
                    let authority = account.close_authority().unwrap_or(&account.owner);
                    validate_owner(authority, authority_info, remaining)?;
    
                    if let Some(authority) = new_authority {
                        account.set_close_authority(authority);
                    } else {
                        account.clear_close_authority();
                    }
                }
                _ => {
                    return Err(TokenError::AuthorityTypeNotSupported.into());
                }
            }
        } else if account_info.data_len() == Mint::LEN {
            // SAFETY: single mutable borrow to `account_info` account data and
            // `load_mut` validates that the mint is initialized.
            let mint = unsafe { load_mut::<Mint>(account_info.borrow_mut_data_unchecked())? };
    
            match authority_type {
                AuthorityType::MintTokens => {
                    // Once a mint's supply is fixed, it cannot be undone by setting a new
                    // mint_authority.
                    let mint_authority = mint.mint_authority().ok_or(TokenError::FixedSupply)?;
    
                    validate_owner(mint_authority, authority_info, remaining)?;
    
                    if let Some(authority) = new_authority {
                        mint.set_mint_authority(authority);
                    } else {
                        mint.clear_mint_authority();
                    }
                }
                AuthorityType::FreezeAccount => {
                    // Once a mint's freeze authority is disabled, it cannot be re-enabled by
                    // setting a new freeze_authority.
                    let freeze_authority = mint
                        .freeze_authority()
                        .ok_or(TokenError::MintCannotFreeze)?;
    
                    validate_owner(freeze_authority, authority_info, remaining)?;
    
                    if let Some(authority) = new_authority {
                        mint.set_freeze_authority(authority);
                    } else {
                        mint.clear_freeze_authority();
                    }
                }
                _ => {
                    return Err(TokenError::AuthorityTypeNotSupported.into());
                }
            }
        } else {
            return Err(ProgramError::InvalidArgument);
        }
    
        Ok(())
    }
    *)
    Definition process_set_authority (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ accounts; instruction_data ] =>
        ltac:(M.monadic
          (let accounts := M.alloc (| accounts |) in
          let instruction_data := M.alloc (| instruction_data |) in
          M.read (|
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
              ltac:(M.monadic
                (M.alloc (|
                  M.read (|
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                      M.match_operator (|
                        Ty.tuple
                          [
                            Ty.path "spl_token_interface::instruction::AuthorityType";
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [ Ty.path "u8" ]
                                  ]
                              ]
                          ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.ge,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| instruction_data |) |)
                                            |)
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 2
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ authority_type :
                                  Ty.path "spl_token_interface::instruction::AuthorityType" :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.path "spl_token_interface::instruction::AuthorityType",
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::ops::control_flow::ControlFlow")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "pinocchio::program_error::ProgramError"
                                              ];
                                            Ty.path
                                              "spl_token_interface::instruction::AuthorityType"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path
                                                "spl_token_interface::instruction::AuthorityType";
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ],
                                          [],
                                          [],
                                          "branch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path
                                                  "spl_token_interface::instruction::AuthorityType";
                                                Ty.path "pinocchio::program_error::ProgramError"
                                              ],
                                            M.get_trait_method (|
                                              "core::convert::TryFrom",
                                              Ty.path
                                                "spl_token_interface::instruction::AuthorityType",
                                              [],
                                              [ Ty.path "u8" ],
                                              "try_from",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "u8" ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [ Ty.path "u8" ],
                                                      "get_unchecked",
                                                      [],
                                                      [ Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| instruction_data |) |)
                                                      |);
                                                      Value.Integer IntegerKind.Usize 0
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError"
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ],
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |) in
                              let~ new_authority :
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 32 ]
                                            [ Ty.path "u8" ]
                                        ]
                                    ] :=
                                M.read (|
                                  M.match_operator (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 32 ]
                                              [ Ty.path "u8" ]
                                          ]
                                      ],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.eq,
                                                  [
                                                    M.read (|
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "u8" ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.path "u8" ],
                                                            "get_unchecked",
                                                            [],
                                                            [ Ty.path "usize" ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.read (| instruction_data |)
                                                              |)
                                                            |);
                                                            Value.Integer IntegerKind.Usize 1
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    Value.Integer IntegerKind.U8 0
                                                  ]
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            Value.StructTuple
                                              "core::option::Option::None"
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 32 ]
                                                      [ Ty.path "u8" ]
                                                  ]
                                              ]
                                              []
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 32 ]
                                                      [ Ty.path "u8" ]
                                                  ]
                                              ],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        LogicalOp.and (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.eq,
                                                            [
                                                              M.read (|
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Ty.path "u8" ],
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ Ty.path "u8" ],
                                                                      "get_unchecked",
                                                                      [],
                                                                      [ Ty.path "usize" ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            instruction_data
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              Value.Integer IntegerKind.U8 1
                                                            ]
                                                          |),
                                                          ltac:(M.monadic
                                                            (M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.ge,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ Ty.path "u8" ],
                                                                    "len",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (|
                                                                          instruction_data
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                Value.Integer IntegerKind.Usize 34
                                                              ]
                                                            |)))
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::option::Option::Some"
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 32 ]
                                                              [ Ty.path "u8" ]
                                                          ]
                                                      ]
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.cast
                                                              (Ty.apply
                                                                (Ty.path "*const")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        32
                                                                    ]
                                                                    [ Ty.path "u8" ]
                                                                ])
                                                              (M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "*const")
                                                                  []
                                                                  [ Ty.path "u8" ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "*const")
                                                                    []
                                                                    [ Ty.path "u8" ],
                                                                  "add",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "*const")
                                                                      []
                                                                      [ Ty.path "u8" ],
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ Ty.path "u8" ],
                                                                      "as_ptr",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            instruction_data
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  Value.Integer IntegerKind.Usize 2
                                                                ]
                                                              |))
                                                          |)
                                                        |)
                                                      ]
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          Value.StructTuple
                                                            "core::result::Result::Err"
                                                            []
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "pinocchio::program_error::ProgramError"
                                                            ]
                                                            [
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError",
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path
                                                                    "spl_token_interface::error::TokenError",
                                                                  [],
                                                                  [
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                  "into",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  Value.StructTuple
                                                                    "spl_token_interface::error::TokenError::InvalidInstruction"
                                                                    []
                                                                    []
                                                                    []
                                                                ]
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)))
                                            ]
                                          |)))
                                    ]
                                  |)
                                |) in
                              M.alloc (|
                                Value.Tuple
                                  [ M.read (| authority_type |); M.read (| new_authority |) ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                        [
                                          M.call_closure (|
                                            Ty.path "pinocchio::program_error::ProgramError",
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.path "spl_token_interface::error::TokenError",
                                              [],
                                              [ Ty.path "pinocchio::program_error::ProgramError" ],
                                              "into",
                                              [],
                                              []
                                            |),
                                            [
                                              Value.StructTuple
                                                "spl_token_interface::error::TokenError::InvalidInstruction"
                                                []
                                                []
                                                []
                                            ]
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let authority_type := M.copy (| γ0_0 |) in
                            let new_authority := M.copy (| γ0_1 |) in
                            M.match_operator (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                              accounts,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.read (| γ |) in
                                    let γ1_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                                    let γ1_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                                    let γ1_rest := M.SubPointer.get_slice_rest (| γ, 2, 0 |) in
                                    let account_info := M.alloc (| γ1_0 |) in
                                    let authority_info := M.alloc (| γ1_1 |) in
                                    let remaining := M.alloc (| γ1_rest |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.read (|
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.eq,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "pinocchio::account_info::AccountInfo",
                                                              "data_len",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (| account_info |)
                                                                |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.read (|
                                                            get_constant (|
                                                              "spl_token_interface::state::Transmutable::LEN",
                                                              Ty.path "usize"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                let~ account :
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [
                                                        Ty.path
                                                          "spl_token_interface::state::account::Account"
                                                      ] :=
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.read (|
                                                        M.match_operator (|
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [
                                                              Ty.path
                                                                "spl_token_interface::state::account::Account"
                                                            ],
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::ops::control_flow::ControlFlow")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError"
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "spl_token_interface::state::account::Account"
                                                                    ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::Try",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "spl_token_interface::state::account::Account"
                                                                      ];
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                [],
                                                                [],
                                                                "branch",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "spl_token_interface::state::account::Account"
                                                                        ];
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError"
                                                                    ],
                                                                  M.get_function (|
                                                                    "spl_token_interface::state::load_mut",
                                                                    [],
                                                                    [
                                                                      Ty.path
                                                                        "spl_token_interface::state::account::Account"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [ Ty.path "u8" ]
                                                                            ],
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "pinocchio::account_info::AccountInfo",
                                                                            "borrow_mut_data_unchecked",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  account_info
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Break",
                                                                    0
                                                                  |) in
                                                                let residual := M.copy (| γ0_0 |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (|
                                                                      M.return_ (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.tuple [];
                                                                              Ty.path
                                                                                "pinocchio::program_error::ProgramError"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::try_trait::FromResidual",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              []
                                                                              [
                                                                                Ty.tuple [];
                                                                                Ty.path
                                                                                  "pinocchio::program_error::ProgramError"
                                                                              ],
                                                                            [],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "core::convert::Infallible";
                                                                                  Ty.path
                                                                                    "pinocchio::program_error::ProgramError"
                                                                                ]
                                                                            ],
                                                                            "from_residual",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [ M.read (| residual |) ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                                    0
                                                                  |) in
                                                                let val := M.copy (| γ0_0 |) in
                                                                val))
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.read (|
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.match_operator (|
                                                                  Ty.path "bool",
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::ops::control_flow::ControlFlow")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "pinocchio::program_error::ProgramError"
                                                                            ];
                                                                          Ty.path "bool"
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::Try",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.path "bool";
                                                                            Ty.path
                                                                              "pinocchio::program_error::ProgramError"
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "branch",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.path "bool";
                                                                              Ty.path
                                                                                "pinocchio::program_error::ProgramError"
                                                                            ],
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "spl_token_interface::state::account::Account",
                                                                            "is_frozen",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (| account |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                            0
                                                                          |) in
                                                                        let residual :=
                                                                          M.copy (| γ0_0 |) in
                                                                        M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.return_ (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    []
                                                                                    [
                                                                                      Ty.tuple [];
                                                                                      Ty.path
                                                                                        "pinocchio::program_error::ProgramError"
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::try_trait::FromResidual",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::result::Result")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple [];
                                                                                        Ty.path
                                                                                          "pinocchio::program_error::ProgramError"
                                                                                      ],
                                                                                    [],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::result::Result")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "core::convert::Infallible";
                                                                                          Ty.path
                                                                                            "pinocchio::program_error::ProgramError"
                                                                                        ]
                                                                                    ],
                                                                                    "from_residual",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      residual
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                            0
                                                                          |) in
                                                                        let val :=
                                                                          M.copy (| γ0_0 |) in
                                                                        val))
                                                                  ]
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    Value.StructTuple
                                                                      "core::result::Result::Err"
                                                                      []
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ]
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.path
                                                                            "pinocchio::program_error::ProgramError",
                                                                          M.get_trait_method (|
                                                                            "core::convert::Into",
                                                                            Ty.path
                                                                              "spl_token_interface::error::TokenError",
                                                                            [],
                                                                            [
                                                                              Ty.path
                                                                                "pinocchio::program_error::ProgramError"
                                                                            ],
                                                                            "into",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            Value.StructTuple
                                                                              "spl_token_interface::error::TokenError::AccountFrozen"
                                                                              []
                                                                              []
                                                                              []
                                                                          ]
                                                                        |)
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |)
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  authority_type,
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let _ :=
                                                          M.is_struct_tuple (|
                                                            γ,
                                                            "spl_token_interface::instruction::AuthorityType::AccountOwner"
                                                          |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.read (|
                                                            M.match_operator (|
                                                              Ty.tuple [],
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::control_flow::ControlFlow")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "pinocchio::program_error::ProgramError"
                                                                        ];
                                                                      Ty.tuple []
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::Try",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "branch",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        []
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "pinocchio::program_error::ProgramError"
                                                                        ],
                                                                      M.get_function (|
                                                                        "pinocchio_token_program::processor::validate_owner",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    account
                                                                                  |)
                                                                                |),
                                                                                "spl_token_interface::state::account::Account",
                                                                                "owner"
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (|
                                                                              authority_info
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| remaining |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::ops::control_flow::ControlFlow::Break",
                                                                        0
                                                                      |) in
                                                                    let residual :=
                                                                      M.copy (| γ0_0 |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          M.return_ (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "pinocchio::program_error::ProgramError"
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::try_trait::FromResidual",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple [];
                                                                                    Ty.path
                                                                                      "pinocchio::program_error::ProgramError"
                                                                                  ],
                                                                                [],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "core::convert::Infallible";
                                                                                      Ty.path
                                                                                        "pinocchio::program_error::ProgramError"
                                                                                    ]
                                                                                ],
                                                                                "from_residual",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  residual
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                                        0
                                                                      |) in
                                                                    let val := M.copy (| γ0_0 |) in
                                                                    val))
                                                              ]
                                                            |)
                                                          |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.read (|
                                                            M.match_operator (|
                                                              Ty.tuple [],
                                                              M.alloc (| Value.Tuple [] |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ := new_authority in
                                                                    let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let authority :=
                                                                      M.copy (| γ0_0 |) in
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.write (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| account |)
                                                                          |),
                                                                          "spl_token_interface::state::account::Account",
                                                                          "owner"
                                                                        |),
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| authority |)
                                                                          |)
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          M.return_ (|
                                                                            Value.StructTuple
                                                                              "core::result::Result::Err"
                                                                              []
                                                                              [
                                                                                Ty.tuple [];
                                                                                Ty.path
                                                                                  "pinocchio::program_error::ProgramError"
                                                                              ]
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.path
                                                                                    "pinocchio::program_error::ProgramError",
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::Into",
                                                                                    Ty.path
                                                                                      "spl_token_interface::error::TokenError",
                                                                                    [],
                                                                                    [
                                                                                      Ty.path
                                                                                        "pinocchio::program_error::ProgramError"
                                                                                    ],
                                                                                    "into",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    Value.StructTuple
                                                                                      "spl_token_interface::error::TokenError::InvalidInstruction"
                                                                                      []
                                                                                      []
                                                                                      []
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)))
                                                              ]
                                                            |)
                                                          |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.call_closure (|
                                                            Ty.tuple [],
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "spl_token_interface::state::account::Account",
                                                              "clear_delegate",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (| M.read (| account |) |)
                                                              |)
                                                            ]
                                                          |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.call_closure (|
                                                            Ty.tuple [],
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "spl_token_interface::state::account::Account",
                                                              "set_delegated_amount",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (| M.read (| account |) |)
                                                              |);
                                                              Value.Integer IntegerKind.U64 0
                                                            ]
                                                          |) in
                                                        M.match_operator (|
                                                          Ty.tuple [],
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "spl_token_interface::state::account::Account",
                                                                          "is_native",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| account |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.call_closure (|
                                                                    Ty.tuple [],
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "spl_token_interface::state::account::Account",
                                                                      "clear_close_authority",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (|
                                                                          M.read (| account |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let _ :=
                                                          M.is_struct_tuple (|
                                                            γ,
                                                            "spl_token_interface::instruction::AuthorityType::CloseAccount"
                                                          |) in
                                                        let~ authority :
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      32
                                                                  ]
                                                                  [ Ty.path "u8" ]
                                                              ] :=
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      32
                                                                  ]
                                                                  [ Ty.path "u8" ]
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            32
                                                                        ]
                                                                        [ Ty.path "u8" ]
                                                                    ]
                                                                ],
                                                              "unwrap_or",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              32
                                                                          ]
                                                                          [ Ty.path "u8" ]
                                                                      ]
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "spl_token_interface::state::account::Account",
                                                                  "close_authority",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| account |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| account |)
                                                                      |),
                                                                      "spl_token_interface::state::account::Account",
                                                                      "owner"
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.read (|
                                                            M.match_operator (|
                                                              Ty.tuple [],
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::control_flow::ControlFlow")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "pinocchio::program_error::ProgramError"
                                                                        ];
                                                                      Ty.tuple []
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::Try",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "branch",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        []
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "pinocchio::program_error::ProgramError"
                                                                        ],
                                                                      M.get_function (|
                                                                        "pinocchio_token_program::processor::validate_owner",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| authority |)
                                                                          |)
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (|
                                                                              authority_info
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| remaining |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::ops::control_flow::ControlFlow::Break",
                                                                        0
                                                                      |) in
                                                                    let residual :=
                                                                      M.copy (| γ0_0 |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          M.return_ (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "pinocchio::program_error::ProgramError"
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::try_trait::FromResidual",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple [];
                                                                                    Ty.path
                                                                                      "pinocchio::program_error::ProgramError"
                                                                                  ],
                                                                                [],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "core::convert::Infallible";
                                                                                      Ty.path
                                                                                        "pinocchio::program_error::ProgramError"
                                                                                    ]
                                                                                ],
                                                                                "from_residual",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  residual
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                                        0
                                                                      |) in
                                                                    let val := M.copy (| γ0_0 |) in
                                                                    val))
                                                              ]
                                                            |)
                                                          |) in
                                                        M.match_operator (|
                                                          Ty.tuple [],
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ := new_authority in
                                                                let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::option::Option::Some",
                                                                    0
                                                                  |) in
                                                                let authority :=
                                                                  M.copy (| γ0_0 |) in
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.call_closure (|
                                                                    Ty.tuple [],
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "spl_token_interface::state::account::Account",
                                                                      "set_close_authority",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (|
                                                                          M.read (| account |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| authority |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let~ _ : Ty.tuple [] :=
                                                                  M.call_closure (|
                                                                    Ty.tuple [],
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "spl_token_interface::state::account::Account",
                                                                      "clear_close_authority",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (|
                                                                          M.read (| account |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                Value.StructTuple
                                                                  "core::result::Result::Err"
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ]
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError",
                                                                      M.get_trait_method (|
                                                                        "core::convert::Into",
                                                                        Ty.path
                                                                          "spl_token_interface::error::TokenError",
                                                                        [],
                                                                        [
                                                                          Ty.path
                                                                            "pinocchio::program_error::ProgramError"
                                                                        ],
                                                                        "into",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        Value.StructTuple
                                                                          "spl_token_interface::error::TokenError::AuthorityTypeNotSupported"
                                                                          []
                                                                          []
                                                                          []
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)))
                                                  ]
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.eq,
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "pinocchio::account_info::AccountInfo",
                                                                      "data_len",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| account_info |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "spl_token_interface::state::Transmutable::LEN",
                                                                      Ty.path "usize"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        let~ mint :
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "spl_token_interface::state::mint::Mint"
                                                              ] :=
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (|
                                                              M.read (|
                                                                M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "spl_token_interface::state::mint::Mint"
                                                                    ],
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::ops::control_flow::ControlFlow")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "pinocchio::program_error::ProgramError"
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "spl_token_interface::state::mint::Mint"
                                                                            ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::Try",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "spl_token_interface::state::mint::Mint"
                                                                              ];
                                                                            Ty.path
                                                                              "pinocchio::program_error::ProgramError"
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "branch",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&mut")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "spl_token_interface::state::mint::Mint"
                                                                                ];
                                                                              Ty.path
                                                                                "pinocchio::program_error::ProgramError"
                                                                            ],
                                                                          M.get_function (|
                                                                            "spl_token_interface::state::load_mut",
                                                                            [],
                                                                            [
                                                                              Ty.path
                                                                                "spl_token_interface::state::mint::Mint"
                                                                            ]
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&mut")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "u8"
                                                                                        ]
                                                                                    ],
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "pinocchio::account_info::AccountInfo",
                                                                                    "borrow_mut_data_unchecked",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          account_info
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                            0
                                                                          |) in
                                                                        let residual :=
                                                                          M.copy (| γ0_0 |) in
                                                                        M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.return_ (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    []
                                                                                    [
                                                                                      Ty.tuple [];
                                                                                      Ty.path
                                                                                        "pinocchio::program_error::ProgramError"
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::try_trait::FromResidual",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::result::Result")
                                                                                      []
                                                                                      [
                                                                                        Ty.tuple [];
                                                                                        Ty.path
                                                                                          "pinocchio::program_error::ProgramError"
                                                                                      ],
                                                                                    [],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::result::Result")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "core::convert::Infallible";
                                                                                          Ty.path
                                                                                            "pinocchio::program_error::ProgramError"
                                                                                        ]
                                                                                    ],
                                                                                    "from_residual",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      residual
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                            0
                                                                          |) in
                                                                        let val :=
                                                                          M.copy (| γ0_0 |) in
                                                                        val))
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |) in
                                                        M.match_operator (|
                                                          Ty.tuple [],
                                                          authority_type,
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let _ :=
                                                                  M.is_struct_tuple (|
                                                                    γ,
                                                                    "spl_token_interface::instruction::AuthorityType::MintTokens"
                                                                  |) in
                                                                let~ mint_authority :
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              32
                                                                          ]
                                                                          [ Ty.path "u8" ]
                                                                      ] :=
                                                                  M.read (|
                                                                    M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                32
                                                                            ]
                                                                            [ Ty.path "u8" ]
                                                                        ],
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::ops::control_flow::ControlFlow")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "core::convert::Infallible";
                                                                                  Ty.path
                                                                                    "spl_token_interface::error::TokenError"
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        32
                                                                                    ]
                                                                                    [ Ty.path "u8" ]
                                                                                ]
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::try_trait::Try",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "array")
                                                                                      [
                                                                                        Value.Integer
                                                                                          IntegerKind.Usize
                                                                                          32
                                                                                      ]
                                                                                      [ Ty.path "u8"
                                                                                      ]
                                                                                  ];
                                                                                Ty.path
                                                                                  "spl_token_interface::error::TokenError"
                                                                              ],
                                                                            [],
                                                                            [],
                                                                            "branch",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "array")
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            32
                                                                                        ]
                                                                                        [
                                                                                          Ty.path
                                                                                            "u8"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "spl_token_interface::error::TokenError"
                                                                                ],
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              32
                                                                                          ]
                                                                                          [
                                                                                            Ty.path
                                                                                              "u8"
                                                                                          ]
                                                                                      ]
                                                                                  ],
                                                                                "ok_or",
                                                                                [],
                                                                                [
                                                                                  Ty.path
                                                                                    "spl_token_interface::error::TokenError"
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "array")
                                                                                            [
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                32
                                                                                            ]
                                                                                            [
                                                                                              Ty.path
                                                                                                "u8"
                                                                                            ]
                                                                                        ]
                                                                                    ],
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "spl_token_interface::state::mint::Mint",
                                                                                    "mint_authority",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          mint
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "spl_token_interface::error::TokenError::FixedSupply"
                                                                                  []
                                                                                  []
                                                                                  []
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                                0
                                                                              |) in
                                                                            let residual :=
                                                                              M.copy (| γ0_0 |) in
                                                                            M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.return_ (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::result::Result")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [];
                                                                                          Ty.path
                                                                                            "pinocchio::program_error::ProgramError"
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::FromResidual",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          []
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [];
                                                                                            Ty.path
                                                                                              "pinocchio::program_error::ProgramError"
                                                                                          ],
                                                                                        [],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "core::convert::Infallible";
                                                                                              Ty.path
                                                                                                "spl_token_interface::error::TokenError"
                                                                                            ]
                                                                                        ],
                                                                                        "from_residual",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          residual
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                                0
                                                                              |) in
                                                                            let val :=
                                                                              M.copy (| γ0_0 |) in
                                                                            val))
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.read (|
                                                                    M.match_operator (|
                                                                      Ty.tuple [],
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::ops::control_flow::ControlFlow")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "core::convert::Infallible";
                                                                                  Ty.path
                                                                                    "pinocchio::program_error::ProgramError"
                                                                                ];
                                                                              Ty.tuple []
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::try_trait::Try",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              []
                                                                              [
                                                                                Ty.tuple [];
                                                                                Ty.path
                                                                                  "pinocchio::program_error::ProgramError"
                                                                              ],
                                                                            [],
                                                                            [],
                                                                            "branch",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "pinocchio::program_error::ProgramError"
                                                                                ],
                                                                              M.get_function (|
                                                                                "pinocchio_token_program::processor::validate_owner",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      mint_authority
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      authority_info
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      remaining
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                                0
                                                                              |) in
                                                                            let residual :=
                                                                              M.copy (| γ0_0 |) in
                                                                            M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.return_ (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::result::Result")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [];
                                                                                          Ty.path
                                                                                            "pinocchio::program_error::ProgramError"
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::FromResidual",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          []
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [];
                                                                                            Ty.path
                                                                                              "pinocchio::program_error::ProgramError"
                                                                                          ],
                                                                                        [],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "core::convert::Infallible";
                                                                                              Ty.path
                                                                                                "pinocchio::program_error::ProgramError"
                                                                                            ]
                                                                                        ],
                                                                                        "from_residual",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          residual
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                                0
                                                                              |) in
                                                                            let val :=
                                                                              M.copy (| γ0_0 |) in
                                                                            val))
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.match_operator (|
                                                                  Ty.tuple [],
                                                                  M.alloc (| Value.Tuple [] |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ := new_authority in
                                                                        let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let authority :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let~ _ : Ty.tuple [] :=
                                                                          M.call_closure (|
                                                                            Ty.tuple [],
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "spl_token_interface::state::mint::Mint",
                                                                              "set_mint_authority",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.read (| mint |)
                                                                                |)
                                                                              |);
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    authority
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let~ _ : Ty.tuple [] :=
                                                                          M.call_closure (|
                                                                            Ty.tuple [],
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "spl_token_interface::state::mint::Mint",
                                                                              "clear_mint_authority",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.read (| mint |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let _ :=
                                                                  M.is_struct_tuple (|
                                                                    γ,
                                                                    "spl_token_interface::instruction::AuthorityType::FreezeAccount"
                                                                  |) in
                                                                let~ freeze_authority :
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              32
                                                                          ]
                                                                          [ Ty.path "u8" ]
                                                                      ] :=
                                                                  M.read (|
                                                                    M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                32
                                                                            ]
                                                                            [ Ty.path "u8" ]
                                                                        ],
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::ops::control_flow::ControlFlow")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "core::convert::Infallible";
                                                                                  Ty.path
                                                                                    "spl_token_interface::error::TokenError"
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        32
                                                                                    ]
                                                                                    [ Ty.path "u8" ]
                                                                                ]
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::try_trait::Try",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "array")
                                                                                      [
                                                                                        Value.Integer
                                                                                          IntegerKind.Usize
                                                                                          32
                                                                                      ]
                                                                                      [ Ty.path "u8"
                                                                                      ]
                                                                                  ];
                                                                                Ty.path
                                                                                  "spl_token_interface::error::TokenError"
                                                                              ],
                                                                            [],
                                                                            [],
                                                                            "branch",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "array")
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            32
                                                                                        ]
                                                                                        [
                                                                                          Ty.path
                                                                                            "u8"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "spl_token_interface::error::TokenError"
                                                                                ],
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              32
                                                                                          ]
                                                                                          [
                                                                                            Ty.path
                                                                                              "u8"
                                                                                          ]
                                                                                      ]
                                                                                  ],
                                                                                "ok_or",
                                                                                [],
                                                                                [
                                                                                  Ty.path
                                                                                    "spl_token_interface::error::TokenError"
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "array")
                                                                                            [
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                32
                                                                                            ]
                                                                                            [
                                                                                              Ty.path
                                                                                                "u8"
                                                                                            ]
                                                                                        ]
                                                                                    ],
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "spl_token_interface::state::mint::Mint",
                                                                                    "freeze_authority",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          mint
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "spl_token_interface::error::TokenError::MintCannotFreeze"
                                                                                  []
                                                                                  []
                                                                                  []
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                                0
                                                                              |) in
                                                                            let residual :=
                                                                              M.copy (| γ0_0 |) in
                                                                            M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.return_ (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::result::Result")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [];
                                                                                          Ty.path
                                                                                            "pinocchio::program_error::ProgramError"
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::FromResidual",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          []
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [];
                                                                                            Ty.path
                                                                                              "pinocchio::program_error::ProgramError"
                                                                                          ],
                                                                                        [],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "core::convert::Infallible";
                                                                                              Ty.path
                                                                                                "spl_token_interface::error::TokenError"
                                                                                            ]
                                                                                        ],
                                                                                        "from_residual",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          residual
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                                0
                                                                              |) in
                                                                            let val :=
                                                                              M.copy (| γ0_0 |) in
                                                                            val))
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.read (|
                                                                    M.match_operator (|
                                                                      Ty.tuple [],
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::ops::control_flow::ControlFlow")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "core::convert::Infallible";
                                                                                  Ty.path
                                                                                    "pinocchio::program_error::ProgramError"
                                                                                ];
                                                                              Ty.tuple []
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::try_trait::Try",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              []
                                                                              [
                                                                                Ty.tuple [];
                                                                                Ty.path
                                                                                  "pinocchio::program_error::ProgramError"
                                                                              ],
                                                                            [],
                                                                            [],
                                                                            "branch",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "pinocchio::program_error::ProgramError"
                                                                                ],
                                                                              M.get_function (|
                                                                                "pinocchio_token_program::processor::validate_owner",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      freeze_authority
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      authority_info
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      remaining
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                                0
                                                                              |) in
                                                                            let residual :=
                                                                              M.copy (| γ0_0 |) in
                                                                            M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.return_ (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::result::Result")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [];
                                                                                          Ty.path
                                                                                            "pinocchio::program_error::ProgramError"
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::FromResidual",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          []
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [];
                                                                                            Ty.path
                                                                                              "pinocchio::program_error::ProgramError"
                                                                                          ],
                                                                                        [],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "core::convert::Infallible";
                                                                                              Ty.path
                                                                                                "pinocchio::program_error::ProgramError"
                                                                                            ]
                                                                                        ],
                                                                                        "from_residual",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          residual
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                                0
                                                                              |) in
                                                                            let val :=
                                                                              M.copy (| γ0_0 |) in
                                                                            val))
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.match_operator (|
                                                                  Ty.tuple [],
                                                                  M.alloc (| Value.Tuple [] |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ := new_authority in
                                                                        let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let authority :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let~ _ : Ty.tuple [] :=
                                                                          M.call_closure (|
                                                                            Ty.tuple [],
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "spl_token_interface::state::mint::Mint",
                                                                              "set_freeze_authority",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.read (| mint |)
                                                                                |)
                                                                              |);
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    authority
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let~ _ : Ty.tuple [] :=
                                                                          M.call_closure (|
                                                                            Ty.tuple [],
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "spl_token_interface::state::mint::Mint",
                                                                              "clear_freeze_authority",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.read (| mint |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (|
                                                                      M.return_ (|
                                                                        Value.StructTuple
                                                                          "core::result::Result::Err"
                                                                          []
                                                                          [
                                                                            Ty.tuple [];
                                                                            Ty.path
                                                                              "pinocchio::program_error::ProgramError"
                                                                          ]
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.path
                                                                                "pinocchio::program_error::ProgramError",
                                                                              M.get_trait_method (|
                                                                                "core::convert::Into",
                                                                                Ty.path
                                                                                  "spl_token_interface::error::TokenError",
                                                                                [],
                                                                                [
                                                                                  Ty.path
                                                                                    "pinocchio::program_error::ProgramError"
                                                                                ],
                                                                                "into",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                Value.StructTuple
                                                                                  "spl_token_interface::error::TokenError::AuthorityTypeNotSupported"
                                                                                  []
                                                                                  []
                                                                                  []
                                                                              ]
                                                                            |)
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)))
                                                          ]
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                Value.StructTuple
                                                                  "core::result::Result::Err"
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ]
                                                                  [
                                                                    Value.StructTuple
                                                                      "pinocchio::program_error::ProgramError::InvalidArgument"
                                                                      []
                                                                      []
                                                                      []
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)))
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::result::Result::Ok"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                        [ Value.Tuple [] ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)
                  |)
                |)))
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_process_set_authority :
      M.IsFunction.C
        "pinocchio_token_program::processor::set_authority::process_set_authority"
        process_set_authority.
    Admitted.
    Global Typeclasses Opaque process_set_authority.
  End set_authority.
End processor.
