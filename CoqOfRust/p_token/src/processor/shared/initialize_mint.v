(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Module shared.
    Module initialize_mint.
      (*
      pub fn process_initialize_mint(
          accounts: &[AccountInfo],
          instruction_data: &[u8],
          rent_sysvar_account_provided: bool,
      ) -> ProgramResult {
          // Validates the instruction data.
      
          let (decimals, mint_authority, freeze_authority) = if instruction_data.len() >= 34 {
              // SAFETY: The minimum size of the instruction data is either 34 or 66 bytes:
              //   - decimals (1 byte)
              //   - mint_authority (32 bytes)
              //   - option + freeze_authority (1 byte + 32 bytes)
              unsafe {
                  let decimals = *instruction_data.get_unchecked(0);
                  let mint_authority = &*(instruction_data.as_ptr().add(1) as *const Pubkey);
                  let freeze_authority = if *instruction_data.get_unchecked(33) == 0 {
                      None
                  } else if *instruction_data.get_unchecked(33) == 1 && instruction_data.len() >= 66 {
                      Some(&*(instruction_data.as_ptr().add(34) as *const Pubkey))
                  } else {
                      return Err(TokenError::InvalidInstruction.into());
                  };
      
                  (decimals, mint_authority, freeze_authority)
              }
          } else {
              return Err(TokenError::InvalidInstruction.into());
          };
      
          // Validates the accounts.
      
          let (mint_info, rent_sysvar_info) = if rent_sysvar_account_provided {
              let [mint_info, rent_sysvar_info, _remaining @ ..] = accounts else {
                  return Err(ProgramError::NotEnoughAccountKeys);
              };
              (mint_info, Some(rent_sysvar_info))
          } else {
              let [mint_info, _remaining @ ..] = accounts else {
                  return Err(ProgramError::NotEnoughAccountKeys);
              };
              (mint_info, None)
          };
      
          let mint_data_len = mint_info.data_len();
      
          let is_exempt = if let Some(rent_sysvar_info) = rent_sysvar_info {
              // SAFETY: single immutable borrow to `rent_sysvar_info`; account ID and length
              // are checked by `from_account_info_unchecked`.
              let rent = unsafe { Rent::from_account_info_unchecked(rent_sysvar_info)? };
              rent.is_exempt(mint_info.lamports(), mint_data_len)
          } else {
              Rent::get()?.is_exempt(mint_info.lamports(), mint_data_len)
          };
      
          // SAFETY: single mutable borrow to `mint_info` account data.
          let mint = unsafe { load_mut_unchecked::<Mint>(mint_info.borrow_mut_data_unchecked())? };
      
          if mint.is_initialized()? {
              return Err(TokenError::AlreadyInUse.into());
          }
      
          if !is_exempt {
              return Err(TokenError::NotRentExempt.into());
          }
      
          // Initialize the mint.
      
          mint.set_initialized();
          mint.set_mint_authority(mint_authority);
          mint.decimals = decimals;
      
          if let Some(freeze_authority) = freeze_authority {
              mint.set_freeze_authority(freeze_authority);
          }
      
          Ok(())
      }
      *)
      Definition process_initialize_mint
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ accounts; instruction_data; rent_sysvar_account_provided ] =>
          ltac:(M.monadic
            (let accounts := M.alloc (| accounts |) in
            let instruction_data := M.alloc (| instruction_data |) in
            let rent_sysvar_account_provided := M.alloc (| rent_sysvar_account_provided |) in
            M.read (|
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
                ltac:(M.monadic
                  (M.alloc (|
                    M.read (|
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                        M.match_operator (|
                          Ty.tuple
                            [
                              Ty.path "u8";
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8" ]
                                ];
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [ Ty.path "u8" ]
                                    ]
                                ]
                            ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.ge,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                              "len",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| instruction_data |) |)
                                              |)
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 34
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ decimals : Ty.path "u8" :=
                                  M.read (|
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "u8" ],
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          "get_unchecked",
                                          [],
                                          [ Ty.path "usize" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| instruction_data |) |)
                                          |);
                                          Value.Integer IntegerKind.Usize 0
                                        ]
                                      |)
                                    |)
                                  |) in
                                let~ mint_authority :
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 32 ]
                                          [ Ty.path "u8" ]
                                      ] :=
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.cast
                                        (Ty.apply
                                          (Ty.path "*const")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 32 ]
                                              [ Ty.path "u8" ]
                                          ])
                                        (M.call_closure (|
                                          Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                                            "add",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                                "as_ptr",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| instruction_data |) |)
                                                |)
                                              ]
                                            |);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |))
                                    |)
                                  |) in
                                let~ freeze_authority :
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 32 ]
                                              [ Ty.path "u8" ]
                                          ]
                                      ] :=
                                  M.read (|
                                    M.match_operator (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 32 ]
                                                [ Ty.path "u8" ]
                                            ]
                                        ],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.eq,
                                                    [
                                                      M.read (|
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "u8" ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [ Ty.path "u8" ],
                                                              "get_unchecked",
                                                              [],
                                                              [ Ty.path "usize" ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (| instruction_data |)
                                                                |)
                                                              |);
                                                              Value.Integer IntegerKind.Usize 33
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      Value.Integer IntegerKind.U8 0
                                                    ]
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.alloc (|
                                              Value.StructTuple
                                                "core::option::Option::None"
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 32 ]
                                                        [ Ty.path "u8" ]
                                                    ]
                                                ]
                                                []
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 32 ]
                                                        [ Ty.path "u8" ]
                                                    ]
                                                ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          LogicalOp.and (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.eq,
                                                              [
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "u8" ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Ty.path "u8" ],
                                                                        "get_unchecked",
                                                                        [],
                                                                        [ Ty.path "usize" ]
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (|
                                                                              instruction_data
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          33
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.Integer IntegerKind.U8 1
                                                              ]
                                                            |),
                                                            ltac:(M.monadic
                                                              (M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.ge,
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ Ty.path "u8" ],
                                                                      "len",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            instruction_data
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  Value.Integer IntegerKind.Usize 66
                                                                ]
                                                              |)))
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      Value.StructTuple
                                                        "core::option::Option::Some"
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 32
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ]
                                                        ]
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.cast
                                                                (Ty.apply
                                                                  (Ty.path "*const")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          32
                                                                      ]
                                                                      [ Ty.path "u8" ]
                                                                  ])
                                                                (M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "*const")
                                                                    []
                                                                    [ Ty.path "u8" ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "*const")
                                                                      []
                                                                      [ Ty.path "u8" ],
                                                                    "add",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "*const")
                                                                        []
                                                                        [ Ty.path "u8" ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Ty.path "u8" ],
                                                                        "as_ptr",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (|
                                                                              instruction_data
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      34
                                                                  ]
                                                                |))
                                                            |)
                                                          |)
                                                        ]
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            Value.StructTuple
                                                              "core::result::Result::Err"
                                                              []
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError"
                                                              ]
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "pinocchio::program_error::ProgramError",
                                                                  M.get_trait_method (|
                                                                    "core::convert::Into",
                                                                    Ty.path
                                                                      "spl_token_interface::error::TokenError",
                                                                    [],
                                                                    [
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError"
                                                                    ],
                                                                    "into",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    Value.StructTuple
                                                                      "spl_token_interface::error::TokenError::InvalidInstruction"
                                                                      []
                                                                      []
                                                                      []
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)
                                  |) in
                                M.alloc (|
                                  Value.Tuple
                                    [
                                      M.read (| decimals |);
                                      M.read (| mint_authority |);
                                      M.read (| freeze_authority |)
                                    ]
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        Value.StructTuple
                                          "core::result::Result::Err"
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path "pinocchio::program_error::ProgramError"
                                          ]
                                          [
                                            M.call_closure (|
                                              Ty.path "pinocchio::program_error::ProgramError",
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                Ty.path "spl_token_interface::error::TokenError",
                                                [],
                                                [ Ty.path "pinocchio::program_error::ProgramError"
                                                ],
                                                "into",
                                                [],
                                                []
                                              |),
                                              [
                                                Value.StructTuple
                                                  "spl_token_interface::error::TokenError::InvalidInstruction"
                                                  []
                                                  []
                                                  []
                                              ]
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)))
                          ]
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                              let decimals := M.copy (| γ0_0 |) in
                              let mint_authority := M.copy (| γ0_1 |) in
                              let freeze_authority := M.copy (| γ0_2 |) in
                              M.match_operator (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                                M.match_operator (|
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "pinocchio::account_info::AccountInfo" ];
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                        ]
                                    ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.use rent_sysvar_account_provided in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "pinocchio::account_info::AccountInfo" ];
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "pinocchio::account_info::AccountInfo"
                                                    ]
                                                ]
                                            ],
                                          accounts,
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_slice_index (| γ, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_slice_index (| γ, 1 |) in
                                                let γ1_rest :=
                                                  M.SubPointer.get_slice_rest (| γ, 2, 0 |) in
                                                let mint_info := M.alloc (| γ1_0 |) in
                                                let rent_sysvar_info := M.alloc (| γ1_1 |) in
                                                let _remaining := M.alloc (| γ1_rest |) in
                                                M.alloc (|
                                                  Value.Tuple
                                                    [
                                                      M.read (| mint_info |);
                                                      Value.StructTuple
                                                        "core::option::Option::Some"
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "pinocchio::account_info::AccountInfo"
                                                            ]
                                                        ]
                                                        [ M.read (| rent_sysvar_info |) ]
                                                    ]
                                                |)))
                                          ]
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "pinocchio::account_info::AccountInfo" ];
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "pinocchio::account_info::AccountInfo"
                                                    ]
                                                ]
                                            ],
                                          accounts,
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_slice_index (| γ, 0 |) in
                                                let γ1_rest :=
                                                  M.SubPointer.get_slice_rest (| γ, 1, 0 |) in
                                                let mint_info := M.alloc (| γ1_0 |) in
                                                let _remaining := M.alloc (| γ1_rest |) in
                                                M.alloc (|
                                                  Value.Tuple
                                                    [
                                                      M.read (| mint_info |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "pinocchio::account_info::AccountInfo"
                                                            ]
                                                        ]
                                                        []
                                                    ]
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let mint_info := M.copy (| γ0_0 |) in
                                      let rent_sysvar_info := M.copy (| γ0_1 |) in
                                      let~ mint_data_len : Ty.path "usize" :=
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.path "pinocchio::account_info::AccountInfo",
                                            "data_len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| mint_info |) |)
                                            |)
                                          ]
                                        |) in
                                      let~ is_exempt : Ty.path "bool" :=
                                        M.read (|
                                          M.match_operator (|
                                            Ty.path "bool",
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ := rent_sysvar_info in
                                                  let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let rent_sysvar_info := M.copy (| γ0_0 |) in
                                                  let~ rent :
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "pinocchio::sysvars::rent::Rent"
                                                        ] :=
                                                    M.read (|
                                                      M.match_operator (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "pinocchio::sysvars::rent::Rent"
                                                          ],
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::control_flow::ControlFlow")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "pinocchio::sysvars::rent::Rent"
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::Try",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "pinocchio::sysvars::rent::Rent"
                                                                    ];
                                                                  Ty.path
                                                                    "pinocchio::program_error::ProgramError"
                                                                ],
                                                              [],
                                                              [],
                                                              "branch",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "pinocchio::sysvars::rent::Rent"
                                                                      ];
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "pinocchio::sysvars::rent::Rent",
                                                                  "from_account_info_unchecked",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| rent_sysvar_info |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                  0
                                                                |) in
                                                              let residual := M.copy (| γ0_0 |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    M.return_ (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.tuple [];
                                                                            Ty.path
                                                                              "pinocchio::program_error::ProgramError"
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::try_trait::FromResidual",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.tuple [];
                                                                              Ty.path
                                                                                "pinocchio::program_error::ProgramError"
                                                                            ],
                                                                          [],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "core::convert::Infallible";
                                                                                Ty.path
                                                                                  "pinocchio::program_error::ProgramError"
                                                                              ]
                                                                          ],
                                                                          "from_residual",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [ M.read (| residual |) ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                  0
                                                                |) in
                                                              let val := M.copy (| γ0_0 |) in
                                                              val))
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_associated_function (|
                                                        Ty.path "pinocchio::sysvars::rent::Rent",
                                                        "is_exempt",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| rent |) |)
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "u64",
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "pinocchio::account_info::AccountInfo",
                                                            "lamports",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| mint_info |) |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (| mint_data_len |)
                                                      ]
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.alloc (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_associated_function (|
                                                        Ty.path "pinocchio::sysvars::rent::Rent",
                                                        "is_exempt",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.match_operator (|
                                                            Ty.path
                                                              "pinocchio::sysvars::rent::Rent",
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::control_flow::ControlFlow")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ];
                                                                    Ty.path
                                                                      "pinocchio::sysvars::rent::Rent"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::Try",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "pinocchio::sysvars::rent::Rent";
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError"
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "branch",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "pinocchio::sysvars::rent::Rent";
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "pinocchio::sysvars::Sysvar",
                                                                      Ty.path
                                                                        "pinocchio::sysvars::rent::Rent",
                                                                      [],
                                                                      [],
                                                                      "get",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                      0
                                                                    |) in
                                                                  let residual :=
                                                                    M.copy (| γ0_0 |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        M.return_ (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              []
                                                                              [
                                                                                Ty.tuple [];
                                                                                Ty.path
                                                                                  "pinocchio::program_error::ProgramError"
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::try_trait::FromResidual",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "pinocchio::program_error::ProgramError"
                                                                                ],
                                                                              [],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::convert::Infallible";
                                                                                    Ty.path
                                                                                      "pinocchio::program_error::ProgramError"
                                                                                  ]
                                                                              ],
                                                                              "from_residual",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [ M.read (| residual |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                      0
                                                                    |) in
                                                                  let val := M.copy (| γ0_0 |) in
                                                                  val))
                                                            ]
                                                          |)
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "u64",
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "pinocchio::account_info::AccountInfo",
                                                            "lamports",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| mint_info |) |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (| mint_data_len |)
                                                      ]
                                                    |)
                                                  |)))
                                            ]
                                          |)
                                        |) in
                                      let~ mint :
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [ Ty.path "spl_token_interface::state::mint::Mint" ] :=
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (|
                                            M.read (|
                                              M.match_operator (|
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [ Ty.path "spl_token_interface::state::mint::Mint"
                                                  ],
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::ops::control_flow::ControlFlow")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.path
                                                              "spl_token_interface::state::mint::Mint"
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [
                                                              Ty.path
                                                                "spl_token_interface::state::mint::Mint"
                                                            ];
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ],
                                                      [],
                                                      [],
                                                      "branch",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "spl_token_interface::state::mint::Mint"
                                                              ];
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                        M.get_function (|
                                                          "spl_token_interface::state::load_mut_unchecked",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "spl_token_interface::state::mint::Mint"
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&mut")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ Ty.path "u8" ]
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "pinocchio::account_info::AccountInfo",
                                                                  "borrow_mut_data_unchecked",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| mint_info |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "pinocchio::program_error::ProgramError"
                                                                    ],
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  [],
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |)
                                            |)
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.read (|
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.match_operator (|
                                                        Ty.path "bool",
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::control_flow::ControlFlow")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ];
                                                                Ty.path "bool"
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::Try",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.path "bool";
                                                                  Ty.path
                                                                    "pinocchio::program_error::ProgramError"
                                                                ],
                                                              [],
                                                              [],
                                                              "branch",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path "bool";
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "spl_token_interface::state::Initializable",
                                                                  Ty.path
                                                                    "spl_token_interface::state::mint::Mint",
                                                                  [],
                                                                  [],
                                                                  "is_initialized",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| mint |) |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                  0
                                                                |) in
                                                              let residual := M.copy (| γ0_0 |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    M.return_ (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.tuple [];
                                                                            Ty.path
                                                                              "pinocchio::program_error::ProgramError"
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::try_trait::FromResidual",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.tuple [];
                                                                              Ty.path
                                                                                "pinocchio::program_error::ProgramError"
                                                                            ],
                                                                          [],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "core::convert::Infallible";
                                                                                Ty.path
                                                                                  "pinocchio::program_error::ProgramError"
                                                                              ]
                                                                          ],
                                                                          "from_residual",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [ M.read (| residual |) ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                  0
                                                                |) in
                                                              let val := M.copy (| γ0_0 |) in
                                                              val))
                                                        ]
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          Value.StructTuple
                                                            "core::result::Result::Err"
                                                            []
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "pinocchio::program_error::ProgramError"
                                                            ]
                                                            [
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError",
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path
                                                                    "spl_token_interface::error::TokenError",
                                                                  [],
                                                                  [
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                  "into",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  Value.StructTuple
                                                                    "spl_token_interface::error::TokenError::AlreadyInUse"
                                                                    []
                                                                    []
                                                                    []
                                                                ]
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.read (|
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        UnOp.not (| M.read (| is_exempt |) |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          Value.StructTuple
                                                            "core::result::Result::Err"
                                                            []
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "pinocchio::program_error::ProgramError"
                                                            ]
                                                            [
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "pinocchio::program_error::ProgramError",
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path
                                                                    "spl_token_interface::error::TokenError",
                                                                  [],
                                                                  [
                                                                    Ty.path
                                                                      "pinocchio::program_error::ProgramError"
                                                                  ],
                                                                  "into",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  Value.StructTuple
                                                                    "spl_token_interface::error::TokenError::NotRentExempt"
                                                                    []
                                                                    []
                                                                    []
                                                                ]
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_associated_function (|
                                            Ty.path "spl_token_interface::state::mint::Mint",
                                            "set_initialized",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| mint |) |)
                                            |)
                                          ]
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_associated_function (|
                                            Ty.path "spl_token_interface::state::mint::Mint",
                                            "set_mint_authority",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| mint |) |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| mint_authority |) |)
                                            |)
                                          ]
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.write (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| mint |) |),
                                            "spl_token_interface::state::mint::Mint",
                                            "decimals"
                                          |),
                                          M.read (| decimals |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.read (|
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ := freeze_authority in
                                                  let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let freeze_authority := M.copy (| γ0_0 |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "spl_token_interface::state::mint::Mint",
                                                        "set_freeze_authority",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.deref (| M.read (| mint |) |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (| freeze_authority |)
                                                          |)
                                                        |)
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)
                                        |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "core::result::Result::Ok"
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path "pinocchio::program_error::ProgramError"
                                          ]
                                          [ Value.Tuple [] ]
                                      |)))
                                ]
                              |)))
                        ]
                      |)
                    |)
                  |)))
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_process_initialize_mint :
        M.IsFunction.C
          "pinocchio_token_program::processor::shared::initialize_mint::process_initialize_mint"
          process_initialize_mint.
      Admitted.
      Global Typeclasses Opaque process_initialize_mint.
    End initialize_mint.
  End shared.
End processor.
