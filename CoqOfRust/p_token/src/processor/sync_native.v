(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module processor.
  Module sync_native.
    (*
    pub fn process_sync_native(accounts: &[AccountInfo]) -> ProgramResult {
        let native_account_info = accounts.first().ok_or(ProgramError::NotEnoughAccountKeys)?;
    
        check_account_owner(native_account_info)?;
    
        // SAFETY: single mutable borrow to `native_account_info` account data and
        // `load_mut` validates that the account is initialized.
        let native_account =
            unsafe { load_mut::<Account>(native_account_info.borrow_mut_data_unchecked())? };
    
        if let Option::Some(rent_exempt_reserve) = native_account.native_amount() {
            let new_amount = native_account_info
                .lamports()
                .checked_sub(rent_exempt_reserve)
                .ok_or(TokenError::Overflow)?;
    
            if new_amount < native_account.amount() {
                return Err(TokenError::InvalidState.into());
            }
            native_account.set_amount(new_amount);
        } else {
            return Err(TokenError::NonNativeNotSupported.into());
        }
    
        Ok(())
    }
    *)
    Definition process_sync_native (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ accounts ] =>
        ltac:(M.monadic
          (let accounts := M.alloc (| accounts |) in
          M.read (|
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
              ltac:(M.monadic
                (M.alloc (|
                  M.read (|
                    let~ native_account_info :
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "pinocchio::account_info::AccountInfo" ] :=
                      M.read (|
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "pinocchio::account_info::AccountInfo" ],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ];
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "pinocchio::account_info::AccountInfo" ];
                                    Ty.path "pinocchio::program_error::ProgramError"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "pinocchio::account_info::AccountInfo" ];
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                      ],
                                    "ok_or",
                                    [],
                                    [ Ty.path "pinocchio::program_error::ProgramError" ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [ Ty.path "pinocchio::account_info::AccountInfo" ],
                                        "first",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| accounts |) |)
                                        |)
                                      ]
                                    |);
                                    Value.StructTuple
                                      "pinocchio::program_error::ProgramError::NotEnoughAccountKeys"
                                      []
                                      []
                                      []
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.tuple [];
                                                Ty.path "pinocchio::program_error::ProgramError"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "pinocchio::program_error::ProgramError"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.read (|
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError"
                                    ],
                                  M.get_function (|
                                    "pinocchio_token_program::processor::check_account_owner",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| native_account_info |) |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.tuple [];
                                                Ty.path "pinocchio::program_error::ProgramError"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "pinocchio::program_error::ProgramError"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let~ native_account :
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [ Ty.path "spl_token_interface::state::account::Account" ] :=
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.read (|
                            M.match_operator (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.path "spl_token_interface::state::account::Account" ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ];
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.path "spl_token_interface::state::account::Account" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.path "spl_token_interface::state::account::Account"
                                          ];
                                        Ty.path "pinocchio::program_error::ProgramError"
                                      ],
                                    [],
                                    [],
                                    "branch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [ Ty.path "spl_token_interface::state::account::Account"
                                            ];
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ],
                                      M.get_function (|
                                        "spl_token_interface::state::load_mut",
                                        [],
                                        [ Ty.path "spl_token_interface::state::account::Account" ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                              M.get_associated_function (|
                                                Ty.path "pinocchio::account_info::AccountInfo",
                                                "borrow_mut_data_unchecked",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| native_account_info |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.tuple [];
                                                  Ty.path "pinocchio::program_error::ProgramError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |)
                        |)
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.read (|
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "u64" ],
                                      M.get_associated_function (|
                                        Ty.path "spl_token_interface::state::account::Account",
                                        "native_amount",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| native_account |) |)
                                        |)
                                      ]
                                    |)
                                  |) in
                                let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let rent_exempt_reserve := M.copy (| γ0_0 |) in
                                let~ new_amount : Ty.path "u64" :=
                                  M.read (|
                                    M.match_operator (|
                                      Ty.path "u64",
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::ops::control_flow::ControlFlow")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "spl_token_interface::error::TokenError"
                                                ];
                                              Ty.path "u64"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::Try",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "u64";
                                                Ty.path "spl_token_interface::error::TokenError"
                                              ],
                                            [],
                                            [],
                                            "branch",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "u64";
                                                  Ty.path "spl_token_interface::error::TokenError"
                                                ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "u64" ],
                                                "ok_or",
                                                [],
                                                [ Ty.path "spl_token_interface::error::TokenError" ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Ty.path "u64" ],
                                                  M.get_associated_function (|
                                                    Ty.path "u64",
                                                    "checked_sub",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u64",
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "pinocchio::account_info::AccountInfo",
                                                        "lamports",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (| native_account_info |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.read (| rent_exempt_reserve |)
                                                  ]
                                                |);
                                                Value.StructTuple
                                                  "spl_token_interface::error::TokenError::Overflow"
                                                  []
                                                  []
                                                  []
                                              ]
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Break",
                                                0
                                              |) in
                                            let residual := M.copy (| γ0_0 |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.read (|
                                                  M.return_ (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError"
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::FromResidual",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path
                                                              "pinocchio::program_error::ProgramError"
                                                          ],
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.path "core::convert::Infallible";
                                                              Ty.path
                                                                "spl_token_interface::error::TokenError"
                                                            ]
                                                        ],
                                                        "from_residual",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.read (| residual |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Continue",
                                                0
                                              |) in
                                            let val := M.copy (| γ0_0 |) in
                                            val))
                                      ]
                                    |)
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.read (|
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.lt,
                                                    [
                                                      M.read (| new_amount |);
                                                      M.call_closure (|
                                                        Ty.path "u64",
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "spl_token_interface::state::account::Account",
                                                          "amount",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.read (| native_account |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.read (|
                                                  M.return_ (|
                                                    Value.StructTuple
                                                      "core::result::Result::Err"
                                                      []
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path
                                                          "pinocchio::program_error::ProgramError"
                                                      ]
                                                      [
                                                        M.call_closure (|
                                                          Ty.path
                                                            "pinocchio::program_error::ProgramError",
                                                          M.get_trait_method (|
                                                            "core::convert::Into",
                                                            Ty.path
                                                              "spl_token_interface::error::TokenError",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "pinocchio::program_error::ProgramError"
                                                            ],
                                                            "into",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            Value.StructTuple
                                                              "spl_token_interface::error::TokenError::InvalidState"
                                                              []
                                                              []
                                                              []
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |)
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.path "spl_token_interface::state::account::Account",
                                      "set_amount",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| native_account |) |)
                                      |);
                                      M.read (| new_amount |)
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        Value.StructTuple
                                          "core::result::Result::Err"
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.path "pinocchio::program_error::ProgramError"
                                          ]
                                          [
                                            M.call_closure (|
                                              Ty.path "pinocchio::program_error::ProgramError",
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                Ty.path "spl_token_interface::error::TokenError",
                                                [],
                                                [ Ty.path "pinocchio::program_error::ProgramError"
                                                ],
                                                "into",
                                                [],
                                                []
                                              |),
                                              [
                                                Value.StructTuple
                                                  "spl_token_interface::error::TokenError::NonNativeNotSupported"
                                                  []
                                                  []
                                                  []
                                              ]
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        []
                        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                        [ Value.Tuple [] ]
                    |)
                  |)
                |)))
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_process_sync_native :
      M.IsFunction.C
        "pinocchio_token_program::processor::sync_native::process_sync_native"
        process_sync_native.
    Admitted.
    Global Typeclasses Opaque process_sync_native.
  End sync_native.
End processor.
