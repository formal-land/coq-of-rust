(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module account_info.
  Definition value_MAX_PERMITTED_DATA_INCREASE
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "usize",
        M.call_closure (|
          Ty.path "usize",
          BinOp.Wrap.mul,
          [ Value.Integer IntegerKind.Usize 1024; Value.Integer IntegerKind.Usize 10 ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_MAX_PERMITTED_DATA_INCREASE :
    M.IsFunction.C
      "pinocchio::account_info::MAX_PERMITTED_DATA_INCREASE"
      value_MAX_PERMITTED_DATA_INCREASE.
  Admitted.
  Global Typeclasses Opaque value_MAX_PERMITTED_DATA_INCREASE.
  
  (*
  Enum BorrowState
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "Borrowed";
          item := StructTuple [];
        };
        {
          name := "MutablyBorrowed";
          item := StructTuple [];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_BorrowState_Borrowed :
    M.IsDiscriminant "pinocchio::account_info::BorrowState::Borrowed" 255.
  Axiom IsDiscriminant_BorrowState_MutablyBorrowed :
    M.IsDiscriminant "pinocchio::account_info::BorrowState::MutablyBorrowed" 136.
  
  Module Impl_core_clone_Clone_for_pinocchio_account_info_BorrowState.
    Definition Self : Ty.t := Ty.path "pinocchio::account_info::BorrowState".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::BorrowState" ],
              self
            |) in
          M.read (| M.deref (| M.read (| self |) |) |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_pinocchio_account_info_BorrowState.
  
  Module Impl_core_marker_Copy_for_pinocchio_account_info_BorrowState.
    Definition Self : Ty.t := Ty.path "pinocchio::account_info::BorrowState".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_pinocchio_account_info_BorrowState.
  
  (* StructRecord
    {
      name := "Account";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("borrow_state", Ty.path "u8");
          ("is_signer", Ty.path "u8");
          ("is_writable", Ty.path "u8");
          ("executable", Ty.path "u8");
          ("resize_delta", Ty.path "i32");
          ("key",
            Ty.apply
              (Ty.path "array")
              [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
              [ Ty.path "u8" ]);
          ("owner",
            Ty.apply
              (Ty.path "array")
              [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
              [ Ty.path "u8" ]);
          ("lamports", Ty.path "u64");
          ("data_len", Ty.path "u64")
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_pinocchio_account_info_Account.
    Definition Self : Ty.t := Ty.path "pinocchio::account_info::Account".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::Account" ],
              self
            |) in
          M.match_operator (|
            Ty.path "pinocchio::account_info::Account",
            Value.DeclaredButUndefined,
            [
              fun γ =>
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.path "pinocchio::account_info::Account",
                    Value.DeclaredButUndefined,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.path "pinocchio::account_info::Account",
                            Value.DeclaredButUndefined,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.path "pinocchio::account_info::Account",
                                    Value.DeclaredButUndefined,
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.read (| M.deref (| M.read (| self |) |) |)))
                                    ]
                                  |)))
                            ]
                          |)))
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_pinocchio_account_info_Account.
  
  Module Impl_core_marker_Copy_for_pinocchio_account_info_Account.
    Definition Self : Ty.t := Ty.path "pinocchio::account_info::Account".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_pinocchio_account_info_Account.
  
  Module Impl_core_default_Default_for_pinocchio_account_info_Account.
    Definition Self : Ty.t := Ty.path "pinocchio::account_info::Account".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.mkStructRecord
            "pinocchio::account_info::Account"
            []
            []
            [
              ("borrow_state",
                M.call_closure (|
                  Ty.path "u8",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "u8",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("is_signer",
                M.call_closure (|
                  Ty.path "u8",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "u8",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("is_writable",
                M.call_closure (|
                  Ty.path "u8",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "u8",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("executable",
                M.call_closure (|
                  Ty.path "u8",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "u8",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("resize_delta",
                M.call_closure (|
                  Ty.path "i32",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "i32",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("key",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 32 ]
                    [ Ty.path "u8" ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("owner",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 32 ]
                    [ Ty.path "u8" ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("lamports",
                M.call_closure (|
                  Ty.path "u64",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "u64",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("data_len",
                M.call_closure (|
                  Ty.path "u64",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "u64",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_pinocchio_account_info_Account.
  
  (* StructRecord
    {
      name := "AccountInfo";
      const_params := [];
      ty_params := [];
      fields :=
        [ ("raw", Ty.apply (Ty.path "*mut") [] [ Ty.path "pinocchio::account_info::Account" ]) ];
    } *)
  
  Module Impl_core_clone_Clone_for_pinocchio_account_info_AccountInfo.
    Definition Self : Ty.t := Ty.path "pinocchio::account_info::AccountInfo".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          Value.mkStructRecord
            "pinocchio::account_info::AccountInfo"
            []
            []
            [
              ("raw",
                M.call_closure (|
                  Ty.apply (Ty.path "*mut") [] [ Ty.path "pinocchio::account_info::Account" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "*mut") [] [ Ty.path "pinocchio::account_info::Account" ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::account_info::AccountInfo",
                            "raw"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_pinocchio_account_info_AccountInfo.
  
  Module Impl_core_marker_StructuralPartialEq_for_pinocchio_account_info_AccountInfo.
    Definition Self : Ty.t := Ty.path "pinocchio::account_info::AccountInfo".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_pinocchio_account_info_AccountInfo.
  
  Module Impl_core_cmp_PartialEq_pinocchio_account_info_AccountInfo_for_pinocchio_account_info_AccountInfo.
    Definition Self : Ty.t := Ty.path "pinocchio::account_info::AccountInfo".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          let other :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              other
            |) in
          M.call_closure (|
            Ty.path "bool",
            BinOp.eq,
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "pinocchio::account_info::AccountInfo",
                  "raw"
                |)
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| other |) |),
                  "pinocchio::account_info::AccountInfo",
                  "raw"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "pinocchio::account_info::AccountInfo" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_pinocchio_account_info_AccountInfo_for_pinocchio_account_info_AccountInfo.
  
  Module Impl_core_cmp_Eq_for_pinocchio_account_info_AccountInfo.
    Definition Self : Ty.t := Ty.path "pinocchio::account_info::AccountInfo".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.match_operator (|
            Ty.tuple [],
            Value.DeclaredButUndefined,
            [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_pinocchio_account_info_AccountInfo.
  
  Module Impl_pinocchio_account_info_AccountInfo.
    Definition Self : Ty.t := Ty.path "pinocchio::account_info::AccountInfo".
    
    (*
        pub fn key(&self) -> &Pubkey {
            unsafe { &( *self.raw).key }
        }
    *)
    Definition key (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (|
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::account_info::AccountInfo",
                        "raw"
                      |)
                    |)
                  |),
                  "pinocchio::account_info::Account",
                  "key"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_key : M.IsAssociatedFunction.C Self "key" key.
    Admitted.
    Global Typeclasses Opaque key.
    
    (*
        pub unsafe fn owner(&self) -> &Pubkey {
            &( *self.raw).owner
        }
    *)
    Definition owner (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (|
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::account_info::AccountInfo",
                        "raw"
                      |)
                    |)
                  |),
                  "pinocchio::account_info::Account",
                  "owner"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_owner : M.IsAssociatedFunction.C Self "owner" owner.
    Admitted.
    Global Typeclasses Opaque owner.
    
    (*
        pub fn is_signer(&self) -> bool {
            unsafe { ( *self.raw).is_signer != 0 }
        }
    *)
    Definition is_signer (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.call_closure (|
            Ty.path "bool",
            BinOp.ne,
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (|
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::account_info::AccountInfo",
                        "raw"
                      |)
                    |)
                  |),
                  "pinocchio::account_info::Account",
                  "is_signer"
                |)
              |);
              Value.Integer IntegerKind.U8 0
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_is_signer :
      M.IsAssociatedFunction.C Self "is_signer" is_signer.
    Admitted.
    Global Typeclasses Opaque is_signer.
    
    (*
        pub fn is_writable(&self) -> bool {
            unsafe { ( *self.raw).is_writable != 0 }
        }
    *)
    Definition is_writable (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.call_closure (|
            Ty.path "bool",
            BinOp.ne,
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (|
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::account_info::AccountInfo",
                        "raw"
                      |)
                    |)
                  |),
                  "pinocchio::account_info::Account",
                  "is_writable"
                |)
              |);
              Value.Integer IntegerKind.U8 0
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_is_writable :
      M.IsAssociatedFunction.C Self "is_writable" is_writable.
    Admitted.
    Global Typeclasses Opaque is_writable.
    
    (*
        pub fn executable(&self) -> bool {
            unsafe { ( *self.raw).executable != 0 }
        }
    *)
    Definition executable (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.call_closure (|
            Ty.path "bool",
            BinOp.ne,
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (|
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::account_info::AccountInfo",
                        "raw"
                      |)
                    |)
                  |),
                  "pinocchio::account_info::Account",
                  "executable"
                |)
              |);
              Value.Integer IntegerKind.U8 0
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_executable :
      M.IsAssociatedFunction.C Self "executable" executable.
    Admitted.
    Global Typeclasses Opaque executable.
    
    (*
        pub fn data_len(&self) -> usize {
            unsafe { ( *self.raw).data_len as usize }
        }
    *)
    Definition data_len (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.cast
            (Ty.path "usize")
            (M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (|
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "pinocchio::account_info::AccountInfo",
                      "raw"
                    |)
                  |)
                |),
                "pinocchio::account_info::Account",
                "data_len"
              |)
            |))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_data_len : M.IsAssociatedFunction.C Self "data_len" data_len.
    Admitted.
    Global Typeclasses Opaque data_len.
    
    (*
        pub fn resize_delta(&self) -> i32 {
            unsafe { ( *self.raw).resize_delta }
        }
    *)
    Definition resize_delta (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (|
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "pinocchio::account_info::AccountInfo",
                    "raw"
                  |)
                |)
              |),
              "pinocchio::account_info::Account",
              "resize_delta"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_resize_delta :
      M.IsAssociatedFunction.C Self "resize_delta" resize_delta.
    Admitted.
    Global Typeclasses Opaque resize_delta.
    
    (*
        pub fn lamports(&self) -> u64 {
            unsafe { ( *self.raw).lamports }
        }
    *)
    Definition lamports (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (|
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "pinocchio::account_info::AccountInfo",
                    "raw"
                  |)
                |)
              |),
              "pinocchio::account_info::Account",
              "lamports"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_lamports : M.IsAssociatedFunction.C Self "lamports" lamports.
    Admitted.
    Global Typeclasses Opaque lamports.
    
    (*
        pub fn data_is_empty(&self) -> bool {
            self.data_len() == 0
        }
    *)
    Definition data_is_empty (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.call_closure (|
            Ty.path "bool",
            BinOp.eq,
            [
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.path "pinocchio::account_info::AccountInfo",
                  "data_len",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |);
              Value.Integer IntegerKind.Usize 0
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_data_is_empty :
      M.IsAssociatedFunction.C Self "data_is_empty" data_is_empty.
    Admitted.
    Global Typeclasses Opaque data_is_empty.
    
    (*
        pub fn is_owned_by(&self, program: &Pubkey) -> bool {
            unsafe { &( *self.raw).owner == program }
        }
    *)
    Definition is_owned_by (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; program ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          let program :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "array")
                    [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                    [ Ty.path "u8" ]
                ],
              program
            |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_trait_method (|
              "core::cmp::PartialEq",
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
                ],
              [],
              [
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ]
                  ]
              ],
              "eq",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ],
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (|
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::account_info::AccountInfo",
                            "raw"
                          |)
                        |)
                      |),
                      "pinocchio::account_info::Account",
                      "owner"
                    |)
                  |)
                |)
              |);
              M.borrow (| Pointer.Kind.Ref, program |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_is_owned_by :
      M.IsAssociatedFunction.C Self "is_owned_by" is_owned_by.
    Admitted.
    Global Typeclasses Opaque is_owned_by.
    
    (*
        pub unsafe fn assign(&self, new_owner: &Pubkey) {
            #[allow(invalid_reference_casting)]
            core::ptr::write_volatile(&( *self.raw).owner as *const _ as *mut Pubkey, *new_owner);
        }
    *)
    Definition assign (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; new_owner ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          let new_owner :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "array")
                    [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                    [ Ty.path "u8" ]
                ],
              new_owner
            |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "core::ptr::write_volatile",
                  [],
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ]
                  ]
                |),
                [
                  M.cast
                    (Ty.apply
                      (Ty.path "*mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.path "u8" ]
                      ])
                    (M.read (|
                      M.use
                        (M.alloc (|
                          Ty.apply
                            (Ty.path "*const")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ Ty.path "u8" ]
                            ],
                          M.borrow (|
                            Pointer.Kind.ConstPointer,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (|
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "pinocchio::account_info::AccountInfo",
                                        "raw"
                                      |)
                                    |)
                                  |),
                                  "pinocchio::account_info::Account",
                                  "owner"
                                |)
                              |)
                            |)
                          |)
                        |))
                    |));
                  M.read (| M.deref (| M.read (| new_owner |) |) |)
                ]
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_assign : M.IsAssociatedFunction.C Self "assign" assign.
    Admitted.
    Global Typeclasses Opaque assign.
    
    (*
        pub fn is_borrowed(&self, state: BorrowState) -> bool {
            let borrow_state = unsafe { ( *self.raw).borrow_state };
            let mask = state as u8;
            // If borrow state has any of the state bits of the mask not set,
            // then the account is borrowed for that state.
            (borrow_state & mask) != mask
        }
    *)
    Definition is_borrowed (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; state ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          let state := M.alloc (| Ty.path "pinocchio::account_info::BorrowState", state |) in
          M.read (|
            let~ borrow_state : Ty.path "u8" :=
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (|
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::account_info::AccountInfo",
                        "raw"
                      |)
                    |)
                  |),
                  "pinocchio::account_info::Account",
                  "borrow_state"
                |)
              |) in
            let~ mask : Ty.path "u8" := M.cast (Ty.path "u8") (M.read (| state |)) in
            M.alloc (|
              Ty.path "bool",
              M.call_closure (|
                Ty.path "bool",
                BinOp.ne,
                [
                  M.call_closure (|
                    Ty.path "u8",
                    BinOp.Wrap.bit_and,
                    [ M.read (| borrow_state |); M.read (| mask |) ]
                  |);
                  M.read (| mask |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_is_borrowed :
      M.IsAssociatedFunction.C Self "is_borrowed" is_borrowed.
    Admitted.
    Global Typeclasses Opaque is_borrowed.
    
    (*
        pub unsafe fn borrow_lamports_unchecked(&self) -> &u64 {
            &( *self.raw).lamports
        }
    *)
    Definition borrow_lamports_unchecked
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (|
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::account_info::AccountInfo",
                        "raw"
                      |)
                    |)
                  |),
                  "pinocchio::account_info::Account",
                  "lamports"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_borrow_lamports_unchecked :
      M.IsAssociatedFunction.C Self "borrow_lamports_unchecked" borrow_lamports_unchecked.
    Admitted.
    Global Typeclasses Opaque borrow_lamports_unchecked.
    
    (*
        pub unsafe fn borrow_mut_lamports_unchecked(&self) -> &mut u64 {
            &mut ( *self.raw).lamports
        }
    *)
    Definition borrow_mut_lamports_unchecked
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (|
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::account_info::AccountInfo",
                            "raw"
                          |)
                        |)
                      |),
                      "pinocchio::account_info::Account",
                      "lamports"
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_borrow_mut_lamports_unchecked :
      M.IsAssociatedFunction.C Self "borrow_mut_lamports_unchecked" borrow_mut_lamports_unchecked.
    Admitted.
    Global Typeclasses Opaque borrow_mut_lamports_unchecked.
    
    (*
        pub unsafe fn borrow_data_unchecked(&self) -> &[u8] {
            core::slice::from_raw_parts(self.data_ptr(), self.data_len())
        }
    *)
    Definition borrow_data_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.get_function (| "core::slice::raw::from_raw_parts", [], [ Ty.path "u8" ] |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                    M.pointer_coercion
                      M.PointerCoercion.MutToConstPointer
                      (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                      (Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ]),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                        M.get_associated_function (|
                          Ty.path "pinocchio::account_info::AccountInfo",
                          "data_ptr",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.path "pinocchio::account_info::AccountInfo",
                      "data_len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_borrow_data_unchecked :
      M.IsAssociatedFunction.C Self "borrow_data_unchecked" borrow_data_unchecked.
    Admitted.
    Global Typeclasses Opaque borrow_data_unchecked.
    
    (*
        pub unsafe fn borrow_mut_data_unchecked(&self) -> &mut [u8] {
            core::slice::from_raw_parts_mut(self.data_ptr(), self.data_len())
        }
    *)
    Definition borrow_mut_data_unchecked
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                    M.get_function (|
                      "core::slice::raw::from_raw_parts_mut",
                      [],
                      [ Ty.path "u8" ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                        M.get_associated_function (|
                          Ty.path "pinocchio::account_info::AccountInfo",
                          "data_ptr",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.path "pinocchio::account_info::AccountInfo",
                          "data_len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    ]
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_borrow_mut_data_unchecked :
      M.IsAssociatedFunction.C Self "borrow_mut_data_unchecked" borrow_mut_data_unchecked.
    Admitted.
    Global Typeclasses Opaque borrow_mut_data_unchecked.
    
    (*
        pub fn try_borrow_lamports(&self) -> Result<Ref<u64>, ProgramError> {
            // check if the account lamports are already borrowed
            self.can_borrow_lamports()?;
    
            let borrow_state = self.raw as *mut u8;
            // SAFETY: The `borrow_state` is a mutable pointer to the borrow state
            // of the account, which is guaranteed to be valid.
            //
            // "consumes" one immutable borrow for lamports; we are guaranteed
            // that there is at least one immutable borrow available.
            unsafe { *borrow_state -= 1 << LAMPORTS_SHIFT };
    
            // return the reference to lamports
            Ok(Ref {
                value: unsafe { NonNull::from(&( *self.raw).lamports) },
                state: unsafe { NonNull::new_unchecked(borrow_state) },
                borrow_shift: LAMPORTS_SHIFT,
                marker: PhantomData,
            })
        }
    *)
    Definition try_borrow_lamports (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ Ty.path "u64" ];
                Ty.path "pinocchio::program_error::ProgramError"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::ops::control_flow::ControlFlow")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "pinocchio::program_error::ProgramError"
                            ];
                          Ty.tuple []
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "pinocchio::program_error::ProgramError"
                              ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                            M.get_associated_function (|
                              Ty.path "pinocchio::account_info::AccountInfo",
                              "can_borrow_lamports",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "pinocchio::program_error::ProgramError"
                                ],
                              γ0_0
                            |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "pinocchio::account_info::Ref")
                                        []
                                        [ Ty.path "u64" ];
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "pinocchio::account_info::Ref")
                                          []
                                          [ Ty.path "u64" ];
                                        Ty.path "pinocchio::program_error::ProgramError"
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                    ],
                                    "from_residual",
                                    [],
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| Ty.tuple [], γ0_0 |) in
                          M.read (| val |)))
                    ]
                  |) in
                let~ borrow_state : Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ] :=
                  M.cast
                    (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                    (M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::account_info::AccountInfo",
                        "raw"
                      |)
                    |)) in
                let~ _ : Ty.tuple [] :=
                  let β := M.deref (| M.read (| borrow_state |) |) in
                  M.write (|
                    β,
                    M.call_closure (|
                      Ty.path "u8",
                      BinOp.Wrap.sub,
                      [
                        M.read (| β |);
                        M.call_closure (|
                          Ty.path "u8",
                          BinOp.Wrap.shl,
                          [
                            Value.Integer IntegerKind.U8 1;
                            M.read (|
                              get_constant (|
                                "pinocchio::account_info::LAMPORTS_SHIFT",
                                Ty.path "u8"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ Ty.path "u64" ];
                      Ty.path "pinocchio::program_error::ProgramError"
                    ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [
                      Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ Ty.path "u64" ];
                      Ty.path "pinocchio::program_error::ProgramError"
                    ]
                    [
                      Value.mkStructRecord
                        "pinocchio::account_info::Ref"
                        []
                        [ Ty.path "u64" ]
                        [
                          ("value",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ptr::non_null::NonNull")
                                []
                                [ Ty.path "u64" ],
                              M.get_trait_method (|
                                "core::convert::From",
                                Ty.apply
                                  (Ty.path "core::ptr::non_null::NonNull")
                                  []
                                  [ Ty.path "u64" ],
                                [],
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ],
                                "from",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (|
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "pinocchio::account_info::AccountInfo",
                                          "raw"
                                        |)
                                      |)
                                    |),
                                    "pinocchio::account_info::Account",
                                    "lamports"
                                  |)
                                |)
                              ]
                            |));
                          ("state",
                            M.call_closure (|
                              Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ Ty.path "u8" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::ptr::non_null::NonNull")
                                  []
                                  [ Ty.path "u8" ],
                                "new_unchecked",
                                [],
                                []
                              |),
                              [ M.read (| borrow_state |) ]
                            |));
                          ("borrow_shift",
                            M.read (|
                              get_constant (|
                                "pinocchio::account_info::LAMPORTS_SHIFT",
                                Ty.path "u8"
                              |)
                            |));
                          ("marker",
                            Value.StructTuple
                              "core::marker::PhantomData"
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ]
                              [])
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_try_borrow_lamports :
      M.IsAssociatedFunction.C Self "try_borrow_lamports" try_borrow_lamports.
    Admitted.
    Global Typeclasses Opaque try_borrow_lamports.
    
    (*
        pub fn try_borrow_mut_lamports(&self) -> Result<RefMut<u64>, ProgramError> {
            // check if the account lamports are already borrowed
            self.can_borrow_mut_lamports()?;
    
            let borrow_state = self.raw as *mut u8;
            // SAFETY: The `borrow_state` is a mutable pointer to the borrow state
            // of the account, which is guaranteed to be valid.
            //
            // "consumes" the mutable borrow for lamports; we are guaranteed
            // that lamports are not already borrowed in any form
            unsafe { *borrow_state &= 0b_0111_1111 };
    
            // return the mutable reference to lamports
            Ok(RefMut {
                value: unsafe { NonNull::from(&mut ( *self.raw).lamports) },
                state: unsafe { NonNull::new_unchecked(borrow_state) },
                borrow_mask: LAMPORTS_MASK,
                marker: PhantomData,
            })
        }
    *)
    Definition try_borrow_mut_lamports (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ Ty.path "u64" ];
                Ty.path "pinocchio::program_error::ProgramError"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::ops::control_flow::ControlFlow")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "pinocchio::program_error::ProgramError"
                            ];
                          Ty.tuple []
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "pinocchio::program_error::ProgramError"
                              ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                            M.get_associated_function (|
                              Ty.path "pinocchio::account_info::AccountInfo",
                              "can_borrow_mut_lamports",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "pinocchio::program_error::ProgramError"
                                ],
                              γ0_0
                            |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "pinocchio::account_info::RefMut")
                                        []
                                        [ Ty.path "u64" ];
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "pinocchio::account_info::RefMut")
                                          []
                                          [ Ty.path "u64" ];
                                        Ty.path "pinocchio::program_error::ProgramError"
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                    ],
                                    "from_residual",
                                    [],
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| Ty.tuple [], γ0_0 |) in
                          M.read (| val |)))
                    ]
                  |) in
                let~ borrow_state : Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ] :=
                  M.cast
                    (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                    (M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::account_info::AccountInfo",
                        "raw"
                      |)
                    |)) in
                let~ _ : Ty.tuple [] :=
                  let β := M.deref (| M.read (| borrow_state |) |) in
                  M.write (|
                    β,
                    M.call_closure (|
                      Ty.path "u8",
                      BinOp.Wrap.bit_and,
                      [ M.read (| β |); Value.Integer IntegerKind.U8 127 ]
                    |)
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ Ty.path "u64" ];
                      Ty.path "pinocchio::program_error::ProgramError"
                    ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [
                      Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ Ty.path "u64" ];
                      Ty.path "pinocchio::program_error::ProgramError"
                    ]
                    [
                      Value.mkStructRecord
                        "pinocchio::account_info::RefMut"
                        []
                        [ Ty.path "u64" ]
                        [
                          ("value",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ptr::non_null::NonNull")
                                []
                                [ Ty.path "u64" ],
                              M.get_trait_method (|
                                "core::convert::From",
                                Ty.apply
                                  (Ty.path "core::ptr::non_null::NonNull")
                                  []
                                  [ Ty.path "u64" ],
                                [],
                                [ Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ] ],
                                "from",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (|
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "pinocchio::account_info::AccountInfo",
                                          "raw"
                                        |)
                                      |)
                                    |),
                                    "pinocchio::account_info::Account",
                                    "lamports"
                                  |)
                                |)
                              ]
                            |));
                          ("state",
                            M.call_closure (|
                              Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ Ty.path "u8" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::ptr::non_null::NonNull")
                                  []
                                  [ Ty.path "u8" ],
                                "new_unchecked",
                                [],
                                []
                              |),
                              [ M.read (| borrow_state |) ]
                            |));
                          ("borrow_mask",
                            M.read (|
                              get_constant (|
                                "pinocchio::account_info::LAMPORTS_MASK",
                                Ty.path "u8"
                              |)
                            |));
                          ("marker",
                            Value.StructTuple
                              "core::marker::PhantomData"
                              []
                              [ Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ] ]
                              [])
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_try_borrow_mut_lamports :
      M.IsAssociatedFunction.C Self "try_borrow_mut_lamports" try_borrow_mut_lamports.
    Admitted.
    Global Typeclasses Opaque try_borrow_mut_lamports.
    
    (*
        pub fn check_borrow_lamports(&self) -> Result<(), ProgramError> {
            self.can_borrow_lamports()
        }
    *)
    Definition check_borrow_lamports (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
            M.get_associated_function (|
              Ty.path "pinocchio::account_info::AccountInfo",
              "can_borrow_lamports",
              [],
              []
            |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_check_borrow_lamports :
      M.IsAssociatedFunction.C Self "check_borrow_lamports" check_borrow_lamports.
    Admitted.
    Global Typeclasses Opaque check_borrow_lamports.
    
    (*
        pub fn can_borrow_lamports(&self) -> Result<(), ProgramError> {
            let borrow_state = unsafe { ( *self.raw).borrow_state };
    
            // check if mutable borrow is already taken
            if borrow_state & 0b_1000_0000 != 0b_1000_0000 {
                return Err(ProgramError::AccountBorrowFailed);
            }
    
            // check if we have reached the max immutable borrow count
            if borrow_state & 0b_0111_0000 == 0 {
                return Err(ProgramError::AccountBorrowFailed);
            }
    
            Ok(())
        }
    *)
    Definition can_borrow_lamports (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ borrow_state : Ty.path "u8" :=
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (|
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::account_info::AccountInfo",
                            "raw"
                          |)
                        |)
                      |),
                      "pinocchio::account_info::Account",
                      "borrow_state"
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.ne,
                                  [
                                    M.call_closure (|
                                      Ty.path "u8",
                                      BinOp.Wrap.bit_and,
                                      [ M.read (| borrow_state |); Value.Integer IntegerKind.U8 128
                                      ]
                                    |);
                                    Value.Integer IntegerKind.U8 128
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Err"
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                                  [
                                    Value.StructTuple
                                      "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                                      []
                                      []
                                      []
                                  ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [
                                    M.call_closure (|
                                      Ty.path "u8",
                                      BinOp.Wrap.bit_and,
                                      [ M.read (| borrow_state |); Value.Integer IntegerKind.U8 112
                                      ]
                                    |);
                                    Value.Integer IntegerKind.U8 0
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Err"
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                                  [
                                    Value.StructTuple
                                      "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                                      []
                                      []
                                      []
                                  ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                    [ Value.Tuple [] ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_can_borrow_lamports :
      M.IsAssociatedFunction.C Self "can_borrow_lamports" can_borrow_lamports.
    Admitted.
    Global Typeclasses Opaque can_borrow_lamports.
    
    (*
        pub fn check_borrow_mut_lamports(&self) -> Result<(), ProgramError> {
            self.can_borrow_mut_lamports()
        }
    *)
    Definition check_borrow_mut_lamports
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
            M.get_associated_function (|
              Ty.path "pinocchio::account_info::AccountInfo",
              "can_borrow_mut_lamports",
              [],
              []
            |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_check_borrow_mut_lamports :
      M.IsAssociatedFunction.C Self "check_borrow_mut_lamports" check_borrow_mut_lamports.
    Admitted.
    Global Typeclasses Opaque check_borrow_mut_lamports.
    
    (*
        pub fn can_borrow_mut_lamports(&self) -> Result<(), ProgramError> {
            let borrow_state = unsafe { ( *self.raw).borrow_state };
    
            // check if any borrow (mutable or immutable) is already taken for lamports
            if borrow_state & 0b_1111_0000 != 0b_1111_0000 {
                return Err(ProgramError::AccountBorrowFailed);
            }
    
            Ok(())
        }
    *)
    Definition can_borrow_mut_lamports (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ borrow_state : Ty.path "u8" :=
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (|
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::account_info::AccountInfo",
                            "raw"
                          |)
                        |)
                      |),
                      "pinocchio::account_info::Account",
                      "borrow_state"
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.ne,
                                  [
                                    M.call_closure (|
                                      Ty.path "u8",
                                      BinOp.Wrap.bit_and,
                                      [ M.read (| borrow_state |); Value.Integer IntegerKind.U8 240
                                      ]
                                    |);
                                    Value.Integer IntegerKind.U8 240
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Err"
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                                  [
                                    Value.StructTuple
                                      "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                                      []
                                      []
                                      []
                                  ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                    [ Value.Tuple [] ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_can_borrow_mut_lamports :
      M.IsAssociatedFunction.C Self "can_borrow_mut_lamports" can_borrow_mut_lamports.
    Admitted.
    Global Typeclasses Opaque can_borrow_mut_lamports.
    
    (*
        pub fn try_borrow_data(&self) -> Result<Ref<[u8]>, ProgramError> {
            // check if the account data is already borrowed
            self.can_borrow_data()?;
    
            let borrow_state = self.raw as *mut u8;
            // SAFETY: The `borrow_state` is a mutable pointer to the borrow state
            // of the account, which is guaranteed to be valid.
            //
            // "consumes" one immutable borrow for data; we are guaranteed
            // that there is at least one immutable borrow available
            unsafe { *borrow_state -= 1 };
    
            // return the reference to data
            Ok(Ref {
                value: unsafe { NonNull::from(from_raw_parts(self.data_ptr(), self.data_len())) },
                state: unsafe { NonNull::new_unchecked(borrow_state) },
                borrow_shift: DATA_SHIFT,
                marker: PhantomData,
            })
        }
    *)
    Definition try_borrow_data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "pinocchio::account_info::Ref")
                  []
                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                Ty.path "pinocchio::program_error::ProgramError"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::ops::control_flow::ControlFlow")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "pinocchio::program_error::ProgramError"
                            ];
                          Ty.tuple []
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "pinocchio::program_error::ProgramError"
                              ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                            M.get_associated_function (|
                              Ty.path "pinocchio::account_info::AccountInfo",
                              "can_borrow_data",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "pinocchio::program_error::ProgramError"
                                ],
                              γ0_0
                            |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "pinocchio::account_info::Ref")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "pinocchio::account_info::Ref")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                                        Ty.path "pinocchio::program_error::ProgramError"
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                    ],
                                    "from_residual",
                                    [],
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| Ty.tuple [], γ0_0 |) in
                          M.read (| val |)))
                    ]
                  |) in
                let~ borrow_state : Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ] :=
                  M.cast
                    (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                    (M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::account_info::AccountInfo",
                        "raw"
                      |)
                    |)) in
                let~ _ : Ty.tuple [] :=
                  let β := M.deref (| M.read (| borrow_state |) |) in
                  M.write (|
                    β,
                    M.call_closure (|
                      Ty.path "u8",
                      BinOp.Wrap.sub,
                      [ M.read (| β |); Value.Integer IntegerKind.U8 1 ]
                    |)
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "pinocchio::account_info::Ref")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                      Ty.path "pinocchio::program_error::ProgramError"
                    ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [
                      Ty.apply
                        (Ty.path "pinocchio::account_info::Ref")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                      Ty.path "pinocchio::program_error::ProgramError"
                    ]
                    [
                      Value.mkStructRecord
                        "pinocchio::account_info::Ref"
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        [
                          ("value",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ptr::non_null::NonNull")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_trait_method (|
                                "core::convert::From",
                                Ty.apply
                                  (Ty.path "core::ptr::non_null::NonNull")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                                "from",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                  M.get_function (|
                                    "core::slice::raw::from_raw_parts",
                                    [],
                                    [ Ty.path "u8" ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                                      M.pointer_coercion
                                        M.PointerCoercion.MutToConstPointer
                                        (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                                        (Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ]),
                                      [
                                        M.call_closure (|
                                          Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                          M.get_associated_function (|
                                            Ty.path "pinocchio::account_info::AccountInfo",
                                            "data_ptr",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.path "pinocchio::account_info::AccountInfo",
                                        "data_len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |));
                          ("state",
                            M.call_closure (|
                              Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ Ty.path "u8" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::ptr::non_null::NonNull")
                                  []
                                  [ Ty.path "u8" ],
                                "new_unchecked",
                                [],
                                []
                              |),
                              [ M.read (| borrow_state |) ]
                            |));
                          ("borrow_shift",
                            M.read (|
                              get_constant (| "pinocchio::account_info::DATA_SHIFT", Ty.path "u8" |)
                            |));
                          ("marker",
                            Value.StructTuple
                              "core::marker::PhantomData"
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                              ]
                              [])
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_try_borrow_data :
      M.IsAssociatedFunction.C Self "try_borrow_data" try_borrow_data.
    Admitted.
    Global Typeclasses Opaque try_borrow_data.
    
    (*
        pub fn try_borrow_mut_data(&self) -> Result<RefMut<[u8]>, ProgramError> {
            // check if the account data is already borrowed
            self.can_borrow_mut_data()?;
    
            let borrow_state = self.raw as *mut u8;
            // SAFETY: The `borrow_state` is a mutable pointer to the borrow state
            // of the account, which is guaranteed to be valid.
            //
            // "consumes" the mutable borrow for account data; we are guaranteed
            // that account data are not already borrowed in any form
            unsafe { *borrow_state &= 0b_1111_0111 };
    
            // return the mutable reference to data
            Ok(RefMut {
                value: unsafe { NonNull::from(from_raw_parts_mut(self.data_ptr(), self.data_len())) },
                state: unsafe { NonNull::new_unchecked(borrow_state) },
                borrow_mask: DATA_MASK,
                marker: PhantomData,
            })
        }
    *)
    Definition try_borrow_mut_data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "pinocchio::account_info::RefMut")
                  []
                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                Ty.path "pinocchio::program_error::ProgramError"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::ops::control_flow::ControlFlow")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "pinocchio::program_error::ProgramError"
                            ];
                          Ty.tuple []
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "pinocchio::program_error::ProgramError"
                              ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                            M.get_associated_function (|
                              Ty.path "pinocchio::account_info::AccountInfo",
                              "can_borrow_mut_data",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "pinocchio::program_error::ProgramError"
                                ],
                              γ0_0
                            |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "pinocchio::account_info::RefMut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "pinocchio::account_info::RefMut")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                                        Ty.path "pinocchio::program_error::ProgramError"
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                    ],
                                    "from_residual",
                                    [],
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| Ty.tuple [], γ0_0 |) in
                          M.read (| val |)))
                    ]
                  |) in
                let~ borrow_state : Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ] :=
                  M.cast
                    (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                    (M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::account_info::AccountInfo",
                        "raw"
                      |)
                    |)) in
                let~ _ : Ty.tuple [] :=
                  let β := M.deref (| M.read (| borrow_state |) |) in
                  M.write (|
                    β,
                    M.call_closure (|
                      Ty.path "u8",
                      BinOp.Wrap.bit_and,
                      [ M.read (| β |); Value.Integer IntegerKind.U8 247 ]
                    |)
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "pinocchio::account_info::RefMut")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                      Ty.path "pinocchio::program_error::ProgramError"
                    ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [
                      Ty.apply
                        (Ty.path "pinocchio::account_info::RefMut")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                      Ty.path "pinocchio::program_error::ProgramError"
                    ]
                    [
                      Value.mkStructRecord
                        "pinocchio::account_info::RefMut"
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        [
                          ("value",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ptr::non_null::NonNull")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_trait_method (|
                                "core::convert::From",
                                Ty.apply
                                  (Ty.path "core::ptr::non_null::NonNull")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                                "from",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                  M.get_function (|
                                    "core::slice::raw::from_raw_parts_mut",
                                    [],
                                    [ Ty.path "u8" ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                      M.get_associated_function (|
                                        Ty.path "pinocchio::account_info::AccountInfo",
                                        "data_ptr",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.path "pinocchio::account_info::AccountInfo",
                                        "data_len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |));
                          ("state",
                            M.call_closure (|
                              Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ Ty.path "u8" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::ptr::non_null::NonNull")
                                  []
                                  [ Ty.path "u8" ],
                                "new_unchecked",
                                [],
                                []
                              |),
                              [ M.read (| borrow_state |) ]
                            |));
                          ("borrow_mask",
                            M.read (|
                              get_constant (| "pinocchio::account_info::DATA_MASK", Ty.path "u8" |)
                            |));
                          ("marker",
                            Value.StructTuple
                              "core::marker::PhantomData"
                              []
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                              ]
                              [])
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_try_borrow_mut_data :
      M.IsAssociatedFunction.C Self "try_borrow_mut_data" try_borrow_mut_data.
    Admitted.
    Global Typeclasses Opaque try_borrow_mut_data.
    
    (*
        pub fn check_borrow_data(&self) -> Result<(), ProgramError> {
            self.can_borrow_data()
        }
    *)
    Definition check_borrow_data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
            M.get_associated_function (|
              Ty.path "pinocchio::account_info::AccountInfo",
              "can_borrow_data",
              [],
              []
            |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_check_borrow_data :
      M.IsAssociatedFunction.C Self "check_borrow_data" check_borrow_data.
    Admitted.
    Global Typeclasses Opaque check_borrow_data.
    
    (*
        pub fn can_borrow_data(&self) -> Result<(), ProgramError> {
            let borrow_state = unsafe { ( *self.raw).borrow_state };
    
            // check if mutable data borrow is already taken (most significant bit
            // of the data borrow state)
            if borrow_state & 0b_0000_1000 == 0 {
                return Err(ProgramError::AccountBorrowFailed);
            }
    
            // check if we have reached the max immutable data borrow count (7)
            if borrow_state & 0b_0000_0111 == 0 {
                return Err(ProgramError::AccountBorrowFailed);
            }
    
            Ok(())
        }
    *)
    Definition can_borrow_data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ borrow_state : Ty.path "u8" :=
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (|
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::account_info::AccountInfo",
                            "raw"
                          |)
                        |)
                      |),
                      "pinocchio::account_info::Account",
                      "borrow_state"
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [
                                    M.call_closure (|
                                      Ty.path "u8",
                                      BinOp.Wrap.bit_and,
                                      [ M.read (| borrow_state |); Value.Integer IntegerKind.U8 8 ]
                                    |);
                                    Value.Integer IntegerKind.U8 0
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Err"
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                                  [
                                    Value.StructTuple
                                      "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                                      []
                                      []
                                      []
                                  ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [
                                    M.call_closure (|
                                      Ty.path "u8",
                                      BinOp.Wrap.bit_and,
                                      [ M.read (| borrow_state |); Value.Integer IntegerKind.U8 7 ]
                                    |);
                                    Value.Integer IntegerKind.U8 0
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Err"
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                                  [
                                    Value.StructTuple
                                      "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                                      []
                                      []
                                      []
                                  ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                    [ Value.Tuple [] ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_can_borrow_data :
      M.IsAssociatedFunction.C Self "can_borrow_data" can_borrow_data.
    Admitted.
    Global Typeclasses Opaque can_borrow_data.
    
    (*
        pub fn check_borrow_mut_data(&self) -> Result<(), ProgramError> {
            self.can_borrow_mut_data()
        }
    *)
    Definition check_borrow_mut_data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
            M.get_associated_function (|
              Ty.path "pinocchio::account_info::AccountInfo",
              "can_borrow_mut_data",
              [],
              []
            |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_check_borrow_mut_data :
      M.IsAssociatedFunction.C Self "check_borrow_mut_data" check_borrow_mut_data.
    Admitted.
    Global Typeclasses Opaque check_borrow_mut_data.
    
    (*
        pub fn can_borrow_mut_data(&self) -> Result<(), ProgramError> {
            let borrow_state = unsafe { ( *self.raw).borrow_state };
    
            // check if any borrow (mutable or immutable) is already taken for data
            if borrow_state & 0b_0000_1111 != 0b_0000_1111 {
                return Err(ProgramError::AccountBorrowFailed);
            }
    
            Ok(())
        }
    *)
    Definition can_borrow_mut_data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ borrow_state : Ty.path "u8" :=
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (|
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::account_info::AccountInfo",
                            "raw"
                          |)
                        |)
                      |),
                      "pinocchio::account_info::Account",
                      "borrow_state"
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.ne,
                                  [
                                    M.call_closure (|
                                      Ty.path "u8",
                                      BinOp.Wrap.bit_and,
                                      [ M.read (| borrow_state |); Value.Integer IntegerKind.U8 15 ]
                                    |);
                                    Value.Integer IntegerKind.U8 15
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Err"
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                                  [
                                    Value.StructTuple
                                      "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                                      []
                                      []
                                      []
                                  ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                    [ Value.Tuple [] ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_can_borrow_mut_data :
      M.IsAssociatedFunction.C Self "can_borrow_mut_data" can_borrow_mut_data.
    Admitted.
    Global Typeclasses Opaque can_borrow_mut_data.
    
    (*
        pub fn realloc(&self, new_len: usize, zero_init: bool) -> Result<(), ProgramError> {
            // Check wheather the account data is already borrowed.
            self.can_borrow_mut_data()?;
    
            // Account length is always `< i32::MAX`...
            let current_len = self.data_len() as i32;
            // ...so the new length must fit in an `i32`.
            let new_len = i32::try_from(new_len).map_err(|_| ProgramError::InvalidRealloc)?;
    
            // Return early if length hasn't changed.
            if new_len == current_len {
                return Ok(());
            }
    
            let difference = new_len - current_len;
            let accumulated_resize_delta = self.resize_delta() + difference;
    
            // Return an error when the length increase from the original serialized data
            // length is too large and would result in an out of bounds allocation
            if accumulated_resize_delta > MAX_PERMITTED_DATA_INCREASE as i32 {
                return Err(ProgramError::InvalidRealloc);
            }
    
            unsafe {
                ( *self.raw).data_len = new_len as u64;
                ( *self.raw).resize_delta = accumulated_resize_delta;
            }
    
            if zero_init && difference > 0 {
                unsafe {
                    #[cfg(target_os = "solana")]
                    sol_memset_(
                        self.data_ptr().add(current_len as usize),
                        0,
                        difference as u64,
                    );
                    #[cfg(not(target_os = "solana"))]
                    core::ptr::write_bytes(
                        self.data_ptr().add(current_len as usize),
                        0,
                        difference as usize,
                    );
                }
            }
    
            Ok(())
        }
    *)
    Definition realloc (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; new_len; zero_init ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          let new_len := M.alloc (| Ty.path "usize", new_len |) in
          let zero_init := M.alloc (| Ty.path "bool", zero_init |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::ops::control_flow::ControlFlow")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "pinocchio::program_error::ProgramError"
                            ];
                          Ty.tuple []
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "pinocchio::program_error::ProgramError"
                              ];
                            Ty.tuple []
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                            M.get_associated_function (|
                              Ty.path "pinocchio::account_info::AccountInfo",
                              "can_borrow_mut_data",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "pinocchio::program_error::ProgramError"
                                ],
                              γ0_0
                            |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple [];
                                        Ty.path "pinocchio::program_error::ProgramError"
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                    ],
                                    "from_residual",
                                    [],
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| Ty.tuple [], γ0_0 |) in
                          M.read (| val |)))
                    ]
                  |) in
                let~ current_len : Ty.path "i32" :=
                  M.cast
                    (Ty.path "i32")
                    (M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.path "pinocchio::account_info::AccountInfo",
                        "data_len",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)) in
                let~ new_len : Ty.path "i32" :=
                  M.match_operator (|
                    Ty.path "i32",
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::ops::control_flow::ControlFlow")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.path "core::convert::Infallible";
                              Ty.path "pinocchio::program_error::ProgramError"
                            ];
                          Ty.path "i32"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "pinocchio::program_error::ProgramError"
                              ];
                            Ty.path "i32"
                          ],
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.path "i32"; Ty.path "pinocchio::program_error::ProgramError" ],
                          [],
                          [],
                          "branch",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [ Ty.path "i32"; Ty.path "pinocchio::program_error::ProgramError" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.path "i32"; Ty.path "core::num::error::TryFromIntError" ],
                              "map_err",
                              [],
                              [
                                Ty.path "pinocchio::program_error::ProgramError";
                                Ty.function
                                  [ Ty.path "core::num::error::TryFromIntError" ]
                                  (Ty.path "pinocchio::program_error::ProgramError")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "i32"; Ty.path "core::num::error::TryFromIntError" ],
                                M.get_trait_method (|
                                  "core::convert::TryFrom",
                                  Ty.path "i32",
                                  [],
                                  [ Ty.path "usize" ],
                                  "try_from",
                                  [],
                                  []
                                |),
                                [ M.read (| new_len |) ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.path "pinocchio::program_error::ProgramError",
                                          M.alloc (|
                                            Ty.path "core::num::error::TryFromIntError",
                                            α0
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (Value.StructTuple
                                                  "pinocchio::program_error::ProgramError::InvalidRealloc"
                                                  []
                                                  []
                                                  []))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "pinocchio::program_error::ProgramError"
                                ],
                              γ0_0
                            |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple [];
                                        Ty.path "pinocchio::program_error::ProgramError"
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                    ],
                                    "from_residual",
                                    [],
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| Ty.path "i32", γ0_0 |) in
                          M.read (| val |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [ M.read (| new_len |); M.read (| current_len |) ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Ok"
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                                  [ Value.Tuple [] ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ difference : Ty.path "i32" :=
                  M.call_closure (|
                    Ty.path "i32",
                    BinOp.Wrap.sub,
                    [ M.read (| new_len |); M.read (| current_len |) ]
                  |) in
                let~ accumulated_resize_delta : Ty.path "i32" :=
                  M.call_closure (|
                    Ty.path "i32",
                    BinOp.Wrap.add,
                    [
                      M.call_closure (|
                        Ty.path "i32",
                        M.get_associated_function (|
                          Ty.path "pinocchio::account_info::AccountInfo",
                          "resize_delta",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |);
                      M.read (| difference |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.gt,
                                  [
                                    M.read (| accumulated_resize_delta |);
                                    M.cast
                                      (Ty.path "i32")
                                      (M.read (|
                                        get_constant (|
                                          "pinocchio::account_info::MAX_PERMITTED_DATA_INCREASE",
                                          Ty.path "usize"
                                        |)
                                      |))
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Err"
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                                  [
                                    Value.StructTuple
                                      "pinocchio::program_error::ProgramError::InvalidRealloc"
                                      []
                                      []
                                      []
                                  ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    let~ _ : Ty.tuple [] :=
                      M.write (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (|
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::account_info::AccountInfo",
                                "raw"
                              |)
                            |)
                          |),
                          "pinocchio::account_info::Account",
                          "data_len"
                        |),
                        M.cast (Ty.path "u64") (M.read (| new_len |))
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.write (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (|
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::account_info::AccountInfo",
                                "raw"
                              |)
                            |)
                          |),
                          "pinocchio::account_info::Account",
                          "resize_delta"
                        |),
                        M.read (| accumulated_resize_delta |)
                      |) in
                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                LogicalOp.and (|
                                  M.read (| zero_init |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.gt,
                                      [ M.read (| difference |); Value.Integer IntegerKind.I32 0 ]
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::intrinsics::write_bytes",
                                  [],
                                  [ Ty.path "u8" ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                      "add",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                        M.get_associated_function (|
                                          Ty.path "pinocchio::account_info::AccountInfo",
                                          "data_ptr",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| self |) |)
                                          |)
                                        ]
                                      |);
                                      M.cast (Ty.path "usize") (M.read (| current_len |))
                                    ]
                                  |);
                                  Value.Integer IntegerKind.U8 0;
                                  M.cast (Ty.path "usize") (M.read (| difference |))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                    [ Value.Tuple [] ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_realloc : M.IsAssociatedFunction.C Self "realloc" realloc.
    Admitted.
    Global Typeclasses Opaque realloc.
    
    (*
        pub fn resize(&self, new_len: usize) -> Result<(), ProgramError> {
            #[allow(deprecated)]
            self.realloc(new_len, true)
        }
    *)
    Definition resize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; new_len ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          let new_len := M.alloc (| Ty.path "usize", new_len |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
            M.get_associated_function (|
              Ty.path "pinocchio::account_info::AccountInfo",
              "realloc",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.read (| new_len |);
              Value.Bool true
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_resize : M.IsAssociatedFunction.C Self "resize" resize.
    Admitted.
    Global Typeclasses Opaque resize.
    
    (*
        pub fn close(&self) -> ProgramResult {
            // make sure the account is not borrowed since we are about to
            // resize the data to zero
            if self.is_borrowed(BorrowState::Borrowed) {
                return Err(ProgramError::AccountBorrowFailed);
            }
    
            // SAFETY: The are no active borrows on the account data or lamports.
            unsafe {
                // Update the resize delta since closing an account will set its data length
                // to zero (account length is always `< i32::MAX`).
                ( *self.raw).resize_delta = self.resize_delta() - self.data_len() as i32;
    
                self.close_unchecked();
            }
    
            Ok(())
        }
    *)
    Definition close (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.path "pinocchio::account_info::AccountInfo",
                                    "is_borrowed",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| self |) |)
                                    |);
                                    Value.StructTuple
                                      "pinocchio::account_info::BorrowState::Borrowed"
                                      []
                                      []
                                      []
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Err"
                                  []
                                  [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                                  [
                                    Value.StructTuple
                                      "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                                      []
                                      []
                                      []
                                  ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    let~ _ : Ty.tuple [] :=
                      M.write (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (|
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::account_info::AccountInfo",
                                "raw"
                              |)
                            |)
                          |),
                          "pinocchio::account_info::Account",
                          "resize_delta"
                        |),
                        M.call_closure (|
                          Ty.path "i32",
                          BinOp.Wrap.sub,
                          [
                            M.call_closure (|
                              Ty.path "i32",
                              M.get_associated_function (|
                                Ty.path "pinocchio::account_info::AccountInfo",
                                "resize_delta",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |);
                            M.cast
                              (Ty.path "i32")
                              (M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.path "pinocchio::account_info::AccountInfo",
                                  "data_len",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |))
                          ]
                        |)
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_associated_function (|
                          Ty.path "pinocchio::account_info::AccountInfo",
                          "close_unchecked",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |) in
                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                    [ Value.Tuple [] ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_close : M.IsAssociatedFunction.C Self "close" close.
    Admitted.
    Global Typeclasses Opaque close.
    
    (*
        pub unsafe fn close_unchecked(&self) {
            // We take advantage that the 48 bytes before the account data are:
            // - 32 bytes for the owner
            // - 8 bytes for the lamports
            // - 8 bytes for the data_len
            //
            // So we can zero out them directly.
            #[cfg(target_os = "solana")]
            sol_memset_(self.data_ptr().sub(48), 0, 48);
        }
    *)
    Definition close_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          Value.Tuple []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_close_unchecked :
      M.IsAssociatedFunction.C Self "close_unchecked" close_unchecked.
    Admitted.
    Global Typeclasses Opaque close_unchecked.
    
    (*
        fn data_ptr(&self) -> *mut u8 {
            unsafe { (self.raw as *mut u8).add(core::mem::size_of::<Account>()) }
        }
    *)
    Definition data_ptr (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
              self
            |) in
          M.call_closure (|
            Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
            M.get_associated_function (|
              Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
              "add",
              [],
              []
            |),
            [
              M.cast
                (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                (M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "pinocchio::account_info::AccountInfo",
                    "raw"
                  |)
                |));
              M.call_closure (|
                Ty.path "usize",
                M.get_function (|
                  "core::mem::size_of",
                  [],
                  [ Ty.path "pinocchio::account_info::Account" ]
                |),
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_data_ptr : M.IsAssociatedFunction.C Self "data_ptr" data_ptr.
    Admitted.
    Global Typeclasses Opaque data_ptr.
  End Impl_pinocchio_account_info_AccountInfo.
  
  Definition value_LAMPORTS_SHIFT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Ty.path "u8", Value.Integer IntegerKind.U8 4 |))).
  
  Global Instance Instance_IsConstant_value_LAMPORTS_SHIFT :
    M.IsFunction.C "pinocchio::account_info::LAMPORTS_SHIFT" value_LAMPORTS_SHIFT.
  Admitted.
  Global Typeclasses Opaque value_LAMPORTS_SHIFT.
  
  Definition value_DATA_SHIFT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Ty.path "u8", Value.Integer IntegerKind.U8 0 |))).
  
  Global Instance Instance_IsConstant_value_DATA_SHIFT :
    M.IsFunction.C "pinocchio::account_info::DATA_SHIFT" value_DATA_SHIFT.
  Admitted.
  Global Typeclasses Opaque value_DATA_SHIFT.
  
  (* StructRecord
    {
      name := "Ref";
      const_params := [];
      ty_params := [ "T" ];
      fields :=
        [
          ("value", Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ T ]);
          ("state", Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ Ty.path "u8" ]);
          ("borrow_shift", Ty.path "u8");
          ("marker",
            Ty.apply (Ty.path "core::marker::PhantomData") [] [ Ty.apply (Ty.path "&") [] [ T ] ])
        ];
    } *)
  
  Module Impl_pinocchio_account_info_Ref_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ].
    
    (*
        pub fn map<U: ?Sized, F>(orig: Ref<'a, T>, f: F) -> Ref<'a, U>
        where
            F: FnOnce(&T) -> &U,
        {
            // Avoid decrementing the borrow flag on Drop.
            let orig = ManuallyDrop::new(orig);
    
            Ref {
                value: NonNull::from(f(&*orig)),
                state: orig.state,
                borrow_shift: orig.borrow_shift,
                marker: PhantomData,
            }
        }
    *)
    Definition map (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [ U; F ], [ orig; f ] =>
        ltac:(M.monadic
          (let orig :=
            M.alloc (| Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ], orig |) in
          let f := M.alloc (| F, f |) in
          M.read (|
            let~ orig :
                Ty.apply
                  (Ty.path "core::mem::manually_drop::ManuallyDrop")
                  []
                  [ Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ] ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::mem::manually_drop::ManuallyDrop")
                  []
                  [ Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ] ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::mem::manually_drop::ManuallyDrop")
                    []
                    [ Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ] ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| orig |) ]
              |) in
            M.alloc (|
              Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ U ],
              Value.mkStructRecord
                "pinocchio::account_info::Ref"
                []
                [ U ]
                [
                  ("value",
                    M.call_closure (|
                      Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ U ],
                      M.get_trait_method (|
                        "core::convert::From",
                        Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ U ],
                        [],
                        [ Ty.apply (Ty.path "&") [] [ U ] ],
                        "from",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ U ],
                          M.get_trait_method (|
                            "core::ops::function::FnOnce",
                            F,
                            [],
                            [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ],
                            "call_once",
                            [],
                            []
                          |),
                          [
                            M.read (| f |);
                            Value.Tuple
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply (Ty.path "&") [] [ T ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "pinocchio::account_info::Ref")
                                                        []
                                                        [ T ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::mem::manually_drop::ManuallyDrop")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "pinocchio::account_info::Ref")
                                                          []
                                                          [ T ]
                                                      ],
                                                    [],
                                                    [],
                                                    "deref",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, orig |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                          ]
                        |)
                      ]
                    |));
                  ("state",
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ] ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "core::mem::manually_drop::ManuallyDrop")
                                []
                                [ Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ] ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, orig |) ]
                          |)
                        |),
                        "pinocchio::account_info::Ref",
                        "state"
                      |)
                    |));
                  ("borrow_shift",
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ] ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "core::mem::manually_drop::ManuallyDrop")
                                []
                                [ Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ] ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, orig |) ]
                          |)
                        |),
                        "pinocchio::account_info::Ref",
                        "borrow_shift"
                      |)
                    |));
                  ("marker",
                    Value.StructTuple
                      "core::marker::PhantomData"
                      []
                      [ Ty.apply (Ty.path "&") [] [ U ] ]
                      [])
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_map :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "map" (map T).
    Admitted.
    Global Typeclasses Opaque map.
    
    (*
        pub fn filter_map<U: ?Sized, F>(orig: Ref<'a, T>, f: F) -> Result<Ref<'a, U>, Self>
        where
            F: FnOnce(&T) -> Option<&U>,
        {
            // Avoid decrementing the borrow flag on Drop.
            let orig = ManuallyDrop::new(orig);
    
            match f(&*orig) {
                Some(value) => Ok(Ref {
                    value: NonNull::from(value),
                    state: orig.state,
                    borrow_shift: orig.borrow_shift,
                    marker: PhantomData,
                }),
                None => Err(ManuallyDrop::into_inner(orig)),
            }
        }
    *)
    Definition filter_map (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [ U; F ], [ orig; f ] =>
        ltac:(M.monadic
          (let orig :=
            M.alloc (| Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ], orig |) in
          let f := M.alloc (| F, f |) in
          M.read (|
            let~ orig :
                Ty.apply
                  (Ty.path "core::mem::manually_drop::ManuallyDrop")
                  []
                  [ Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ] ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::mem::manually_drop::ManuallyDrop")
                  []
                  [ Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ] ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::mem::manually_drop::ManuallyDrop")
                    []
                    [ Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ] ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| orig |) ]
              |) in
            M.alloc (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ U ];
                  Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ]
                ],
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ U ];
                    Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ]
                  ],
                M.alloc (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.apply (Ty.path "&") [] [ U ] ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "&") [] [ U ] ],
                    M.get_trait_method (|
                      "core::ops::function::FnOnce",
                      F,
                      [],
                      [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ T ] ] ],
                      "call_once",
                      [],
                      []
                    |),
                    [
                      M.read (| f |);
                      Value.Tuple
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ T ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "pinocchio::account_info::Ref")
                                                  []
                                                  [ T ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "core::mem::manually_drop::ManuallyDrop")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "pinocchio::account_info::Ref")
                                                    []
                                                    [ T ]
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, orig |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let value := M.copy (| Ty.apply (Ty.path "&") [] [ U ], γ0_0 |) in
                      Value.StructTuple
                        "core::result::Result::Ok"
                        []
                        [
                          Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ U ];
                          Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ]
                        ]
                        [
                          Value.mkStructRecord
                            "pinocchio::account_info::Ref"
                            []
                            [ U ]
                            [
                              ("value",
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ U ],
                                  M.get_trait_method (|
                                    "core::convert::From",
                                    Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ U ],
                                    [],
                                    [ Ty.apply (Ty.path "&") [] [ U ] ],
                                    "from",
                                    [],
                                    []
                                  |),
                                  [ M.read (| value |) ]
                                |));
                              ("state",
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "pinocchio::account_info::Ref")
                                              []
                                              [ T ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "core::mem::manually_drop::ManuallyDrop")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "pinocchio::account_info::Ref")
                                                []
                                                [ T ]
                                            ],
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, orig |) ]
                                      |)
                                    |),
                                    "pinocchio::account_info::Ref",
                                    "state"
                                  |)
                                |));
                              ("borrow_shift",
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "pinocchio::account_info::Ref")
                                              []
                                              [ T ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "core::mem::manually_drop::ManuallyDrop")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "pinocchio::account_info::Ref")
                                                []
                                                [ T ]
                                            ],
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, orig |) ]
                                      |)
                                    |),
                                    "pinocchio::account_info::Ref",
                                    "borrow_shift"
                                  |)
                                |));
                              ("marker",
                                Value.StructTuple
                                  "core::marker::PhantomData"
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ U ] ]
                                  [])
                            ]
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ U ];
                          Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ]
                        ]
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::mem::manually_drop::ManuallyDrop")
                                []
                                [ Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ] ],
                              "into_inner",
                              [],
                              []
                            |),
                            [ M.read (| orig |) ]
                          |)
                        ]))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_filter_map :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "filter_map" (filter_map T).
    Admitted.
    Global Typeclasses Opaque filter_map.
  End Impl_pinocchio_account_info_Ref_T.
  
  Module Impl_core_ops_deref_Deref_where_core_marker_Sized_T_for_pinocchio_account_info_Ref_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ].
    
    (*     type Target = T; *)
    Definition _Target (T : Ty.t) : Ty.t := T.
    
    (*
        fn deref(&self) -> &Self::Target {
            unsafe { self.value.as_ref() }
        }
    *)
    Definition deref (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ] ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ T ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ T ],
                  "as_ref",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "pinocchio::account_info::Ref",
                      "value"
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::deref::Deref"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *)
        [ ("Target", InstanceField.Ty (_Target T)); ("deref", InstanceField.Method (deref T)) ].
  End Impl_core_ops_deref_Deref_where_core_marker_Sized_T_for_pinocchio_account_info_Ref_T.
  
  Module Impl_core_ops_drop_Drop_where_core_marker_Sized_T_for_pinocchio_account_info_Ref_T.
    Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ].
    
    (*
        fn drop(&mut self) {
            unsafe { *self.state.as_mut() += 1 << self.borrow_shift };
        }
    *)
    Definition drop (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "pinocchio::account_info::Ref") [] [ T ] ],
              self
            |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              let β :=
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "u8" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ Ty.path "u8" ],
                      "as_mut",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "pinocchio::account_info::Ref",
                          "state"
                        |)
                      |)
                    ]
                  |)
                |) in
              M.write (|
                β,
                M.call_closure (|
                  Ty.path "u8",
                  BinOp.Wrap.add,
                  [
                    M.read (| β |);
                    M.call_closure (|
                      Ty.path "u8",
                      BinOp.Wrap.shl,
                      [
                        Value.Integer IntegerKind.U8 1;
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::account_info::Ref",
                            "borrow_shift"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::drop::Drop"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("drop", InstanceField.Method (drop T)) ].
  End Impl_core_ops_drop_Drop_where_core_marker_Sized_T_for_pinocchio_account_info_Ref_T.
  
  Definition value_LAMPORTS_MASK (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Ty.path "u8", Value.Integer IntegerKind.U8 128 |))).
  
  Global Instance Instance_IsConstant_value_LAMPORTS_MASK :
    M.IsFunction.C "pinocchio::account_info::LAMPORTS_MASK" value_LAMPORTS_MASK.
  Admitted.
  Global Typeclasses Opaque value_LAMPORTS_MASK.
  
  Definition value_DATA_MASK (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Ty.path "u8", Value.Integer IntegerKind.U8 8 |))).
  
  Global Instance Instance_IsConstant_value_DATA_MASK :
    M.IsFunction.C "pinocchio::account_info::DATA_MASK" value_DATA_MASK.
  Admitted.
  Global Typeclasses Opaque value_DATA_MASK.
  
  (* StructRecord
    {
      name := "RefMut";
      const_params := [];
      ty_params := [ "T" ];
      fields :=
        [
          ("value", Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ T ]);
          ("state", Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ Ty.path "u8" ]);
          ("borrow_mask", Ty.path "u8");
          ("marker",
            Ty.apply
              (Ty.path "core::marker::PhantomData")
              []
              [ Ty.apply (Ty.path "&mut") [] [ T ] ])
        ];
    } *)
  
  Module Impl_pinocchio_account_info_RefMut_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ].
    
    (*
        pub fn map<U: ?Sized, F>(orig: RefMut<'a, T>, f: F) -> RefMut<'a, U>
        where
            F: FnOnce(&mut T) -> &mut U,
        {
            // Avoid decrementing the borrow flag on Drop.
            let mut orig = ManuallyDrop::new(orig);
    
            RefMut {
                value: NonNull::from(f(&mut *orig)),
                state: orig.state,
                borrow_mask: orig.borrow_mask,
                marker: PhantomData,
            }
        }
    *)
    Definition map (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [ U; F ], [ orig; f ] =>
        ltac:(M.monadic
          (let orig :=
            M.alloc (| Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ], orig |) in
          let f := M.alloc (| F, f |) in
          M.read (|
            let~ orig :
                Ty.apply
                  (Ty.path "core::mem::manually_drop::ManuallyDrop")
                  []
                  [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::mem::manually_drop::ManuallyDrop")
                  []
                  [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::mem::manually_drop::ManuallyDrop")
                    []
                    [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| orig |) ]
              |) in
            M.alloc (|
              Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ U ],
              Value.mkStructRecord
                "pinocchio::account_info::RefMut"
                []
                [ U ]
                [
                  ("value",
                    M.call_closure (|
                      Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ U ],
                      M.get_trait_method (|
                        "core::convert::From",
                        Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ U ],
                        [],
                        [ Ty.apply (Ty.path "&mut") [] [ U ] ],
                        "from",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "&mut") [] [ U ],
                          M.get_trait_method (|
                            "core::ops::function::FnOnce",
                            F,
                            [],
                            [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ T ] ] ],
                            "call_once",
                            [],
                            []
                          |),
                          [
                            M.read (| f |);
                            Value.Tuple
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply (Ty.path "&mut") [] [ T ],
                                      M.get_trait_method (|
                                        "core::ops::deref::DerefMut",
                                        Ty.apply
                                          (Ty.path "pinocchio::account_info::RefMut")
                                          []
                                          [ T ],
                                        [],
                                        [],
                                        "deref_mut",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "pinocchio::account_info::RefMut")
                                                        []
                                                        [ T ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::deref::DerefMut",
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::mem::manually_drop::ManuallyDrop")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "pinocchio::account_info::RefMut")
                                                          []
                                                          [ T ]
                                                      ],
                                                    [],
                                                    [],
                                                    "deref_mut",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.MutRef, orig |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                          ]
                        |)
                      ]
                    |));
                  ("state",
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "core::mem::manually_drop::ManuallyDrop")
                                []
                                [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, orig |) ]
                          |)
                        |),
                        "pinocchio::account_info::RefMut",
                        "state"
                      |)
                    |));
                  ("borrow_mask",
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "core::mem::manually_drop::ManuallyDrop")
                                []
                                [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, orig |) ]
                          |)
                        |),
                        "pinocchio::account_info::RefMut",
                        "borrow_mask"
                      |)
                    |));
                  ("marker",
                    Value.StructTuple
                      "core::marker::PhantomData"
                      []
                      [ Ty.apply (Ty.path "&mut") [] [ U ] ]
                      [])
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_map :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "map" (map T).
    Admitted.
    Global Typeclasses Opaque map.
    
    (*
        pub fn filter_map<U: ?Sized, F>(orig: RefMut<'a, T>, f: F) -> Result<RefMut<'a, U>, Self>
        where
            F: FnOnce(&mut T) -> Option<&mut U>,
        {
            // Avoid decrementing the mutable borrow flag on Drop.
            let mut orig = ManuallyDrop::new(orig);
    
            match f(&mut *orig) {
                Some(value) => {
                    let value = NonNull::from(value);
                    Ok(RefMut {
                        value,
                        state: orig.state,
                        borrow_mask: orig.borrow_mask,
                        marker: PhantomData,
                    })
                }
                None => Err(ManuallyDrop::into_inner(orig)),
            }
        }
    *)
    Definition filter_map (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [ U; F ], [ orig; f ] =>
        ltac:(M.monadic
          (let orig :=
            M.alloc (| Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ], orig |) in
          let f := M.alloc (| F, f |) in
          M.read (|
            let~ orig :
                Ty.apply
                  (Ty.path "core::mem::manually_drop::ManuallyDrop")
                  []
                  [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::mem::manually_drop::ManuallyDrop")
                  []
                  [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::mem::manually_drop::ManuallyDrop")
                    []
                    [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| orig |) ]
              |) in
            M.alloc (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ U ];
                  Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ]
                ],
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ U ];
                    Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ]
                  ],
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "&mut") [] [ U ] ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "&mut") [] [ U ] ],
                    M.get_trait_method (|
                      "core::ops::function::FnOnce",
                      F,
                      [],
                      [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ T ] ] ],
                      "call_once",
                      [],
                      []
                    |),
                    [
                      M.read (| f |);
                      Value.Tuple
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&mut") [] [ T ],
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ],
                                  [],
                                  [],
                                  "deref_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "pinocchio::account_info::RefMut")
                                                  []
                                                  [ T ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::DerefMut",
                                              Ty.apply
                                                (Ty.path "core::mem::manually_drop::ManuallyDrop")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "pinocchio::account_info::RefMut")
                                                    []
                                                    [ T ]
                                                ],
                                              [],
                                              [],
                                              "deref_mut",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.MutRef, orig |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let value := M.copy (| Ty.apply (Ty.path "&mut") [] [ U ], γ0_0 |) in
                      M.read (|
                        let~ value : Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ U ] :=
                          M.call_closure (|
                            Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ U ],
                            M.get_trait_method (|
                              "core::convert::From",
                              Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ U ],
                              [],
                              [ Ty.apply (Ty.path "&mut") [] [ U ] ],
                              "from",
                              [],
                              []
                            |),
                            [ M.read (| value |) ]
                          |) in
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ U ];
                              Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ]
                            ],
                          Value.StructTuple
                            "core::result::Result::Ok"
                            []
                            [
                              Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ U ];
                              Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ]
                            ]
                            [
                              Value.mkStructRecord
                                "pinocchio::account_info::RefMut"
                                []
                                [ U ]
                                [
                                  ("value", M.read (| value |));
                                  ("state",
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "pinocchio::account_info::RefMut")
                                                  []
                                                  [ T ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "core::mem::manually_drop::ManuallyDrop")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "pinocchio::account_info::RefMut")
                                                    []
                                                    [ T ]
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, orig |) ]
                                          |)
                                        |),
                                        "pinocchio::account_info::RefMut",
                                        "state"
                                      |)
                                    |));
                                  ("borrow_mask",
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "pinocchio::account_info::RefMut")
                                                  []
                                                  [ T ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "core::mem::manually_drop::ManuallyDrop")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "pinocchio::account_info::RefMut")
                                                    []
                                                    [ T ]
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, orig |) ]
                                          |)
                                        |),
                                        "pinocchio::account_info::RefMut",
                                        "borrow_mask"
                                      |)
                                    |));
                                  ("marker",
                                    Value.StructTuple
                                      "core::marker::PhantomData"
                                      []
                                      [ Ty.apply (Ty.path "&mut") [] [ U ] ]
                                      [])
                                ]
                            ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ U ];
                          Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ]
                        ]
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::mem::manually_drop::ManuallyDrop")
                                []
                                [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ],
                              "into_inner",
                              [],
                              []
                            |),
                            [ M.read (| orig |) ]
                          |)
                        ]))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_filter_map :
      forall (T : Ty.t),
      M.IsAssociatedFunction.C (Self T) "filter_map" (filter_map T).
    Admitted.
    Global Typeclasses Opaque filter_map.
  End Impl_pinocchio_account_info_RefMut_T.
  
  Module Impl_core_ops_deref_Deref_where_core_marker_Sized_T_for_pinocchio_account_info_RefMut_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ].
    
    (*     type Target = T; *)
    Definition _Target (T : Ty.t) : Ty.t := T.
    
    (*
        fn deref(&self) -> &Self::Target {
            unsafe { self.value.as_ref() }
        }
    *)
    Definition deref (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ T ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ T ],
                  "as_ref",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "pinocchio::account_info::RefMut",
                      "value"
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::deref::Deref"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *)
        [ ("Target", InstanceField.Ty (_Target T)); ("deref", InstanceField.Method (deref T)) ].
  End Impl_core_ops_deref_Deref_where_core_marker_Sized_T_for_pinocchio_account_info_RefMut_T.
  
  Module Impl_core_ops_deref_DerefMut_where_core_marker_Sized_T_for_pinocchio_account_info_RefMut_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ].
    
    (*
        fn deref_mut(&mut self) -> &mut <Self as core::ops::Deref>::Target {
            unsafe { self.value.as_mut() }
        }
    *)
    Definition deref_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ],
              self
            |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ T ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ T ],
                          "as_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "pinocchio::account_info::RefMut",
                              "value"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::deref::DerefMut"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("deref_mut", InstanceField.Method (deref_mut T)) ].
  End Impl_core_ops_deref_DerefMut_where_core_marker_Sized_T_for_pinocchio_account_info_RefMut_T.
  
  Module Impl_core_ops_drop_Drop_where_core_marker_Sized_T_for_pinocchio_account_info_RefMut_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ].
    
    (*
        fn drop(&mut self) {
            // unset the mutable borrow flag
            unsafe { *self.state.as_mut() |= self.borrow_mask };
        }
    *)
    Definition drop (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "pinocchio::account_info::RefMut") [] [ T ] ],
              self
            |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              let β :=
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "u8" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::ptr::non_null::NonNull") [] [ Ty.path "u8" ],
                      "as_mut",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "pinocchio::account_info::RefMut",
                          "state"
                        |)
                      |)
                    ]
                  |)
                |) in
              M.write (|
                β,
                M.call_closure (|
                  Ty.path "u8",
                  BinOp.Wrap.bit_or,
                  [
                    M.read (| β |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::account_info::RefMut",
                        "borrow_mask"
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::ops::drop::Drop"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("drop", InstanceField.Method (drop T)) ].
  End Impl_core_ops_drop_Drop_where_core_marker_Sized_T_for_pinocchio_account_info_RefMut_T.
End account_info.
