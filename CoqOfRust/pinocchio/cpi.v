(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module cpi.
  Definition value_MAX_CPI_ACCOUNTS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 64 |))).
  
  Global Instance Instance_IsConstant_value_MAX_CPI_ACCOUNTS :
    M.IsFunction.C "pinocchio::cpi::MAX_CPI_ACCOUNTS" value_MAX_CPI_ACCOUNTS.
  Admitted.
  Global Typeclasses Opaque value_MAX_CPI_ACCOUNTS.
  
  (*
  pub fn invoke<const ACCOUNTS: usize>(
      instruction: &Instruction,
      account_infos: &[&AccountInfo; ACCOUNTS],
  ) -> ProgramResult {
      invoke_signed(instruction, account_infos, &[])
  }
  *)
  Definition invoke (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ ACCOUNTS ], [], [ instruction; account_infos ] =>
      ltac:(M.monadic
        (let instruction := M.alloc (| instruction |) in
        let account_infos := M.alloc (| account_infos |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "core::result::Result")
            []
            [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
          M.get_function (| "pinocchio::cpi::invoke_signed", [ ACCOUNTS ], [] |),
          [
            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| account_infos |) |) |);
            (* Unsize *)
            M.pointer_coercion
              (M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| M.borrow (| Pointer.Kind.Ref, M.alloc (| Value.Array [] |) |) |)
              |))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_invoke : M.IsFunction.C "pinocchio::cpi::invoke" invoke.
  Admitted.
  Global Typeclasses Opaque invoke.
  
  (*
  pub fn slice_invoke(instruction: &Instruction, account_infos: &[&AccountInfo]) -> ProgramResult {
      slice_invoke_signed(instruction, account_infos, &[])
  }
  *)
  Definition slice_invoke (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ instruction; account_infos ] =>
      ltac:(M.monadic
        (let instruction := M.alloc (| instruction |) in
        let account_infos := M.alloc (| account_infos |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "core::result::Result")
            []
            [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
          M.get_function (| "pinocchio::cpi::slice_invoke_signed", [], [] |),
          [
            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| account_infos |) |) |);
            (* Unsize *)
            M.pointer_coercion
              (M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| M.borrow (| Pointer.Kind.Ref, M.alloc (| Value.Array [] |) |) |)
              |))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_slice_invoke :
    M.IsFunction.C "pinocchio::cpi::slice_invoke" slice_invoke.
  Admitted.
  Global Typeclasses Opaque slice_invoke.
  
  (*
  pub fn invoke_signed<const ACCOUNTS: usize>(
      instruction: &Instruction,
      account_infos: &[&AccountInfo; ACCOUNTS],
      signers_seeds: &[Signer],
  ) -> ProgramResult {
      if instruction.accounts.len() < ACCOUNTS {
          return Err(ProgramError::NotEnoughAccountKeys);
      }
  
      const UNINIT: MaybeUninit<Account> = MaybeUninit::<Account>::uninit();
      let mut accounts = [UNINIT; ACCOUNTS];
  
      for index in 0..ACCOUNTS {
          let account_info = account_infos[index];
          let account_meta = &instruction.accounts[index];
  
          if account_info.key() != account_meta.pubkey {
              return Err(ProgramError::InvalidArgument);
          }
  
          let state = if account_meta.is_writable {
              BorrowState::Borrowed
          } else {
              BorrowState::MutablyBorrowed
          };
  
          if account_info.is_borrowed(state) {
              return Err(ProgramError::AccountBorrowFailed);
          }
  
          accounts[index].write(Account::from(account_infos[index]));
      }
  
      unsafe {
          invoke_signed_unchecked(
              instruction,
              core::slice::from_raw_parts(accounts.as_ptr() as _, ACCOUNTS),
              signers_seeds,
          );
      }
  
      Ok(())
  }
  *)
  Definition invoke_signed (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ ACCOUNTS ], [], [ instruction; account_infos; signers_seeds ] =>
      ltac:(M.monadic
        (let instruction := M.alloc (| instruction |) in
        let account_infos := M.alloc (| account_infos |) in
        let signers_seeds := M.alloc (| signers_seeds |) in
        M.read (|
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
            ltac:(M.monadic
              (M.alloc (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.lt,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [ Ty.path "pinocchio::instruction::AccountMeta" ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| instruction |) |),
                                                    "pinocchio::instruction::Instruction",
                                                    "accounts"
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |);
                                        ACCOUNTS
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                        [
                                          Value.StructTuple
                                            "pinocchio::program_error::ProgramError::NotEnoughAccountKeys"
                                            []
                                            []
                                            []
                                        ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)
                    |) in
                  let~ accounts :
                      Ty.apply
                        (Ty.path "array")
                        [ ACCOUNTS ]
                        [
                          Ty.apply
                            (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                            []
                            [ Ty.path "pinocchio::instruction::Account" ]
                        ] :=
                    repeat (|
                      M.read (|
                        get_constant (|
                          "pinocchio::cpi::invoke_signed::UNINIT",
                          Ty.apply
                            (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                            []
                            [ Ty.path "pinocchio::instruction::Account" ]
                        |)
                      |),
                      ACCOUNTS
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.use
                        (M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                Value.StructRecord
                                  "core::ops::range::Range"
                                  []
                                  [ Ty.path "usize" ]
                                  [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", ACCOUNTS)
                                  ]
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.read (|
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "usize" ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let index := M.copy (| γ0_0 |) in
                                                let~ account_info :
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "pinocchio::account_info::AccountInfo"
                                                      ] :=
                                                  M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      M.deref (| M.read (| account_infos |) |),
                                                      M.read (| index |)
                                                    |)
                                                  |) in
                                                let~ account_meta :
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "pinocchio::instruction::AccountMeta"
                                                      ] :=
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_array_field (|
                                                      M.deref (|
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| instruction |) |),
                                                            "pinocchio::instruction::Instruction",
                                                            "accounts"
                                                          |)
                                                        |)
                                                      |),
                                                      M.read (| index |)
                                                    |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.read (|
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_trait_method (|
                                                                      "core::cmp::PartialEq",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                32
                                                                            ]
                                                                            [ Ty.path "u8" ]
                                                                        ],
                                                                      [],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  32
                                                                              ]
                                                                              [ Ty.path "u8" ]
                                                                          ]
                                                                      ],
                                                                      "ne",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      32
                                                                                  ]
                                                                                  [ Ty.path "u8" ]
                                                                              ],
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "pinocchio::account_info::AccountInfo",
                                                                              "key",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    account_info
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (|
                                                                              account_meta
                                                                            |)
                                                                          |),
                                                                          "pinocchio::instruction::AccountMeta",
                                                                          "pubkey"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    Value.StructTuple
                                                                      "core::result::Result::Err"
                                                                      []
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ]
                                                                      [
                                                                        Value.StructTuple
                                                                          "pinocchio::program_error::ProgramError::InvalidArgument"
                                                                          []
                                                                          []
                                                                          []
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |)
                                                  |) in
                                                let~ state :
                                                    Ty.path
                                                      "pinocchio::account_info::BorrowState" :=
                                                  M.read (|
                                                    M.match_operator (|
                                                      Ty.path
                                                        "pinocchio::account_info::BorrowState",
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.SubPointer.get_struct_record_field (|
                                                                  M.deref (|
                                                                    M.read (| account_meta |)
                                                                  |),
                                                                  "pinocchio::instruction::AccountMeta",
                                                                  "is_writable"
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "pinocchio::account_info::BorrowState::Borrowed"
                                                                []
                                                                []
                                                                []
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (|
                                                              Value.StructTuple
                                                                "pinocchio::account_info::BorrowState::MutablyBorrowed"
                                                                []
                                                                []
                                                                []
                                                            |)))
                                                      ]
                                                    |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.read (|
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "pinocchio::account_info::AccountInfo",
                                                                      "is_borrowed",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| account_info |)
                                                                        |)
                                                                      |);
                                                                      M.read (| state |)
                                                                    ]
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    Value.StructTuple
                                                                      "core::result::Result::Err"
                                                                      []
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ]
                                                                      [
                                                                        Value.StructTuple
                                                                          "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                                                                          []
                                                                          []
                                                                          []
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |)
                                                  |) in
                                                let~ _ :
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.path "pinocchio::instruction::Account"
                                                      ] :=
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.path "pinocchio::instruction::Account" ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::mem::maybe_uninit::MaybeUninit")
                                                        []
                                                        [ Ty.path "pinocchio::instruction::Account"
                                                        ],
                                                      "write",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.SubPointer.get_array_field (|
                                                          accounts,
                                                          M.read (| index |)
                                                        |)
                                                      |);
                                                      M.call_closure (|
                                                        Ty.path "pinocchio::instruction::Account",
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          Ty.path "pinocchio::instruction::Account",
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "pinocchio::account_info::AccountInfo"
                                                              ]
                                                          ],
                                                          "from",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_array_field (|
                                                              M.deref (|
                                                                M.read (| account_infos |)
                                                              |),
                                                              M.read (| index |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |))
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_function (| "pinocchio::cpi::invoke_signed_unchecked", [], [] |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [ Ty.path "pinocchio::instruction::Account" ]
                                    ],
                                  M.get_function (|
                                    "core::slice::raw::from_raw_parts",
                                    [],
                                    [ Ty.path "pinocchio::instruction::Account" ]
                                  |),
                                  [
                                    M.cast
                                      (Ty.apply
                                        (Ty.path "*const")
                                        []
                                        [ Ty.path "pinocchio::instruction::Account" ])
                                      (M.call_closure (|
                                        Ty.apply
                                          (Ty.path "*const")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                              []
                                              [ Ty.path "pinocchio::instruction::Account" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                                []
                                                [ Ty.path "pinocchio::instruction::Account" ]
                                            ],
                                          "as_ptr",
                                          [],
                                          []
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.borrow (| Pointer.Kind.Ref, accounts |))
                                        ]
                                      |));
                                    ACCOUNTS
                                  ]
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| signers_seeds |) |)
                            |)
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                      [ Value.Tuple [] ]
                  |)
                |)
              |)))
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_invoke_signed :
    M.IsFunction.C "pinocchio::cpi::invoke_signed" invoke_signed.
  Admitted.
  Global Typeclasses Opaque invoke_signed.
  
  Module invoke_signed.
    Definition value_UNINIT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          M.call_closure (|
            Ty.apply
              (Ty.path "core::mem::maybe_uninit::MaybeUninit")
              []
              [ Ty.path "pinocchio::instruction::Account" ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                []
                [ Ty.path "pinocchio::instruction::Account" ],
              "uninit",
              [],
              []
            |),
            []
          |)
        |))).
    
    Global Instance Instance_IsConstant_value_UNINIT :
      M.IsFunction.C "pinocchio::cpi::invoke_signed::UNINIT" value_UNINIT.
    Admitted.
    Global Typeclasses Opaque value_UNINIT.
  End invoke_signed.
  
  (*
  pub fn slice_invoke_signed(
      instruction: &Instruction,
      account_infos: &[&AccountInfo],
      signers_seeds: &[Signer],
  ) -> ProgramResult {
      if instruction.accounts.len() < account_infos.len() {
          return Err(ProgramError::NotEnoughAccountKeys);
      }
  
      if account_infos.len() > MAX_CPI_ACCOUNTS {
          return Err(ProgramError::InvalidArgument);
      }
  
      const UNINIT: MaybeUninit<Account> = MaybeUninit::<Account>::uninit();
      let mut accounts = [UNINIT; MAX_CPI_ACCOUNTS];
      let mut len = 0;
  
      for (account_info, account_meta) in account_infos.iter().zip(instruction.accounts.iter()) {
          if account_info.key() != account_meta.pubkey {
              return Err(ProgramError::InvalidArgument);
          }
  
          let state = if account_meta.is_writable {
              BorrowState::Borrowed
          } else {
              BorrowState::MutablyBorrowed
          };
  
          if account_info.is_borrowed(state) {
              return Err(ProgramError::AccountBorrowFailed);
          }
  
          // SAFETY: The number of accounts has been validated to be less than
          // `MAX_CPI_ACCOUNTS`.
          unsafe {
              accounts
                  .get_unchecked_mut(len)
                  .write(Account::from( *account_info));
          }
  
          len += 1;
      }
      // SAFETY: The accounts have been validated.
      unsafe {
          invoke_signed_unchecked(
              instruction,
              core::slice::from_raw_parts(accounts.as_ptr() as _, len),
              signers_seeds,
          );
      }
  
      Ok(())
  }
  *)
  Definition slice_invoke_signed (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ instruction; account_infos; signers_seeds ] =>
      ltac:(M.monadic
        (let instruction := M.alloc (| instruction |) in
        let account_infos := M.alloc (| account_infos |) in
        let signers_seeds := M.alloc (| signers_seeds |) in
        M.read (|
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]) (|
            ltac:(M.monadic
              (M.alloc (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.lt,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [ Ty.path "pinocchio::instruction::AccountMeta" ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| instruction |) |),
                                                    "pinocchio::instruction::Instruction",
                                                    "accounts"
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                              ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| account_infos |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                        [
                                          Value.StructTuple
                                            "pinocchio::program_error::ProgramError::NotEnoughAccountKeys"
                                            []
                                            []
                                            []
                                        ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.gt,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                              ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| account_infos |) |)
                                            |)
                                          ]
                                        |);
                                        M.read (|
                                          get_constant (|
                                            "pinocchio::cpi::MAX_CPI_ACCOUNTS",
                                            Ty.path "usize"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ]
                                        [
                                          Value.StructTuple
                                            "pinocchio::program_error::ProgramError::InvalidArgument"
                                            []
                                            []
                                            []
                                        ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)
                    |) in
                  let~ accounts :
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 64 ]
                        [
                          Ty.apply
                            (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                            []
                            [ Ty.path "pinocchio::instruction::Account" ]
                        ] :=
                    repeat (|
                      M.read (|
                        get_constant (|
                          "pinocchio::cpi::slice_invoke_signed::UNINIT",
                          Ty.apply
                            (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                            []
                            [ Ty.path "pinocchio::instruction::Account" ]
                        |)
                      |),
                      Value.Integer IntegerKind.Usize 64
                    |) in
                  let~ len : Ty.path "usize" := Value.Integer IntegerKind.Usize 0 in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.use
                        (M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.path "pinocchio::instruction::AccountMeta" ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.path "pinocchio::instruction::AccountMeta" ]
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "pinocchio::instruction::AccountMeta" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                      ],
                                    [],
                                    [],
                                    "zip",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "pinocchio::instruction::AccountMeta" ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                          ],
                                        "iter",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| account_infos |) |)
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "pinocchio::instruction::AccountMeta" ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [ Ty.path "pinocchio::instruction::AccountMeta" ],
                                        "iter",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| instruction |) |),
                                                "pinocchio::instruction::Instruction",
                                                "accounts"
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.read (|
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "pinocchio::account_info::AccountInfo"
                                                            ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.path
                                                            "pinocchio::instruction::AccountMeta"
                                                        ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "pinocchio::account_info::AccountInfo"
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [
                                                        Ty.path
                                                          "pinocchio::instruction::AccountMeta"
                                                      ]
                                                  ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                let account_info := M.copy (| γ1_0 |) in
                                                let account_meta := M.copy (| γ1_1 |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.read (|
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_trait_method (|
                                                                      "core::cmp::PartialEq",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                32
                                                                            ]
                                                                            [ Ty.path "u8" ]
                                                                        ],
                                                                      [],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  32
                                                                              ]
                                                                              [ Ty.path "u8" ]
                                                                          ]
                                                                      ],
                                                                      "ne",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      32
                                                                                  ]
                                                                                  [ Ty.path "u8" ]
                                                                              ],
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "pinocchio::account_info::AccountInfo",
                                                                              "key",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        account_info
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (|
                                                                              account_meta
                                                                            |)
                                                                          |),
                                                                          "pinocchio::instruction::AccountMeta",
                                                                          "pubkey"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    Value.StructTuple
                                                                      "core::result::Result::Err"
                                                                      []
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ]
                                                                      [
                                                                        Value.StructTuple
                                                                          "pinocchio::program_error::ProgramError::InvalidArgument"
                                                                          []
                                                                          []
                                                                          []
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |)
                                                  |) in
                                                let~ state :
                                                    Ty.path
                                                      "pinocchio::account_info::BorrowState" :=
                                                  M.read (|
                                                    M.match_operator (|
                                                      Ty.path
                                                        "pinocchio::account_info::BorrowState",
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.SubPointer.get_struct_record_field (|
                                                                  M.deref (|
                                                                    M.read (| account_meta |)
                                                                  |),
                                                                  "pinocchio::instruction::AccountMeta",
                                                                  "is_writable"
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "pinocchio::account_info::BorrowState::Borrowed"
                                                                []
                                                                []
                                                                []
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (|
                                                              Value.StructTuple
                                                                "pinocchio::account_info::BorrowState::MutablyBorrowed"
                                                                []
                                                                []
                                                                []
                                                            |)))
                                                      ]
                                                    |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.read (|
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "pinocchio::account_info::AccountInfo",
                                                                      "is_borrowed",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (|
                                                                                account_info
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.read (| state |)
                                                                    ]
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    Value.StructTuple
                                                                      "core::result::Result::Err"
                                                                      []
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "pinocchio::program_error::ProgramError"
                                                                      ]
                                                                      [
                                                                        Value.StructTuple
                                                                          "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                                                                          []
                                                                          []
                                                                          []
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.read (|
                                                    let~ _ :
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.path
                                                              "pinocchio::instruction::Account"
                                                          ] :=
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.path
                                                              "pinocchio::instruction::Account"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::mem::maybe_uninit::MaybeUninit")
                                                            []
                                                            [
                                                              Ty.path
                                                                "pinocchio::instruction::Account"
                                                            ],
                                                          "write",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&mut")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "pinocchio::instruction::Account"
                                                                      ]
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::mem::maybe_uninit::MaybeUninit")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "pinocchio::instruction::Account"
                                                                        ]
                                                                    ],
                                                                  "get_unchecked_mut",
                                                                  [],
                                                                  [ Ty.path "usize" ]
                                                                |),
                                                                [
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      accounts
                                                                    |));
                                                                  M.read (| len |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.call_closure (|
                                                            Ty.path
                                                              "pinocchio::instruction::Account",
                                                            M.get_trait_method (|
                                                              "core::convert::From",
                                                              Ty.path
                                                                "pinocchio::instruction::Account",
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "pinocchio::account_info::AccountInfo"
                                                                  ]
                                                              ],
                                                              "from",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.deref (|
                                                                  M.read (| account_info |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  let β := len in
                                                  M.write (|
                                                    β,
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [
                                                        M.read (| β |);
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |))
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_function (| "pinocchio::cpi::invoke_signed_unchecked", [], [] |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [ Ty.path "pinocchio::instruction::Account" ]
                                    ],
                                  M.get_function (|
                                    "core::slice::raw::from_raw_parts",
                                    [],
                                    [ Ty.path "pinocchio::instruction::Account" ]
                                  |),
                                  [
                                    M.cast
                                      (Ty.apply
                                        (Ty.path "*const")
                                        []
                                        [ Ty.path "pinocchio::instruction::Account" ])
                                      (M.call_closure (|
                                        Ty.apply
                                          (Ty.path "*const")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                              []
                                              [ Ty.path "pinocchio::instruction::Account" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                                []
                                                [ Ty.path "pinocchio::instruction::Account" ]
                                            ],
                                          "as_ptr",
                                          [],
                                          []
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.borrow (| Pointer.Kind.Ref, accounts |))
                                        ]
                                      |));
                                    M.read (| len |)
                                  ]
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| signers_seeds |) |)
                            |)
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
                      [ Value.Tuple [] ]
                  |)
                |)
              |)))
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_slice_invoke_signed :
    M.IsFunction.C "pinocchio::cpi::slice_invoke_signed" slice_invoke_signed.
  Admitted.
  Global Typeclasses Opaque slice_invoke_signed.
  
  Module slice_invoke_signed.
    Definition value_UNINIT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          M.call_closure (|
            Ty.apply
              (Ty.path "core::mem::maybe_uninit::MaybeUninit")
              []
              [ Ty.path "pinocchio::instruction::Account" ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                []
                [ Ty.path "pinocchio::instruction::Account" ],
              "uninit",
              [],
              []
            |),
            []
          |)
        |))).
    
    Global Instance Instance_IsConstant_value_UNINIT :
      M.IsFunction.C "pinocchio::cpi::slice_invoke_signed::UNINIT" value_UNINIT.
    Admitted.
    Global Typeclasses Opaque value_UNINIT.
  End slice_invoke_signed.
  
  (*
  pub unsafe fn invoke_unchecked(instruction: &Instruction, accounts: &[Account]) {
      invoke_signed_unchecked(instruction, accounts, &[])
  }
  *)
  Definition invoke_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ instruction; accounts ] =>
      ltac:(M.monadic
        (let instruction := M.alloc (| instruction |) in
        let accounts := M.alloc (| accounts |) in
        M.call_closure (|
          Ty.tuple [],
          M.get_function (| "pinocchio::cpi::invoke_signed_unchecked", [], [] |),
          [
            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| accounts |) |) |);
            (* Unsize *)
            M.pointer_coercion
              (M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| M.borrow (| Pointer.Kind.Ref, M.alloc (| Value.Array [] |) |) |)
              |))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_invoke_unchecked :
    M.IsFunction.C "pinocchio::cpi::invoke_unchecked" invoke_unchecked.
  Admitted.
  Global Typeclasses Opaque invoke_unchecked.
  
  (*
  pub unsafe fn invoke_signed_unchecked(
      instruction: &Instruction,
      accounts: &[Account],
      signers_seeds: &[Signer],
  ) {
      #[cfg(target_os = "solana")]
      {
          use crate::instruction::AccountMeta;
  
          /// An `Instruction` as expected by `sol_invoke_signed_c`.
          ///
          /// DO NOT EXPOSE THIS STRUCT:
          ///
          /// To ensure pointers are valid upon use, the scope of this struct should
          /// only be limited to the stack where sol_invoke_signed_c happens and then
          /// discarded immediately after.
          #[repr(C)]
          struct CInstruction<'a> {
              /// Public key of the program.
              program_id: *const Pubkey,
  
              /// Accounts expected by the program instruction.
              accounts: *const AccountMeta<'a>,
  
              /// Number of accounts expected by the program instruction.
              accounts_len: u64,
  
              /// Data expected by the program instruction.
              data: *const u8,
  
              /// Length of the data expected by the program instruction.
              data_len: u64,
          }
  
          let cpi_instruction = CInstruction {
              program_id: instruction.program_id,
              accounts: instruction.accounts.as_ptr(),
              accounts_len: instruction.accounts.len() as u64,
              data: instruction.data.as_ptr(),
              data_len: instruction.data.len() as u64,
          };
  
          unsafe {
              crate::syscalls::sol_invoke_signed_c(
                  &cpi_instruction as *const _ as *const u8,
                  accounts as *const _ as *const u8,
                  accounts.len() as u64,
                  signers_seeds as *const _ as *const u8,
                  signers_seeds.len() as u64,
              )
          };
      }
  
      #[cfg(not(target_os = "solana"))]
      core::hint::black_box((instruction, accounts, signers_seeds));
  }
  *)
  Definition invoke_signed_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ instruction; accounts; signers_seeds ] =>
      ltac:(M.monadic
        (let instruction := M.alloc (| instruction |) in
        let accounts := M.alloc (| accounts |) in
        let signers_seeds := M.alloc (| signers_seeds |) in
        M.read (|
          let~ _ :
              Ty.tuple
                [
                  Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::instruction::Instruction" ];
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Account" ] ];
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Signer" ] ]
                ] :=
            M.call_closure (|
              Ty.tuple
                [
                  Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::instruction::Instruction" ];
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Account" ] ];
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Signer" ] ]
                ],
              M.get_function (|
                "core::hint::black_box",
                [],
                [
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::instruction::Instruction" ];
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.path "pinocchio::instruction::Account" ]
                        ];
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Signer" ]
                        ]
                    ]
                ]
              |),
              [
                Value.Tuple
                  [ M.read (| instruction |); M.read (| accounts |); M.read (| signers_seeds |) ]
              ]
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_invoke_signed_unchecked :
    M.IsFunction.C "pinocchio::cpi::invoke_signed_unchecked" invoke_signed_unchecked.
  Admitted.
  Global Typeclasses Opaque invoke_signed_unchecked.
  
  Definition value_MAX_RETURN_DATA (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 1024 |))).
  
  Global Instance Instance_IsConstant_value_MAX_RETURN_DATA :
    M.IsFunction.C "pinocchio::cpi::MAX_RETURN_DATA" value_MAX_RETURN_DATA.
  Admitted.
  Global Typeclasses Opaque value_MAX_RETURN_DATA.
  
  (*
  pub fn set_return_data(data: &[u8]) {
      #[cfg(target_os = "solana")]
      unsafe {
          crate::syscalls::sol_set_return_data(data.as_ptr(), data.len() as u64)
      };
  
      #[cfg(not(target_os = "solana"))]
      core::hint::black_box(data);
  }
  *)
  Definition set_return_data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ data ] =>
      ltac:(M.monadic
        (let data := M.alloc (| data |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
            M.call_closure (|
              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
              M.get_function (|
                "core::hint::black_box",
                [],
                [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
              |),
              [ M.read (| data |) ]
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_set_return_data :
    M.IsFunction.C "pinocchio::cpi::set_return_data" set_return_data.
  Admitted.
  Global Typeclasses Opaque set_return_data.
  
  (*
  pub fn get_return_data() -> Option<ReturnData> {
      #[cfg(target_os = "solana")]
      {
          const UNINIT_BYTE: core::mem::MaybeUninit<u8> = core::mem::MaybeUninit::<u8>::uninit();
          let mut data = [UNINIT_BYTE; MAX_RETURN_DATA];
          let mut program_id = MaybeUninit::<Pubkey>::uninit();
  
          let size = unsafe {
              crate::syscalls::sol_get_return_data(
                  data.as_mut_ptr() as *mut u8,
                  data.len() as u64,
                  program_id.as_mut_ptr() as *mut Pubkey,
              )
          };
  
          if size == 0 {
              None
          } else {
              Some(ReturnData {
                  program_id: unsafe { program_id.assume_init() },
                  data,
                  size: core::cmp::min(size as usize, MAX_RETURN_DATA),
              })
          }
      }
  
      #[cfg(not(target_os = "solana"))]
      core::hint::black_box(None)
  }
  *)
  Definition get_return_data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [] =>
      ltac:(M.monadic
        (M.call_closure (|
          Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "pinocchio::cpi::ReturnData" ],
          M.get_function (|
            "core::hint::black_box",
            [],
            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "pinocchio::cpi::ReturnData" ]
            ]
          |),
          [
            Value.StructTuple
              "core::option::Option::None"
              []
              [ Ty.path "pinocchio::cpi::ReturnData" ]
              []
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_get_return_data :
    M.IsFunction.C "pinocchio::cpi::get_return_data" get_return_data.
  Admitted.
  Global Typeclasses Opaque get_return_data.
  
  (* StructRecord
    {
      name := "ReturnData";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("program_id",
            Ty.apply
              (Ty.path "array")
              [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
              [ Ty.path "u8" ]);
          ("data",
            Ty.apply
              (Ty.path "array")
              [ M.unevaluated_const (mk_str (| "pinocchio_cpi_ReturnData_data_discriminant" |)) ]
              [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ Ty.path "u8" ] ]);
          ("size", Ty.path "usize")
        ];
    } *)
  
  Module Impl_pinocchio_cpi_ReturnData.
    Definition Self : Ty.t := Ty.path "pinocchio::cpi::ReturnData".
    
    (*
        pub fn program_id(&self) -> &Pubkey {
            &self.program_id
        }
    *)
    Definition program_id (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "pinocchio::cpi::ReturnData",
                  "program_id"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_program_id :
      M.IsAssociatedFunction.C Self "program_id" program_id.
    Admitted.
    Global Typeclasses Opaque program_id.
    
    (*
        pub fn as_slice(&self) -> &[u8] {
            unsafe { core::slice::from_raw_parts(self.data.as_ptr() as _, self.size) }
        }
    *)
    Definition as_slice (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.get_function (| "core::slice::raw::from_raw_parts", [], [ Ty.path "u8" ] |),
                [
                  M.cast
                    (Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ])
                    (M.call_closure (|
                      Ty.apply
                        (Ty.path "*const")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                            []
                            [ Ty.path "u8" ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                              []
                              [ Ty.path "u8" ]
                          ],
                        "as_ptr",
                        [],
                        []
                      |),
                      [
                        (* Unsize *)
                        M.pointer_coercion
                          (M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "pinocchio::cpi::ReturnData",
                              "data"
                            |)
                          |))
                      ]
                    |));
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "pinocchio::cpi::ReturnData",
                      "size"
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_slice : M.IsAssociatedFunction.C Self "as_slice" as_slice.
    Admitted.
    Global Typeclasses Opaque as_slice.
  End Impl_pinocchio_cpi_ReturnData.
  
  Module Impl_core_ops_deref_Deref_for_pinocchio_cpi_ReturnData.
    Definition Self : Ty.t := Ty.path "pinocchio::cpi::ReturnData".
    
    (*     type Target = [u8]; *)
    Definition _Target : Ty.t := Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ].
    
    (*
        fn deref(&self) -> &Self::Target {
            self.as_slice()
        }
    *)
    Definition deref (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.get_associated_function (|
                  Ty.path "pinocchio::cpi::ReturnData",
                  "as_slice",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::deref::Deref"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("Target", InstanceField.Ty _Target); ("deref", InstanceField.Method deref) ].
  End Impl_core_ops_deref_Deref_for_pinocchio_cpi_ReturnData.
End cpi.
