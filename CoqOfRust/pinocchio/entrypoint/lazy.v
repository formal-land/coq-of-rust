(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module entrypoint.
  Module lazy.
    (* StructRecord
      {
        name := "InstructionContext";
        const_params := [];
        ty_params := [];
        fields :=
          [ ("buffer", Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ]); ("remaining", Ty.path "u64")
          ];
      } *)
    
    Module Impl_pinocchio_entrypoint_lazy_InstructionContext.
      Definition Self : Ty.t := Ty.path "pinocchio::entrypoint::lazy::InstructionContext".
      
      (*
          pub fn new(input: *mut u8) -> Self {
              unsafe { Self::new_unchecked(input) }
          }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ input ] =>
          ltac:(M.monadic
            (let input := M.alloc (| Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ], input |) in
            M.call_closure (|
              Ty.path "pinocchio::entrypoint::lazy::InstructionContext",
              M.get_associated_function (|
                Ty.path "pinocchio::entrypoint::lazy::InstructionContext",
                "new_unchecked",
                [],
                []
              |),
              [ M.read (| input |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub unsafe fn new_unchecked(input: *mut u8) -> Self {
              Self {
                  // SAFETY: The first 8 bytes of the input buffer represent the
                  // number of accounts when serialized by the SVM loader, which is read
                  // when the context is created.
                  buffer: unsafe { input.add(core::mem::size_of::<u64>()) },
                  // SAFETY: Read the number of accounts from the input buffer serialized
                  // by the SVM loader.
                  remaining: unsafe { *(input as *const u64) },
              }
          }
      *)
      Definition new_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ input ] =>
          ltac:(M.monadic
            (let input := M.alloc (| Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ], input |) in
            Value.mkStructRecord
              "pinocchio::entrypoint::lazy::InstructionContext"
              []
              []
              [
                ("buffer",
                  M.call_closure (|
                    Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                      "add",
                      [],
                      []
                    |),
                    [
                      M.read (| input |);
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_function (| "core::mem::size_of", [], [ Ty.path "u64" ] |),
                        []
                      |)
                    ]
                  |));
                ("remaining",
                  M.read (|
                    M.deref (|
                      M.cast (Ty.apply (Ty.path "*const") [] [ Ty.path "u64" ]) (M.read (| input |))
                    |)
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_unchecked :
        M.IsAssociatedFunction.C Self "new_unchecked" new_unchecked.
      Admitted.
      Global Typeclasses Opaque new_unchecked.
      
      (*
          pub fn next_account(&mut self) -> Result<MaybeAccount, ProgramError> {
              self.remaining = self
                  .remaining
                  .checked_sub(1)
                  .ok_or(ProgramError::NotEnoughAccountKeys)?;
      
              Ok(unsafe { self.read_account() })
          }
      *)
      Definition next_account (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "pinocchio::entrypoint::lazy::InstructionContext" ],
                self
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "pinocchio::entrypoint::lazy::MaybeAccount";
                  Ty.path "pinocchio::program_error::ProgramError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.write (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::entrypoint::lazy::InstructionContext",
                        "remaining"
                      |),
                      M.match_operator (|
                        Ty.path "u64",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "pinocchio::program_error::ProgramError"
                                ];
                              Ty.path "u64"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "pinocchio::program_error::ProgramError"
                                  ];
                                Ty.path "u64"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [ Ty.path "u64"; Ty.path "pinocchio::program_error::ProgramError" ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "u64"; Ty.path "pinocchio::program_error::ProgramError"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                                  "ok_or",
                                  [],
                                  [ Ty.path "pinocchio::program_error::ProgramError" ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                                    M.get_associated_function (|
                                      Ty.path "u64",
                                      "checked_sub",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "pinocchio::entrypoint::lazy::InstructionContext",
                                          "remaining"
                                        |)
                                      |);
                                      Value.Integer IntegerKind.U64 1
                                    ]
                                  |);
                                  Value.StructTuple
                                    "pinocchio::program_error::ProgramError::NotEnoughAccountKeys"
                                    []
                                    []
                                    []
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "pinocchio::entrypoint::lazy::MaybeAccount";
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "pinocchio::entrypoint::lazy::MaybeAccount";
                                            Ty.path "pinocchio::program_error::ProgramError"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.path "u64", γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.path "pinocchio::entrypoint::lazy::MaybeAccount";
                        Ty.path "pinocchio::program_error::ProgramError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.path "pinocchio::entrypoint::lazy::MaybeAccount";
                        Ty.path "pinocchio::program_error::ProgramError"
                      ]
                      [
                        M.call_closure (|
                          Ty.path "pinocchio::entrypoint::lazy::MaybeAccount",
                          M.get_associated_function (|
                            Ty.path "pinocchio::entrypoint::lazy::InstructionContext",
                            "read_account",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_next_account :
        M.IsAssociatedFunction.C Self "next_account" next_account.
      Admitted.
      Global Typeclasses Opaque next_account.
      
      (*
          pub unsafe fn next_account_unchecked(&mut self) -> MaybeAccount {
              self.read_account()
          }
      *)
      Definition next_account_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "pinocchio::entrypoint::lazy::InstructionContext" ],
                self
              |) in
            M.call_closure (|
              Ty.path "pinocchio::entrypoint::lazy::MaybeAccount",
              M.get_associated_function (|
                Ty.path "pinocchio::entrypoint::lazy::InstructionContext",
                "read_account",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_next_account_unchecked :
        M.IsAssociatedFunction.C Self "next_account_unchecked" next_account_unchecked.
      Admitted.
      Global Typeclasses Opaque next_account_unchecked.
      
      (*
          pub fn remaining(&self) -> u64 {
              self.remaining
          }
      *)
      Definition remaining (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::entrypoint::lazy::InstructionContext" ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "pinocchio::entrypoint::lazy::InstructionContext",
                "remaining"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_remaining :
        M.IsAssociatedFunction.C Self "remaining" remaining.
      Admitted.
      Global Typeclasses Opaque remaining.
      
      (*
          pub fn instruction_data(&self) -> Result<&[u8], ProgramError> {
              if self.remaining > 0 {
                  return Err(ProgramError::InvalidInstructionData);
              }
      
              Ok(unsafe { self.instruction_data_unchecked() })
          }
      *)
      Definition instruction_data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::entrypoint::lazy::InstructionContext" ],
                self
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                  Ty.path "pinocchio::program_error::ProgramError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.gt,
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "pinocchio::entrypoint::lazy::InstructionContext",
                                          "remaining"
                                        |)
                                      |);
                                      Value.Integer IntegerKind.U64 0
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ]
                                    [
                                      Value.StructTuple
                                        "pinocchio::program_error::ProgramError::InvalidInstructionData"
                                        []
                                        []
                                        []
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ]
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_associated_function (|
                                Ty.path "pinocchio::entrypoint::lazy::InstructionContext",
                                "instruction_data_unchecked",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_instruction_data :
        M.IsAssociatedFunction.C Self "instruction_data" instruction_data.
      Admitted.
      Global Typeclasses Opaque instruction_data.
      
      (*
          pub unsafe fn instruction_data_unchecked(&self) -> &[u8] {
              let data_len = *(self.buffer as *const usize);
              // shadowing the input to avoid leaving it in an inconsistent position
              let data = self.buffer.add(core::mem::size_of::<u64>());
              core::slice::from_raw_parts(data, data_len)
          }
      *)
      Definition instruction_data_unchecked
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::entrypoint::lazy::InstructionContext" ],
                self
              |) in
            M.read (|
              let~ data_len : Ty.path "usize" :=
                M.read (|
                  M.deref (|
                    M.cast
                      (Ty.apply (Ty.path "*const") [] [ Ty.path "usize" ])
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "pinocchio::entrypoint::lazy::InstructionContext",
                          "buffer"
                        |)
                      |))
                  |)
                |) in
              let~ data : Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::entrypoint::lazy::InstructionContext",
                        "buffer"
                      |)
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_function (| "core::mem::size_of", [], [ Ty.path "u64" ] |),
                      []
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                      M.get_function (| "core::slice::raw::from_raw_parts", [], [ Ty.path "u8" ] |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                          M.pointer_coercion
                            M.PointerCoercion.MutToConstPointer
                            (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                            (Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ]),
                          [ M.read (| data |) ]
                        |);
                        M.read (| data_len |)
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_instruction_data_unchecked :
        M.IsAssociatedFunction.C Self "instruction_data_unchecked" instruction_data_unchecked.
      Admitted.
      Global Typeclasses Opaque instruction_data_unchecked.
      
      (*
          pub fn program_id(&self) -> Result<&Pubkey, ProgramError> {
              if self.remaining > 0 {
                  return Err(ProgramError::InvalidInstructionData);
              }
      
              Ok(unsafe { self.program_id_unchecked() })
          }
      *)
      Definition program_id (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::entrypoint::lazy::InstructionContext" ],
                self
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |))
                        ]
                        [ Ty.path "u8" ]
                    ];
                  Ty.path "pinocchio::program_error::ProgramError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.gt,
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "pinocchio::entrypoint::lazy::InstructionContext",
                                          "remaining"
                                        |)
                                      |);
                                      Value.Integer IntegerKind.U64 0
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 32 ]
                                            [ Ty.path "u8" ]
                                        ];
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ]
                                    [
                                      Value.StructTuple
                                        "pinocchio::program_error::ProgramError::InvalidInstructionData"
                                        []
                                        []
                                        []
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8" ]
                          ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8" ]
                          ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ]
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8" ]
                                ],
                              M.get_associated_function (|
                                Ty.path "pinocchio::entrypoint::lazy::InstructionContext",
                                "program_id_unchecked",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_program_id :
        M.IsAssociatedFunction.C Self "program_id" program_id.
      Admitted.
      Global Typeclasses Opaque program_id.
      
      (*
          pub unsafe fn program_id_unchecked(&self) -> &Pubkey {
              let data_len = *(self.buffer as *const usize);
              &*(self.buffer.add(core::mem::size_of::<u64>() + data_len) as *const Pubkey)
          }
      *)
      Definition program_id_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::entrypoint::lazy::InstructionContext" ],
                self
              |) in
            M.read (|
              let~ data_len : Ty.path "usize" :=
                M.read (|
                  M.deref (|
                    M.cast
                      (Ty.apply (Ty.path "*const") [] [ Ty.path "usize" ])
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "pinocchio::entrypoint::lazy::InstructionContext",
                          "buffer"
                        |)
                      |))
                  |)
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ]
                  ],
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.cast
                          (Ty.apply
                            (Ty.path "*const")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ Ty.path "u8" ]
                            ])
                          (M.call_closure (|
                            Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "pinocchio::entrypoint::lazy::InstructionContext",
                                  "buffer"
                                |)
                              |);
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.add,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_function (|
                                      "core::mem::size_of",
                                      [],
                                      [ Ty.path "u64" ]
                                    |),
                                    []
                                  |);
                                  M.read (| data_len |)
                                ]
                              |)
                            ]
                          |))
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_program_id_unchecked :
        M.IsAssociatedFunction.C Self "program_id_unchecked" program_id_unchecked.
      Admitted.
      Global Typeclasses Opaque program_id_unchecked.
      
      (*
          unsafe fn read_account(&mut self) -> MaybeAccount {
              let account: *mut Account = self.buffer as *mut Account;
              // Adds an 8-bytes offset for:
              //   - rent epoch in case of a non-duplicate account
              //   - duplicate marker + 7 bytes of padding in case of a duplicate account
              self.buffer = self.buffer.add(core::mem::size_of::<u64>());
      
              if ( *account).borrow_state == NON_DUP_MARKER {
                  self.buffer = self.buffer.add(STATIC_ACCOUNT_DATA);
                  self.buffer = self.buffer.add(( *account).data_len as usize);
                  self.buffer = self.buffer.add(self.buffer.align_offset(BPF_ALIGN_OF_U128));
      
                  MaybeAccount::Account(AccountInfo { raw: account })
              } else {
                  // The caller will handle the mapping to the original account.
                  MaybeAccount::Duplicated(( *account).borrow_state)
              }
          }
      *)
      Definition read_account (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "pinocchio::entrypoint::lazy::InstructionContext" ],
                self
              |) in
            M.read (|
              let~ account :
                  Ty.apply (Ty.path "*mut") [] [ Ty.path "pinocchio::account_info::Account" ] :=
                M.cast
                  (Ty.apply (Ty.path "*mut") [] [ Ty.path "pinocchio::account_info::Account" ])
                  (M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "pinocchio::entrypoint::lazy::InstructionContext",
                      "buffer"
                    |)
                  |)) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "pinocchio::entrypoint::lazy::InstructionContext",
                    "buffer"
                  |),
                  M.call_closure (|
                    Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                      "add",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "pinocchio::entrypoint::lazy::InstructionContext",
                          "buffer"
                        |)
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_function (| "core::mem::size_of", [], [ Ty.path "u64" ] |),
                        []
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                Ty.path "pinocchio::entrypoint::lazy::MaybeAccount",
                M.match_operator (|
                  Ty.path "pinocchio::entrypoint::lazy::MaybeAccount",
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.eq,
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| account |) |),
                                      "pinocchio::account_info::Account",
                                      "borrow_state"
                                    |)
                                  |);
                                  M.read (|
                                    get_constant (| "pinocchio::NON_DUP_MARKER", Ty.path "u8" |)
                                  |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::entrypoint::lazy::InstructionContext",
                                "buffer"
                              |),
                              M.call_closure (|
                                Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                  "add",
                                  [],
                                  []
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "pinocchio::entrypoint::lazy::InstructionContext",
                                      "buffer"
                                    |)
                                  |);
                                  M.read (|
                                    get_constant (|
                                      "pinocchio::entrypoint::STATIC_ACCOUNT_DATA",
                                      Ty.path "usize"
                                    |)
                                  |)
                                ]
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::entrypoint::lazy::InstructionContext",
                                "buffer"
                              |),
                              M.call_closure (|
                                Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                  "add",
                                  [],
                                  []
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "pinocchio::entrypoint::lazy::InstructionContext",
                                      "buffer"
                                    |)
                                  |);
                                  M.cast
                                    (Ty.path "usize")
                                    (M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| account |) |),
                                        "pinocchio::account_info::Account",
                                        "data_len"
                                      |)
                                    |))
                                ]
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::entrypoint::lazy::InstructionContext",
                                "buffer"
                              |),
                              M.call_closure (|
                                Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                  "add",
                                  [],
                                  []
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "pinocchio::entrypoint::lazy::InstructionContext",
                                      "buffer"
                                    |)
                                  |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                      "align_offset",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "pinocchio::entrypoint::lazy::InstructionContext",
                                          "buffer"
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "pinocchio::BPF_ALIGN_OF_U128",
                                          Ty.path "usize"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (|
                            Ty.path "pinocchio::entrypoint::lazy::MaybeAccount",
                            Value.StructTuple
                              "pinocchio::entrypoint::lazy::MaybeAccount::Account"
                              []
                              []
                              [
                                Value.mkStructRecord
                                  "pinocchio::account_info::AccountInfo"
                                  []
                                  []
                                  [ ("raw", M.read (| account |)) ]
                              ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (Value.StructTuple
                          "pinocchio::entrypoint::lazy::MaybeAccount::Duplicated"
                          []
                          []
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| account |) |),
                                "pinocchio::account_info::Account",
                                "borrow_state"
                              |)
                            |)
                          ]))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_read_account :
        M.IsAssociatedFunction.C Self "read_account" read_account.
      Admitted.
      Global Typeclasses Opaque read_account.
    End Impl_pinocchio_entrypoint_lazy_InstructionContext.
    
    (*
    Enum MaybeAccount
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "Account";
            item := StructTuple [ Ty.path "pinocchio::account_info::AccountInfo" ];
          };
          {
            name := "Duplicated";
            item := StructTuple [ Ty.path "u8" ];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_MaybeAccount_Account :
      M.IsDiscriminant "pinocchio::entrypoint::lazy::MaybeAccount::Account" 0.
    Axiom IsDiscriminant_MaybeAccount_Duplicated :
      M.IsDiscriminant "pinocchio::entrypoint::lazy::MaybeAccount::Duplicated" 1.
    
    Module Impl_pinocchio_entrypoint_lazy_MaybeAccount.
      Definition Self : Ty.t := Ty.path "pinocchio::entrypoint::lazy::MaybeAccount".
      
      (*
          pub fn assume_account(self) -> AccountInfo {
              let MaybeAccount::Account(account) = self else {
                  panic!("Duplicated account")
              };
              account
          }
      *)
      Definition assume_account (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| Ty.path "pinocchio::entrypoint::lazy::MaybeAccount", self |) in
            M.match_operator (|
              Ty.path "pinocchio::account_info::AccountInfo",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "pinocchio::entrypoint::lazy::MaybeAccount::Account",
                        0
                      |) in
                    let account :=
                      M.copy (| Ty.path "pinocchio::account_info::AccountInfo", γ0_0 |) in
                    M.read (| account |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_assume_account :
        M.IsAssociatedFunction.C Self "assume_account" assume_account.
      Admitted.
      Global Typeclasses Opaque assume_account.
    End Impl_pinocchio_entrypoint_lazy_MaybeAccount.
  End lazy.
End entrypoint.
