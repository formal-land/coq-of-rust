(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module entrypoint.
  Definition value_HEAP_START_ADDRESS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 12884901888 |))).
  
  Global Instance Instance_IsConstant_value_HEAP_START_ADDRESS :
    M.IsFunction.C "pinocchio::entrypoint::HEAP_START_ADDRESS" value_HEAP_START_ADDRESS.
  Admitted.
  Global Typeclasses Opaque value_HEAP_START_ADDRESS.
  
  Definition value_HEAP_LENGTH (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "usize",
        M.call_closure (|
          Ty.path "usize",
          BinOp.Wrap.mul,
          [ Value.Integer IntegerKind.Usize 32; Value.Integer IntegerKind.Usize 1024 ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_HEAP_LENGTH :
    M.IsFunction.C "pinocchio::entrypoint::HEAP_LENGTH" value_HEAP_LENGTH.
  Admitted.
  Global Typeclasses Opaque value_HEAP_LENGTH.
  
  Axiom ProgramResult :
    (Ty.path "pinocchio::entrypoint::ProgramResult") =
      (Ty.apply
        (Ty.path "core::result::Result")
        []
        [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]).
  
  Definition value_SUCCESS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (get_constant (| "pinocchio::SUCCESS", Ty.path "u64" |))).
  
  Global Instance Instance_IsConstant_value_SUCCESS :
    M.IsFunction.C "pinocchio::entrypoint::SUCCESS" value_SUCCESS.
  Admitted.
  Global Typeclasses Opaque value_SUCCESS.
  
  Definition value_STATIC_ACCOUNT_DATA (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "usize",
        M.call_closure (|
          Ty.path "usize",
          BinOp.Wrap.add,
          [
            M.call_closure (|
              Ty.path "usize",
              M.get_function (|
                "core::mem::size_of",
                [],
                [ Ty.path "pinocchio::account_info::Account" ]
              |),
              []
            |);
            M.read (|
              get_constant (|
                "pinocchio::account_info::MAX_PERMITTED_DATA_INCREASE",
                Ty.path "usize"
              |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_STATIC_ACCOUNT_DATA :
    M.IsFunction.C "pinocchio::entrypoint::STATIC_ACCOUNT_DATA" value_STATIC_ACCOUNT_DATA.
  Admitted.
  Global Typeclasses Opaque value_STATIC_ACCOUNT_DATA.
  
  (*
  pub unsafe fn deserialize<'a, const MAX_ACCOUNTS: usize>(
      mut input: *mut u8,
      accounts: &mut [core::mem::MaybeUninit<AccountInfo>; MAX_ACCOUNTS],
  ) -> (&'a Pubkey, usize, &'a [u8]) {
      // Total number of accounts present in the input buffer.
      let mut processed = *(input as *const u64) as usize;
      input = input.add(core::mem::size_of::<u64>());
  
      if processed > 0 {
          let total_accounts = processed;
          // Number of accounts to process (limited to MAX_ACCOUNTS).
          processed = core::cmp::min(total_accounts, MAX_ACCOUNTS);
  
          for i in 0..processed {
              let account_info: *mut Account = input as *mut Account;
              // Adds an 8-bytes offset for:
              //   - rent epoch in case of a non-duplicated account
              //   - duplicated marker + 7 bytes of padding in case of a duplicated account
              input = input.add(core::mem::size_of::<u64>());
  
              let account = if ( *account_info).borrow_state == NON_DUP_MARKER {
                  // Unique account: create a new `AccountInfo` to represent the account.
                  input = input.add(STATIC_ACCOUNT_DATA);
                  input = input.add(( *account_info).data_len as usize);
                  input = input.add(input.align_offset(BPF_ALIGN_OF_U128));
  
                  AccountInfo { raw: account_info }
              } else {
                  // Duplicated account: clone the original pointer using `borrow_state` since
                  // it represents the index of the duplicated account passed by the runtime.
                  accounts
                      .get_unchecked(( *account_info).borrow_state as usize)
                      .assume_init_ref()
                      .clone()
              };
  
              accounts.get_unchecked_mut(i).write(account);
          }
  
          // Process any remaining accounts to move the offset to the instruction
          // data (there is a duplication of logic but we avoid testing whether we
          // have space for the account or not).
          for _ in processed..total_accounts {
              let account_info: *mut Account = input as *mut Account;
              // Adds an 8-bytes offset for:
              //   - rent epoch in case of a non-duplicate account
              //   - duplicate marker + 7 bytes of padding in case of a duplicate account
              input = input.add(core::mem::size_of::<u64>());
  
              if ( *account_info).borrow_state == NON_DUP_MARKER {
                  input = input.add(STATIC_ACCOUNT_DATA);
                  input = input.add(( *account_info).data_len as usize);
                  input = input.add(input.align_offset(BPF_ALIGN_OF_U128));
              }
          }
      }
  
      // instruction data
      let instruction_data_len = *(input as *const u64) as usize;
      input = input.add(core::mem::size_of::<u64>());
  
      let instruction_data = { core::slice::from_raw_parts(input, instruction_data_len) };
      input = input.add(instruction_data_len);
  
      // program id
      let program_id: &Pubkey = &*(input as *const Pubkey);
  
      (program_id, processed, instruction_data)
  }
  *)
  Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ MAX_ACCOUNTS ], [], [ input; accounts ] =>
      ltac:(M.monadic
        (let input := M.alloc (| Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ], input |) in
        let accounts :=
          M.alloc (|
            Ty.apply
              (Ty.path "&mut")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ MAX_ACCOUNTS ]
                  [
                    Ty.apply
                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                      []
                      [ Ty.path "pinocchio::account_info::AccountInfo" ]
                  ]
              ],
            accounts
          |) in
        M.read (|
          let~ processed : Ty.path "usize" :=
            M.cast
              (Ty.path "usize")
              (M.read (|
                M.deref (|
                  M.cast (Ty.apply (Ty.path "*const") [] [ Ty.path "u64" ]) (M.read (| input |))
                |)
              |)) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              input,
              M.call_closure (|
                Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                  "add",
                  [],
                  []
                |),
                [
                  M.read (| input |);
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "core::mem::size_of", [], [ Ty.path "u64" ] |),
                    []
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.tuple [] :=
            M.match_operator (|
              Ty.tuple [],
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          Ty.path "bool",
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.gt,
                            [ M.read (| processed |); Value.Integer IntegerKind.Usize 0 ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.read (|
                      let~ total_accounts : Ty.path "usize" := M.read (| processed |) in
                      let~ _ : Ty.tuple [] :=
                        M.write (|
                          processed,
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_function (| "core::cmp::min", [], [ Ty.path "usize" ] |),
                            [ M.read (| total_accounts |); MAX_ACCOUNTS ]
                          |)
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.read (|
                          M.use
                            (M.alloc (|
                              Ty.tuple [],
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "into_iter",
                                      [],
                                      []
                                    |),
                                    [
                                      Value.mkStructRecord
                                        "core::ops::range::Range"
                                        []
                                        [ Ty.path "usize" ]
                                        [
                                          ("start", Value.Integer IntegerKind.Usize 0);
                                          ("end_", M.read (| processed |))
                                        ]
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let iter :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ],
                                          γ
                                        |) in
                                      M.read (|
                                        M.loop (|
                                          Ty.tuple [],
                                          ltac:(M.monadic
                                            (let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "usize" ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::Range")
                                                        []
                                                        [ Ty.path "usize" ],
                                                      [],
                                                      [],
                                                      "next",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.borrow (| Pointer.Kind.MutRef, iter |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.is_struct_tuple (|
                                                          γ,
                                                          "core::option::Option::None"
                                                        |) in
                                                      M.never_to_any (|
                                                        M.read (| M.break (||) |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::option::Option::Some",
                                                          0
                                                        |) in
                                                      let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                                      M.read (|
                                                        let~ account_info :
                                                            Ty.apply
                                                              (Ty.path "*mut")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "pinocchio::account_info::Account"
                                                              ] :=
                                                          M.cast
                                                            (Ty.apply
                                                              (Ty.path "*mut")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "pinocchio::account_info::Account"
                                                              ])
                                                            (M.read (| input |)) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.write (|
                                                            input,
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "*mut")
                                                                []
                                                                [ Ty.path "u8" ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "*mut")
                                                                  []
                                                                  [ Ty.path "u8" ],
                                                                "add",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.read (| input |);
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_function (|
                                                                    "core::mem::size_of",
                                                                    [],
                                                                    [ Ty.path "u64" ]
                                                                  |),
                                                                  []
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        let~ account :
                                                            Ty.path
                                                              "pinocchio::account_info::AccountInfo" :=
                                                          M.match_operator (|
                                                            Ty.path
                                                              "pinocchio::account_info::AccountInfo",
                                                            M.alloc (|
                                                              Ty.tuple [],
                                                              Value.Tuple []
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        Ty.path "bool",
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          BinOp.eq,
                                                                          [
                                                                            M.read (|
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    account_info
                                                                                  |)
                                                                                |),
                                                                                "pinocchio::account_info::Account",
                                                                                "borrow_state"
                                                                              |)
                                                                            |);
                                                                            M.read (|
                                                                              get_constant (|
                                                                                "pinocchio::NON_DUP_MARKER",
                                                                                Ty.path "u8"
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)) in
                                                                  let _ :=
                                                                    is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  M.read (|
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.write (|
                                                                        input,
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "*mut")
                                                                            []
                                                                            [ Ty.path "u8" ],
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "*mut")
                                                                              []
                                                                              [ Ty.path "u8" ],
                                                                            "add",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (| input |);
                                                                            M.read (|
                                                                              get_constant (|
                                                                                "pinocchio::entrypoint::STATIC_ACCOUNT_DATA",
                                                                                Ty.path "usize"
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.write (|
                                                                        input,
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "*mut")
                                                                            []
                                                                            [ Ty.path "u8" ],
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "*mut")
                                                                              []
                                                                              [ Ty.path "u8" ],
                                                                            "add",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (| input |);
                                                                            M.cast
                                                                              (Ty.path "usize")
                                                                              (M.read (|
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      account_info
                                                                                    |)
                                                                                  |),
                                                                                  "pinocchio::account_info::Account",
                                                                                  "data_len"
                                                                                |)
                                                                              |))
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.write (|
                                                                        input,
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "*mut")
                                                                            []
                                                                            [ Ty.path "u8" ],
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "*mut")
                                                                              []
                                                                              [ Ty.path "u8" ],
                                                                            "add",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (| input |);
                                                                            M.call_closure (|
                                                                              Ty.path "usize",
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path "*mut")
                                                                                  []
                                                                                  [ Ty.path "u8" ],
                                                                                "align_offset",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| input |);
                                                                                M.read (|
                                                                                  get_constant (|
                                                                                    "pinocchio::BPF_ALIGN_OF_U128",
                                                                                    Ty.path "usize"
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.path
                                                                        "pinocchio::account_info::AccountInfo",
                                                                      Value.mkStructRecord
                                                                        "pinocchio::account_info::AccountInfo"
                                                                        []
                                                                        []
                                                                        [
                                                                          ("raw",
                                                                            M.read (|
                                                                              account_info
                                                                            |))
                                                                        ]
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.call_closure (|
                                                                    Ty.path
                                                                      "pinocchio::account_info::AccountInfo",
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.path
                                                                        "pinocchio::account_info::AccountInfo",
                                                                      [],
                                                                      [],
                                                                      "clone",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "pinocchio::account_info::AccountInfo"
                                                                              ],
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::mem::maybe_uninit::MaybeUninit")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "pinocchio::account_info::AccountInfo"
                                                                                ],
                                                                              "assume_init_ref",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::mem::maybe_uninit::MaybeUninit")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "pinocchio::account_info::AccountInfo"
                                                                                          ]
                                                                                      ],
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::mem::maybe_uninit::MaybeUninit")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "pinocchio::account_info::AccountInfo"
                                                                                            ]
                                                                                        ],
                                                                                      "get_unchecked",
                                                                                      [],
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ]
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "slice")
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::mem::maybe_uninit::MaybeUninit")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "pinocchio::account_info::AccountInfo"
                                                                                                  ]
                                                                                              ]
                                                                                          ],
                                                                                        M.pointer_coercion
                                                                                          M.PointerCoercion.Unsize
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "array")
                                                                                                [
                                                                                                  MAX_ACCOUNTS
                                                                                                ]
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::mem::maybe_uninit::MaybeUninit")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "pinocchio::account_info::AccountInfo"
                                                                                                    ]
                                                                                                ]
                                                                                            ])
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "slice")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::mem::maybe_uninit::MaybeUninit")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "pinocchio::account_info::AccountInfo"
                                                                                                    ]
                                                                                                ]
                                                                                            ]),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                accounts
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.cast
                                                                                        (Ty.path
                                                                                          "usize")
                                                                                        (M.read (|
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                account_info
                                                                                              |)
                                                                                            |),
                                                                                            "pinocchio::account_info::Account",
                                                                                            "borrow_state"
                                                                                          |)
                                                                                        |))
                                                                                    ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |) in
                                                        let~ _ :
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "pinocchio::account_info::AccountInfo"
                                                              ] :=
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "pinocchio::account_info::AccountInfo"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::mem::maybe_uninit::MaybeUninit")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "pinocchio::account_info::AccountInfo"
                                                                ],
                                                              "write",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::mem::maybe_uninit::MaybeUninit")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "pinocchio::account_info::AccountInfo"
                                                                          ]
                                                                      ],
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::mem::maybe_uninit::MaybeUninit")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "pinocchio::account_info::AccountInfo"
                                                                            ]
                                                                        ],
                                                                      "get_unchecked_mut",
                                                                      [],
                                                                      [ Ty.path "usize" ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::mem::maybe_uninit::MaybeUninit")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "pinocchio::account_info::AccountInfo"
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        M.pointer_coercion
                                                                          M.PointerCoercion.Unsize
                                                                          (Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [ MAX_ACCOUNTS ]
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::mem::maybe_uninit::MaybeUninit")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "pinocchio::account_info::AccountInfo"
                                                                                    ]
                                                                                ]
                                                                            ])
                                                                          (Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::mem::maybe_uninit::MaybeUninit")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "pinocchio::account_info::AccountInfo"
                                                                                    ]
                                                                                ]
                                                                            ]),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.deref (|
                                                                              M.read (| accounts |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.read (| i |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              M.read (| account |)
                                                            ]
                                                          |) in
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                      |)))
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                        |)
                                      |)))
                                ]
                              |)
                            |))
                        |) in
                      M.use
                        (M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              M.call_closure (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [
                                  Value.mkStructRecord
                                    "core::ops::range::Range"
                                    []
                                    [ Ty.path "usize" ]
                                    [
                                      ("start", M.read (| processed |));
                                      ("end_", M.read (| total_accounts |))
                                    ]
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      γ
                                    |) in
                                  M.read (|
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "usize" ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "usize" ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.never_to_any (| M.read (| M.break (||) |) |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  M.read (|
                                                    let~ account_info :
                                                        Ty.apply
                                                          (Ty.path "*mut")
                                                          []
                                                          [
                                                            Ty.path
                                                              "pinocchio::account_info::Account"
                                                          ] :=
                                                      M.cast
                                                        (Ty.apply
                                                          (Ty.path "*mut")
                                                          []
                                                          [
                                                            Ty.path
                                                              "pinocchio::account_info::Account"
                                                          ])
                                                        (M.read (| input |)) in
                                                    let~ _ : Ty.tuple [] :=
                                                      M.write (|
                                                        input,
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "*mut")
                                                            []
                                                            [ Ty.path "u8" ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "*mut")
                                                              []
                                                              [ Ty.path "u8" ],
                                                            "add",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.read (| input |);
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              M.get_function (|
                                                                "core::mem::size_of",
                                                                [],
                                                                [ Ty.path "u64" ]
                                                              |),
                                                              []
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (|
                                                      Ty.tuple [],
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    Ty.path "bool",
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.read (|
                                                                                account_info
                                                                              |)
                                                                            |),
                                                                            "pinocchio::account_info::Account",
                                                                            "borrow_state"
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          get_constant (|
                                                                            "pinocchio::NON_DUP_MARKER",
                                                                            Ty.path "u8"
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.read (|
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.write (|
                                                                    input,
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "*mut")
                                                                        []
                                                                        [ Ty.path "u8" ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "*mut")
                                                                          []
                                                                          [ Ty.path "u8" ],
                                                                        "add",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| input |);
                                                                        M.read (|
                                                                          get_constant (|
                                                                            "pinocchio::entrypoint::STATIC_ACCOUNT_DATA",
                                                                            Ty.path "usize"
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.write (|
                                                                    input,
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "*mut")
                                                                        []
                                                                        [ Ty.path "u8" ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "*mut")
                                                                          []
                                                                          [ Ty.path "u8" ],
                                                                        "add",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| input |);
                                                                        M.cast
                                                                          (Ty.path "usize")
                                                                          (M.read (|
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  account_info
                                                                                |)
                                                                              |),
                                                                              "pinocchio::account_info::Account",
                                                                              "data_len"
                                                                            |)
                                                                          |))
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.write (|
                                                                    input,
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "*mut")
                                                                        []
                                                                        [ Ty.path "u8" ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "*mut")
                                                                          []
                                                                          [ Ty.path "u8" ],
                                                                        "add",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| input |);
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "*mut")
                                                                              []
                                                                              [ Ty.path "u8" ],
                                                                            "align_offset",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (| input |);
                                                                            M.read (|
                                                                              get_constant (|
                                                                                "pinocchio::BPF_ALIGN_OF_U128",
                                                                                Ty.path "usize"
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.alloc (|
                                                                  Ty.tuple [],
                                                                  Value.Tuple []
                                                                |)
                                                              |)));
                                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                                        ]
                                                      |)
                                                    |)
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)))
                            ]
                          |)
                        |))
                    |)));
                fun γ => ltac:(M.monadic (Value.Tuple []))
              ]
            |) in
          let~ instruction_data_len : Ty.path "usize" :=
            M.cast
              (Ty.path "usize")
              (M.read (|
                M.deref (|
                  M.cast (Ty.apply (Ty.path "*const") [] [ Ty.path "u64" ]) (M.read (| input |))
                |)
              |)) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              input,
              M.call_closure (|
                Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                  "add",
                  [],
                  []
                |),
                [
                  M.read (| input |);
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "core::mem::size_of", [], [ Ty.path "u64" ] |),
                    []
                  |)
                ]
              |)
            |) in
          let~ instruction_data :
              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
            M.call_closure (|
              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
              M.get_function (| "core::slice::raw::from_raw_parts", [], [ Ty.path "u8" ] |),
              [
                M.call_closure (|
                  Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                  M.pointer_coercion
                    M.PointerCoercion.MutToConstPointer
                    (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                    (Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ]),
                  [ M.read (| input |) ]
                |);
                M.read (| instruction_data_len |)
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              input,
              M.call_closure (|
                Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                  "add",
                  [],
                  []
                |),
                [ M.read (| input |); M.read (| instruction_data_len |) ]
              |)
            |) in
          let~ program_id :
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
                ] :=
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.cast
                      (Ty.apply
                        (Ty.path "*const")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8" ]
                        ])
                      (M.read (| input |))
                  |)
                |)
              |)
            |) in
          M.alloc (|
            Ty.tuple
              [
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ]
                  ];
                Ty.path "usize";
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
              ],
            Value.Tuple
              [
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| program_id |) |) |);
                M.read (| processed |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction_data |) |) |)
              ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_deserialize :
    M.IsFunction.C "pinocchio::entrypoint::deserialize" deserialize.
  Admitted.
  Global Typeclasses Opaque deserialize.
  
  (*
  pub unsafe fn parse<const ACCOUNTS: usize>(
      mut input: *mut u8,
      accounts: &mut [core::mem::MaybeUninit<AccountInfo>; ACCOUNTS],
  ) -> (&'static Pubkey, usize, &'static [u8]) {
      // Ensure that the number of accounts is equal to `MAX_TX_ACCOUNTS`.
      const {
          assert!(
              ACCOUNTS == crate::MAX_TX_ACCOUNTS,
              "The number of accounts must be equal to MAX_TX_ACCOUNTS"
          );
      }
      // The runtime guarantees that the number of accounts does not exceed
      // `MAX_TX_ACCOUNTS`.
      let processed = *(input as *const u64) as usize;
      input = input.add(core::mem::size_of::<u64>());
  
      for i in 0..processed {
          let account_info: *mut Account = input as *mut Account;
          // Adds an 8-bytes offset for:
          //   - rent epoch in case of a non-duplicated account
          //   - duplicated marker + 7 bytes of padding in case of a duplicated account
          input = input.add(core::mem::size_of::<u64>());
  
          let account = if ( *account_info).borrow_state == NON_DUP_MARKER {
              // Unique account: create a new `AccountInfo` to represent the account.
              input = input.add(STATIC_ACCOUNT_DATA);
              input = input.add(( *account_info).data_len as usize);
              input = input.add(input.align_offset(BPF_ALIGN_OF_U128));
  
              AccountInfo { raw: account_info }
          } else {
              // Duplicated account: clone the original pointer using `borrow_state` since
              // it represents the index of the duplicated account passed by the runtime.
              accounts
                  .get_unchecked(( *account_info).borrow_state as usize)
                  .assume_init_ref()
                  .clone()
          };
  
          accounts.get_unchecked_mut(i).write(account);
      }
  
      // instruction data
      let instruction_data_len = *(input as *const u64) as usize;
      input = input.add(core::mem::size_of::<u64>());
  
      let instruction_data = { core::slice::from_raw_parts(input, instruction_data_len) };
      input = input.add(instruction_data_len);
  
      // program id
      let program_id: &Pubkey = &*(input as *const Pubkey);
  
      (program_id, processed, instruction_data)
  }
  *)
  Definition parse (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ ACCOUNTS ], [], [ input; accounts ] =>
      ltac:(M.monadic
        (let input := M.alloc (| Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ], input |) in
        let accounts :=
          M.alloc (|
            Ty.apply
              (Ty.path "&mut")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ ACCOUNTS ]
                  [
                    Ty.apply
                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                      []
                      [ Ty.path "pinocchio::account_info::AccountInfo" ]
                  ]
              ],
            accounts
          |) in
        M.read (|
          let~ _ : Ty.tuple [] :=
            M.read (|
              get_constant (| "pinocchio::entrypoint::parse_discriminant", Ty.tuple [] |)
            |) in
          let~ processed : Ty.path "usize" :=
            M.cast
              (Ty.path "usize")
              (M.read (|
                M.deref (|
                  M.cast (Ty.apply (Ty.path "*const") [] [ Ty.path "u64" ]) (M.read (| input |))
                |)
              |)) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              input,
              M.call_closure (|
                Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                  "add",
                  [],
                  []
                |),
                [
                  M.read (| input |);
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "core::mem::size_of", [], [ Ty.path "u64" ] |),
                    []
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.call_closure (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          Value.mkStructRecord
                            "core::ops::range::Range"
                            []
                            [ Ty.path "usize" ]
                            [
                              ("start", Value.Integer IntegerKind.Usize 0);
                              ("end_", M.read (| processed |))
                            ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter :=
                            M.copy (|
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              γ
                            |) in
                          M.read (|
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "usize" ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.never_to_any (| M.read (| M.break (||) |) |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                          M.read (|
                                            let~ account_info :
                                                Ty.apply
                                                  (Ty.path "*mut")
                                                  []
                                                  [ Ty.path "pinocchio::account_info::Account" ] :=
                                              M.cast
                                                (Ty.apply
                                                  (Ty.path "*mut")
                                                  []
                                                  [ Ty.path "pinocchio::account_info::Account" ])
                                                (M.read (| input |)) in
                                            let~ _ : Ty.tuple [] :=
                                              M.write (|
                                                input,
                                                M.call_closure (|
                                                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                                                    "add",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (| input |);
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_function (|
                                                        "core::mem::size_of",
                                                        [],
                                                        [ Ty.path "u64" ]
                                                      |),
                                                      []
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ account :
                                                Ty.path "pinocchio::account_info::AccountInfo" :=
                                              M.match_operator (|
                                                Ty.path "pinocchio::account_info::AccountInfo",
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.eq,
                                                              [
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (|
                                                                      M.read (| account_info |)
                                                                    |),
                                                                    "pinocchio::account_info::Account",
                                                                    "borrow_state"
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  get_constant (|
                                                                    "pinocchio::NON_DUP_MARKER",
                                                                    Ty.path "u8"
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.read (|
                                                        let~ _ : Ty.tuple [] :=
                                                          M.write (|
                                                            input,
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "*mut")
                                                                []
                                                                [ Ty.path "u8" ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "*mut")
                                                                  []
                                                                  [ Ty.path "u8" ],
                                                                "add",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.read (| input |);
                                                                M.read (|
                                                                  get_constant (|
                                                                    "pinocchio::entrypoint::STATIC_ACCOUNT_DATA",
                                                                    Ty.path "usize"
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.write (|
                                                            input,
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "*mut")
                                                                []
                                                                [ Ty.path "u8" ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "*mut")
                                                                  []
                                                                  [ Ty.path "u8" ],
                                                                "add",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.read (| input |);
                                                                M.cast
                                                                  (Ty.path "usize")
                                                                  (M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| account_info |)
                                                                      |),
                                                                      "pinocchio::account_info::Account",
                                                                      "data_len"
                                                                    |)
                                                                  |))
                                                              ]
                                                            |)
                                                          |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.write (|
                                                            input,
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "*mut")
                                                                []
                                                                [ Ty.path "u8" ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "*mut")
                                                                  []
                                                                  [ Ty.path "u8" ],
                                                                "add",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.read (| input |);
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "*mut")
                                                                      []
                                                                      [ Ty.path "u8" ],
                                                                    "align_offset",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| input |);
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "pinocchio::BPF_ALIGN_OF_U128",
                                                                        Ty.path "usize"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        M.alloc (|
                                                          Ty.path
                                                            "pinocchio::account_info::AccountInfo",
                                                          Value.mkStructRecord
                                                            "pinocchio::account_info::AccountInfo"
                                                            []
                                                            []
                                                            [ ("raw", M.read (| account_info |)) ]
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path
                                                          "pinocchio::account_info::AccountInfo",
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.path
                                                            "pinocchio::account_info::AccountInfo",
                                                          [],
                                                          [],
                                                          "clone",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "pinocchio::account_info::AccountInfo"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::mem::maybe_uninit::MaybeUninit")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "pinocchio::account_info::AccountInfo"
                                                                    ],
                                                                  "assume_init_ref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "pinocchio::account_info::AccountInfo"
                                                                              ]
                                                                          ],
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::mem::maybe_uninit::MaybeUninit")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "pinocchio::account_info::AccountInfo"
                                                                                ]
                                                                            ],
                                                                          "get_unchecked",
                                                                          [],
                                                                          [ Ty.path "usize" ]
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "pinocchio::account_info::AccountInfo"
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            M.pointer_coercion
                                                                              M.PointerCoercion.Unsize
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [ ACCOUNTS ]
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::mem::maybe_uninit::MaybeUninit")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "pinocchio::account_info::AccountInfo"
                                                                                        ]
                                                                                    ]
                                                                                ])
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::mem::maybe_uninit::MaybeUninit")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "pinocchio::account_info::AccountInfo"
                                                                                        ]
                                                                                    ]
                                                                                ]),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    accounts
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.cast
                                                                            (Ty.path "usize")
                                                                            (M.read (|
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    account_info
                                                                                  |)
                                                                                |),
                                                                                "pinocchio::account_info::Account",
                                                                                "borrow_state"
                                                                              |)
                                                                            |))
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |) in
                                            let~ _ :
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [ Ty.path "pinocchio::account_info::AccountInfo"
                                                  ] :=
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [ Ty.path "pinocchio::account_info::AccountInfo"
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                                    []
                                                    [ Ty.path "pinocchio::account_info::AccountInfo"
                                                    ],
                                                  "write",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::mem::maybe_uninit::MaybeUninit")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "pinocchio::account_info::AccountInfo"
                                                              ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::mem::maybe_uninit::MaybeUninit")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "pinocchio::account_info::AccountInfo"
                                                                ]
                                                            ],
                                                          "get_unchecked_mut",
                                                          [],
                                                          [ Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::mem::maybe_uninit::MaybeUninit")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "pinocchio::account_info::AccountInfo"
                                                                      ]
                                                                  ]
                                                              ],
                                                            M.pointer_coercion
                                                              M.PointerCoercion.Unsize
                                                              (Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [ ACCOUNTS ]
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::mem::maybe_uninit::MaybeUninit")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "pinocchio::account_info::AccountInfo"
                                                                        ]
                                                                    ]
                                                                ])
                                                              (Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::mem::maybe_uninit::MaybeUninit")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "pinocchio::account_info::AccountInfo"
                                                                        ]
                                                                    ]
                                                                ]),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (| M.read (| accounts |) |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.read (| i |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.read (| account |)
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                            |)
                          |)))
                    ]
                  |)
                |))
            |) in
          let~ instruction_data_len : Ty.path "usize" :=
            M.cast
              (Ty.path "usize")
              (M.read (|
                M.deref (|
                  M.cast (Ty.apply (Ty.path "*const") [] [ Ty.path "u64" ]) (M.read (| input |))
                |)
              |)) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              input,
              M.call_closure (|
                Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                  "add",
                  [],
                  []
                |),
                [
                  M.read (| input |);
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "core::mem::size_of", [], [ Ty.path "u64" ] |),
                    []
                  |)
                ]
              |)
            |) in
          let~ instruction_data :
              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
            M.call_closure (|
              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
              M.get_function (| "core::slice::raw::from_raw_parts", [], [ Ty.path "u8" ] |),
              [
                M.call_closure (|
                  Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                  M.pointer_coercion
                    M.PointerCoercion.MutToConstPointer
                    (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                    (Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ]),
                  [ M.read (| input |) ]
                |);
                M.read (| instruction_data_len |)
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              input,
              M.call_closure (|
                Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                  "add",
                  [],
                  []
                |),
                [ M.read (| input |); M.read (| instruction_data_len |) ]
              |)
            |) in
          let~ program_id :
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
                ] :=
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.cast
                      (Ty.apply
                        (Ty.path "*const")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8" ]
                        ])
                      (M.read (| input |))
                  |)
                |)
              |)
            |) in
          M.alloc (|
            Ty.tuple
              [
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ]
                  ];
                Ty.path "usize";
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
              ],
            Value.Tuple
              [
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| program_id |) |) |);
                M.read (| processed |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction_data |) |) |)
              ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_parse : M.IsFunction.C "pinocchio::entrypoint::parse" parse.
  Admitted.
  Global Typeclasses Opaque parse.
  
  (* StructTuple
    {
      name := "NoAllocator";
      const_params := [];
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_alloc_global_GlobalAlloc_for_pinocchio_entrypoint_NoAllocator.
    Definition Self : Ty.t := Ty.path "pinocchio::entrypoint::NoAllocator".
    
    (*
        unsafe fn alloc(&self, _: core::alloc::Layout) -> *mut u8 {
            panic!("** NO ALLOCATOR **");
        }
    *)
    Definition alloc (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; β1 ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::entrypoint::NoAllocator" ],
              self
            |) in
          let β1 := M.alloc (| Ty.path "core::alloc::layout::Layout", β1 |) in
          M.match_operator (|
            Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
            β1,
            [
              fun γ =>
                ltac:(M.monadic
                  (M.never_to_any (|
                    M.call_closure (|
                      Ty.path "never",
                      M.get_function (| "core::panicking::panic_fmt", [], [] |),
                      [
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_const",
                            [ Value.Integer IntegerKind.Usize 1 ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array [ mk_str (| "** NO ALLOCATOR **" |) ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        unsafe fn dealloc(&self, _: *mut u8, _: core::alloc::Layout) {
            // I deny all allocations, so I don't need to free.
        }
    *)
    Definition dealloc (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; β1; β2 ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::entrypoint::NoAllocator" ],
              self
            |) in
          let β1 := M.alloc (| Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ], β1 |) in
          let β2 := M.alloc (| Ty.path "core::alloc::layout::Layout", β2 |) in
          M.match_operator (|
            Ty.tuple [],
            β1,
            [
              fun γ =>
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.tuple [],
                    β2,
                    [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::alloc::global::GlobalAlloc"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("alloc", InstanceField.Method alloc); ("dealloc", InstanceField.Method dealloc) ].
  End Impl_core_alloc_global_GlobalAlloc_for_pinocchio_entrypoint_NoAllocator.
End entrypoint.
