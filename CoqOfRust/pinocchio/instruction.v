(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module instruction.
  (* StructRecord
    {
      name := "Instruction";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("program_id",
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                  [ Ty.path "u8" ]
              ]);
          ("data", Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]);
          ("accounts",
            Ty.apply
              (Ty.path "&")
              []
              [ Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::AccountMeta" ] ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_for_pinocchio_instruction_Instruction.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::Instruction".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Instruction" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "program_id" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::instruction::Instruction",
                        "program_id"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "data" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::instruction::Instruction",
                        "data"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "accounts" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Instruction",
                            "accounts"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_pinocchio_instruction_Instruction.
  
  Module Impl_core_clone_Clone_for_pinocchio_instruction_Instruction.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::Instruction".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "pinocchio::instruction::Instruction"
            []
            []
            [
              ("program_id",
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8" ]
                        ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8" ]
                          ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::instruction::Instruction",
                                "program_id"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |));
              ("data",
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::instruction::Instruction",
                                "data"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |));
              ("accounts",
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.path "pinocchio::instruction::AccountMeta" ]
                        ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.path "pinocchio::instruction::AccountMeta" ]
                          ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::instruction::Instruction",
                                "accounts"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_pinocchio_instruction_Instruction.
  
  (* StructRecord
    {
      name := "ProcessedSiblingInstruction";
      const_params := [];
      ty_params := [];
      fields := [ ("data_len", Ty.path "u64"); ("accounts_len", Ty.path "u64") ];
    } *)
  
  Module Impl_core_default_Default_for_pinocchio_instruction_ProcessedSiblingInstruction.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::ProcessedSiblingInstruction".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "pinocchio::instruction::ProcessedSiblingInstruction"
            []
            []
            [
              ("data_len",
                M.call_closure (|
                  Ty.path "u64",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "u64",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("accounts_len",
                M.call_closure (|
                  Ty.path "u64",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "u64",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_pinocchio_instruction_ProcessedSiblingInstruction.
  
  Module Impl_core_fmt_Debug_for_pinocchio_instruction_ProcessedSiblingInstruction.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::ProcessedSiblingInstruction".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| mk_str (| "ProcessedSiblingInstruction" |) |)
              |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "data_len" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::instruction::ProcessedSiblingInstruction",
                        "data_len"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "accounts_len" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::ProcessedSiblingInstruction",
                            "accounts_len"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_pinocchio_instruction_ProcessedSiblingInstruction.
  
  Module Impl_core_clone_Clone_for_pinocchio_instruction_ProcessedSiblingInstruction.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::ProcessedSiblingInstruction".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.path "pinocchio::instruction::ProcessedSiblingInstruction",
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_pinocchio_instruction_ProcessedSiblingInstruction.
  
  Module Impl_core_marker_Copy_for_pinocchio_instruction_ProcessedSiblingInstruction.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::ProcessedSiblingInstruction".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_pinocchio_instruction_ProcessedSiblingInstruction.
  
  Module Impl_core_cmp_Eq_for_pinocchio_instruction_ProcessedSiblingInstruction.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::ProcessedSiblingInstruction".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.tuple [],
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_pinocchio_instruction_ProcessedSiblingInstruction.
  
  Module Impl_core_marker_StructuralPartialEq_for_pinocchio_instruction_ProcessedSiblingInstruction.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::ProcessedSiblingInstruction".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_pinocchio_instruction_ProcessedSiblingInstruction.
  
  Module Impl_core_cmp_PartialEq_pinocchio_instruction_ProcessedSiblingInstruction_for_pinocchio_instruction_ProcessedSiblingInstruction.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::ProcessedSiblingInstruction".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            M.call_closure (|
              Ty.path "bool",
              BinOp.eq,
              [
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "pinocchio::instruction::ProcessedSiblingInstruction",
                    "data_len"
                  |)
                |);
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "pinocchio::instruction::ProcessedSiblingInstruction",
                    "data_len"
                  |)
                |)
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "pinocchio::instruction::ProcessedSiblingInstruction",
                      "accounts_len"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "pinocchio::instruction::ProcessedSiblingInstruction",
                      "accounts_len"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.path "pinocchio::instruction::ProcessedSiblingInstruction" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_pinocchio_instruction_ProcessedSiblingInstruction_for_pinocchio_instruction_ProcessedSiblingInstruction.
  
  (* StructRecord
    {
      name := "Account";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("key",
            Ty.apply
              (Ty.path "*const")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                  [ Ty.path "u8" ]
              ]);
          ("lamports", Ty.apply (Ty.path "*const") [] [ Ty.path "u64" ]);
          ("data_len", Ty.path "u64");
          ("data", Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ]);
          ("owner",
            Ty.apply
              (Ty.path "*const")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                  [ Ty.path "u8" ]
              ]);
          ("rent_epoch", Ty.path "u64");
          ("is_signer", Ty.path "bool");
          ("is_writable", Ty.path "bool");
          ("executable", Ty.path "bool");
          ("_account_info",
            Ty.apply
              (Ty.path "core::marker::PhantomData")
              []
              [ Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ] ])
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_pinocchio_instruction_Account.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::Account".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "pinocchio::instruction::Account"
            []
            []
            [
              ("key",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "*const")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "*const")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.path "u8" ]
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Account",
                            "key"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("lamports",
                M.call_closure (|
                  Ty.apply (Ty.path "*const") [] [ Ty.path "u64" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "*const") [] [ Ty.path "u64" ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Account",
                            "lamports"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("data_len",
                M.call_closure (|
                  Ty.path "u64",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "u64",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Account",
                            "data_len"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("data",
                M.call_closure (|
                  Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Account",
                            "data"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("owner",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "*const")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "*const")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.path "u8" ]
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Account",
                            "owner"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("rent_epoch",
                M.call_closure (|
                  Ty.path "u64",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "u64",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Account",
                            "rent_epoch"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("is_signer",
                M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "bool",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Account",
                            "is_signer"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("is_writable",
                M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "bool",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Account",
                            "is_writable"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("executable",
                M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "bool",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Account",
                            "executable"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("_account_info",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::marker::PhantomData")
                    []
                    [ Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ]
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "core::marker::PhantomData")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ]
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Account",
                            "_account_info"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_pinocchio_instruction_Account.
  
  (*
  const fn offset<T, U>(ptr: *const T, offset: usize) -> *const U {
      unsafe { (ptr as *const u8).add(offset) as *const U }
  }
  *)
  Definition offset (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ T; U ], [ ptr; offset ] =>
      ltac:(M.monadic
        (let ptr := M.alloc (| ptr |) in
        let offset := M.alloc (| offset |) in
        M.cast
          (Ty.apply (Ty.path "*const") [] [ U ])
          (M.call_closure (|
            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
            M.get_associated_function (|
              Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
              "add",
              [],
              []
            |),
            [
              M.cast (Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ]) (M.read (| ptr |));
              M.read (| offset |)
            ]
          |))))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_offset :
    M.IsFunction.C "pinocchio::instruction::offset" offset.
  Admitted.
  Global Typeclasses Opaque offset.
  
  Module Impl_core_convert_From_ref__pinocchio_account_info_AccountInfo_for_pinocchio_instruction_Account.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::Account".
    
    (*
        fn from(account: &'a AccountInfo) -> Self {
            Account {
                key: offset(account.raw, 8),
                lamports: offset(account.raw, 72),
                data_len: account.data_len() as u64,
                data: offset(account.raw, 88),
                owner: offset(account.raw, 40),
                // The `rent_epoch` field is not present in the `AccountInfo` struct,
                // since the value occurs after the variable data of the account in
                // the runtime input data.
                rent_epoch: 0,
                is_signer: account.is_signer(),
                is_writable: account.is_writable(),
                executable: account.executable(),
                _account_info: PhantomData::<&'a AccountInfo>,
            }
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ account ] =>
        ltac:(M.monadic
          (let account := M.alloc (| account |) in
          Value.StructRecord
            "pinocchio::instruction::Account"
            []
            []
            [
              ("key",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "*const")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ],
                  M.get_function (|
                    "pinocchio::instruction::offset",
                    [],
                    [
                      Ty.path "pinocchio::account_info::Account";
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ]
                  |),
                  [
                    (* MutToConstPointer *)
                    M.pointer_coercion
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| account |) |),
                          "pinocchio::account_info::AccountInfo",
                          "raw"
                        |)
                      |));
                    Value.Integer IntegerKind.Usize 8
                  ]
                |));
              ("lamports",
                M.call_closure (|
                  Ty.apply (Ty.path "*const") [] [ Ty.path "u64" ],
                  M.get_function (|
                    "pinocchio::instruction::offset",
                    [],
                    [ Ty.path "pinocchio::account_info::Account"; Ty.path "u64" ]
                  |),
                  [
                    (* MutToConstPointer *)
                    M.pointer_coercion
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| account |) |),
                          "pinocchio::account_info::AccountInfo",
                          "raw"
                        |)
                      |));
                    Value.Integer IntegerKind.Usize 72
                  ]
                |));
              ("data_len",
                M.cast
                  (Ty.path "u64")
                  (M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.path "pinocchio::account_info::AccountInfo",
                      "data_len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| account |) |) |) ]
                  |)));
              ("data",
                M.call_closure (|
                  Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                  M.get_function (|
                    "pinocchio::instruction::offset",
                    [],
                    [ Ty.path "pinocchio::account_info::Account"; Ty.path "u8" ]
                  |),
                  [
                    (* MutToConstPointer *)
                    M.pointer_coercion
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| account |) |),
                          "pinocchio::account_info::AccountInfo",
                          "raw"
                        |)
                      |));
                    Value.Integer IntegerKind.Usize 88
                  ]
                |));
              ("owner",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "*const")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ],
                  M.get_function (|
                    "pinocchio::instruction::offset",
                    [],
                    [
                      Ty.path "pinocchio::account_info::Account";
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ]
                  |),
                  [
                    (* MutToConstPointer *)
                    M.pointer_coercion
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| account |) |),
                          "pinocchio::account_info::AccountInfo",
                          "raw"
                        |)
                      |));
                    Value.Integer IntegerKind.Usize 40
                  ]
                |));
              ("rent_epoch", Value.Integer IntegerKind.U64 0);
              ("is_signer",
                M.call_closure (|
                  Ty.path "bool",
                  M.get_associated_function (|
                    Ty.path "pinocchio::account_info::AccountInfo",
                    "is_signer",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| account |) |) |) ]
                |));
              ("is_writable",
                M.call_closure (|
                  Ty.path "bool",
                  M.get_associated_function (|
                    Ty.path "pinocchio::account_info::AccountInfo",
                    "is_writable",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| account |) |) |) ]
                |));
              ("executable",
                M.call_closure (|
                  Ty.path "bool",
                  M.get_associated_function (|
                    Ty.path "pinocchio::account_info::AccountInfo",
                    "executable",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| account |) |) |) ]
                |));
              ("_account_info",
                Value.StructTuple
                  "core::marker::PhantomData"
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ] ]
                  [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ] ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_ref__pinocchio_account_info_AccountInfo_for_pinocchio_instruction_Account.
  
  (* StructRecord
    {
      name := "AccountMeta";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("pubkey",
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                  [ Ty.path "u8" ]
              ]);
          ("is_writable", Ty.path "bool");
          ("is_signer", Ty.path "bool")
        ];
    } *)
  
  Module Impl_core_fmt_Debug_for_pinocchio_instruction_AccountMeta.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::AccountMeta".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "AccountMeta" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "pubkey" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::instruction::AccountMeta",
                        "pubkey"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_writable" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::instruction::AccountMeta",
                        "is_writable"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_signer" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::AccountMeta",
                            "is_signer"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_pinocchio_instruction_AccountMeta.
  
  Module Impl_core_clone_Clone_for_pinocchio_instruction_AccountMeta.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::AccountMeta".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "pinocchio::instruction::AccountMeta"
            []
            []
            [
              ("pubkey",
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8" ]
                        ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8" ]
                          ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::instruction::AccountMeta",
                                "pubkey"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |));
              ("is_writable",
                M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "bool",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::AccountMeta",
                            "is_writable"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("is_signer",
                M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "bool",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::AccountMeta",
                            "is_signer"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_pinocchio_instruction_AccountMeta.
  
  Module Impl_pinocchio_instruction_AccountMeta.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::AccountMeta".
    
    (*
        pub fn new(pubkey: &'a Pubkey, is_writable: bool, is_signer: bool) -> Self {
            Self {
                pubkey,
                is_writable,
                is_signer,
            }
        }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ pubkey; is_writable; is_signer ] =>
        ltac:(M.monadic
          (let pubkey := M.alloc (| pubkey |) in
          let is_writable := M.alloc (| is_writable |) in
          let is_signer := M.alloc (| is_signer |) in
          Value.StructRecord
            "pinocchio::instruction::AccountMeta"
            []
            []
            [
              ("pubkey", M.read (| pubkey |));
              ("is_writable", M.read (| is_writable |));
              ("is_signer", M.read (| is_signer |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn readonly(pubkey: &'a Pubkey) -> Self {
            Self::new(pubkey, false, false)
        }
    *)
    Definition readonly (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ pubkey ] =>
        ltac:(M.monadic
          (let pubkey := M.alloc (| pubkey |) in
          M.call_closure (|
            Ty.path "pinocchio::instruction::AccountMeta",
            M.get_associated_function (|
              Ty.path "pinocchio::instruction::AccountMeta",
              "new",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| pubkey |) |) |);
              Value.Bool false;
              Value.Bool false
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_readonly : M.IsAssociatedFunction.C Self "readonly" readonly.
    Admitted.
    Global Typeclasses Opaque readonly.
    
    (*
        pub fn writable(pubkey: &'a Pubkey) -> Self {
            Self::new(pubkey, true, false)
        }
    *)
    Definition writable (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ pubkey ] =>
        ltac:(M.monadic
          (let pubkey := M.alloc (| pubkey |) in
          M.call_closure (|
            Ty.path "pinocchio::instruction::AccountMeta",
            M.get_associated_function (|
              Ty.path "pinocchio::instruction::AccountMeta",
              "new",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| pubkey |) |) |);
              Value.Bool true;
              Value.Bool false
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_writable : M.IsAssociatedFunction.C Self "writable" writable.
    Admitted.
    Global Typeclasses Opaque writable.
    
    (*
        pub fn readonly_signer(pubkey: &'a Pubkey) -> Self {
            Self::new(pubkey, false, true)
        }
    *)
    Definition readonly_signer (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ pubkey ] =>
        ltac:(M.monadic
          (let pubkey := M.alloc (| pubkey |) in
          M.call_closure (|
            Ty.path "pinocchio::instruction::AccountMeta",
            M.get_associated_function (|
              Ty.path "pinocchio::instruction::AccountMeta",
              "new",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| pubkey |) |) |);
              Value.Bool false;
              Value.Bool true
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_readonly_signer :
      M.IsAssociatedFunction.C Self "readonly_signer" readonly_signer.
    Admitted.
    Global Typeclasses Opaque readonly_signer.
    
    (*
        pub fn writable_signer(pubkey: &'a Pubkey) -> Self {
            Self::new(pubkey, true, true)
        }
    *)
    Definition writable_signer (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ pubkey ] =>
        ltac:(M.monadic
          (let pubkey := M.alloc (| pubkey |) in
          M.call_closure (|
            Ty.path "pinocchio::instruction::AccountMeta",
            M.get_associated_function (|
              Ty.path "pinocchio::instruction::AccountMeta",
              "new",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| pubkey |) |) |);
              Value.Bool true;
              Value.Bool true
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_writable_signer :
      M.IsAssociatedFunction.C Self "writable_signer" writable_signer.
    Admitted.
    Global Typeclasses Opaque writable_signer.
  End Impl_pinocchio_instruction_AccountMeta.
  
  Module Impl_core_convert_From_ref__pinocchio_account_info_AccountInfo_for_pinocchio_instruction_AccountMeta.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::AccountMeta".
    
    (*
        fn from(account: &'a crate::account_info::AccountInfo) -> Self {
            AccountMeta::new(account.key(), account.is_writable(), account.is_signer())
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ account ] =>
        ltac:(M.monadic
          (let account := M.alloc (| account |) in
          M.call_closure (|
            Ty.path "pinocchio::instruction::AccountMeta",
            M.get_associated_function (|
              Ty.path "pinocchio::instruction::AccountMeta",
              "new",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.path "u8" ]
                      ],
                    M.get_associated_function (|
                      Ty.path "pinocchio::account_info::AccountInfo",
                      "key",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| account |) |) |) ]
                  |)
                |)
              |);
              M.call_closure (|
                Ty.path "bool",
                M.get_associated_function (|
                  Ty.path "pinocchio::account_info::AccountInfo",
                  "is_writable",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| account |) |) |) ]
              |);
              M.call_closure (|
                Ty.path "bool",
                M.get_associated_function (|
                  Ty.path "pinocchio::account_info::AccountInfo",
                  "is_signer",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| account |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ] ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_ref__pinocchio_account_info_AccountInfo_for_pinocchio_instruction_AccountMeta.
  
  (* StructRecord
    {
      name := "Seed";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("seed", Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ]);
          ("len", Ty.path "u64");
          ("_bytes",
            Ty.apply
              (Ty.path "core::marker::PhantomData")
              []
              [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_for_pinocchio_instruction_Seed.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::Seed".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Seed" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "seed" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::instruction::Seed",
                        "seed"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "len" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::instruction::Seed",
                        "len"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_bytes" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Seed",
                            "_bytes"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_pinocchio_instruction_Seed.
  
  Module Impl_core_clone_Clone_for_pinocchio_instruction_Seed.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::Seed".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "pinocchio::instruction::Seed"
            []
            []
            [
              ("seed",
                M.call_closure (|
                  Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Seed",
                            "seed"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("len",
                M.call_closure (|
                  Ty.path "u64",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "u64",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Seed",
                            "len"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("_bytes",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::marker::PhantomData")
                    []
                    [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "core::marker::PhantomData")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Seed",
                            "_bytes"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_pinocchio_instruction_Seed.
  
  Module Impl_core_convert_From_ref__slice_u8_for_pinocchio_instruction_Seed.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::Seed".
    
    (*
        fn from(value: &'a [u8]) -> Self {
            Self {
                seed: value.as_ptr(),
                len: value.len() as u64,
                _bytes: PhantomData::<&[u8]>,
            }
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructRecord
            "pinocchio::instruction::Seed"
            []
            []
            [
              ("seed",
                M.call_closure (|
                  Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                    "as_ptr",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |) ]
                |));
              ("len",
                M.cast
                  (Ty.path "u64")
                  (M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |) ]
                  |)));
              ("_bytes",
                Value.StructTuple
                  "core::marker::PhantomData"
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
                  [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_ref__slice_u8_for_pinocchio_instruction_Seed.
  
  Module Impl_core_convert_From_ref__array_SIZE_u8_for_pinocchio_instruction_Seed.
    Definition Self (SIZE : Value.t) : Ty.t := Ty.path "pinocchio::instruction::Seed".
    
    (*
        fn from(value: &'a [u8; SIZE]) -> Self {
            Self {
                seed: value.as_ptr(),
                len: value.len() as u64,
                _bytes: PhantomData::<&[u8]>,
            }
        }
    *)
    Definition from (SIZE : Value.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SIZE in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructRecord
            "pinocchio::instruction::Seed"
            []
            []
            [
              ("seed",
                M.call_closure (|
                  Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                    "as_ptr",
                    [],
                    []
                  |),
                  [
                    (* Unsize *)
                    M.pointer_coercion
                      (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |))
                  ]
                |));
              ("len",
                M.cast
                  (Ty.path "u64")
                  (M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                      "len",
                      [],
                      []
                    |),
                    [
                      (* Unsize *)
                      M.pointer_coercion
                        (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |))
                    ]
                  |)));
              ("_bytes",
                Value.StructTuple
                  "core::marker::PhantomData"
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
                  [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (SIZE : Value.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ SIZE ] [ Ty.path "u8" ] ] ]
        (Self SIZE)
        (* Instance *) [ ("from", InstanceField.Method (from SIZE)) ].
  End Impl_core_convert_From_ref__array_SIZE_u8_for_pinocchio_instruction_Seed.
  
  Module Impl_core_ops_deref_Deref_for_pinocchio_instruction_Seed.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::Seed".
    
    (*     type Target = [u8]; *)
    Definition _Target : Ty.t := Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ].
    
    (*
        fn deref(&self) -> &Self::Target {
            unsafe { core::slice::from_raw_parts(self.seed, self.len as usize) }
        }
    *)
    Definition deref (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.get_function (| "core::slice::raw::from_raw_parts", [], [ Ty.path "u8" ] |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "pinocchio::instruction::Seed",
                      "seed"
                    |)
                  |);
                  M.cast
                    (Ty.path "usize")
                    (M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::instruction::Seed",
                        "len"
                      |)
                    |))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::ops::deref::Deref"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("Target", InstanceField.Ty _Target); ("deref", InstanceField.Method deref) ].
  End Impl_core_ops_deref_Deref_for_pinocchio_instruction_Seed.
  
  (* StructRecord
    {
      name := "Signer";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("seeds", Ty.apply (Ty.path "*const") [] [ Ty.path "pinocchio::instruction::Seed" ]);
          ("len", Ty.path "u64");
          ("_seeds",
            Ty.apply
              (Ty.path "core::marker::PhantomData")
              []
              [
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Seed" ] ]
              ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_for_pinocchio_instruction_Signer.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::Signer".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Signer" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "seeds" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::instruction::Signer",
                        "seeds"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "len" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::instruction::Signer",
                        "len"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_seeds" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Signer",
                            "_seeds"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_pinocchio_instruction_Signer.
  
  Module Impl_core_clone_Clone_for_pinocchio_instruction_Signer.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::Signer".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "pinocchio::instruction::Signer"
            []
            []
            [
              ("seeds",
                M.call_closure (|
                  Ty.apply (Ty.path "*const") [] [ Ty.path "pinocchio::instruction::Seed" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "*const") [] [ Ty.path "pinocchio::instruction::Seed" ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Signer",
                            "seeds"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("len",
                M.call_closure (|
                  Ty.path "u64",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "u64",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Signer",
                            "len"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("_seeds",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::marker::PhantomData")
                    []
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Seed" ] ]
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "core::marker::PhantomData")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Seed" ]
                          ]
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::instruction::Signer",
                            "_seeds"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_pinocchio_instruction_Signer.
  
  Module Impl_core_convert_From_ref__slice_pinocchio_instruction_Seed_for_pinocchio_instruction_Signer.
    Definition Self : Ty.t := Ty.path "pinocchio::instruction::Signer".
    
    (*
        fn from(value: &'b [Seed<'a>]) -> Self {
            Self {
                seeds: value.as_ptr(),
                len: value.len() as u64,
                _seeds: PhantomData::<&'b [Seed<'a>]>,
            }
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructRecord
            "pinocchio::instruction::Signer"
            []
            []
            [
              ("seeds",
                M.call_closure (|
                  Ty.apply (Ty.path "*const") [] [ Ty.path "pinocchio::instruction::Seed" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Seed" ],
                    "as_ptr",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |) ]
                |));
              ("len",
                M.cast
                  (Ty.path "u64")
                  (M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Seed" ],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |) ]
                  |)));
              ("_seeds",
                Value.StructTuple
                  "core::marker::PhantomData"
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Seed" ] ]
                  ]
                  [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "&")
            []
            [ Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Seed" ] ]
        ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_ref__slice_pinocchio_instruction_Seed_for_pinocchio_instruction_Signer.
  
  Module Impl_core_convert_From_ref__array_SIZE_pinocchio_instruction_Seed_for_pinocchio_instruction_Signer.
    Definition Self (SIZE : Value.t) : Ty.t := Ty.path "pinocchio::instruction::Signer".
    
    (*
        fn from(value: &'b [Seed<'a>; SIZE]) -> Self {
            Self {
                seeds: value.as_ptr(),
                len: value.len() as u64,
                _seeds: PhantomData::<&'b [Seed<'a>]>,
            }
        }
    *)
    Definition from (SIZE : Value.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SIZE in
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructRecord
            "pinocchio::instruction::Signer"
            []
            []
            [
              ("seeds",
                M.call_closure (|
                  Ty.apply (Ty.path "*const") [] [ Ty.path "pinocchio::instruction::Seed" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Seed" ],
                    "as_ptr",
                    [],
                    []
                  |),
                  [
                    (* Unsize *)
                    M.pointer_coercion
                      (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |))
                  ]
                |));
              ("len",
                M.cast
                  (Ty.path "u64")
                  (M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Seed" ],
                      "len",
                      [],
                      []
                    |),
                    [
                      (* Unsize *)
                      M.pointer_coercion
                        (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| value |) |) |))
                    ]
                  |)));
              ("_seeds",
                Value.StructTuple
                  "core::marker::PhantomData"
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::instruction::Seed" ] ]
                  ]
                  [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (SIZE : Value.t),
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "&")
            []
            [ Ty.apply (Ty.path "array") [ SIZE ] [ Ty.path "pinocchio::instruction::Seed" ] ]
        ]
        (Self SIZE)
        (* Instance *) [ ("from", InstanceField.Method (from SIZE)) ].
  End Impl_core_convert_From_ref__array_SIZE_pinocchio_instruction_Seed_for_pinocchio_instruction_Signer.
End instruction.
