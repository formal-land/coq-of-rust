(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module log.
  (*
  pub fn sol_log(message: &str) {
      #[cfg(target_os = "solana")]
      unsafe {
          crate::syscalls::sol_log_(message.as_ptr(), message.len() as u64);
      }
  
      #[cfg(not(target_os = "solana"))]
      core::hint::black_box(message);
  }
  *)
  Definition sol_log (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ message ] =>
      ltac:(M.monadic
        (let message := M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "str" ], message |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
            M.call_closure (|
              Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
              M.get_function (|
                "core::hint::black_box",
                [],
                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
              |),
              [ M.read (| message |) ]
            |) in
          M.alloc (| Ty.tuple [], Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_sol_log : M.IsFunction.C "pinocchio::log::sol_log" sol_log.
  Admitted.
  Global Typeclasses Opaque sol_log.
  
  (*
  pub fn sol_log_64(arg1: u64, arg2: u64, arg3: u64, arg4: u64, arg5: u64) {
      #[cfg(target_os = "solana")]
      unsafe {
          crate::syscalls::sol_log_64_(arg1, arg2, arg3, arg4, arg5);
      }
  
      #[cfg(not(target_os = "solana"))]
      core::hint::black_box((arg1, arg2, arg3, arg4, arg5));
  }
  *)
  Definition sol_log_64 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ arg1; arg2; arg3; arg4; arg5 ] =>
      ltac:(M.monadic
        (let arg1 := M.alloc (| Ty.path "u64", arg1 |) in
        let arg2 := M.alloc (| Ty.path "u64", arg2 |) in
        let arg3 := M.alloc (| Ty.path "u64", arg3 |) in
        let arg4 := M.alloc (| Ty.path "u64", arg4 |) in
        let arg5 := M.alloc (| Ty.path "u64", arg5 |) in
        M.read (|
          let~ _ :
              Ty.tuple
                [ Ty.path "u64"; Ty.path "u64"; Ty.path "u64"; Ty.path "u64"; Ty.path "u64" ] :=
            M.call_closure (|
              Ty.tuple
                [ Ty.path "u64"; Ty.path "u64"; Ty.path "u64"; Ty.path "u64"; Ty.path "u64" ],
              M.get_function (|
                "core::hint::black_box",
                [],
                [
                  Ty.tuple
                    [ Ty.path "u64"; Ty.path "u64"; Ty.path "u64"; Ty.path "u64"; Ty.path "u64" ]
                ]
              |),
              [
                Value.Tuple
                  [
                    M.read (| arg1 |);
                    M.read (| arg2 |);
                    M.read (| arg3 |);
                    M.read (| arg4 |);
                    M.read (| arg5 |)
                  ]
              ]
            |) in
          M.alloc (| Ty.tuple [], Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_sol_log_64 :
    M.IsFunction.C "pinocchio::log::sol_log_64" sol_log_64.
  Admitted.
  Global Typeclasses Opaque sol_log_64.
  
  (*
  pub fn sol_log_data(data: &[&[u8]]) {
      #[cfg(target_os = "solana")]
      unsafe {
          crate::syscalls::sol_log_data(data as *const _ as *const u8, data.len() as u64)
      };
  
      #[cfg(not(target_os = "solana"))]
      core::hint::black_box(data);
  }
  *)
  Definition sol_log_data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ data ] =>
      ltac:(M.monadic
        (let data :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "slice")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
              ],
            data
          |) in
        M.read (|
          let~ _ :
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "slice")
                    []
                    [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
                ] :=
            M.call_closure (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "slice")
                    []
                    [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
                ],
              M.get_function (|
                "core::hint::black_box",
                [],
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        ]
                    ]
                ]
              |),
              [ M.read (| data |) ]
            |) in
          M.alloc (| Ty.tuple [], Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_sol_log_data :
    M.IsFunction.C "pinocchio::log::sol_log_data" sol_log_data.
  Admitted.
  Global Typeclasses Opaque sol_log_data.
  
  (*
  pub fn sol_log_slice(slice: &[u8]) {
      for (i, s) in slice.iter().enumerate() {
          sol_log_64(0, 0, 0, i as u64, *s as u64);
      }
  }
  *)
  Definition sol_log_slice (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ slice ] =>
      ltac:(M.monadic
        (let slice :=
          M.alloc (|
            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
            slice
          |) in
        M.read (|
          M.use
            (M.alloc (|
              Ty.tuple [],
              M.match_operator (|
                Ty.tuple [],
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                    []
                    [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                      []
                      [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                          [],
                          [],
                          "enumerate",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                              "iter",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| slice |) |) |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u8" ] ],
                          γ
                        |) in
                      M.read (|
                        M.loop (|
                          Ty.tuple [],
                          ltac:(M.monadic
                            (let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply (Ty.path "&") [] [ Ty.path "u8" ]
                                        ]
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply (Ty.path "&") [] [ Ty.path "u8" ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.path "u8" ]
                                        ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.never_to_any (| M.read (| M.break (||) |) |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                      let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                      let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                      let s :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "u8" ],
                                          γ1_1
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_function (|
                                              "pinocchio::log::sol_log_64",
                                              [],
                                              []
                                            |),
                                            [
                                              Value.Integer IntegerKind.U64 0;
                                              Value.Integer IntegerKind.U64 0;
                                              Value.Integer IntegerKind.U64 0;
                                              M.cast (Ty.path "u64") (M.read (| i |));
                                              M.cast
                                                (Ty.path "u64")
                                                (M.read (| M.deref (| M.read (| s |) |) |))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                        |)
                      |)))
                ]
              |)
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_sol_log_slice :
    M.IsFunction.C "pinocchio::log::sol_log_slice" sol_log_slice.
  Admitted.
  Global Typeclasses Opaque sol_log_slice.
  
  (*
  pub fn sol_log_params(accounts: &[AccountInfo], data: &[u8]) {
      for (i, account) in accounts.iter().enumerate() {
          msg!("AccountInfo");
          sol_log_64(0, 0, 0, 0, i as u64);
          msg!("- Is signer");
          sol_log_64(0, 0, 0, 0, account.is_signer() as u64);
          msg!("- Key");
          pubkey::log(account.key());
          msg!("- Lamports");
          sol_log_64(0, 0, 0, 0, account.lamports());
          msg!("- Account data length");
          sol_log_64(0, 0, 0, 0, account.data_len() as u64);
          msg!("- Owner");
          // SAFETY: The `owner` reference is only used for logging.
          pubkey::log(unsafe { account.owner() });
      }
      msg!("Instruction data");
      sol_log_slice(data);
  }
  *)
  Definition sol_log_params (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ accounts; data ] =>
      ltac:(M.monadic
        (let accounts :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [ Ty.apply (Ty.path "slice") [] [ Ty.path "pinocchio::account_info::AccountInfo" ] ],
            accounts
          |) in
        let data :=
          M.alloc (|
            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
            data
          |) in
        M.read (|
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.path "pinocchio::account_info::AccountInfo" ]
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.path "pinocchio::account_info::AccountInfo" ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.path "pinocchio::account_info::AccountInfo" ]
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.path "pinocchio::account_info::AccountInfo" ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.path "pinocchio::account_info::AccountInfo" ],
                              [],
                              [],
                              "enumerate",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.path "pinocchio::account_info::AccountInfo" ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [ Ty.path "pinocchio::account_info::AccountInfo" ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.read (| accounts |) |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                ],
                              γ
                            |) in
                          M.read (|
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                            ]
                                        ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [ Ty.path "pinocchio::account_info::AccountInfo" ]
                                            ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.never_to_any (| M.read (| M.break (||) |) |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                          let account :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "pinocchio::account_info::AccountInfo" ],
                                              γ1_1
                                            |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_function (|
                                                  "pinocchio::log::sol_log",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| mk_str (| "AccountInfo" |) |)
                                                  |)
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_function (|
                                                  "pinocchio::log::sol_log_64",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  Value.Integer IntegerKind.U64 0;
                                                  Value.Integer IntegerKind.U64 0;
                                                  Value.Integer IntegerKind.U64 0;
                                                  Value.Integer IntegerKind.U64 0;
                                                  M.cast (Ty.path "u64") (M.read (| i |))
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_function (|
                                                  "pinocchio::log::sol_log",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| mk_str (| "- Is signer" |) |)
                                                  |)
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_function (|
                                                  "pinocchio::log::sol_log_64",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  Value.Integer IntegerKind.U64 0;
                                                  Value.Integer IntegerKind.U64 0;
                                                  Value.Integer IntegerKind.U64 0;
                                                  Value.Integer IntegerKind.U64 0;
                                                  M.cast
                                                    (Ty.path "u64")
                                                    (M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "pinocchio::account_info::AccountInfo",
                                                        "is_signer",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| account |) |)
                                                        |)
                                                      ]
                                                    |))
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_function (|
                                                  "pinocchio::log::sol_log",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| mk_str (| "- Key" |) |)
                                                  |)
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_function (|
                                                  "pinocchio::pubkey::log",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 32 ]
                                                              [ Ty.path "u8" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "pinocchio::account_info::AccountInfo",
                                                          "key",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| account |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_function (|
                                                  "pinocchio::log::sol_log",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| mk_str (| "- Lamports" |) |)
                                                  |)
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_function (|
                                                  "pinocchio::log::sol_log_64",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  Value.Integer IntegerKind.U64 0;
                                                  Value.Integer IntegerKind.U64 0;
                                                  Value.Integer IntegerKind.U64 0;
                                                  Value.Integer IntegerKind.U64 0;
                                                  M.call_closure (|
                                                    Ty.path "u64",
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "pinocchio::account_info::AccountInfo",
                                                      "lamports",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| account |) |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_function (|
                                                  "pinocchio::log::sol_log",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      mk_str (| "- Account data length" |)
                                                    |)
                                                  |)
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_function (|
                                                  "pinocchio::log::sol_log_64",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  Value.Integer IntegerKind.U64 0;
                                                  Value.Integer IntegerKind.U64 0;
                                                  Value.Integer IntegerKind.U64 0;
                                                  Value.Integer IntegerKind.U64 0;
                                                  M.cast
                                                    (Ty.path "u64")
                                                    (M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "pinocchio::account_info::AccountInfo",
                                                        "data_len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| account |) |)
                                                        |)
                                                      ]
                                                    |))
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_function (|
                                                  "pinocchio::log::sol_log",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| mk_str (| "- Owner" |) |)
                                                  |)
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_function (|
                                                  "pinocchio::pubkey::log",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 32 ]
                                                              [ Ty.path "u8" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "pinocchio::account_info::AccountInfo",
                                                          "owner",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| account |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                            |)
                          |)))
                    ]
                  |)
                |))
            |) in
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_function (| "pinocchio::log::sol_log", [], [] |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Instruction data" |) |) |) ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_function (| "pinocchio::log::sol_log_slice", [], [] |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| data |) |) |) ]
            |) in
          M.alloc (| Ty.tuple [], Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_sol_log_params :
    M.IsFunction.C "pinocchio::log::sol_log_params" sol_log_params.
  Admitted.
  Global Typeclasses Opaque sol_log_params.
  
  (*
  pub fn sol_log_compute_units() {
      #[cfg(target_os = "solana")]
      unsafe {
          crate::syscalls::sol_log_compute_units_();
      }
  }
  *)
  Definition sol_log_compute_units (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [] => ltac:(M.monadic (Value.Tuple []))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_sol_log_compute_units :
    M.IsFunction.C "pinocchio::log::sol_log_compute_units" sol_log_compute_units.
  Admitted.
  Global Typeclasses Opaque sol_log_compute_units.
End log.
