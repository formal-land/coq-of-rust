(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module program_error.
  (*
  Enum ProgramError
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "Custom";
          item := StructTuple [ Ty.path "u32" ];
        };
        {
          name := "InvalidArgument";
          item := StructTuple [];
        };
        {
          name := "InvalidInstructionData";
          item := StructTuple [];
        };
        {
          name := "InvalidAccountData";
          item := StructTuple [];
        };
        {
          name := "AccountDataTooSmall";
          item := StructTuple [];
        };
        {
          name := "InsufficientFunds";
          item := StructTuple [];
        };
        {
          name := "IncorrectProgramId";
          item := StructTuple [];
        };
        {
          name := "MissingRequiredSignature";
          item := StructTuple [];
        };
        {
          name := "AccountAlreadyInitialized";
          item := StructTuple [];
        };
        {
          name := "UninitializedAccount";
          item := StructTuple [];
        };
        {
          name := "NotEnoughAccountKeys";
          item := StructTuple [];
        };
        {
          name := "AccountBorrowFailed";
          item := StructTuple [];
        };
        {
          name := "MaxSeedLengthExceeded";
          item := StructTuple [];
        };
        {
          name := "InvalidSeeds";
          item := StructTuple [];
        };
        {
          name := "BorshIoError";
          item := StructTuple [];
        };
        {
          name := "AccountNotRentExempt";
          item := StructTuple [];
        };
        {
          name := "UnsupportedSysvar";
          item := StructTuple [];
        };
        {
          name := "IllegalOwner";
          item := StructTuple [];
        };
        {
          name := "MaxAccountsDataAllocationsExceeded";
          item := StructTuple [];
        };
        {
          name := "InvalidRealloc";
          item := StructTuple [];
        };
        {
          name := "MaxInstructionTraceLengthExceeded";
          item := StructTuple [];
        };
        {
          name := "BuiltinProgramsMustConsumeComputeUnits";
          item := StructTuple [];
        };
        {
          name := "InvalidAccountOwner";
          item := StructTuple [];
        };
        {
          name := "ArithmeticOverflow";
          item := StructTuple [];
        };
        {
          name := "Immutable";
          item := StructTuple [];
        };
        {
          name := "IncorrectAuthority";
          item := StructTuple [];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_ProgramError_Custom :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::Custom" 0.
  Axiom IsDiscriminant_ProgramError_InvalidArgument :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::InvalidArgument" 1.
  Axiom IsDiscriminant_ProgramError_InvalidInstructionData :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::InvalidInstructionData" 2.
  Axiom IsDiscriminant_ProgramError_InvalidAccountData :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::InvalidAccountData" 3.
  Axiom IsDiscriminant_ProgramError_AccountDataTooSmall :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::AccountDataTooSmall" 4.
  Axiom IsDiscriminant_ProgramError_InsufficientFunds :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::InsufficientFunds" 5.
  Axiom IsDiscriminant_ProgramError_IncorrectProgramId :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::IncorrectProgramId" 6.
  Axiom IsDiscriminant_ProgramError_MissingRequiredSignature :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::MissingRequiredSignature" 7.
  Axiom IsDiscriminant_ProgramError_AccountAlreadyInitialized :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::AccountAlreadyInitialized" 8.
  Axiom IsDiscriminant_ProgramError_UninitializedAccount :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::UninitializedAccount" 9.
  Axiom IsDiscriminant_ProgramError_NotEnoughAccountKeys :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::NotEnoughAccountKeys" 10.
  Axiom IsDiscriminant_ProgramError_AccountBorrowFailed :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::AccountBorrowFailed" 11.
  Axiom IsDiscriminant_ProgramError_MaxSeedLengthExceeded :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::MaxSeedLengthExceeded" 12.
  Axiom IsDiscriminant_ProgramError_InvalidSeeds :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::InvalidSeeds" 13.
  Axiom IsDiscriminant_ProgramError_BorshIoError :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::BorshIoError" 14.
  Axiom IsDiscriminant_ProgramError_AccountNotRentExempt :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::AccountNotRentExempt" 15.
  Axiom IsDiscriminant_ProgramError_UnsupportedSysvar :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::UnsupportedSysvar" 16.
  Axiom IsDiscriminant_ProgramError_IllegalOwner :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::IllegalOwner" 17.
  Axiom IsDiscriminant_ProgramError_MaxAccountsDataAllocationsExceeded :
    M.IsDiscriminant
      "pinocchio::program_error::ProgramError::MaxAccountsDataAllocationsExceeded"
      18.
  Axiom IsDiscriminant_ProgramError_InvalidRealloc :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::InvalidRealloc" 19.
  Axiom IsDiscriminant_ProgramError_MaxInstructionTraceLengthExceeded :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::MaxInstructionTraceLengthExceeded" 20.
  Axiom IsDiscriminant_ProgramError_BuiltinProgramsMustConsumeComputeUnits :
    M.IsDiscriminant
      "pinocchio::program_error::ProgramError::BuiltinProgramsMustConsumeComputeUnits"
      21.
  Axiom IsDiscriminant_ProgramError_InvalidAccountOwner :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::InvalidAccountOwner" 22.
  Axiom IsDiscriminant_ProgramError_ArithmeticOverflow :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::ArithmeticOverflow" 23.
  Axiom IsDiscriminant_ProgramError_Immutable :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::Immutable" 24.
  Axiom IsDiscriminant_ProgramError_IncorrectAuthority :
    M.IsDiscriminant "pinocchio::program_error::ProgramError::IncorrectAuthority" 25.
  
  Module Impl_core_clone_Clone_for_pinocchio_program_error_ProgramError.
    Definition Self : Ty.t := Ty.path "pinocchio::program_error::ProgramError".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::program_error::ProgramError" ],
              self
            |) in
          M.match_operator (|
            Ty.path "pinocchio::program_error::ProgramError",
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "pinocchio::program_error::ProgramError::Custom",
                      0
                    |) in
                  let __self_0 := M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::Custom"
                    []
                    []
                    [
                      M.call_closure (|
                        Ty.path "u32",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.path "u32",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                      |)
                    ]));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidArgument"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InvalidArgument"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidInstructionData"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InvalidInstructionData"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidAccountData"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InvalidAccountData"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountDataTooSmall"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::AccountDataTooSmall"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InsufficientFunds"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InsufficientFunds"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::IncorrectProgramId"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::IncorrectProgramId"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MissingRequiredSignature"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::MissingRequiredSignature"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountAlreadyInitialized"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::AccountAlreadyInitialized"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::UninitializedAccount"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::UninitializedAccount"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::NotEnoughAccountKeys"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::NotEnoughAccountKeys"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MaxSeedLengthExceeded"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::MaxSeedLengthExceeded"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidSeeds"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InvalidSeeds"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::BorshIoError"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::BorshIoError"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountNotRentExempt"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::AccountNotRentExempt"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::UnsupportedSysvar"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::UnsupportedSysvar"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::IllegalOwner"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::IllegalOwner"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MaxAccountsDataAllocationsExceeded"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::MaxAccountsDataAllocationsExceeded"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidRealloc"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InvalidRealloc"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MaxInstructionTraceLengthExceeded"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::MaxInstructionTraceLengthExceeded"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::BuiltinProgramsMustConsumeComputeUnits"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::BuiltinProgramsMustConsumeComputeUnits"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidAccountOwner"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InvalidAccountOwner"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::ArithmeticOverflow"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::ArithmeticOverflow"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::Immutable"
                    |) in
                  Value.StructTuple "pinocchio::program_error::ProgramError::Immutable" [] [] []));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::IncorrectAuthority"
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::IncorrectAuthority"
                    []
                    []
                    []))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_pinocchio_program_error_ProgramError.
  
  Module Impl_core_fmt_Debug_for_pinocchio_program_error_ProgramError.
    Definition Self : Ty.t := Ty.path "pinocchio::program_error::ProgramError".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::program_error::ProgramError" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.match_operator (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "pinocchio::program_error::ProgramError::Custom",
                      0
                    |) in
                  let __self_0 := M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "debug_tuple_field1_finish",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Custom" |) |) |);
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ])
                          (Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                          |)
                        ]
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidArgument"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "InvalidArgument" |) |) |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidInstructionData"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "InvalidInstructionData" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidAccountData"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "InvalidAccountData" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountDataTooSmall"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "AccountDataTooSmall" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InsufficientFunds"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "InsufficientFunds" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::IncorrectProgramId"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "IncorrectProgramId" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MissingRequiredSignature"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "MissingRequiredSignature" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountAlreadyInitialized"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "AccountAlreadyInitialized" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::UninitializedAccount"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "UninitializedAccount" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::NotEnoughAccountKeys"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "NotEnoughAccountKeys" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "AccountBorrowFailed" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MaxSeedLengthExceeded"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "MaxSeedLengthExceeded" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidSeeds"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "InvalidSeeds" |) |) |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::BorshIoError"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "BorshIoError" |) |) |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountNotRentExempt"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "AccountNotRentExempt" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::UnsupportedSysvar"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "UnsupportedSysvar" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::IllegalOwner"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "IllegalOwner" |) |) |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MaxAccountsDataAllocationsExceeded"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "MaxAccountsDataAllocationsExceeded" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidRealloc"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "InvalidRealloc" |) |) |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MaxInstructionTraceLengthExceeded"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "MaxInstructionTraceLengthExceeded" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::BuiltinProgramsMustConsumeComputeUnits"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "BuiltinProgramsMustConsumeComputeUnits" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidAccountOwner"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "InvalidAccountOwner" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::ArithmeticOverflow"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "ArithmeticOverflow" |) |)
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::Immutable"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Immutable" |) |) |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::IncorrectAuthority"
                    |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "write_str",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "IncorrectAuthority" |) |)
                      |)
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_pinocchio_program_error_ProgramError.
  
  Module Impl_core_cmp_Eq_for_pinocchio_program_error_ProgramError.
    Definition Self : Ty.t := Ty.path "pinocchio::program_error::ProgramError".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::program_error::ProgramError" ],
              self
            |) in
          M.match_operator (|
            Ty.tuple [],
            Value.DeclaredButUndefined,
            [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_pinocchio_program_error_ProgramError.
  
  Module Impl_core_marker_StructuralPartialEq_for_pinocchio_program_error_ProgramError.
    Definition Self : Ty.t := Ty.path "pinocchio::program_error::ProgramError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_pinocchio_program_error_ProgramError.
  
  Module Impl_core_cmp_PartialEq_pinocchio_program_error_ProgramError_for_pinocchio_program_error_ProgramError.
    Definition Self : Ty.t := Ty.path "pinocchio::program_error::ProgramError".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::program_error::ProgramError" ],
              self
            |) in
          let other :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::program_error::ProgramError" ],
              other
            |) in
          M.read (|
            let~ __self_discr : Ty.path "isize" :=
              M.call_closure (|
                Ty.path "isize",
                M.get_function (|
                  "core::intrinsics::discriminant_value",
                  [],
                  [ Ty.path "pinocchio::program_error::ProgramError" ]
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |) in
            let~ __arg1_discr : Ty.path "isize" :=
              M.call_closure (|
                Ty.path "isize",
                M.get_function (|
                  "core::intrinsics::discriminant_value",
                  [],
                  [ Ty.path "pinocchio::program_error::ProgramError" ]
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
              |) in
            M.alloc (|
              Ty.path "bool",
              LogicalOp.and (|
                M.call_closure (|
                  Ty.path "bool",
                  BinOp.eq,
                  [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
                |),
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.path "bool",
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "pinocchio::program_error::ProgramError" ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "pinocchio::program_error::ProgramError" ]
                        ],
                      Value.Tuple [ M.read (| self |); M.read (| other |) ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_0 := M.read (| γ0_0 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ0_0,
                              "pinocchio::program_error::ProgramError::Custom",
                              0
                            |) in
                          let __self_0 :=
                            M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ2_0 |) in
                          let γ0_1 := M.read (| γ0_1 |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ0_1,
                              "pinocchio::program_error::ProgramError::Custom",
                              0
                            |) in
                          let __arg1_0 :=
                            M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ2_0 |) in
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_trait_method (|
                              "core::cmp::PartialEq",
                              Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                              [],
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ],
                              "eq",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, __self_0 |);
                              M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                            ]
                          |)));
                      fun γ => ltac:(M.monadic (Value.Bool true))
                    ]
                  |)))
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "pinocchio::program_error::ProgramError" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_pinocchio_program_error_ProgramError_for_pinocchio_program_error_ProgramError.
  
  Definition value_BUILTIN_BIT_SHIFT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 32 |))).
  
  Global Instance Instance_IsConstant_value_BUILTIN_BIT_SHIFT :
    M.IsFunction.C "pinocchio::program_error::BUILTIN_BIT_SHIFT" value_BUILTIN_BIT_SHIFT.
  Admitted.
  Global Typeclasses Opaque value_BUILTIN_BIT_SHIFT.
  
  Definition value_CUSTOM_ZERO (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 1 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_CUSTOM_ZERO :
    M.IsFunction.C "pinocchio::program_error::CUSTOM_ZERO" value_CUSTOM_ZERO.
  Admitted.
  Global Typeclasses Opaque value_CUSTOM_ZERO.
  
  Definition value_INVALID_ARGUMENT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 2 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_INVALID_ARGUMENT :
    M.IsFunction.C "pinocchio::program_error::INVALID_ARGUMENT" value_INVALID_ARGUMENT.
  Admitted.
  Global Typeclasses Opaque value_INVALID_ARGUMENT.
  
  Definition value_INVALID_INSTRUCTION_DATA
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 3 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_INVALID_INSTRUCTION_DATA :
    M.IsFunction.C
      "pinocchio::program_error::INVALID_INSTRUCTION_DATA"
      value_INVALID_INSTRUCTION_DATA.
  Admitted.
  Global Typeclasses Opaque value_INVALID_INSTRUCTION_DATA.
  
  Definition value_INVALID_ACCOUNT_DATA (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 4 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_INVALID_ACCOUNT_DATA :
    M.IsFunction.C "pinocchio::program_error::INVALID_ACCOUNT_DATA" value_INVALID_ACCOUNT_DATA.
  Admitted.
  Global Typeclasses Opaque value_INVALID_ACCOUNT_DATA.
  
  Definition value_ACCOUNT_DATA_TOO_SMALL
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 5 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_ACCOUNT_DATA_TOO_SMALL :
    M.IsFunction.C "pinocchio::program_error::ACCOUNT_DATA_TOO_SMALL" value_ACCOUNT_DATA_TOO_SMALL.
  Admitted.
  Global Typeclasses Opaque value_ACCOUNT_DATA_TOO_SMALL.
  
  Definition value_INSUFFICIENT_FUNDS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 6 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_INSUFFICIENT_FUNDS :
    M.IsFunction.C "pinocchio::program_error::INSUFFICIENT_FUNDS" value_INSUFFICIENT_FUNDS.
  Admitted.
  Global Typeclasses Opaque value_INSUFFICIENT_FUNDS.
  
  Definition value_INCORRECT_PROGRAM_ID (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 7 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_INCORRECT_PROGRAM_ID :
    M.IsFunction.C "pinocchio::program_error::INCORRECT_PROGRAM_ID" value_INCORRECT_PROGRAM_ID.
  Admitted.
  Global Typeclasses Opaque value_INCORRECT_PROGRAM_ID.
  
  Definition value_MISSING_REQUIRED_SIGNATURES
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 8 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_MISSING_REQUIRED_SIGNATURES :
    M.IsFunction.C
      "pinocchio::program_error::MISSING_REQUIRED_SIGNATURES"
      value_MISSING_REQUIRED_SIGNATURES.
  Admitted.
  Global Typeclasses Opaque value_MISSING_REQUIRED_SIGNATURES.
  
  Definition value_ACCOUNT_ALREADY_INITIALIZED
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 9 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_ACCOUNT_ALREADY_INITIALIZED :
    M.IsFunction.C
      "pinocchio::program_error::ACCOUNT_ALREADY_INITIALIZED"
      value_ACCOUNT_ALREADY_INITIALIZED.
  Admitted.
  Global Typeclasses Opaque value_ACCOUNT_ALREADY_INITIALIZED.
  
  Definition value_UNINITIALIZED_ACCOUNT
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 10 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_UNINITIALIZED_ACCOUNT :
    M.IsFunction.C "pinocchio::program_error::UNINITIALIZED_ACCOUNT" value_UNINITIALIZED_ACCOUNT.
  Admitted.
  Global Typeclasses Opaque value_UNINITIALIZED_ACCOUNT.
  
  Definition value_NOT_ENOUGH_ACCOUNT_KEYS
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 11 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_NOT_ENOUGH_ACCOUNT_KEYS :
    M.IsFunction.C
      "pinocchio::program_error::NOT_ENOUGH_ACCOUNT_KEYS"
      value_NOT_ENOUGH_ACCOUNT_KEYS.
  Admitted.
  Global Typeclasses Opaque value_NOT_ENOUGH_ACCOUNT_KEYS.
  
  Definition value_ACCOUNT_BORROW_FAILED
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 12 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_ACCOUNT_BORROW_FAILED :
    M.IsFunction.C "pinocchio::program_error::ACCOUNT_BORROW_FAILED" value_ACCOUNT_BORROW_FAILED.
  Admitted.
  Global Typeclasses Opaque value_ACCOUNT_BORROW_FAILED.
  
  Definition value_MAX_SEED_LENGTH_EXCEEDED
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 13 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_MAX_SEED_LENGTH_EXCEEDED :
    M.IsFunction.C
      "pinocchio::program_error::MAX_SEED_LENGTH_EXCEEDED"
      value_MAX_SEED_LENGTH_EXCEEDED.
  Admitted.
  Global Typeclasses Opaque value_MAX_SEED_LENGTH_EXCEEDED.
  
  Definition value_INVALID_SEEDS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 14 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_INVALID_SEEDS :
    M.IsFunction.C "pinocchio::program_error::INVALID_SEEDS" value_INVALID_SEEDS.
  Admitted.
  Global Typeclasses Opaque value_INVALID_SEEDS.
  
  Definition value_BORSH_IO_ERROR (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 15 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_BORSH_IO_ERROR :
    M.IsFunction.C "pinocchio::program_error::BORSH_IO_ERROR" value_BORSH_IO_ERROR.
  Admitted.
  Global Typeclasses Opaque value_BORSH_IO_ERROR.
  
  Definition value_ACCOUNT_NOT_RENT_EXEMPT
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 16 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_ACCOUNT_NOT_RENT_EXEMPT :
    M.IsFunction.C
      "pinocchio::program_error::ACCOUNT_NOT_RENT_EXEMPT"
      value_ACCOUNT_NOT_RENT_EXEMPT.
  Admitted.
  Global Typeclasses Opaque value_ACCOUNT_NOT_RENT_EXEMPT.
  
  Definition value_UNSUPPORTED_SYSVAR (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 17 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_UNSUPPORTED_SYSVAR :
    M.IsFunction.C "pinocchio::program_error::UNSUPPORTED_SYSVAR" value_UNSUPPORTED_SYSVAR.
  Admitted.
  Global Typeclasses Opaque value_UNSUPPORTED_SYSVAR.
  
  Definition value_ILLEGAL_OWNER (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 18 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_ILLEGAL_OWNER :
    M.IsFunction.C "pinocchio::program_error::ILLEGAL_OWNER" value_ILLEGAL_OWNER.
  Admitted.
  Global Typeclasses Opaque value_ILLEGAL_OWNER.
  
  Definition value_MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 19 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED :
    M.IsFunction.C
      "pinocchio::program_error::MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED"
      value_MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED.
  Admitted.
  Global Typeclasses Opaque value_MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED.
  
  Definition value_INVALID_ACCOUNT_DATA_REALLOC
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 20 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_INVALID_ACCOUNT_DATA_REALLOC :
    M.IsFunction.C
      "pinocchio::program_error::INVALID_ACCOUNT_DATA_REALLOC"
      value_INVALID_ACCOUNT_DATA_REALLOC.
  Admitted.
  Global Typeclasses Opaque value_INVALID_ACCOUNT_DATA_REALLOC.
  
  Definition value_MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 21 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED :
    M.IsFunction.C
      "pinocchio::program_error::MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED"
      value_MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED.
  Admitted.
  Global Typeclasses Opaque value_MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED.
  
  Definition value_BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 22 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS :
    M.IsFunction.C
      "pinocchio::program_error::BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS"
      value_BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS.
  Admitted.
  Global Typeclasses Opaque value_BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS.
  
  Definition value_INVALID_ACCOUNT_OWNER
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 23 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_INVALID_ACCOUNT_OWNER :
    M.IsFunction.C "pinocchio::program_error::INVALID_ACCOUNT_OWNER" value_INVALID_ACCOUNT_OWNER.
  Admitted.
  Global Typeclasses Opaque value_INVALID_ACCOUNT_OWNER.
  
  Definition value_ARITHMETIC_OVERFLOW (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 24 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_ARITHMETIC_OVERFLOW :
    M.IsFunction.C "pinocchio::program_error::ARITHMETIC_OVERFLOW" value_ARITHMETIC_OVERFLOW.
  Admitted.
  Global Typeclasses Opaque value_ARITHMETIC_OVERFLOW.
  
  Definition value_IMMUTABLE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 25 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_IMMUTABLE :
    M.IsFunction.C "pinocchio::program_error::IMMUTABLE" value_IMMUTABLE.
  Admitted.
  Global Typeclasses Opaque value_IMMUTABLE.
  
  Definition value_INCORRECT_AUTHORITY (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Ty.path "u64",
        M.call_closure (|
          Ty.path "u64",
          BinOp.Wrap.shl,
          [
            M.read (| M.use (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 26 |)) |);
            M.read (|
              get_constant (| "pinocchio::program_error::BUILTIN_BIT_SHIFT", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_INCORRECT_AUTHORITY :
    M.IsFunction.C "pinocchio::program_error::INCORRECT_AUTHORITY" value_INCORRECT_AUTHORITY.
  Admitted.
  Global Typeclasses Opaque value_INCORRECT_AUTHORITY.
  
  Module Impl_core_convert_From_u64_for_pinocchio_program_error_ProgramError.
    Definition Self : Ty.t := Ty.path "pinocchio::program_error::ProgramError".
    
    (*
        fn from(error: u64) -> Self {
            match error {
                CUSTOM_ZERO => Self::Custom(0),
                INVALID_ARGUMENT => Self::InvalidArgument,
                INVALID_INSTRUCTION_DATA => Self::InvalidInstructionData,
                INVALID_ACCOUNT_DATA => Self::InvalidAccountData,
                ACCOUNT_DATA_TOO_SMALL => Self::AccountDataTooSmall,
                INSUFFICIENT_FUNDS => Self::InsufficientFunds,
                INCORRECT_PROGRAM_ID => Self::IncorrectProgramId,
                MISSING_REQUIRED_SIGNATURES => Self::MissingRequiredSignature,
                ACCOUNT_ALREADY_INITIALIZED => Self::AccountAlreadyInitialized,
                UNINITIALIZED_ACCOUNT => Self::UninitializedAccount,
                NOT_ENOUGH_ACCOUNT_KEYS => Self::NotEnoughAccountKeys,
                ACCOUNT_BORROW_FAILED => Self::AccountBorrowFailed,
                MAX_SEED_LENGTH_EXCEEDED => Self::MaxSeedLengthExceeded,
                INVALID_SEEDS => Self::InvalidSeeds,
                BORSH_IO_ERROR => Self::BorshIoError,
                ACCOUNT_NOT_RENT_EXEMPT => Self::AccountNotRentExempt,
                UNSUPPORTED_SYSVAR => Self::UnsupportedSysvar,
                ILLEGAL_OWNER => Self::IllegalOwner,
                MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED => Self::MaxAccountsDataAllocationsExceeded,
                INVALID_ACCOUNT_DATA_REALLOC => Self::InvalidRealloc,
                MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED => Self::MaxInstructionTraceLengthExceeded,
                BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS => {
                    Self::BuiltinProgramsMustConsumeComputeUnits
                }
                INVALID_ACCOUNT_OWNER => Self::InvalidAccountOwner,
                ARITHMETIC_OVERFLOW => Self::ArithmeticOverflow,
                IMMUTABLE => Self::Immutable,
                INCORRECT_AUTHORITY => Self::IncorrectAuthority,
                _ => Self::Custom(error as u32),
            }
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ error ] =>
        ltac:(M.monadic
          (let error := M.alloc (| Ty.path "u64", error |) in
          M.match_operator (|
            Ty.path "pinocchio::program_error::ProgramError",
            error,
            [
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 4294967296
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::Custom"
                    []
                    []
                    [ Value.Integer IntegerKind.U32 0 ]));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 8589934592
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InvalidArgument"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 12884901888
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InvalidInstructionData"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 17179869184
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InvalidAccountData"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 21474836480
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::AccountDataTooSmall"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 25769803776
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InsufficientFunds"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 30064771072
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::IncorrectProgramId"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 34359738368
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::MissingRequiredSignature"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 38654705664
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::AccountAlreadyInitialized"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 42949672960
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::UninitializedAccount"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 47244640256
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::NotEnoughAccountKeys"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 51539607552
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 55834574848
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::MaxSeedLengthExceeded"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 60129542144
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InvalidSeeds"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 64424509440
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::BorshIoError"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 68719476736
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::AccountNotRentExempt"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 73014444032
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::UnsupportedSysvar"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 77309411328
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::IllegalOwner"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 81604378624
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::MaxAccountsDataAllocationsExceeded"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 85899345920
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InvalidRealloc"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 90194313216
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::MaxInstructionTraceLengthExceeded"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 94489280512
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::BuiltinProgramsMustConsumeComputeUnits"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 98784247808
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::InvalidAccountOwner"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 103079215104
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::ArithmeticOverflow"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 107374182400
                    |) in
                  Value.StructTuple "pinocchio::program_error::ProgramError::Immutable" [] [] []));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    is_constant_or_break_match (|
                      M.read (| γ |),
                      Value.Integer IntegerKind.U64 111669149696
                    |) in
                  Value.StructTuple
                    "pinocchio::program_error::ProgramError::IncorrectAuthority"
                    []
                    []
                    []));
              fun γ =>
                ltac:(M.monadic
                  (Value.StructTuple
                    "pinocchio::program_error::ProgramError::Custom"
                    []
                    []
                    [ M.cast (Ty.path "u32") (M.read (| error |)) ]))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u64" ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_u64_for_pinocchio_program_error_ProgramError.
  
  Module Impl_core_convert_From_pinocchio_program_error_ProgramError_for_u64.
    Definition Self : Ty.t := Ty.path "u64".
    
    (*
        fn from(error: ProgramError) -> Self {
            match error {
                ProgramError::InvalidArgument => INVALID_ARGUMENT,
                ProgramError::InvalidInstructionData => INVALID_INSTRUCTION_DATA,
                ProgramError::InvalidAccountData => INVALID_ACCOUNT_DATA,
                ProgramError::AccountDataTooSmall => ACCOUNT_DATA_TOO_SMALL,
                ProgramError::InsufficientFunds => INSUFFICIENT_FUNDS,
                ProgramError::IncorrectProgramId => INCORRECT_PROGRAM_ID,
                ProgramError::MissingRequiredSignature => MISSING_REQUIRED_SIGNATURES,
                ProgramError::AccountAlreadyInitialized => ACCOUNT_ALREADY_INITIALIZED,
                ProgramError::UninitializedAccount => UNINITIALIZED_ACCOUNT,
                ProgramError::NotEnoughAccountKeys => NOT_ENOUGH_ACCOUNT_KEYS,
                ProgramError::AccountBorrowFailed => ACCOUNT_BORROW_FAILED,
                ProgramError::MaxSeedLengthExceeded => MAX_SEED_LENGTH_EXCEEDED,
                ProgramError::InvalidSeeds => INVALID_SEEDS,
                ProgramError::BorshIoError => BORSH_IO_ERROR,
                ProgramError::AccountNotRentExempt => ACCOUNT_NOT_RENT_EXEMPT,
                ProgramError::UnsupportedSysvar => UNSUPPORTED_SYSVAR,
                ProgramError::IllegalOwner => ILLEGAL_OWNER,
                ProgramError::MaxAccountsDataAllocationsExceeded => {
                    MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED
                }
                ProgramError::InvalidRealloc => INVALID_ACCOUNT_DATA_REALLOC,
                ProgramError::MaxInstructionTraceLengthExceeded => {
                    MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED
                }
                ProgramError::BuiltinProgramsMustConsumeComputeUnits => {
                    BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS
                }
                ProgramError::InvalidAccountOwner => INVALID_ACCOUNT_OWNER,
                ProgramError::ArithmeticOverflow => ARITHMETIC_OVERFLOW,
                ProgramError::Immutable => IMMUTABLE,
                ProgramError::IncorrectAuthority => INCORRECT_AUTHORITY,
                ProgramError::Custom(error) => {
                    if error == 0 {
                        CUSTOM_ZERO
                    } else {
                        error as u64
                    }
                }
            }
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ error ] =>
        ltac:(M.monadic
          (let error := M.alloc (| Ty.path "pinocchio::program_error::ProgramError", error |) in
          M.match_operator (|
            Ty.path "u64",
            error,
            [
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidArgument"
                    |) in
                  M.read (|
                    get_constant (| "pinocchio::program_error::INVALID_ARGUMENT", Ty.path "u64" |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidInstructionData"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::INVALID_INSTRUCTION_DATA",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidAccountData"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::INVALID_ACCOUNT_DATA",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountDataTooSmall"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::ACCOUNT_DATA_TOO_SMALL",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InsufficientFunds"
                    |) in
                  M.read (|
                    get_constant (| "pinocchio::program_error::INSUFFICIENT_FUNDS", Ty.path "u64" |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::IncorrectProgramId"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::INCORRECT_PROGRAM_ID",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MissingRequiredSignature"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::MISSING_REQUIRED_SIGNATURES",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountAlreadyInitialized"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::ACCOUNT_ALREADY_INITIALIZED",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::UninitializedAccount"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::UNINITIALIZED_ACCOUNT",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::NotEnoughAccountKeys"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::NOT_ENOUGH_ACCOUNT_KEYS",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::ACCOUNT_BORROW_FAILED",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MaxSeedLengthExceeded"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::MAX_SEED_LENGTH_EXCEEDED",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidSeeds"
                    |) in
                  M.read (|
                    get_constant (| "pinocchio::program_error::INVALID_SEEDS", Ty.path "u64" |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::BorshIoError"
                    |) in
                  M.read (|
                    get_constant (| "pinocchio::program_error::BORSH_IO_ERROR", Ty.path "u64" |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountNotRentExempt"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::ACCOUNT_NOT_RENT_EXEMPT",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::UnsupportedSysvar"
                    |) in
                  M.read (|
                    get_constant (| "pinocchio::program_error::UNSUPPORTED_SYSVAR", Ty.path "u64" |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::IllegalOwner"
                    |) in
                  M.read (|
                    get_constant (| "pinocchio::program_error::ILLEGAL_OWNER", Ty.path "u64" |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MaxAccountsDataAllocationsExceeded"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidRealloc"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::INVALID_ACCOUNT_DATA_REALLOC",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MaxInstructionTraceLengthExceeded"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::BuiltinProgramsMustConsumeComputeUnits"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidAccountOwner"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::INVALID_ACCOUNT_OWNER",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::ArithmeticOverflow"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::ARITHMETIC_OVERFLOW",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::Immutable"
                    |) in
                  M.read (|
                    get_constant (| "pinocchio::program_error::IMMUTABLE", Ty.path "u64" |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::IncorrectAuthority"
                    |) in
                  M.read (|
                    get_constant (|
                      "pinocchio::program_error::INCORRECT_AUTHORITY",
                      Ty.path "u64"
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "pinocchio::program_error::ProgramError::Custom",
                      0
                    |) in
                  let error := M.copy (| Ty.path "u32", γ0_0 |) in
                  M.match_operator (|
                    Ty.path "u64",
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [ M.read (| error |); Value.Integer IntegerKind.U32 0 ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            get_constant (|
                              "pinocchio::program_error::CUSTOM_ZERO",
                              Ty.path "u64"
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.cast (Ty.path "u64") (M.read (| error |))))
                    ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "pinocchio::program_error::ProgramError" ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_pinocchio_program_error_ProgramError_for_u64.
  
  (* Trait *)
  (* Empty module 'ToStr' *)
  
  Module Impl_pinocchio_program_error_ToStr_for_pinocchio_program_error_ProgramError.
    Definition Self : Ty.t := Ty.path "pinocchio::program_error::ProgramError".
    
    (*
        fn to_str<E>(&self) -> &'static str
        where
            E: 'static + ToStr + TryFrom<u32>,
        {
            match self {
                Self::Custom(error) => {
                    if let Ok(custom_error) = E::try_from( *error) {
                        custom_error.to_str::<E>()
                    } else {
                        "Error: Unknown"
                    }
                }
                Self::InvalidArgument => "Error: InvalidArgument",
                Self::InvalidInstructionData => "Error: InvalidInstructionData",
                Self::InvalidAccountData => "Error: InvalidAccountData",
                Self::AccountDataTooSmall => "Error: AccountDataTooSmall",
                Self::InsufficientFunds => "Error: InsufficientFunds",
                Self::IncorrectProgramId => "Error: IncorrectProgramId",
                Self::MissingRequiredSignature => "Error: MissingRequiredSignature",
                Self::AccountAlreadyInitialized => "Error: AccountAlreadyInitialized",
                Self::UninitializedAccount => "Error: UninitializedAccount",
                Self::NotEnoughAccountKeys => "Error: NotEnoughAccountKeys",
                Self::AccountBorrowFailed => "Error: AccountBorrowFailed",
                Self::MaxSeedLengthExceeded => "Error: MaxSeedLengthExceeded",
                Self::InvalidSeeds => "Error: InvalidSeeds",
                Self::BorshIoError => "Error: BorshIoError",
                Self::AccountNotRentExempt => "Error: AccountNotRentExempt",
                Self::UnsupportedSysvar => "Error: UnsupportedSysvar",
                Self::IllegalOwner => "Error: IllegalOwner",
                Self::MaxAccountsDataAllocationsExceeded => "Error: MaxAccountsDataAllocationsExceeded",
                Self::InvalidRealloc => "Error: InvalidRealloc",
                Self::MaxInstructionTraceLengthExceeded => "Error: MaxInstructionTraceLengthExceeded",
                Self::BuiltinProgramsMustConsumeComputeUnits => {
                    "Error: BuiltinProgramsMustConsumeComputeUnits"
                }
                Self::InvalidAccountOwner => "Error: InvalidAccountOwner",
                Self::ArithmeticOverflow => "Error: ArithmeticOverflow",
                Self::Immutable => "Error: Immutable",
                Self::IncorrectAuthority => "Error: IncorrectAuthority",
            }
        }
    *)
    Definition to_str (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ E ], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::program_error::ProgramError" ],
              self
            |) in
          M.match_operator (|
            Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
            self,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "pinocchio::program_error::ProgramError::Custom",
                      0
                    |) in
                  let error := M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                  M.match_operator (|
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  E;
                                  Ty.associated_in_trait
                                    "core::convert::TryFrom"
                                    []
                                    [ Ty.path "u32" ]
                                    E
                                    "Error"
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    E;
                                    Ty.associated_in_trait
                                      "core::convert::TryFrom"
                                      []
                                      [ Ty.path "u32" ]
                                      E
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "core::convert::TryFrom",
                                  E,
                                  [],
                                  [ Ty.path "u32" ],
                                  "try_from",
                                  [],
                                  []
                                |),
                                [ M.read (| M.deref (| M.read (| error |) |) |) ]
                              |)
                            |) in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::result::Result::Ok",
                              0
                            |) in
                          let custom_error := M.copy (| E, γ0_0 |) in
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                            M.get_trait_method (|
                              "pinocchio::program_error::ToStr",
                              E,
                              [],
                              [],
                              "to_str",
                              [],
                              [ E ]
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, custom_error |) ]
                          |)));
                      fun γ => ltac:(M.monadic (mk_str (| "Error: Unknown" |)))
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidArgument"
                    |) in
                  mk_str (| "Error: InvalidArgument" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidInstructionData"
                    |) in
                  mk_str (| "Error: InvalidInstructionData" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidAccountData"
                    |) in
                  mk_str (| "Error: InvalidAccountData" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountDataTooSmall"
                    |) in
                  mk_str (| "Error: AccountDataTooSmall" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InsufficientFunds"
                    |) in
                  mk_str (| "Error: InsufficientFunds" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::IncorrectProgramId"
                    |) in
                  mk_str (| "Error: IncorrectProgramId" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MissingRequiredSignature"
                    |) in
                  mk_str (| "Error: MissingRequiredSignature" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountAlreadyInitialized"
                    |) in
                  mk_str (| "Error: AccountAlreadyInitialized" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::UninitializedAccount"
                    |) in
                  mk_str (| "Error: UninitializedAccount" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::NotEnoughAccountKeys"
                    |) in
                  mk_str (| "Error: NotEnoughAccountKeys" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountBorrowFailed"
                    |) in
                  mk_str (| "Error: AccountBorrowFailed" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MaxSeedLengthExceeded"
                    |) in
                  mk_str (| "Error: MaxSeedLengthExceeded" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidSeeds"
                    |) in
                  mk_str (| "Error: InvalidSeeds" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::BorshIoError"
                    |) in
                  mk_str (| "Error: BorshIoError" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::AccountNotRentExempt"
                    |) in
                  mk_str (| "Error: AccountNotRentExempt" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::UnsupportedSysvar"
                    |) in
                  mk_str (| "Error: UnsupportedSysvar" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::IllegalOwner"
                    |) in
                  mk_str (| "Error: IllegalOwner" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MaxAccountsDataAllocationsExceeded"
                    |) in
                  mk_str (| "Error: MaxAccountsDataAllocationsExceeded" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidRealloc"
                    |) in
                  mk_str (| "Error: InvalidRealloc" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::MaxInstructionTraceLengthExceeded"
                    |) in
                  mk_str (| "Error: MaxInstructionTraceLengthExceeded" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::BuiltinProgramsMustConsumeComputeUnits"
                    |) in
                  mk_str (| "Error: BuiltinProgramsMustConsumeComputeUnits" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::InvalidAccountOwner"
                    |) in
                  mk_str (| "Error: InvalidAccountOwner" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::ArithmeticOverflow"
                    |) in
                  mk_str (| "Error: ArithmeticOverflow" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::Immutable"
                    |) in
                  mk_str (| "Error: Immutable" |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "pinocchio::program_error::ProgramError::IncorrectAuthority"
                    |) in
                  mk_str (| "Error: IncorrectAuthority" |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "pinocchio::program_error::ToStr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("to_str", InstanceField.Method to_str) ].
  End Impl_pinocchio_program_error_ToStr_for_pinocchio_program_error_ProgramError.
End program_error.
