(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module pubkey.
  Definition value_PUBKEY_BYTES (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 32 |))).
  
  Global Instance Instance_IsConstant_value_PUBKEY_BYTES :
    M.IsFunction.C "pinocchio::pubkey::PUBKEY_BYTES" value_PUBKEY_BYTES.
  Admitted.
  Global Typeclasses Opaque value_PUBKEY_BYTES.
  
  Definition value_MAX_SEED_LEN (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 32 |))).
  
  Global Instance Instance_IsConstant_value_MAX_SEED_LEN :
    M.IsFunction.C "pinocchio::pubkey::MAX_SEED_LEN" value_MAX_SEED_LEN.
  Admitted.
  Global Typeclasses Opaque value_MAX_SEED_LEN.
  
  Definition value_MAX_SEEDS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 16 |))).
  
  Global Instance Instance_IsConstant_value_MAX_SEEDS :
    M.IsFunction.C "pinocchio::pubkey::MAX_SEEDS" value_MAX_SEEDS.
  Admitted.
  Global Typeclasses Opaque value_MAX_SEEDS.
  
  Axiom Pubkey :
    (Ty.path "pinocchio::pubkey::Pubkey") =
      (Ty.apply
        (Ty.path "array")
        [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
        [ Ty.path "u8" ]).
  
  (*
  pub fn log(pubkey: &Pubkey) {
      #[cfg(target_os = "solana")]
      unsafe {
          crate::syscalls::sol_log_pubkey(pubkey as *const _ as *const u8)
      };
  
      #[cfg(not(target_os = "solana"))]
      core::hint::black_box(pubkey);
  }
  *)
  Definition log (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ pubkey ] =>
      ltac:(M.monadic
        (let pubkey :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                  [ Ty.path "u8" ]
              ],
            pubkey
          |) in
        M.read (|
          let~ _ :
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
                ] :=
            M.call_closure (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
                ],
              M.get_function (|
                "core::hint::black_box",
                [],
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ]
                ]
              |),
              [ M.read (| pubkey |) ]
            |) in
          M.alloc (| Ty.tuple [], Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_log : M.IsFunction.C "pinocchio::pubkey::log" log.
  Admitted.
  Global Typeclasses Opaque log.
  
  (*
  pub fn find_program_address(seeds: &[&[u8]], program_id: &Pubkey) -> (Pubkey, u8) {
      try_find_program_address(seeds, program_id)
          .unwrap_or_else(|| panic!("Unable to find a viable program address bump seed"))
  }
  *)
  Definition find_program_address (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ seeds; program_id ] =>
      ltac:(M.monadic
        (let seeds :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "slice")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
              ],
            seeds
          |) in
        let program_id :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                  [ Ty.path "u8" ]
              ],
            program_id
          |) in
        M.call_closure (|
          Ty.tuple
            [
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ];
              Ty.path "u8"
            ],
          M.get_associated_function (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [
                Ty.tuple
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ];
                    Ty.path "u8"
                  ]
              ],
            "unwrap_or_else",
            [],
            [
              Ty.function
                []
                (Ty.tuple
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ];
                    Ty.path "u8"
                  ])
            ]
          |),
          [
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ];
                      Ty.path "u8"
                    ]
                ],
              M.get_function (| "pinocchio::pubkey::try_find_program_address", [], [] |),
              [
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| seeds |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| program_id |) |) |)
              ]
            |);
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8" ];
                            Ty.path "u8"
                          ],
                        M.alloc (| Ty.tuple [], α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (M.never_to_any (|
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                  [
                                    M.call_closure (|
                                      Ty.path "core::fmt::Arguments",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Arguments",
                                        "new_const",
                                        [ Value.Integer IntegerKind.Usize 1 ],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 1 ]
                                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                                Value.Array
                                                  [
                                                    mk_str (|
                                                      "Unable to find a viable program address bump seed"
                                                    |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_find_program_address :
    M.IsFunction.C "pinocchio::pubkey::find_program_address" find_program_address.
  Admitted.
  Global Typeclasses Opaque find_program_address.
  
  (*
  pub fn try_find_program_address(seeds: &[&[u8]], program_id: &Pubkey) -> Option<(Pubkey, u8)> {
      #[cfg(target_os = "solana")]
      {
          let mut bytes = core::mem::MaybeUninit::<[u8; PUBKEY_BYTES]>::uninit();
          let mut bump_seed = u8::MAX;
  
          let result = unsafe {
              crate::syscalls::sol_try_find_program_address(
                  seeds as *const _ as *const u8,
                  seeds.len() as u64,
                  program_id as *const _,
                  bytes.as_mut_ptr() as *mut _,
                  &mut bump_seed as *mut _,
              )
          };
          match result {
              // SAFETY: The syscall has initialized the bytes.
              crate::SUCCESS => Some((unsafe { bytes.assume_init() }, bump_seed)),
              _ => None,
          }
      }
  
      #[cfg(not(target_os = "solana"))]
      {
          core::hint::black_box((seeds, program_id));
          None
      }
  }
  *)
  Definition try_find_program_address (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ seeds; program_id ] =>
      ltac:(M.monadic
        (let seeds :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "slice")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
              ],
            seeds
          |) in
        let program_id :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                  [ Ty.path "u8" ]
              ],
            program_id
          |) in
        M.read (|
          let~ _ :
              Ty.tuple
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        ]
                    ];
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ]
                ] :=
            M.call_closure (|
              Ty.tuple
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        ]
                    ];
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ]
                ],
              M.get_function (|
                "core::hint::black_box",
                [],
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                            ]
                        ];
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8" ]
                        ]
                    ]
                ]
              |),
              [ Value.Tuple [ M.read (| seeds |); M.read (| program_id |) ] ]
            |) in
          M.alloc (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [
                Ty.tuple
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ];
                    Ty.path "u8"
                  ]
              ],
            Value.StructTuple
              "core::option::Option::None"
              []
              [
                Ty.tuple
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ];
                    Ty.path "u8"
                  ]
              ]
              []
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_try_find_program_address :
    M.IsFunction.C "pinocchio::pubkey::try_find_program_address" try_find_program_address.
  Admitted.
  Global Typeclasses Opaque try_find_program_address.
  
  (*
  pub fn create_program_address(
      seeds: &[&[u8]],
      program_id: &Pubkey,
  ) -> Result<Pubkey, ProgramError> {
      // Call via a system call to perform the calculation
      #[cfg(target_os = "solana")]
      {
          let mut bytes = core::mem::MaybeUninit::<[u8; PUBKEY_BYTES]>::uninit();
  
          let result = unsafe {
              crate::syscalls::sol_create_program_address(
                  seeds as *const _ as *const u8,
                  seeds.len() as u64,
                  program_id as *const _ as *const u8,
                  bytes.as_mut_ptr() as *mut u8,
              )
          };
  
          match result {
              // SAFETY: The syscall has initialized the bytes.
              crate::SUCCESS => Ok(unsafe { bytes.assume_init() }),
              _ => Err(result.into()),
          }
      }
  
      #[cfg(not(target_os = "solana"))]
      {
          core::hint::black_box((seeds, program_id));
          panic!("create_program_address is only available on target `solana`")
      }
  }
  *)
  Definition create_program_address (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ seeds; program_id ] =>
      ltac:(M.monadic
        (let seeds :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "slice")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
              ],
            seeds
          |) in
        let program_id :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                  [ Ty.path "u8" ]
              ],
            program_id
          |) in
        M.read (|
          let~ _ :
              Ty.tuple
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        ]
                    ];
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ]
                ] :=
            M.call_closure (|
              Ty.tuple
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        ]
                    ];
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ]
                ],
              M.get_function (|
                "core::hint::black_box",
                [],
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                            ]
                        ];
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8" ]
                        ]
                    ]
                ]
              |),
              [ Value.Tuple [ M.read (| seeds |); M.read (| program_id |) ] ]
            |) in
          M.alloc (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ];
                Ty.path "pinocchio::program_error::ProgramError"
              ],
            M.never_to_any (|
              M.call_closure (|
                Ty.path "never",
                M.get_function (| "core::panicking::panic_fmt", [], [] |),
                [
                  M.call_closure (|
                    Ty.path "core::fmt::Arguments",
                    M.get_associated_function (|
                      Ty.path "core::fmt::Arguments",
                      "new_const",
                      [ Value.Integer IntegerKind.Usize 1 ],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                              Value.Array
                                [
                                  mk_str (|
                                    "create_program_address is only available on target `solana`"
                                  |)
                                ]
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_create_program_address :
    M.IsFunction.C "pinocchio::pubkey::create_program_address" create_program_address.
  Admitted.
  Global Typeclasses Opaque create_program_address.
  
  (*
  pub fn checked_create_program_address(
      seeds: &[&[u8]],
      program_id: &Pubkey,
  ) -> Result<Pubkey, ProgramError> {
      if seeds.len() > MAX_SEEDS {
          return Err(ProgramError::MaxSeedLengthExceeded);
      }
      if seeds.iter().any(|seed| seed.len() > MAX_SEED_LEN) {
          return Err(ProgramError::MaxSeedLengthExceeded);
      }
  
      create_program_address(seeds, program_id)
  }
  *)
  Definition checked_create_program_address
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [], [ seeds; program_id ] =>
      ltac:(M.monadic
        (let seeds :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "slice")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ]
              ],
            seeds
          |) in
        let program_id :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                  [ Ty.path "u8" ]
              ],
            program_id
          |) in
        M.catch_return
          (Ty.apply
            (Ty.path "core::result::Result")
            []
            [
              Ty.apply
                (Ty.path "array")
                [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                [ Ty.path "u8" ];
              Ty.path "pinocchio::program_error::ProgramError"
            ]) (|
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.gt,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                        ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| seeds |) |)
                                      |)
                                    ]
                                  |);
                                  M.read (|
                                    get_constant (|
                                      "pinocchio::pubkey::MAX_SEEDS",
                                      Ty.path "usize"
                                    |)
                                  |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.never_to_any (|
                          M.read (|
                            M.return_ (|
                              Value.StructTuple
                                "core::result::Result::Err"
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8" ];
                                  Ty.path "pinocchio::program_error::ProgramError"
                                ]
                                [
                                  Value.StructTuple
                                    "pinocchio::program_error::ProgramError::MaxSeedLengthExceeded"
                                    []
                                    []
                                    []
                                ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                    ],
                                  [],
                                  [],
                                  "any",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                          ]
                                      ]
                                      (Ty.path "bool")
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                        ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                            ],
                                          "iter",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| seeds |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Ty.path "bool",
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ]
                                                      ]
                                                  ],
                                                α0
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let seed :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [ Ty.path "u8" ]
                                                              ]
                                                          ],
                                                        γ
                                                      |) in
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.gt,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.path "u8" ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.read (|
                                                                  M.deref (| M.read (| seed |) |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (|
                                                          get_constant (|
                                                            "pinocchio::pubkey::MAX_SEED_LEN",
                                                            Ty.path "usize"
                                                          |)
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end))
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.never_to_any (|
                          M.read (|
                            M.return_ (|
                              Value.StructTuple
                                "core::result::Result::Err"
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8" ];
                                  Ty.path "pinocchio::program_error::ProgramError"
                                ]
                                [
                                  Value.StructTuple
                                    "pinocchio::program_error::ProgramError::MaxSeedLengthExceeded"
                                    []
                                    []
                                    []
                                ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ];
                    Ty.path "pinocchio::program_error::ProgramError"
                  ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ];
                      Ty.path "pinocchio::program_error::ProgramError"
                    ],
                  M.get_function (| "pinocchio::pubkey::create_program_address", [], [] |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| seeds |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| program_id |) |) |)
                  ]
                |)
              |)
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_checked_create_program_address :
    M.IsFunction.C
      "pinocchio::pubkey::checked_create_program_address"
      checked_create_program_address.
  Admitted.
  Global Typeclasses Opaque checked_create_program_address.
End pubkey.
