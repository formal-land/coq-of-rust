(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module sysvars.
  Module clock.
    Definition value_CLOCK_ID (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ],
          Value.Array
            [
              Value.Integer IntegerKind.U8 6;
              Value.Integer IntegerKind.U8 167;
              Value.Integer IntegerKind.U8 213;
              Value.Integer IntegerKind.U8 23;
              Value.Integer IntegerKind.U8 24;
              Value.Integer IntegerKind.U8 199;
              Value.Integer IntegerKind.U8 116;
              Value.Integer IntegerKind.U8 201;
              Value.Integer IntegerKind.U8 40;
              Value.Integer IntegerKind.U8 86;
              Value.Integer IntegerKind.U8 99;
              Value.Integer IntegerKind.U8 152;
              Value.Integer IntegerKind.U8 105;
              Value.Integer IntegerKind.U8 29;
              Value.Integer IntegerKind.U8 94;
              Value.Integer IntegerKind.U8 182;
              Value.Integer IntegerKind.U8 139;
              Value.Integer IntegerKind.U8 94;
              Value.Integer IntegerKind.U8 184;
              Value.Integer IntegerKind.U8 163;
              Value.Integer IntegerKind.U8 155;
              Value.Integer IntegerKind.U8 75;
              Value.Integer IntegerKind.U8 109;
              Value.Integer IntegerKind.U8 92;
              Value.Integer IntegerKind.U8 115;
              Value.Integer IntegerKind.U8 85;
              Value.Integer IntegerKind.U8 91;
              Value.Integer IntegerKind.U8 33;
              Value.Integer IntegerKind.U8 0;
              Value.Integer IntegerKind.U8 0;
              Value.Integer IntegerKind.U8 0;
              Value.Integer IntegerKind.U8 0
            ]
        |))).
    
    Global Instance Instance_IsConstant_value_CLOCK_ID :
      M.IsFunction.C "pinocchio::sysvars::clock::CLOCK_ID" value_CLOCK_ID.
    Admitted.
    Global Typeclasses Opaque value_CLOCK_ID.
    
    Axiom Slot : (Ty.path "pinocchio::sysvars::clock::Slot") = (Ty.path "u64").
    
    Axiom Epoch : (Ty.path "pinocchio::sysvars::clock::Epoch") = (Ty.path "u64").
    
    Axiom UnixTimestamp : (Ty.path "pinocchio::sysvars::clock::UnixTimestamp") = (Ty.path "i64").
    
    (* StructRecord
      {
        name := "Clock";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("slot", Ty.path "u64");
            ("epoch_start_timestamp", Ty.path "i64");
            ("epoch", Ty.path "u64");
            ("leader_schedule_epoch", Ty.path "u64");
            ("unix_timestamp", Ty.path "i64")
          ];
      } *)
    
    Module Impl_core_marker_Copy_for_pinocchio_sysvars_clock_Clock.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::clock::Clock".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_pinocchio_sysvars_clock_Clock.
    
    Module Impl_core_clone_Clone_for_pinocchio_sysvars_clock_Clock.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::clock::Clock".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::clock::Clock" ],
                self
              |) in
            M.match_operator (|
              Ty.path "pinocchio::sysvars::clock::Clock",
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.path "pinocchio::sysvars::clock::Clock",
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.path "pinocchio::sysvars::clock::Clock",
                              Value.DeclaredButUndefined,
                              [
                                fun γ =>
                                  ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_pinocchio_sysvars_clock_Clock.
    
    Module Impl_core_default_Default_for_pinocchio_sysvars_clock_Clock.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::clock::Clock".
      
      (* Default *)
      Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "pinocchio::sysvars::clock::Clock"
              []
              []
              [
                ("slot",
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "u64",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("epoch_start_timestamp",
                  M.call_closure (|
                    Ty.path "i64",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "i64",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("epoch",
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "u64",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("leader_schedule_epoch",
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "u64",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("unix_timestamp",
                  M.call_closure (|
                    Ty.path "i64",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "i64",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_pinocchio_sysvars_clock_Clock.
    
    Definition value_DEFAULT_TICKS_PER_SLOT
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 64 |))).
    
    Global Instance Instance_IsConstant_value_DEFAULT_TICKS_PER_SLOT :
      M.IsFunction.C
        "pinocchio::sysvars::clock::DEFAULT_TICKS_PER_SLOT"
        value_DEFAULT_TICKS_PER_SLOT.
    Admitted.
    Global Typeclasses Opaque value_DEFAULT_TICKS_PER_SLOT.
    
    Definition value_DEFAULT_TICKS_PER_SECOND
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 160 |))).
    
    Global Instance Instance_IsConstant_value_DEFAULT_TICKS_PER_SECOND :
      M.IsFunction.C
        "pinocchio::sysvars::clock::DEFAULT_TICKS_PER_SECOND"
        value_DEFAULT_TICKS_PER_SECOND.
    Admitted.
    Global Typeclasses Opaque value_DEFAULT_TICKS_PER_SECOND.
    
    Definition value_DEFAULT_MS_PER_SLOT
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic
        (M.alloc (|
          Ty.path "u64",
          M.call_closure (|
            Ty.path "u64",
            BinOp.Wrap.div,
            [
              M.call_closure (|
                Ty.path "u64",
                BinOp.Wrap.mul,
                [
                  Value.Integer IntegerKind.U64 1000;
                  M.read (|
                    get_constant (|
                      "pinocchio::sysvars::clock::DEFAULT_TICKS_PER_SLOT",
                      Ty.path "u64"
                    |)
                  |)
                ]
              |);
              M.read (|
                get_constant (|
                  "pinocchio::sysvars::clock::DEFAULT_TICKS_PER_SECOND",
                  Ty.path "u64"
                |)
              |)
            ]
          |)
        |))).
    
    Global Instance Instance_IsConstant_value_DEFAULT_MS_PER_SLOT :
      M.IsFunction.C "pinocchio::sysvars::clock::DEFAULT_MS_PER_SLOT" value_DEFAULT_MS_PER_SLOT.
    Admitted.
    Global Typeclasses Opaque value_DEFAULT_MS_PER_SLOT.
    
    Module Impl_pinocchio_sysvars_Sysvar_for_pinocchio_sysvars_clock_Clock.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::clock::Clock".
      
      (*
              fn get() -> Result<Self, $crate::program_error::ProgramError> {
                  let mut var = core::mem::MaybeUninit::<Self>::uninit();
                  let var_addr = var.as_mut_ptr() as *mut _ as *mut u8;
      
                  #[cfg(target_os = "solana")]
                  let result = unsafe { $crate::syscalls::$syscall_name(var_addr) };
      
                  #[cfg(not(target_os = "solana"))]
                  let result = core::hint::black_box(var_addr as *const _ as u64);
      
                  match result {
                      // SAFETY: The syscall initialized the memory.
                      $crate::SUCCESS => Ok(unsafe { var.assume_init() }),
                      e => Err(e.into()),
                  }
              }
      *)
      Definition get (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.read (|
              let~ var :
                  Ty.apply
                    (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                    []
                    [ Ty.path "pinocchio::sysvars::clock::Clock" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                    []
                    [ Ty.path "pinocchio::sysvars::clock::Clock" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                      []
                      [ Ty.path "pinocchio::sysvars::clock::Clock" ],
                    "uninit",
                    [],
                    []
                  |),
                  []
                |) in
              let~ var_addr : Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ] :=
                M.cast
                  (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                  (M.cast
                    (Ty.apply (Ty.path "*mut") [] [ Ty.path "pinocchio::sysvars::clock::Clock" ])
                    (M.call_closure (|
                      Ty.apply (Ty.path "*mut") [] [ Ty.path "pinocchio::sysvars::clock::Clock" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                          []
                          [ Ty.path "pinocchio::sysvars::clock::Clock" ],
                        "as_mut_ptr",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, var |) ]
                    |))) in
              let~ result : Ty.path "u64" :=
                M.call_closure (|
                  Ty.path "u64",
                  M.get_function (| "core::hint::black_box", [], [ Ty.path "u64" ] |),
                  [
                    M.cast
                      (Ty.path "u64")
                      (M.cast
                        (Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ])
                        (M.call_closure (|
                          Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                          M.pointer_coercion
                            M.PointerCoercion.MutToConstPointer
                            (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                            (Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ]),
                          [ M.read (| var_addr |) ]
                        |)))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "pinocchio::sysvars::clock::Clock";
                    Ty.path "pinocchio::program_error::ProgramError"
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.path "pinocchio::sysvars::clock::Clock";
                      Ty.path "pinocchio::program_error::ProgramError"
                    ],
                  result,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let _ :=
                          is_constant_or_break_match (|
                            M.read (| γ |),
                            Value.Integer IntegerKind.U64 0
                          |) in
                        Value.StructTuple
                          "core::result::Result::Ok"
                          []
                          [
                            Ty.path "pinocchio::sysvars::clock::Clock";
                            Ty.path "pinocchio::program_error::ProgramError"
                          ]
                          [
                            M.call_closure (|
                              Ty.path "pinocchio::sysvars::clock::Clock",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                  []
                                  [ Ty.path "pinocchio::sysvars::clock::Clock" ],
                                "assume_init",
                                [],
                                []
                              |),
                              [ M.read (| var |) ]
                            |)
                          ]));
                    fun γ =>
                      ltac:(M.monadic
                        (let e := M.copy (| Ty.path "u64", γ |) in
                        Value.StructTuple
                          "core::result::Result::Err"
                          []
                          [
                            Ty.path "pinocchio::sysvars::clock::Clock";
                            Ty.path "pinocchio::program_error::ProgramError"
                          ]
                          [
                            M.call_closure (|
                              Ty.path "pinocchio::program_error::ProgramError",
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.path "u64",
                                [],
                                [ Ty.path "pinocchio::program_error::ProgramError" ],
                                "into",
                                [],
                                []
                              |),
                              [ M.read (| e |) ]
                            |)
                          ]))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "pinocchio::sysvars::Sysvar"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("get", InstanceField.Method get) ].
    End Impl_pinocchio_sysvars_Sysvar_for_pinocchio_sysvars_clock_Clock.
    
    Module Impl_pinocchio_sysvars_clock_Clock.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::clock::Clock".
      
      (*     pub const LEN: usize = 8 + 8 + 8 + 8 + 8; *)
      (* Ty.path "usize" *)
      Definition value_LEN (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            Ty.path "usize",
            M.call_closure (|
              Ty.path "usize",
              BinOp.Wrap.add,
              [
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.add,
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.add,
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.add,
                          [ Value.Integer IntegerKind.Usize 8; Value.Integer IntegerKind.Usize 8 ]
                        |);
                        Value.Integer IntegerKind.Usize 8
                      ]
                    |);
                    Value.Integer IntegerKind.Usize 8
                  ]
                |);
                Value.Integer IntegerKind.Usize 8
              ]
            |)
          |))).
      
      Global Instance AssociatedConstant_value_LEN : M.IsAssociatedFunction.C Self "LEN" value_LEN.
      Admitted.
      Global Typeclasses Opaque value_LEN.
      
      (*
          pub fn from_account_info(account_info: &AccountInfo) -> Result<Ref<Clock>, ProgramError> {
              if account_info.key() != &CLOCK_ID {
                  return Err(ProgramError::InvalidArgument);
              }
              Ok(Ref::map(account_info.try_borrow_data()?, |data| unsafe {
                  Self::from_bytes_unchecked(data)
              }))
          }
      *)
      Definition from_account_info (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ account_info ] =>
          ltac:(M.monadic
            (let account_info :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
                account_info
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "pinocchio::account_info::Ref")
                    []
                    [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                  Ty.path "pinocchio::program_error::ProgramError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 32 ]
                                            [ Ty.path "u8" ]
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 32 ]
                                              [ Ty.path "u8" ]
                                          ]
                                      ],
                                      "ne",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 32 ]
                                                [ Ty.path "u8" ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 32 ]
                                                  [ Ty.path "u8" ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.path "pinocchio::account_info::AccountInfo",
                                              "key",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| account_info |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 32 ]
                                                [ Ty.path "u8" ]
                                            ],
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_constant (|
                                              "pinocchio::sysvars::clock::CLOCK_ID",
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 32 ]
                                                [ Ty.path "u8" ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "pinocchio::account_info::Ref")
                                        []
                                        [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ]
                                    [
                                      Value.StructTuple
                                        "pinocchio::program_error::ProgramError::InvalidArgument"
                                        []
                                        []
                                        []
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "pinocchio::account_info::Ref")
                          []
                          [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply
                          (Ty.path "pinocchio::account_info::Ref")
                          []
                          [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ]
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "pinocchio::account_info::Ref")
                            []
                            [ Ty.path "pinocchio::sysvars::clock::Clock" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "pinocchio::account_info::Ref")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            "map",
                            [],
                            [
                              Ty.path "pinocchio::sysvars::clock::Clock";
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ]
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.path "pinocchio::sysvars::clock::Clock" ])
                            ]
                          |),
                          [
                            M.match_operator (|
                              Ty.apply
                                (Ty.path "pinocchio::account_info::Ref")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.path "pinocchio::program_error::ProgramError"
                                      ];
                                    Ty.apply
                                      (Ty.path "pinocchio::account_info::Ref")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ];
                                      Ty.apply
                                        (Ty.path "pinocchio::account_info::Ref")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "pinocchio::account_info::Ref")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                                        Ty.path "pinocchio::program_error::ProgramError"
                                      ],
                                    [],
                                    [],
                                    "branch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "pinocchio::account_info::Ref")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ],
                                      M.get_associated_function (|
                                        Ty.path "pinocchio::account_info::AccountInfo",
                                        "try_borrow_data",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| account_info |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual :=
                                      M.copy (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "pinocchio::program_error::ProgramError"
                                          ],
                                        γ0_0
                                      |) in
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "pinocchio::account_info::Ref")
                                                  []
                                                  [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                                                Ty.path "pinocchio::program_error::ProgramError"
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "pinocchio::account_info::Ref")
                                                    []
                                                    [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                                                  Ty.path "pinocchio::program_error::ProgramError"
                                                ],
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ]
                                              ],
                                              "from_residual",
                                              [],
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val :=
                                      M.copy (|
                                        Ty.apply
                                          (Ty.path "pinocchio::account_info::Ref")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        γ0_0
                                      |) in
                                    M.read (| val |)))
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "pinocchio::sysvars::clock::Clock" ],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let data :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ]
                                                    ],
                                                  γ
                                                |) in
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "pinocchio::sysvars::clock::Clock"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "pinocchio::sysvars::clock::Clock",
                                                          "from_bytes_unchecked",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| data |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_account_info :
        M.IsAssociatedFunction.C Self "from_account_info" from_account_info.
      Admitted.
      Global Typeclasses Opaque from_account_info.
      
      (*
          pub unsafe fn from_account_info_unchecked(
              account_info: &AccountInfo,
          ) -> Result<&Self, ProgramError> {
              if account_info.key() != &CLOCK_ID {
                  return Err(ProgramError::InvalidArgument);
              }
              Ok(Self::from_bytes_unchecked(
                  account_info.borrow_data_unchecked(),
              ))
          }
      *)
      Definition from_account_info_unchecked
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ account_info ] =>
          ltac:(M.monadic
            (let account_info :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
                account_info
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                  Ty.path "pinocchio::program_error::ProgramError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 32 ]
                                            [ Ty.path "u8" ]
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 32 ]
                                              [ Ty.path "u8" ]
                                          ]
                                      ],
                                      "ne",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 32 ]
                                                [ Ty.path "u8" ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 32 ]
                                                  [ Ty.path "u8" ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.path "pinocchio::account_info::AccountInfo",
                                              "key",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| account_info |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 32 ]
                                                [ Ty.path "u8" ]
                                            ],
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_constant (|
                                              "pinocchio::sysvars::clock::CLOCK_ID",
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 32 ]
                                                [ Ty.path "u8" ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ]
                                    [
                                      Value.StructTuple
                                        "pinocchio::program_error::ProgramError::InvalidArgument"
                                        []
                                        []
                                        []
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ]
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "pinocchio::sysvars::clock::Clock" ],
                              M.get_associated_function (|
                                Ty.path "pinocchio::sysvars::clock::Clock",
                                "from_bytes_unchecked",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                      M.get_associated_function (|
                                        Ty.path "pinocchio::account_info::AccountInfo",
                                        "borrow_data_unchecked",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| account_info |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_account_info_unchecked :
        M.IsAssociatedFunction.C Self "from_account_info_unchecked" from_account_info_unchecked.
      Admitted.
      Global Typeclasses Opaque from_account_info_unchecked.
      
      (*
          pub fn from_bytes(bytes: &[u8]) -> Result<&Self, ProgramError> {
              if bytes.len() < Self::LEN {
                  return Err(ProgramError::InvalidArgument);
              }
              // SAFETY: `bytes` has been validated to be at least `Self::LEN` bytes long; the
              // caller must ensure that `bytes` contains a valid representation of `Clock`.
              Ok(unsafe { Self::from_bytes_unchecked(bytes) })
          }
      *)
      Definition from_bytes (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ bytes ] =>
          ltac:(M.monadic
            (let bytes :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                bytes
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                  Ty.path "pinocchio::program_error::ProgramError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.lt,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| bytes |) |)
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        get_associated_constant (|
                                          Ty.path "pinocchio::sysvars::clock::Clock",
                                          "LEN",
                                          Ty.path "usize"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ]
                                    [
                                      Value.StructTuple
                                        "pinocchio::program_error::ProgramError::InvalidArgument"
                                        []
                                        []
                                        []
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::clock::Clock" ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ]
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "pinocchio::sysvars::clock::Clock" ],
                              M.get_associated_function (|
                                Ty.path "pinocchio::sysvars::clock::Clock",
                                "from_bytes_unchecked",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| bytes |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_bytes :
        M.IsAssociatedFunction.C Self "from_bytes" from_bytes.
      Admitted.
      Global Typeclasses Opaque from_bytes.
      
      (*
          pub unsafe fn from_bytes_unchecked(bytes: &[u8]) -> &Self {
              &*(bytes.as_ptr() as *const Clock)
          }
      *)
      Definition from_bytes_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ bytes ] =>
          ltac:(M.monadic
            (let bytes :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                bytes
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.cast
                      (Ty.apply
                        (Ty.path "*const")
                        []
                        [ Ty.path "pinocchio::sysvars::clock::Clock" ])
                      (M.call_closure (|
                        Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                          "as_ptr",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| bytes |) |) |) ]
                      |))
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_from_bytes_unchecked :
        M.IsAssociatedFunction.C Self "from_bytes_unchecked" from_bytes_unchecked.
      Admitted.
      Global Typeclasses Opaque from_bytes_unchecked.
    End Impl_pinocchio_sysvars_clock_Clock.
  End clock.
End sysvars.
