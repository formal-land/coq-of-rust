(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module sysvars.
  Module fees.
    (* StructRecord
      {
        name := "FeeCalculator";
        const_params := [];
        ty_params := [];
        fields := [ ("lamports_per_signature", Ty.path "u64") ];
      } *)
    
    Module Impl_core_fmt_Debug_for_pinocchio_sysvars_fees_FeeCalculator.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::fees::FeeCalculator".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::fees::FeeCalculator" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "FeeCalculator" |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "lamports_per_signature" |) |)
                |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::sysvars::fees::FeeCalculator",
                                "lamports_per_signature"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_pinocchio_sysvars_fees_FeeCalculator.
    
    Module Impl_core_default_Default_for_pinocchio_sysvars_fees_FeeCalculator.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::fees::FeeCalculator".
      
      (* Default *)
      Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "pinocchio::sysvars::fees::FeeCalculator"
              []
              []
              [
                ("lamports_per_signature",
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "u64",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_pinocchio_sysvars_fees_FeeCalculator.
    
    Module Impl_core_clone_Clone_for_pinocchio_sysvars_fees_FeeCalculator.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::fees::FeeCalculator".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::fees::FeeCalculator" ],
                self
              |) in
            M.match_operator (|
              Ty.path "pinocchio::sysvars::fees::FeeCalculator",
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_pinocchio_sysvars_fees_FeeCalculator.
    
    Module Impl_core_marker_Copy_for_pinocchio_sysvars_fees_FeeCalculator.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::fees::FeeCalculator".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_pinocchio_sysvars_fees_FeeCalculator.
    
    Module Impl_pinocchio_sysvars_fees_FeeCalculator.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::fees::FeeCalculator".
      
      (*
          pub fn new(lamports_per_signature: u64) -> Self {
              Self {
                  lamports_per_signature,
              }
          }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ lamports_per_signature ] =>
          ltac:(M.monadic
            (let lamports_per_signature := M.alloc (| Ty.path "u64", lamports_per_signature |) in
            Value.mkStructRecord
              "pinocchio::sysvars::fees::FeeCalculator"
              []
              []
              [ ("lamports_per_signature", M.read (| lamports_per_signature |)) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_pinocchio_sysvars_fees_FeeCalculator.
    
    (* StructRecord
      {
        name := "FeeRateGovernor";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("lamports_per_signature", Ty.path "u64");
            ("target_lamports_per_signature", Ty.path "u64");
            ("target_signatures_per_slot", Ty.path "u64");
            ("min_lamports_per_signature", Ty.path "u64");
            ("max_lamports_per_signature", Ty.path "u64");
            ("burn_percent", Ty.path "u8")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_pinocchio_sysvars_fees_FeeRateGovernor.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::fees::FeeRateGovernor".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::fees::FeeRateGovernor" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.read (|
              let~ names :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 6 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 6 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                        Value.Array
                          [
                            mk_str (| "lamports_per_signature" |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "target_lamports_per_signature" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "target_signatures_per_slot" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "min_lamports_per_signature" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "max_lamports_per_signature" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "burn_percent" |) |)
                            |)
                          ]
                      |)
                    |)
                  |)
                |) in
              let~ values :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 6 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ])
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 6 ]
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                              ],
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "u64" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "pinocchio::sysvars::fees::FeeRateGovernor",
                                            "lamports_per_signature"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "u64" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "pinocchio::sysvars::fees::FeeRateGovernor",
                                            "target_lamports_per_signature"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "u64" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "pinocchio::sysvars::fees::FeeRateGovernor",
                                            "target_signatures_per_slot"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "u64" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "pinocchio::sysvars::fees::FeeRateGovernor",
                                            "min_lamports_per_signature"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "u64" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "pinocchio::sysvars::fees::FeeRateGovernor",
                                            "max_lamports_per_signature"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "u8" ],
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "pinocchio::sysvars::fees::FeeRateGovernor",
                                                "burn_percent"
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "FeeRateGovernor" |) |) |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 6 ]
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ])
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_pinocchio_sysvars_fees_FeeRateGovernor.
    
    Module Impl_core_clone_Clone_for_pinocchio_sysvars_fees_FeeRateGovernor.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::fees::FeeRateGovernor".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::fees::FeeRateGovernor" ],
                self
              |) in
            Value.mkStructRecord
              "pinocchio::sysvars::fees::FeeRateGovernor"
              []
              []
              [
                ("lamports_per_signature",
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "u64",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "pinocchio::sysvars::fees::FeeRateGovernor",
                              "lamports_per_signature"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("target_lamports_per_signature",
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "u64",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "pinocchio::sysvars::fees::FeeRateGovernor",
                              "target_lamports_per_signature"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("target_signatures_per_slot",
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "u64",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "pinocchio::sysvars::fees::FeeRateGovernor",
                              "target_signatures_per_slot"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("min_lamports_per_signature",
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "u64",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "pinocchio::sysvars::fees::FeeRateGovernor",
                              "min_lamports_per_signature"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("max_lamports_per_signature",
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "u64",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "pinocchio::sysvars::fees::FeeRateGovernor",
                              "max_lamports_per_signature"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("burn_percent",
                  M.call_closure (|
                    Ty.path "u8",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "u8",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "pinocchio::sysvars::fees::FeeRateGovernor",
                              "burn_percent"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_pinocchio_sysvars_fees_FeeRateGovernor.
    
    Definition value_DEFAULT_TARGET_LAMPORTS_PER_SIGNATURE
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u64", Value.Integer IntegerKind.U64 10000 |))).
    
    Global Instance Instance_IsConstant_value_DEFAULT_TARGET_LAMPORTS_PER_SIGNATURE :
      M.IsFunction.C
        "pinocchio::sysvars::fees::DEFAULT_TARGET_LAMPORTS_PER_SIGNATURE"
        value_DEFAULT_TARGET_LAMPORTS_PER_SIGNATURE.
    Admitted.
    Global Typeclasses Opaque value_DEFAULT_TARGET_LAMPORTS_PER_SIGNATURE.
    
    Definition value_DEFAULT_TARGET_SIGNATURES_PER_SLOT
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic
        (M.alloc (|
          Ty.path "u64",
          M.call_closure (|
            Ty.path "u64",
            BinOp.Wrap.mul,
            [
              Value.Integer IntegerKind.U64 50;
              M.read (|
                get_constant (| "pinocchio::sysvars::clock::DEFAULT_MS_PER_SLOT", Ty.path "u64" |)
              |)
            ]
          |)
        |))).
    
    Global Instance Instance_IsConstant_value_DEFAULT_TARGET_SIGNATURES_PER_SLOT :
      M.IsFunction.C
        "pinocchio::sysvars::fees::DEFAULT_TARGET_SIGNATURES_PER_SLOT"
        value_DEFAULT_TARGET_SIGNATURES_PER_SLOT.
    Admitted.
    Global Typeclasses Opaque value_DEFAULT_TARGET_SIGNATURES_PER_SLOT.
    
    Definition value_DEFAULT_BURN_PERCENT
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u8", Value.Integer IntegerKind.U8 50 |))).
    
    Global Instance Instance_IsConstant_value_DEFAULT_BURN_PERCENT :
      M.IsFunction.C "pinocchio::sysvars::fees::DEFAULT_BURN_PERCENT" value_DEFAULT_BURN_PERCENT.
    Admitted.
    Global Typeclasses Opaque value_DEFAULT_BURN_PERCENT.
    
    Module Impl_core_default_Default_for_pinocchio_sysvars_fees_FeeRateGovernor.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::fees::FeeRateGovernor".
      
      (*
          fn default() -> Self {
              Self {
                  lamports_per_signature: 0,
                  target_lamports_per_signature: DEFAULT_TARGET_LAMPORTS_PER_SIGNATURE, // Example default value
                  target_signatures_per_slot: DEFAULT_TARGET_SIGNATURES_PER_SLOT, // Assuming 400ms per slot
                  min_lamports_per_signature: 0,
                  max_lamports_per_signature: 0,
                  burn_percent: DEFAULT_BURN_PERCENT,
              }
          }
      *)
      Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "pinocchio::sysvars::fees::FeeRateGovernor"
              []
              []
              [
                ("lamports_per_signature", Value.Integer IntegerKind.U64 0);
                ("target_lamports_per_signature",
                  M.read (|
                    get_constant (|
                      "pinocchio::sysvars::fees::DEFAULT_TARGET_LAMPORTS_PER_SIGNATURE",
                      Ty.path "u64"
                    |)
                  |));
                ("target_signatures_per_slot",
                  M.read (|
                    get_constant (|
                      "pinocchio::sysvars::fees::DEFAULT_TARGET_SIGNATURES_PER_SLOT",
                      Ty.path "u64"
                    |)
                  |));
                ("min_lamports_per_signature", Value.Integer IntegerKind.U64 0);
                ("max_lamports_per_signature", Value.Integer IntegerKind.U64 0);
                ("burn_percent",
                  M.read (|
                    get_constant (|
                      "pinocchio::sysvars::fees::DEFAULT_BURN_PERCENT",
                      Ty.path "u8"
                    |)
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_pinocchio_sysvars_fees_FeeRateGovernor.
    
    Module Impl_pinocchio_sysvars_fees_FeeRateGovernor.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::fees::FeeRateGovernor".
      
      (*
          pub fn create_fee_calculator(&self) -> FeeCalculator {
              FeeCalculator::new(self.lamports_per_signature)
          }
      *)
      Definition create_fee_calculator (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::fees::FeeRateGovernor" ],
                self
              |) in
            M.call_closure (|
              Ty.path "pinocchio::sysvars::fees::FeeCalculator",
              M.get_associated_function (|
                Ty.path "pinocchio::sysvars::fees::FeeCalculator",
                "new",
                [],
                []
              |),
              [
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "pinocchio::sysvars::fees::FeeRateGovernor",
                    "lamports_per_signature"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_create_fee_calculator :
        M.IsAssociatedFunction.C Self "create_fee_calculator" create_fee_calculator.
      Admitted.
      Global Typeclasses Opaque create_fee_calculator.
      
      (*
          pub fn burn(&self, fees: u64) -> (u64, u64) {
              let burned = fees * u64::from(self.burn_percent) / 100;
              (fees - burned, burned)
          }
      *)
      Definition burn (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; fees ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::fees::FeeRateGovernor" ],
                self
              |) in
            let fees := M.alloc (| Ty.path "u64", fees |) in
            M.read (|
              let~ burned : Ty.path "u64" :=
                M.call_closure (|
                  Ty.path "u64",
                  BinOp.Wrap.div,
                  [
                    M.call_closure (|
                      Ty.path "u64",
                      BinOp.Wrap.mul,
                      [
                        M.read (| fees |);
                        M.call_closure (|
                          Ty.path "u64",
                          M.get_trait_method (|
                            "core::convert::From",
                            Ty.path "u64",
                            [],
                            [ Ty.path "u8" ],
                            "from",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::sysvars::fees::FeeRateGovernor",
                                "burn_percent"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |);
                    Value.Integer IntegerKind.U64 100
                  ]
                |) in
              M.alloc (|
                Ty.tuple [ Ty.path "u64"; Ty.path "u64" ],
                Value.Tuple
                  [
                    M.call_closure (|
                      Ty.path "u64",
                      BinOp.Wrap.sub,
                      [ M.read (| fees |); M.read (| burned |) ]
                    |);
                    M.read (| burned |)
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_burn : M.IsAssociatedFunction.C Self "burn" burn.
      Admitted.
      Global Typeclasses Opaque burn.
    End Impl_pinocchio_sysvars_fees_FeeRateGovernor.
    
    (* StructRecord
      {
        name := "Fees";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("fee_calculator", Ty.path "pinocchio::sysvars::fees::FeeCalculator");
            ("fee_rate_governor", Ty.path "pinocchio::sysvars::fees::FeeRateGovernor")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_pinocchio_sysvars_fees_Fees.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::fees::Fees".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::sysvars::fees::Fees" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Fees" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "fee_calculator" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "pinocchio::sysvars::fees::FeeCalculator" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "pinocchio::sysvars::fees::Fees",
                            "fee_calculator"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "fee_rate_governor" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "pinocchio::sysvars::fees::FeeRateGovernor" ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "pinocchio::sysvars::fees::FeeRateGovernor" ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::sysvars::fees::Fees",
                                "fee_rate_governor"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_pinocchio_sysvars_fees_Fees.
    
    Module Impl_core_default_Default_for_pinocchio_sysvars_fees_Fees.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::fees::Fees".
      
      (* Default *)
      Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "pinocchio::sysvars::fees::Fees"
              []
              []
              [
                ("fee_calculator",
                  M.call_closure (|
                    Ty.path "pinocchio::sysvars::fees::FeeCalculator",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "pinocchio::sysvars::fees::FeeCalculator",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("fee_rate_governor",
                  M.call_closure (|
                    Ty.path "pinocchio::sysvars::fees::FeeRateGovernor",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "pinocchio::sysvars::fees::FeeRateGovernor",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_pinocchio_sysvars_fees_Fees.
    
    Module Impl_pinocchio_sysvars_fees_Fees.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::fees::Fees".
      
      (*
          pub fn new(fee_calculator: FeeCalculator, fee_rate_governor: FeeRateGovernor) -> Self {
              Self {
                  fee_calculator,
                  fee_rate_governor,
              }
          }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ fee_calculator; fee_rate_governor ] =>
          ltac:(M.monadic
            (let fee_calculator :=
              M.alloc (| Ty.path "pinocchio::sysvars::fees::FeeCalculator", fee_calculator |) in
            let fee_rate_governor :=
              M.alloc (|
                Ty.path "pinocchio::sysvars::fees::FeeRateGovernor",
                fee_rate_governor
              |) in
            Value.mkStructRecord
              "pinocchio::sysvars::fees::Fees"
              []
              []
              [
                ("fee_calculator", M.read (| fee_calculator |));
                ("fee_rate_governor", M.read (| fee_rate_governor |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_pinocchio_sysvars_fees_Fees.
    
    Module Impl_pinocchio_sysvars_Sysvar_for_pinocchio_sysvars_fees_Fees.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::fees::Fees".
      
      (*
              fn get() -> Result<Self, $crate::program_error::ProgramError> {
                  let mut var = core::mem::MaybeUninit::<Self>::uninit();
                  let var_addr = var.as_mut_ptr() as *mut _ as *mut u8;
      
                  #[cfg(target_os = "solana")]
                  let result = unsafe { $crate::syscalls::$syscall_name(var_addr) };
      
                  #[cfg(not(target_os = "solana"))]
                  let result = core::hint::black_box(var_addr as *const _ as u64);
      
                  match result {
                      // SAFETY: The syscall initialized the memory.
                      $crate::SUCCESS => Ok(unsafe { var.assume_init() }),
                      e => Err(e.into()),
                  }
              }
      *)
      Definition get (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.read (|
              let~ var :
                  Ty.apply
                    (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                    []
                    [ Ty.path "pinocchio::sysvars::fees::Fees" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                    []
                    [ Ty.path "pinocchio::sysvars::fees::Fees" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                      []
                      [ Ty.path "pinocchio::sysvars::fees::Fees" ],
                    "uninit",
                    [],
                    []
                  |),
                  []
                |) in
              let~ var_addr : Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ] :=
                M.cast
                  (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                  (M.cast
                    (Ty.apply (Ty.path "*mut") [] [ Ty.path "pinocchio::sysvars::fees::Fees" ])
                    (M.call_closure (|
                      Ty.apply (Ty.path "*mut") [] [ Ty.path "pinocchio::sysvars::fees::Fees" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                          []
                          [ Ty.path "pinocchio::sysvars::fees::Fees" ],
                        "as_mut_ptr",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, var |) ]
                    |))) in
              let~ result : Ty.path "u64" :=
                M.call_closure (|
                  Ty.path "u64",
                  M.get_function (| "core::hint::black_box", [], [ Ty.path "u64" ] |),
                  [
                    M.cast
                      (Ty.path "u64")
                      (M.cast
                        (Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ])
                        (M.call_closure (|
                          Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                          M.pointer_coercion
                            M.PointerCoercion.MutToConstPointer
                            (Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ])
                            (Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ]),
                          [ M.read (| var_addr |) ]
                        |)))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "pinocchio::sysvars::fees::Fees";
                    Ty.path "pinocchio::program_error::ProgramError"
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.path "pinocchio::sysvars::fees::Fees";
                      Ty.path "pinocchio::program_error::ProgramError"
                    ],
                  result,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let _ :=
                          is_constant_or_break_match (|
                            M.read (| γ |),
                            Value.Integer IntegerKind.U64 0
                          |) in
                        Value.StructTuple
                          "core::result::Result::Ok"
                          []
                          [
                            Ty.path "pinocchio::sysvars::fees::Fees";
                            Ty.path "pinocchio::program_error::ProgramError"
                          ]
                          [
                            M.call_closure (|
                              Ty.path "pinocchio::sysvars::fees::Fees",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                  []
                                  [ Ty.path "pinocchio::sysvars::fees::Fees" ],
                                "assume_init",
                                [],
                                []
                              |),
                              [ M.read (| var |) ]
                            |)
                          ]));
                    fun γ =>
                      ltac:(M.monadic
                        (let e := M.copy (| Ty.path "u64", γ |) in
                        Value.StructTuple
                          "core::result::Result::Err"
                          []
                          [
                            Ty.path "pinocchio::sysvars::fees::Fees";
                            Ty.path "pinocchio::program_error::ProgramError"
                          ]
                          [
                            M.call_closure (|
                              Ty.path "pinocchio::program_error::ProgramError",
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.path "u64",
                                [],
                                [ Ty.path "pinocchio::program_error::ProgramError" ],
                                "into",
                                [],
                                []
                              |),
                              [ M.read (| e |) ]
                            |)
                          ]))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "pinocchio::sysvars::Sysvar"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("get", InstanceField.Method get) ].
    End Impl_pinocchio_sysvars_Sysvar_for_pinocchio_sysvars_fees_Fees.
  End fees.
End sysvars.
