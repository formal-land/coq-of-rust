(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module sysvars.
  Module instructions.
    Definition value_INSTRUCTIONS_ID (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ],
          Value.Array
            [
              Value.Integer IntegerKind.U8 6;
              Value.Integer IntegerKind.U8 167;
              Value.Integer IntegerKind.U8 213;
              Value.Integer IntegerKind.U8 23;
              Value.Integer IntegerKind.U8 24;
              Value.Integer IntegerKind.U8 123;
              Value.Integer IntegerKind.U8 209;
              Value.Integer IntegerKind.U8 102;
              Value.Integer IntegerKind.U8 53;
              Value.Integer IntegerKind.U8 218;
              Value.Integer IntegerKind.U8 212;
              Value.Integer IntegerKind.U8 4;
              Value.Integer IntegerKind.U8 85;
              Value.Integer IntegerKind.U8 253;
              Value.Integer IntegerKind.U8 194;
              Value.Integer IntegerKind.U8 192;
              Value.Integer IntegerKind.U8 193;
              Value.Integer IntegerKind.U8 36;
              Value.Integer IntegerKind.U8 198;
              Value.Integer IntegerKind.U8 143;
              Value.Integer IntegerKind.U8 33;
              Value.Integer IntegerKind.U8 86;
              Value.Integer IntegerKind.U8 117;
              Value.Integer IntegerKind.U8 165;
              Value.Integer IntegerKind.U8 219;
              Value.Integer IntegerKind.U8 186;
              Value.Integer IntegerKind.U8 203;
              Value.Integer IntegerKind.U8 95;
              Value.Integer IntegerKind.U8 8;
              Value.Integer IntegerKind.U8 0;
              Value.Integer IntegerKind.U8 0;
              Value.Integer IntegerKind.U8 0
            ]
        |))).
    
    Global Instance Instance_IsConstant_value_INSTRUCTIONS_ID :
      M.IsFunction.C "pinocchio::sysvars::instructions::INSTRUCTIONS_ID" value_INSTRUCTIONS_ID.
    Admitted.
    Global Typeclasses Opaque value_INSTRUCTIONS_ID.
    
    (* StructRecord
      {
        name := "Instructions";
        const_params := [];
        ty_params := [ "T" ];
        fields := [ ("data", T) ];
      } *)
    
    Module Impl_pinocchio_sysvars_instructions_Instructions_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "pinocchio::sysvars::instructions::Instructions") [] [ T ].
      
      (*
          pub unsafe fn new_unchecked(data: T) -> Self {
              Instructions { data }
          }
      *)
      Definition new_unchecked
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ data ] =>
          ltac:(M.monadic
            (let data := M.alloc (| T, data |) in
            Value.mkStructRecord
              "pinocchio::sysvars::instructions::Instructions"
              []
              [ T ]
              [ ("data", M.read (| data |)) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_unchecked :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "new_unchecked" (new_unchecked T).
      Admitted.
      Global Typeclasses Opaque new_unchecked.
      
      (*
          pub fn load_current_index(&self) -> u16 {
              let len = self.data.len();
              // SAFETY: The last 2 bytes of the Instructions sysvar data represents the current
              // instruction index.
              unsafe { u16::from_le_bytes( *(self.data.as_ptr().add(len - 2) as *const [u8; 2])) }
          }
      *)
      Definition load_current_index
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "pinocchio::sysvars::instructions::Instructions") [] [ T ] ],
                self
              |) in
            M.read (|
              let~ len : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                    "len",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            T,
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::sysvars::instructions::Instructions",
                                "data"
                              |)
                            |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.path "u16",
                M.call_closure (|
                  Ty.path "u16",
                  M.get_associated_function (| Ty.path "u16", "from_le_bytes", [], [] |),
                  [
                    M.read (|
                      M.deref (|
                        M.cast
                          (Ty.apply
                            (Ty.path "*const")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u8" ]
                            ])
                          (M.call_closure (|
                            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                  "as_ptr",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          T,
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "pinocchio::sysvars::instructions::Instructions",
                                              "data"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [ M.read (| len |); Value.Integer IntegerKind.Usize 2 ]
                              |)
                            ]
                          |))
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_load_current_index :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "load_current_index" (load_current_index T).
      Admitted.
      Global Typeclasses Opaque load_current_index.
      
      (*
          pub unsafe fn deserialize_instruction_unchecked(
              &self,
              index: usize,
          ) -> IntrospectedInstruction {
              let offset = *(self
                  .data
                  .as_ptr()
                  .add(size_of::<u16>() + index * size_of::<u16>()) as *const u16);
      
              IntrospectedInstruction {
                  raw: self.data.as_ptr().add(offset as usize),
                  marker: PhantomData,
              }
          }
      *)
      Definition deserialize_instruction_unchecked
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "pinocchio::sysvars::instructions::Instructions") [] [ T ] ],
                self
              |) in
            let index := M.alloc (| Ty.path "usize", index |) in
            M.read (|
              let~ offset : Ty.path "u16" :=
                M.read (|
                  M.deref (|
                    M.cast
                      (Ty.apply (Ty.path "*const") [] [ Ty.path "u16" ])
                      (M.call_closure (|
                        Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                              "as_ptr",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      T,
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "pinocchio::sysvars::instructions::Instructions",
                                          "data"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.add,
                            [
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_function (| "core::mem::size_of", [], [ Ty.path "u16" ] |),
                                []
                              |);
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.mul,
                                [
                                  M.read (| index |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_function (|
                                      "core::mem::size_of",
                                      [],
                                      [ Ty.path "u16" ]
                                    |),
                                    []
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |))
                  |)
                |) in
              M.alloc (|
                Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction",
                Value.mkStructRecord
                  "pinocchio::sysvars::instructions::IntrospectedInstruction"
                  []
                  []
                  [
                    ("raw",
                      M.call_closure (|
                        Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                              "as_ptr",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      T,
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "pinocchio::sysvars::instructions::Instructions",
                                          "data"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.cast (Ty.path "usize") (M.read (| offset |))
                        ]
                      |));
                    ("marker",
                      Value.StructTuple
                        "core::marker::PhantomData"
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        ]
                        [])
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_deserialize_instruction_unchecked :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C
          (Self T)
          "deserialize_instruction_unchecked"
          (deserialize_instruction_unchecked T).
      Admitted.
      Global Typeclasses Opaque deserialize_instruction_unchecked.
      
      (*
          pub fn load_instruction_at(
              &self,
              index: usize,
          ) -> Result<IntrospectedInstruction, ProgramError> {
              // SAFETY: The first 2 bytes of the Instructions sysvar data represents the
              // number of instructions.
              let num_instructions = unsafe { *(self.data.as_ptr() as *const u16) };
      
              if index >= num_instructions as usize {
                  return Err(ProgramError::InvalidInstructionData);
              }
      
              // SAFETY: The index was checked to be in bounds.
              Ok(unsafe { self.deserialize_instruction_unchecked(index) })
          }
      *)
      Definition load_instruction_at
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "pinocchio::sysvars::instructions::Instructions") [] [ T ] ],
                self
              |) in
            let index := M.alloc (| Ty.path "usize", index |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction";
                  Ty.path "pinocchio::program_error::ProgramError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ num_instructions : Ty.path "u16" :=
                    M.read (|
                      M.deref (|
                        M.cast
                          (Ty.apply (Ty.path "*const") [] [ Ty.path "u16" ])
                          (M.call_closure (|
                            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                              "as_ptr",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      T,
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "pinocchio::sysvars::instructions::Instructions",
                                          "data"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |))
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ge,
                                    [
                                      M.read (| index |);
                                      M.cast (Ty.path "usize") (M.read (| num_instructions |))
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.path
                                        "pinocchio::sysvars::instructions::IntrospectedInstruction";
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ]
                                    [
                                      Value.StructTuple
                                        "pinocchio::program_error::ProgramError::InvalidInstructionData"
                                        []
                                        []
                                        []
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction";
                        Ty.path "pinocchio::program_error::ProgramError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction";
                        Ty.path "pinocchio::program_error::ProgramError"
                      ]
                      [
                        M.call_closure (|
                          Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "pinocchio::sysvars::instructions::Instructions")
                              []
                              [ T ],
                            "deserialize_instruction_unchecked",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                            M.read (| index |)
                          ]
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_load_instruction_at :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "load_instruction_at" (load_instruction_at T).
      Admitted.
      Global Typeclasses Opaque load_instruction_at.
      
      (*
          pub fn get_instruction_relative(
              &self,
              index_relative_to_current: i64,
          ) -> Result<IntrospectedInstruction, ProgramError> {
              let current_index = self.load_current_index() as i64;
              let index = current_index.saturating_add(index_relative_to_current);
      
              if index < 0 {
                  return Err(ProgramError::InvalidInstructionData);
              }
      
              self.load_instruction_at(index as usize)
          }
      *)
      Definition get_instruction_relative
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; index_relative_to_current ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "pinocchio::sysvars::instructions::Instructions") [] [ T ] ],
                self
              |) in
            let index_relative_to_current :=
              M.alloc (| Ty.path "i64", index_relative_to_current |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction";
                  Ty.path "pinocchio::program_error::ProgramError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ current_index : Ty.path "i64" :=
                    M.cast
                      (Ty.path "i64")
                      (M.call_closure (|
                        Ty.path "u16",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "pinocchio::sysvars::instructions::Instructions")
                            []
                            [ T ],
                          "load_current_index",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)) in
                  let~ index : Ty.path "i64" :=
                    M.call_closure (|
                      Ty.path "i64",
                      M.get_associated_function (| Ty.path "i64", "saturating_add", [], [] |),
                      [ M.read (| current_index |); M.read (| index_relative_to_current |) ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.lt,
                                    [ M.read (| index |); Value.Integer IntegerKind.I64 0 ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.path
                                        "pinocchio::sysvars::instructions::IntrospectedInstruction";
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ]
                                    [
                                      Value.StructTuple
                                        "pinocchio::program_error::ProgramError::InvalidInstructionData"
                                        []
                                        []
                                        []
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction";
                        Ty.path "pinocchio::program_error::ProgramError"
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction";
                          Ty.path "pinocchio::program_error::ProgramError"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "pinocchio::sysvars::instructions::Instructions")
                          []
                          [ T ],
                        "load_instruction_at",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.cast (Ty.path "usize") (M.read (| index |))
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_instruction_relative :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "get_instruction_relative" (get_instruction_relative T).
      Admitted.
      Global Typeclasses Opaque get_instruction_relative.
    End Impl_pinocchio_sysvars_instructions_Instructions_T.
    
    Module Impl_core_convert_TryFrom_ref__pinocchio_account_info_AccountInfo_for_pinocchio_sysvars_instructions_Instructions_pinocchio_account_info_Ref_slice_u8.
      Definition Self : Ty.t :=
        Ty.apply
          (Ty.path "pinocchio::sysvars::instructions::Instructions")
          []
          [
            Ty.apply
              (Ty.path "pinocchio::account_info::Ref")
              []
              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
          ].
      
      (*     type Error = ProgramError; *)
      Definition _Error : Ty.t := Ty.path "pinocchio::program_error::ProgramError".
      
      (*
          fn try_from(account_info: &'a AccountInfo) -> Result<Self, Self::Error> {
              if account_info.key() != &INSTRUCTIONS_ID {
                  return Err(ProgramError::UnsupportedSysvar);
              }
      
              Ok(Instructions {
                  data: account_info.try_borrow_data()?,
              })
          }
      *)
      Definition try_from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ account_info ] =>
          ltac:(M.monadic
            (let account_info :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ],
                account_info
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "pinocchio::sysvars::instructions::Instructions")
                    []
                    [
                      Ty.apply
                        (Ty.path "pinocchio::account_info::Ref")
                        []
                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                    ];
                  Ty.associated_in_trait
                    "core::convert::TryFrom"
                    []
                    [ Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ] ]
                    (Ty.apply
                      (Ty.path "pinocchio::sysvars::instructions::Instructions")
                      []
                      [
                        Ty.apply
                          (Ty.path "pinocchio::account_info::Ref")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                      ])
                    "Error"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 32 ]
                                            [ Ty.path "u8" ]
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 32 ]
                                              [ Ty.path "u8" ]
                                          ]
                                      ],
                                      "ne",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 32 ]
                                                [ Ty.path "u8" ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 32 ]
                                                  [ Ty.path "u8" ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.path "pinocchio::account_info::AccountInfo",
                                              "key",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| account_info |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 32 ]
                                                [ Ty.path "u8" ]
                                            ],
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_constant (|
                                              "pinocchio::sysvars::instructions::INSTRUCTIONS_ID",
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 32 ]
                                                [ Ty.path "u8" ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "pinocchio::sysvars::instructions::Instructions")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "pinocchio::account_info::Ref")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                        ];
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ]
                                    [
                                      Value.StructTuple
                                        "pinocchio::program_error::ProgramError::UnsupportedSysvar"
                                        []
                                        []
                                        []
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "pinocchio::sysvars::instructions::Instructions")
                          []
                          [
                            Ty.apply
                              (Ty.path "pinocchio::account_info::Ref")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                          ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply
                          (Ty.path "pinocchio::sysvars::instructions::Instructions")
                          []
                          [
                            Ty.apply
                              (Ty.path "pinocchio::account_info::Ref")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                          ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ]
                      [
                        Value.mkStructRecord
                          "pinocchio::sysvars::instructions::Instructions"
                          []
                          [
                            Ty.apply
                              (Ty.path "pinocchio::account_info::Ref")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                          ]
                          [
                            ("data",
                              M.match_operator (|
                                Ty.apply
                                  (Ty.path "pinocchio::account_info::Ref")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ];
                                      Ty.apply
                                        (Ty.path "pinocchio::account_info::Ref")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "pinocchio::program_error::ProgramError"
                                          ];
                                        Ty.apply
                                          (Ty.path "pinocchio::account_info::Ref")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "pinocchio::account_info::Ref")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                                          Ty.path "pinocchio::program_error::ProgramError"
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "pinocchio::account_info::Ref")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ];
                                            Ty.path "pinocchio::program_error::ProgramError"
                                          ],
                                        M.get_associated_function (|
                                          Ty.path "pinocchio::account_info::AccountInfo",
                                          "try_borrow_data",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| account_info |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "pinocchio::program_error::ProgramError"
                                            ],
                                          γ0_0
                                        |) in
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "pinocchio::sysvars::instructions::Instructions")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "pinocchio::account_info::Ref")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ];
                                                  Ty.path "pinocchio::program_error::ProgramError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "pinocchio::sysvars::instructions::Instructions")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "pinocchio::account_info::Ref")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.path "u8" ]
                                                          ]
                                                      ];
                                                    Ty.path "pinocchio::program_error::ProgramError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "pinocchio::program_error::ProgramError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "pinocchio::account_info::Ref")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                          γ0_0
                                        |) in
                                      M.read (| val |)))
                                ]
                              |))
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::TryFrom"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "&") [] [ Ty.path "pinocchio::account_info::AccountInfo" ] ]
          Self
          (* Instance *)
          [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
    End Impl_core_convert_TryFrom_ref__pinocchio_account_info_AccountInfo_for_pinocchio_sysvars_instructions_Instructions_pinocchio_account_info_Ref_slice_u8.
    
    (* StructRecord
      {
        name := "IntrospectedInstruction";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("raw", Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ]);
            ("marker",
              Ty.apply
                (Ty.path "core::marker::PhantomData")
                []
                [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_pinocchio_sysvars_instructions_IntrospectedInstruction.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction" ],
                self
              |) in
            Value.mkStructRecord
              "pinocchio::sysvars::instructions::IntrospectedInstruction"
              []
              []
              [
                ("raw",
                  M.call_closure (|
                    Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "pinocchio::sysvars::instructions::IntrospectedInstruction",
                              "raw"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("marker",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::marker::PhantomData")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "core::marker::PhantomData")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "pinocchio::sysvars::instructions::IntrospectedInstruction",
                              "marker"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_pinocchio_sysvars_instructions_IntrospectedInstruction.
    
    Module Impl_core_marker_StructuralPartialEq_for_pinocchio_sysvars_instructions_IntrospectedInstruction.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_pinocchio_sysvars_instructions_IntrospectedInstruction.
    
    Module Impl_core_cmp_PartialEq_pinocchio_sysvars_instructions_IntrospectedInstruction_for_pinocchio_sysvars_instructions_IntrospectedInstruction.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction" ],
                self
              |) in
            let other :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction" ],
                other
              |) in
            LogicalOp.and (|
              M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "pinocchio::sysvars::instructions::IntrospectedInstruction",
                      "raw"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "pinocchio::sysvars::instructions::IntrospectedInstruction",
                      "raw"
                    |)
                  |)
                ]
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply
                      (Ty.path "core::marker::PhantomData")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                      ],
                    [],
                    [
                      Ty.apply
                        (Ty.path "core::marker::PhantomData")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                        ]
                    ],
                    "eq",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::sysvars::instructions::IntrospectedInstruction",
                        "marker"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "pinocchio::sysvars::instructions::IntrospectedInstruction",
                        "marker"
                      |)
                    |)
                  ]
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_pinocchio_sysvars_instructions_IntrospectedInstruction_for_pinocchio_sysvars_instructions_IntrospectedInstruction.
    
    Module Impl_core_cmp_Eq_for_pinocchio_sysvars_instructions_IntrospectedInstruction.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction" ],
                self
              |) in
            M.match_operator (|
              Ty.tuple [],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.tuple [],
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_pinocchio_sysvars_instructions_IntrospectedInstruction.
    
    Module Impl_pinocchio_sysvars_instructions_IntrospectedInstruction.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction".
      
      (*
          pub unsafe fn get_account_meta_at_unchecked(&self, index: usize) -> &IntrospectedAccountMeta {
              let offset = core::mem::size_of::<u16>() + (index * IntrospectedAccountMeta::LEN);
              &*(self.raw.add(offset) as *const IntrospectedAccountMeta)
          }
      *)
      Definition get_account_meta_at_unchecked
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction" ],
                self
              |) in
            let index := M.alloc (| Ty.path "usize", index |) in
            M.read (|
              let~ offset : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.add,
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_function (| "core::mem::size_of", [], [ Ty.path "u16" ] |),
                      []
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [
                        M.read (| index |);
                        M.read (|
                          get_associated_constant (|
                            Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta",
                            "LEN",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ],
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.cast
                          (Ty.apply
                            (Ty.path "*const")
                            []
                            [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ])
                          (M.call_closure (|
                            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "pinocchio::sysvars::instructions::IntrospectedInstruction",
                                  "raw"
                                |)
                              |);
                              M.read (| offset |)
                            ]
                          |))
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_account_meta_at_unchecked :
        M.IsAssociatedFunction.C Self "get_account_meta_at_unchecked" get_account_meta_at_unchecked.
      Admitted.
      Global Typeclasses Opaque get_account_meta_at_unchecked.
      
      (*
          pub fn get_account_meta_at(
              &self,
              index: usize,
          ) -> Result<&IntrospectedAccountMeta, ProgramError> {
              // SAFETY: The first 2 bytes represent the number of accounts in the instruction.
              let num_accounts = u16::from_le_bytes(unsafe { *(self.raw as *const [u8; 2]) });
      
              if index >= num_accounts as usize {
                  return Err(ProgramError::InvalidArgument);
              }
      
              // SAFETY: The index was checked to be in bounds.
              Ok(unsafe { self.get_account_meta_at_unchecked(index) })
          }
      *)
      Definition get_account_meta_at (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; index ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction" ],
                self
              |) in
            let index := M.alloc (| Ty.path "usize", index |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ];
                  Ty.path "pinocchio::program_error::ProgramError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ num_accounts : Ty.path "u16" :=
                    M.call_closure (|
                      Ty.path "u16",
                      M.get_associated_function (| Ty.path "u16", "from_le_bytes", [], [] |),
                      [
                        M.read (|
                          M.deref (|
                            M.cast
                              (Ty.apply
                                (Ty.path "*const")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "u8" ]
                                ])
                              (M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "pinocchio::sysvars::instructions::IntrospectedInstruction",
                                  "raw"
                                |)
                              |))
                          |)
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ge,
                                    [
                                      M.read (| index |);
                                      M.cast (Ty.path "usize") (M.read (| num_accounts |))
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.path
                                            "pinocchio::sysvars::instructions::IntrospectedAccountMeta"
                                        ];
                                      Ty.path "pinocchio::program_error::ProgramError"
                                    ]
                                    [
                                      Value.StructTuple
                                        "pinocchio::program_error::ProgramError::InvalidArgument"
                                        []
                                        []
                                        []
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ];
                        Ty.path "pinocchio::program_error::ProgramError"
                      ]
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.path
                                    "pinocchio::sysvars::instructions::IntrospectedAccountMeta"
                                ],
                              M.get_associated_function (|
                                Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction",
                                "get_account_meta_at_unchecked",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                                M.read (| index |)
                              ]
                            |)
                          |)
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_account_meta_at :
        M.IsAssociatedFunction.C Self "get_account_meta_at" get_account_meta_at.
      Admitted.
      Global Typeclasses Opaque get_account_meta_at.
      
      (*
          pub fn get_program_id(&self) -> &Pubkey {
              // SAFETY: The first 2 bytes represent the number of accounts in the instruction.
              let num_accounts = u16::from_le_bytes(unsafe { *(self.raw as *const [u8; 2]) });
      
              // SAFETY: The program ID is located after the account metas.
              unsafe {
                  &*(self.raw.add(
                      size_of::<u16>() + num_accounts as usize * size_of::<IntrospectedAccountMeta>(),
                  ) as *const Pubkey)
              }
          }
      *)
      Definition get_program_id (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction" ],
                self
              |) in
            M.read (|
              let~ num_accounts : Ty.path "u16" :=
                M.call_closure (|
                  Ty.path "u16",
                  M.get_associated_function (| Ty.path "u16", "from_le_bytes", [], [] |),
                  [
                    M.read (|
                      M.deref (|
                        M.cast
                          (Ty.apply
                            (Ty.path "*const")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u8" ]
                            ])
                          (M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "pinocchio::sysvars::instructions::IntrospectedInstruction",
                              "raw"
                            |)
                          |))
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ]
                  ],
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.cast
                          (Ty.apply
                            (Ty.path "*const")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ Ty.path "u8" ]
                            ])
                          (M.call_closure (|
                            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "pinocchio::sysvars::instructions::IntrospectedInstruction",
                                  "raw"
                                |)
                              |);
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.add,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_function (|
                                      "core::mem::size_of",
                                      [],
                                      [ Ty.path "u16" ]
                                    |),
                                    []
                                  |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.mul,
                                    [
                                      M.cast (Ty.path "usize") (M.read (| num_accounts |));
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_function (|
                                          "core::mem::size_of",
                                          [],
                                          [
                                            Ty.path
                                              "pinocchio::sysvars::instructions::IntrospectedAccountMeta"
                                          ]
                                        |),
                                        []
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |))
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_program_id :
        M.IsAssociatedFunction.C Self "get_program_id" get_program_id.
      Admitted.
      Global Typeclasses Opaque get_program_id.
      
      (*
          pub fn get_instruction_data(&self) -> &[u8] {
              // SAFETY: The first 2 bytes represent the number of accounts in the instruction.
              let offset = u16::from_le_bytes(unsafe { *(self.raw as *const [u8; 2]) }) as usize
                  * size_of::<IntrospectedAccountMeta>()
                  + PUBKEY_BYTES;
      
              // SAFETY: The instruction data length is located after the program ID.
              let data_len = u16::from_le_bytes(unsafe {
                  *(self.raw.add(size_of::<u16>() + offset) as *const [u8; 2])
              });
      
              // SAFETY: The instruction data is located after the data length.
              unsafe {
                  core::slice::from_raw_parts(
                      self.raw.add(size_of::<u16>() + offset + size_of::<u16>()),
                      data_len as usize,
                  )
              }
          }
      *)
      Definition get_instruction_data (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedInstruction" ],
                self
              |) in
            M.read (|
              let~ offset : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.add,
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [
                        M.cast
                          (Ty.path "usize")
                          (M.call_closure (|
                            Ty.path "u16",
                            M.get_associated_function (| Ty.path "u16", "from_le_bytes", [], [] |),
                            [
                              M.read (|
                                M.deref (|
                                  M.cast
                                    (Ty.apply
                                      (Ty.path "*const")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ Ty.path "u8" ]
                                      ])
                                    (M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "pinocchio::sysvars::instructions::IntrospectedInstruction",
                                        "raw"
                                      |)
                                    |))
                                |)
                              |)
                            ]
                          |));
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_function (|
                            "core::mem::size_of",
                            [],
                            [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ]
                          |),
                          []
                        |)
                      ]
                    |);
                    M.read (|
                      get_constant (| "pinocchio::pubkey::PUBKEY_BYTES", Ty.path "usize" |)
                    |)
                  ]
                |) in
              let~ data_len : Ty.path "u16" :=
                M.call_closure (|
                  Ty.path "u16",
                  M.get_associated_function (| Ty.path "u16", "from_le_bytes", [], [] |),
                  [
                    M.read (|
                      M.deref (|
                        M.cast
                          (Ty.apply
                            (Ty.path "*const")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u8" ]
                            ])
                          (M.call_closure (|
                            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "pinocchio::sysvars::instructions::IntrospectedInstruction",
                                  "raw"
                                |)
                              |);
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.add,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_function (|
                                      "core::mem::size_of",
                                      [],
                                      [ Ty.path "u16" ]
                                    |),
                                    []
                                  |);
                                  M.read (| offset |)
                                ]
                              |)
                            ]
                          |))
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                      M.get_function (| "core::slice::raw::from_raw_parts", [], [ Ty.path "u8" ] |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                            "add",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "pinocchio::sysvars::instructions::IntrospectedInstruction",
                                "raw"
                              |)
                            |);
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.add,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_function (|
                                        "core::mem::size_of",
                                        [],
                                        [ Ty.path "u16" ]
                                      |),
                                      []
                                    |);
                                    M.read (| offset |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_function (| "core::mem::size_of", [], [ Ty.path "u16" ] |),
                                  []
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.cast (Ty.path "usize") (M.read (| data_len |))
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_instruction_data :
        M.IsAssociatedFunction.C Self "get_instruction_data" get_instruction_data.
      Admitted.
      Global Typeclasses Opaque get_instruction_data.
    End Impl_pinocchio_sysvars_instructions_IntrospectedInstruction.
    
    Definition value_IS_SIGNER (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u8", Value.Integer IntegerKind.U8 1 |))).
    
    Global Instance Instance_IsConstant_value_IS_SIGNER :
      M.IsFunction.C "pinocchio::sysvars::instructions::IS_SIGNER" value_IS_SIGNER.
    Admitted.
    Global Typeclasses Opaque value_IS_SIGNER.
    
    Definition value_IS_WRITABLE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u8", Value.Integer IntegerKind.U8 2 |))).
    
    Global Instance Instance_IsConstant_value_IS_WRITABLE :
      M.IsFunction.C "pinocchio::sysvars::instructions::IS_WRITABLE" value_IS_WRITABLE.
    Admitted.
    Global Typeclasses Opaque value_IS_WRITABLE.
    
    (* StructRecord
      {
        name := "IntrospectedAccountMeta";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("flags", Ty.path "u8");
            ("key",
              Ty.apply
                (Ty.path "array")
                [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                [ Ty.path "u8" ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_pinocchio_sysvars_instructions_IntrospectedAccountMeta.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ],
                self
              |) in
            Value.mkStructRecord
              "pinocchio::sysvars::instructions::IntrospectedAccountMeta"
              []
              []
              [
                ("flags",
                  M.call_closure (|
                    Ty.path "u8",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "u8",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "pinocchio::sysvars::instructions::IntrospectedAccountMeta",
                              "flags"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("key",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "pinocchio::sysvars::instructions::IntrospectedAccountMeta",
                              "key"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_pinocchio_sysvars_instructions_IntrospectedAccountMeta.
    
    Module Impl_core_marker_StructuralPartialEq_for_pinocchio_sysvars_instructions_IntrospectedAccountMeta.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_pinocchio_sysvars_instructions_IntrospectedAccountMeta.
    
    Module Impl_core_cmp_PartialEq_pinocchio_sysvars_instructions_IntrospectedAccountMeta_for_pinocchio_sysvars_instructions_IntrospectedAccountMeta.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ],
                self
              |) in
            let other :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ],
                other
              |) in
            LogicalOp.and (|
              M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "pinocchio::sysvars::instructions::IntrospectedAccountMeta",
                      "flags"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "pinocchio::sysvars::instructions::IntrospectedAccountMeta",
                      "flags"
                    |)
                  |)
                ]
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8" ],
                    [],
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ],
                    "eq",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::sysvars::instructions::IntrospectedAccountMeta",
                        "key"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "pinocchio::sysvars::instructions::IntrospectedAccountMeta",
                        "key"
                      |)
                    |)
                  ]
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_pinocchio_sysvars_instructions_IntrospectedAccountMeta_for_pinocchio_sysvars_instructions_IntrospectedAccountMeta.
    
    Module Impl_core_cmp_Eq_for_pinocchio_sysvars_instructions_IntrospectedAccountMeta.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ],
                self
              |) in
            M.match_operator (|
              Ty.tuple [],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.tuple [],
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_pinocchio_sysvars_instructions_IntrospectedAccountMeta.
    
    Module Impl_pinocchio_sysvars_instructions_IntrospectedAccountMeta.
      Definition Self : Ty.t := Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta".
      
      (*     const LEN: usize = core::mem::size_of::<Self>(); *)
      (* Ty.path "usize" *)
      Definition value_LEN (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            Ty.path "usize",
            M.call_closure (|
              Ty.path "usize",
              M.get_function (|
                "core::mem::size_of",
                [],
                [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ]
              |),
              []
            |)
          |))).
      
      Global Instance AssociatedConstant_value_LEN : M.IsAssociatedFunction.C Self "LEN" value_LEN.
      Admitted.
      Global Typeclasses Opaque value_LEN.
      
      (*
          pub fn is_writable(&self) -> bool {
              (self.flags & IS_WRITABLE) != 0
          }
      *)
      Definition is_writable (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ],
                self
              |) in
            M.call_closure (|
              Ty.path "bool",
              BinOp.ne,
              [
                M.call_closure (|
                  Ty.path "u8",
                  BinOp.Wrap.bit_and,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::sysvars::instructions::IntrospectedAccountMeta",
                        "flags"
                      |)
                    |);
                    M.read (|
                      get_constant (|
                        "pinocchio::sysvars::instructions::IS_WRITABLE",
                        Ty.path "u8"
                      |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U8 0
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_writable :
        M.IsAssociatedFunction.C Self "is_writable" is_writable.
      Admitted.
      Global Typeclasses Opaque is_writable.
      
      (*
          pub fn is_signer(&self) -> bool {
              (self.flags & IS_SIGNER) != 0
          }
      *)
      Definition is_signer (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ],
                self
              |) in
            M.call_closure (|
              Ty.path "bool",
              BinOp.ne,
              [
                M.call_closure (|
                  Ty.path "u8",
                  BinOp.Wrap.bit_and,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::sysvars::instructions::IntrospectedAccountMeta",
                        "flags"
                      |)
                    |);
                    M.read (|
                      get_constant (| "pinocchio::sysvars::instructions::IS_SIGNER", Ty.path "u8" |)
                    |)
                  ]
                |);
                Value.Integer IntegerKind.U8 0
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_signer :
        M.IsAssociatedFunction.C Self "is_signer" is_signer.
      Admitted.
      Global Typeclasses Opaque is_signer.
      
      (*
          pub fn to_account_meta(&self) -> AccountMeta {
              AccountMeta::new(&self.key, self.is_writable(), self.is_signer())
          }
      *)
      Definition to_account_meta (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta" ],
                self
              |) in
            M.call_closure (|
              Ty.path "pinocchio::instruction::AccountMeta",
              M.get_associated_function (|
                Ty.path "pinocchio::instruction::AccountMeta",
                "new",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "pinocchio::sysvars::instructions::IntrospectedAccountMeta",
                        "key"
                      |)
                    |)
                  |)
                |);
                M.call_closure (|
                  Ty.path "bool",
                  M.get_associated_function (|
                    Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta",
                    "is_writable",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |);
                M.call_closure (|
                  Ty.path "bool",
                  M.get_associated_function (|
                    Ty.path "pinocchio::sysvars::instructions::IntrospectedAccountMeta",
                    "is_signer",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_to_account_meta :
        M.IsAssociatedFunction.C Self "to_account_meta" to_account_meta.
      Admitted.
      Global Typeclasses Opaque to_account_meta.
    End Impl_pinocchio_sysvars_instructions_IntrospectedAccountMeta.
  End instructions.
End sysvars.
