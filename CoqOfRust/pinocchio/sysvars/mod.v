(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module sysvars.
  (* Trait *)
  Module Sysvar.
    Definition get (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructTuple
            "core::result::Result::Err"
            []
            [ Self; Ty.path "pinocchio::program_error::ProgramError" ]
            [ Value.StructTuple "pinocchio::program_error::ProgramError::UnsupportedSysvar" [] [] []
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_get : M.IsProvidedMethod "pinocchio::sysvars::Sysvar" "get" get.
  End Sysvar.
  
  (*
  pub unsafe fn get_sysvar_unchecked(
      dst: *mut u8,
      sysvar_id: &Pubkey,
      offset: usize,
      len: usize,
  ) -> Result<(), ProgramError> {
      #[cfg(target_os = "solana")]
      {
          let result = unsafe {
              sol_get_sysvar(
                  sysvar_id as *const _ as *const u8,
                  dst,
                  offset as u64,
                  len as u64,
              )
          };
  
          match result {
              crate::SUCCESS => Ok(()),
              e => Err(e.into()),
          }
      }
  
      #[cfg(not(target_os = "solana"))]
      {
          black_box((dst, sysvar_id, offset, len));
          Ok(())
      }
  }
  *)
  Definition get_sysvar_unchecked (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ dst; sysvar_id; offset; len ] =>
      ltac:(M.monadic
        (let dst := M.alloc (| Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ], dst |) in
        let sysvar_id :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                  [ Ty.path "u8" ]
              ],
            sysvar_id
          |) in
        let offset := M.alloc (| Ty.path "usize", offset |) in
        let len := M.alloc (| Ty.path "usize", len |) in
        M.read (|
          let~ _ :
              Ty.tuple
                [
                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ];
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ];
                  Ty.path "usize";
                  Ty.path "usize"
                ] :=
            M.call_closure (|
              Ty.tuple
                [
                  Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ];
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8" ]
                    ];
                  Ty.path "usize";
                  Ty.path "usize"
                ],
              M.get_function (|
                "core::hint::black_box",
                [],
                [
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ];
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8" ]
                        ];
                      Ty.path "usize";
                      Ty.path "usize"
                    ]
                ]
              |),
              [
                Value.Tuple
                  [ M.read (| dst |); M.read (| sysvar_id |); M.read (| offset |); M.read (| len |)
                  ]
              ]
            |) in
          M.alloc (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
            Value.StructTuple
              "core::result::Result::Ok"
              []
              [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ]
              [ Value.Tuple [] ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_get_sysvar_unchecked :
    M.IsFunction.C "pinocchio::sysvars::get_sysvar_unchecked" get_sysvar_unchecked.
  Admitted.
  Global Typeclasses Opaque get_sysvar_unchecked.
  
  (*
  pub fn get_sysvar(dst: &mut [u8], sysvar_id: &Pubkey, offset: usize) -> Result<(), ProgramError> {
      // SAFETY: Use the length of the slice as the length parameter.
      unsafe { get_sysvar_unchecked(dst.as_mut_ptr(), sysvar_id, offset, dst.len()) }
  }
  *)
  Definition get_sysvar (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ dst; sysvar_id; offset ] =>
      ltac:(M.monadic
        (let dst :=
          M.alloc (|
            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
            dst
          |) in
        let sysvar_id :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ M.unevaluated_const (mk_str (| "pinocchio_pubkey_Pubkey_discriminant" |)) ]
                  [ Ty.path "u8" ]
              ],
            sysvar_id
          |) in
        let offset := M.alloc (| Ty.path "usize", offset |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "core::result::Result")
            []
            [ Ty.tuple []; Ty.path "pinocchio::program_error::ProgramError" ],
          M.get_function (| "pinocchio::sysvars::get_sysvar_unchecked", [], [] |),
          [
            M.call_closure (|
              Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
              M.get_associated_function (|
                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                "as_mut_ptr",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| dst |) |) |) ]
            |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| sysvar_id |) |) |);
            M.read (| offset |);
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                "len",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| dst |) |) |) ]
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_get_sysvar :
    M.IsFunction.C "pinocchio::sysvars::get_sysvar" get_sysvar.
  Admitted.
  Global Typeclasses Opaque get_sysvar.
End sysvars.
