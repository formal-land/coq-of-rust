(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module virtual_column.
  (* StructRecord
    {
      name := "VirtualPairCol";
      const_params := [];
      ty_params := [ "F" ];
      fields :=
        [
          ("column_weights",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("constant", F)
        ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_Field_F_for_p3_air_virtual_column_VirtualPairCol_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ].
    
    (* Clone *)
    Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_air::virtual_column::VirtualPairCol"
            []
            [ F ]
            [
              ("column_weights",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_air::virtual_column::VirtualPairCol",
                            "column_weights"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("constant",
                M.call_closure (|
                  F,
                  M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_air::virtual_column::VirtualPairCol",
                            "constant"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_Field_F_for_p3_air_virtual_column_VirtualPairCol_F.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_p3_air_virtual_column_VirtualPairCol_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ].
    
    (* Debug *)
    Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "VirtualPairCol" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "column_weights" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_air::virtual_column::VirtualPairCol",
                        "column_weights"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "constant" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_air::virtual_column::VirtualPairCol",
                            "constant"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_p3_air_virtual_column_VirtualPairCol_F.
  
  (*
  Enum PairCol
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "Preprocessed";
          item := StructTuple [ Ty.path "usize" ];
        };
        {
          name := "Main";
          item := StructTuple [ Ty.path "usize" ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_PairCol_Preprocessed :
    M.IsDiscriminant "p3_air::virtual_column::PairCol::Preprocessed" 0.
  Axiom IsDiscriminant_PairCol_Main : M.IsDiscriminant "p3_air::virtual_column::PairCol::Main" 1.
  
  Module Impl_core_clone_Clone_for_p3_air_virtual_column_PairCol.
    Definition Self : Ty.t := Ty.path "p3_air::virtual_column::PairCol".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "p3_air::virtual_column::PairCol" ],
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_p3_air_virtual_column_PairCol.
  
  Module Impl_core_marker_Copy_for_p3_air_virtual_column_PairCol.
    Definition Self : Ty.t := Ty.path "p3_air::virtual_column::PairCol".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_p3_air_virtual_column_PairCol.
  
  Module Impl_core_fmt_Debug_for_p3_air_virtual_column_PairCol.
    Definition Self : Ty.t := Ty.path "p3_air::virtual_column::PairCol".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ]
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_air::virtual_column::PairCol::Preprocessed",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Preprocessed" |) |)
                          |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_air::virtual_column::PairCol::Main",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Main" |) |) |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |))
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_p3_air_virtual_column_PairCol.
  
  Module Impl_p3_air_virtual_column_PairCol.
    Definition Self : Ty.t := Ty.path "p3_air::virtual_column::PairCol".
    
    (*
        pub const fn get<T: Copy>(&self, preprocessed: &[T], main: &[T]) -> T {
            match self {
                Self::Preprocessed(i) => preprocessed[*i],
                Self::Main(i) => main[*i],
            }
        }
    *)
    Definition get (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T ], [ self; preprocessed; main ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let preprocessed := M.alloc (| preprocessed |) in
          let main := M.alloc (| main |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ T ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_air::virtual_column::PairCol::Preprocessed",
                        0
                      |) in
                    let i := M.alloc (| γ1_0 |) in
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| preprocessed |) |),
                      M.read (| M.deref (| M.read (| i |) |) |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_air::virtual_column::PairCol::Main",
                        0
                      |) in
                    let i := M.alloc (| γ1_0 |) in
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| main |) |),
                      M.read (| M.deref (| M.read (| i |) |) |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get : M.IsAssociatedFunction.C Self "get" get.
    Admitted.
    Global Typeclasses Opaque get.
  End Impl_p3_air_virtual_column_PairCol.
  
  Module Impl_p3_air_virtual_column_VirtualPairCol_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ].
    
    (*
        pub const fn new(column_weights: Vec<(PairCol, F)>, constant: F) -> Self {
            Self {
                column_weights,
                constant,
            }
        }
    *)
    Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ column_weights; constant ] =>
        ltac:(M.monadic
          (let column_weights := M.alloc (| column_weights |) in
          let constant := M.alloc (| constant |) in
          Value.StructRecord
            "p3_air::virtual_column::VirtualPairCol"
            []
            [ F ]
            [ ("column_weights", M.read (| column_weights |)); ("constant", M.read (| constant |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "new" (new F).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn new_preprocessed(column_weights: Vec<(usize, F)>, constant: F) -> Self {
            Self::new(
                column_weights
                    .into_iter()
                    .map(|(i, w)| (PairCol::Preprocessed(i), w))
                    .collect(),
                constant,
            )
        }
    *)
    Definition new_preprocessed
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ column_weights; constant ] =>
        ltac:(M.monadic
          (let column_weights := M.alloc (| column_weights |) in
          let constant := M.alloc (| constant |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ];
                      Ty.function
                        [ Ty.tuple [ Ty.tuple [ Ty.path "usize"; F ] ] ]
                        (Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ])
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ];
                        Ty.function
                          [ Ty.tuple [ Ty.tuple [ Ty.path "usize"; F ] ] ]
                          (Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ];
                        Ty.function
                          [ Ty.tuple [ Ty.tuple [ Ty.path "usize"; F ] ] ]
                          (Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [ M.read (| column_weights |) ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.tuple [ Ty.path "usize"; F ] ] ]
                                        (Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let i := M.copy (| γ0_0 |) in
                                        let w := M.copy (| γ0_1 |) in
                                        Value.Tuple
                                          [
                                            Value.StructTuple
                                              "p3_air::virtual_column::PairCol::Preprocessed"
                                              []
                                              []
                                              [ M.read (| i |) ];
                                            M.read (| w |)
                                          ]))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |);
              M.read (| constant |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_preprocessed :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "new_preprocessed" (new_preprocessed F).
    Admitted.
    Global Typeclasses Opaque new_preprocessed.
    
    (*
        pub fn new_main(column_weights: Vec<(usize, F)>, constant: F) -> Self {
            Self::new(
                column_weights
                    .into_iter()
                    .map(|(i, w)| (PairCol::Main(i), w))
                    .collect(),
                constant,
            )
        }
    *)
    Definition new_main (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ column_weights; constant ] =>
        ltac:(M.monadic
          (let column_weights := M.alloc (| column_weights |) in
          let constant := M.alloc (| constant |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ];
                      Ty.function
                        [ Ty.tuple [ Ty.tuple [ Ty.path "usize"; F ] ] ]
                        (Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ])
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ];
                        Ty.function
                          [ Ty.tuple [ Ty.tuple [ Ty.path "usize"; F ] ] ]
                          (Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ];
                        Ty.function
                          [ Ty.tuple [ Ty.tuple [ Ty.path "usize"; F ] ] ]
                          (Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [ M.read (| column_weights |) ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.tuple [ Ty.path "usize"; F ] ] ]
                                        (Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let i := M.copy (| γ0_0 |) in
                                        let w := M.copy (| γ0_1 |) in
                                        Value.Tuple
                                          [
                                            Value.StructTuple
                                              "p3_air::virtual_column::PairCol::Main"
                                              []
                                              []
                                              [ M.read (| i |) ];
                                            M.read (| w |)
                                          ]))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |);
              M.read (| constant |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new_main :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "new_main" (new_main F).
    Admitted.
    Global Typeclasses Opaque new_main.
    
    (*     pub const ONE: Self = Self::constant(F::ONE); *)
    (* Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ] *)
    Definition value_ONE (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      ltac:(M.monadic
        (M.alloc (|
          M.call_closure (|
            Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
              "constant",
              [],
              []
            |),
            [ M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", F |) |) ]
          |)
        |))).
    
    Global Instance AssociatedConstant_value_ONE :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "ONE" (value_ONE F).
    Admitted.
    Global Typeclasses Opaque value_ONE.
    
    (*
        pub const fn constant(x: F) -> Self {
            Self {
                column_weights: vec![],
                constant: x,
            }
        }
    *)
    Definition constant (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ x ] =>
        ltac:(M.monadic
          (let x := M.alloc (| x |) in
          Value.StructRecord
            "p3_air::virtual_column::VirtualPairCol"
            []
            [ F ]
            [
              ("column_weights",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  []
                |));
              ("constant", M.read (| x |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_constant :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "constant" (constant F).
    Admitted.
    Global Typeclasses Opaque constant.
    
    (*
        pub fn single(column: PairCol) -> Self {
            Self {
                column_weights: vec![(column, F::ONE)],
                constant: F::ZERO,
            }
        }
    *)
    Definition single (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ column ] =>
        ltac:(M.monadic
          (let column := M.alloc (| column |) in
          Value.StructRecord
            "p3_air::virtual_column::VirtualPairCol"
            []
            [ F ]
            [
              ("column_weights",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ] ],
                    "into_vec",
                    [],
                    [ Ty.path "alloc::alloc::Global" ]
                  |),
                  [
                    (* Unsize *)
                    M.pointer_coercion
                      (M.read (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [ Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ] ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 1 ]
                                  [ Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ] ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.alloc (|
                              Value.Array
                                [
                                  Value.Tuple
                                    [
                                      M.read (| column |);
                                      M.read (|
                                        get_constant (|
                                          "p3_field::field::PrimeCharacteristicRing::ONE",
                                          F
                                        |)
                                      |)
                                    ]
                                ]
                            |)
                          ]
                        |)
                      |))
                  ]
                |));
              ("constant",
                M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |) |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_single :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "single" (single F).
    Admitted.
    Global Typeclasses Opaque single.
    
    (*
        pub fn single_preprocessed(column: usize) -> Self {
            Self::single(PairCol::Preprocessed(column))
        }
    *)
    Definition single_preprocessed
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ column ] =>
        ltac:(M.monadic
          (let column := M.alloc (| column |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
              "single",
              [],
              []
            |),
            [
              Value.StructTuple
                "p3_air::virtual_column::PairCol::Preprocessed"
                []
                []
                [ M.read (| column |) ]
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_single_preprocessed :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "single_preprocessed" (single_preprocessed F).
    Admitted.
    Global Typeclasses Opaque single_preprocessed.
    
    (*
        pub fn single_main(column: usize) -> Self {
            Self::single(PairCol::Main(column))
        }
    *)
    Definition single_main (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ column ] =>
        ltac:(M.monadic
          (let column := M.alloc (| column |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
              "single",
              [],
              []
            |),
            [
              Value.StructTuple
                "p3_air::virtual_column::PairCol::Main"
                []
                []
                [ M.read (| column |) ]
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_single_main :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "single_main" (single_main F).
    Admitted.
    Global Typeclasses Opaque single_main.
    
    (*
        pub fn sum_main(columns: Vec<usize>) -> Self {
            let column_weights = columns.into_iter().map(|col| (col, F::ONE)).collect();
            Self::new_main(column_weights, F::ZERO)
        }
    *)
    Definition sum_main (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ columns ] =>
        ltac:(M.monadic
          (let columns := M.alloc (| columns |) in
          M.read (|
            let~ column_weights :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.tuple [ Ty.path "usize"; F ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize" ] ]
                            (Ty.tuple [ Ty.path "usize"; F ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.tuple [ Ty.path "usize"; F ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize" ] ]
                            (Ty.tuple [ Ty.path "usize"; F ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| columns |) ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.tuple [ Ty.path "usize"; F ])
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let col := M.copy (| γ |) in
                                          Value.Tuple
                                            [
                                              M.read (| col |);
                                              M.read (|
                                                get_constant (|
                                                  "p3_field::field::PrimeCharacteristicRing::ONE",
                                                  F
                                                |)
                                              |)
                                            ]))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
                  "new_main",
                  [],
                  []
                |),
                [
                  M.read (| column_weights |);
                  M.read (|
                    get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_sum_main :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "sum_main" (sum_main F).
    Admitted.
    Global Typeclasses Opaque sum_main.
    
    (*
        pub fn sum_preprocessed(columns: Vec<usize>) -> Self {
            let column_weights = columns.into_iter().map(|col| (col, F::ONE)).collect();
            Self::new_preprocessed(column_weights, F::ZERO)
        }
    *)
    Definition sum_preprocessed
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ columns ] =>
        ltac:(M.monadic
          (let columns := M.alloc (| columns |) in
          M.read (|
            let~ column_weights :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.tuple [ Ty.path "usize"; F ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize" ] ]
                            (Ty.tuple [ Ty.path "usize"; F ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.tuple [ Ty.path "usize"; F ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize" ] ]
                            (Ty.tuple [ Ty.path "usize"; F ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| columns |) ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.tuple [ Ty.path "usize"; F ])
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let col := M.copy (| γ |) in
                                          Value.Tuple
                                            [
                                              M.read (| col |);
                                              M.read (|
                                                get_constant (|
                                                  "p3_field::field::PrimeCharacteristicRing::ONE",
                                                  F
                                                |)
                                              |)
                                            ]))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
                  "new_preprocessed",
                  [],
                  []
                |),
                [
                  M.read (| column_weights |);
                  M.read (|
                    get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_sum_preprocessed :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "sum_preprocessed" (sum_preprocessed F).
    Admitted.
    Global Typeclasses Opaque sum_preprocessed.
    
    (*
        pub fn diff_preprocessed(a_col: usize, b_col: usize) -> Self {
            Self::new_preprocessed(vec![(a_col, F::ONE), (b_col, F::NEG_ONE)], F::ZERO)
        }
    *)
    Definition diff_preprocessed
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ a_col; b_col ] =>
        ltac:(M.monadic
          (let a_col := M.alloc (| a_col |) in
          let b_col := M.alloc (| b_col |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
              "new_preprocessed",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [] [ Ty.tuple [ Ty.path "usize"; F ] ],
                  "into_vec",
                  [],
                  [ Ty.path "alloc::alloc::Global" ]
                |),
                [
                  (* Unsize *)
                  M.pointer_coercion
                    (M.read (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.tuple [ Ty.path "usize"; F ] ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.tuple [ Ty.path "usize"; F ] ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.alloc (|
                            Value.Array
                              [
                                Value.Tuple
                                  [
                                    M.read (| a_col |);
                                    M.read (|
                                      get_constant (|
                                        "p3_field::field::PrimeCharacteristicRing::ONE",
                                        F
                                      |)
                                    |)
                                  ];
                                Value.Tuple
                                  [
                                    M.read (| b_col |);
                                    M.read (|
                                      get_constant (|
                                        "p3_field::field::PrimeCharacteristicRing::NEG_ONE",
                                        F
                                      |)
                                    |)
                                  ]
                              ]
                          |)
                        ]
                      |)
                    |))
                ]
              |);
              M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_diff_preprocessed :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "diff_preprocessed" (diff_preprocessed F).
    Admitted.
    Global Typeclasses Opaque diff_preprocessed.
    
    (*
        pub fn diff_main(a_col: usize, b_col: usize) -> Self {
            Self::new_main(vec![(a_col, F::ONE), (b_col, F::NEG_ONE)], F::ZERO)
        }
    *)
    Definition diff_main (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ a_col; b_col ] =>
        ltac:(M.monadic
          (let a_col := M.alloc (| a_col |) in
          let b_col := M.alloc (| b_col |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_air::virtual_column::VirtualPairCol") [] [ F ],
              "new_main",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [] [ Ty.tuple [ Ty.path "usize"; F ] ],
                  "into_vec",
                  [],
                  [ Ty.path "alloc::alloc::Global" ]
                |),
                [
                  (* Unsize *)
                  M.pointer_coercion
                    (M.read (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.tuple [ Ty.path "usize"; F ] ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.tuple [ Ty.path "usize"; F ] ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.alloc (|
                            Value.Array
                              [
                                Value.Tuple
                                  [
                                    M.read (| a_col |);
                                    M.read (|
                                      get_constant (|
                                        "p3_field::field::PrimeCharacteristicRing::ONE",
                                        F
                                      |)
                                    |)
                                  ];
                                Value.Tuple
                                  [
                                    M.read (| b_col |);
                                    M.read (|
                                      get_constant (|
                                        "p3_field::field::PrimeCharacteristicRing::NEG_ONE",
                                        F
                                      |)
                                    |)
                                  ]
                              ]
                          |)
                        ]
                      |)
                    |))
                ]
              |);
              M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_diff_main :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "diff_main" (diff_main F).
    Admitted.
    Global Typeclasses Opaque diff_main.
    
    (*
        pub fn apply<Expr, Var>(&self, preprocessed: &[Var], main: &[Var]) -> Expr
        where
            F: Into<Expr>,
            Expr: PrimeCharacteristicRing + Mul<F, Output = Expr>,
            Var: Into<Expr> + Copy,
        {
            self.column_weights
                .iter()
                .fold(self.constant.into(), |acc, &(col, w)| {
                    acc + col.get(preprocessed, main).into() * w
                })
        }
    *)
    Definition apply (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [ Expr; Var ], [ self; preprocessed; main ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let preprocessed := M.alloc (| preprocessed |) in
          let main := M.alloc (| main |) in
          M.call_closure (|
            Expr,
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::slice::iter::Iter")
                []
                [ Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ] ],
              [],
              [],
              "fold",
              [],
              [
                Expr;
                Ty.function
                  [
                    Ty.tuple
                      [
                        Expr;
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ] ]
                      ]
                  ]
                  Expr
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::slice::iter::Iter")
                  []
                  [ Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ] ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "slice")
                    []
                    [ Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ] ],
                  "iter",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ] ]
                          ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_air::virtual_column::VirtualPairCol",
                              "column_weights"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |);
              M.call_closure (|
                Expr,
                M.get_trait_method (| "core::convert::Into", F, [], [ Expr ], "into", [], [] |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_air::virtual_column::VirtualPairCol",
                      "constant"
                    |)
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0; α1 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Expr;
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.tuple [ Ty.path "p3_air::virtual_column::PairCol"; F ]
                                        ]
                                    ]
                                ]
                                Expr
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let acc := M.copy (| γ |) in
                                M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Expr;
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.tuple
                                                    [ Ty.path "p3_air::virtual_column::PairCol"; F ]
                                                ]
                                            ]
                                        ]
                                        Expr
                                    ],
                                  M.alloc (| α1 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.read (| γ |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let col := M.copy (| γ1_0 |) in
                                        let w := M.copy (| γ1_1 |) in
                                        M.call_closure (|
                                          Expr,
                                          M.get_trait_method (|
                                            "core::ops::arith::Add",
                                            Expr,
                                            [],
                                            [ Expr ],
                                            "add",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| acc |);
                                            M.call_closure (|
                                              Expr,
                                              M.get_trait_method (|
                                                "core::ops::arith::Mul",
                                                Expr,
                                                [],
                                                [ F ],
                                                "mul",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Expr,
                                                  M.get_trait_method (|
                                                    "core::convert::Into",
                                                    Var,
                                                    [],
                                                    [ Expr ],
                                                    "into",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Var,
                                                      M.get_associated_function (|
                                                        Ty.path "p3_air::virtual_column::PairCol",
                                                        "get",
                                                        [],
                                                        [ Var ]
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.Ref, col |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| preprocessed |) |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| main |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |);
                                                M.read (| w |)
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_apply :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "apply" (apply F).
    Admitted.
    Global Typeclasses Opaque apply.
  End Impl_p3_air_virtual_column_VirtualPairCol_F.
End virtual_column.
