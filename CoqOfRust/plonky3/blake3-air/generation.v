(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module generation.
  (* #[instrument(name = "generate Blake3 trace", skip_all)] *)
  Definition generate_trace_rows (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ inputs; extra_capacity_bits ] =>
      ltac:(M.monadic
        (let inputs := M.alloc (| inputs |) in
        let extra_capacity_bits := M.alloc (| extra_capacity_bits |) in
        M.catch_return
          (Ty.apply
            (Ty.path "p3_matrix::dense::DenseMatrix")
            []
            [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ]) (|
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] := M.alloc (| Value.Tuple [] |) in
              let __tracing_attr_span := M.copy (| Value.DeclaredButUndefined |) in
              let __tracing_attr_guard := M.copy (| Value.DeclaredButUndefined |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.path "tracing_core::metadata::Level",
                                      [],
                                      [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                      "le",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_associated_constant (|
                                          Ty.path "tracing_core::metadata::Level",
                                          "INFO",
                                          Ty.path "tracing_core::metadata::Level"
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "tracing::level_filters::STATIC_MAX_LEVEL",
                                          Ty.path "tracing_core::metadata::LevelFilter"
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "INFO",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                "current",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic (Value.Bool false))
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_span,
                              M.read (|
                                let~ interest :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.path "tracing_core::subscriber::Interest" ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "never",
                                        [],
                                        []
                                      |),
                                      []
                                    |)
                                  |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.path "tracing::span::Span" ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              LogicalOp.and (|
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialOrd",
                                                        Ty.path "tracing_core::metadata::Level",
                                                        [],
                                                        [
                                                          Ty.path
                                                            "tracing_core::metadata::LevelFilter"
                                                        ],
                                                        "le",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_associated_constant (|
                                                            Ty.path "tracing_core::metadata::Level",
                                                            "INFO",
                                                            Ty.path "tracing_core::metadata::Level"
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_constant (|
                                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          |)
                                                        |)
                                                      ]
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "INFO",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  "current",
                                                                  [],
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.alloc (|
                                                          M.write (|
                                                            interest,
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                "interest",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "p3_blake3_air::generation::generate_trace_rows::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              "is_never",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                interest
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)))
                                                |),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_function (|
                                                      "tracing::__macro_support::__is_enabled",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "p3_blake3_air::generation::generate_trace_rows::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| interest |)
                                                    ]
                                                  |)))
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ meta :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ]
                                              ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "tracing_core::metadata::Metadata" ],
                                              M.get_trait_method (|
                                                "tracing_core::callsite::Callsite",
                                                Ty.path "tracing_core::callsite::DefaultCallsite",
                                                [],
                                                [],
                                                "metadata",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.read (|
                                                      get_constant (|
                                                        "p3_blake3_air::generation::generate_trace_rows::__CALLSITE",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite"
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "tracing::span::Span",
                                            M.get_associated_function (|
                                              Ty.path "tracing::span::Span",
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| meta |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "tracing_core::field::ValueSet",
                                                        M.get_associated_function (|
                                                          Ty.path "tracing_core::field::FieldSet",
                                                          "value_set",
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 0 ]
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::Field"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::FieldSet"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata",
                                                                  "fields",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| meta |) |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (| Value.Array [] |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let~ span :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "tracing::span::Span" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing::span::Span",
                                              M.get_function (|
                                                "tracing::__macro_support::__disabled_span",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::metadata::Metadata"
                                                        ],
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        [],
                                                        "metadata",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "p3_blake3_air::generation::generate_trace_rows::__CALLSITE",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite"
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (| Value.Tuple [] |) in
                                        span))
                                  ]
                                |)
                              |)
                            |)
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_guard,
                              M.call_closure (|
                                Ty.path "tracing::span::Entered",
                                M.get_associated_function (|
                                  Ty.path "tracing::span::Span",
                                  "enter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool false |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              let~ __tracing_attr_fake_return :
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ] :=
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.loop (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                        ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      |)
                                    |)
                                  |)
                                |) in
                              M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ num_rows : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 24 ]
                            [ Ty.path "u32" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, inputs |) ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.path "usize",
                                    "is_power_of_two",
                                    [],
                                    []
                                  |),
                                  [ M.read (| num_rows |) ]
                                |)
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic_fmt", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_const",
                                    [ Value.Integer IntegerKind.Usize 1 ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Value.Array
                                              [
                                                mk_str (|
                                                  "Callers expected to pad inputs to VECTOR_LEN times a power of two"
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ trace_length : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [
                      M.read (| num_rows |);
                      M.read (|
                        get_constant (|
                          "p3_blake3_air::columns::NUM_BLAKE3_COLS",
                          Ty.path "usize"
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ long_trace :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "p3_field::field::PrimeCharacteristicRing",
                      F,
                      [],
                      [],
                      "zero_vec",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.shl,
                        [ M.read (| trace_length |); M.read (| extra_capacity_bits |) ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      "truncate",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.MutRef, long_trace |); M.read (| trace_length |) ]
                  |)
                |) in
              let~ trace :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ],
                      "new",
                      [],
                      []
                    |),
                    [
                      M.read (| long_trace |);
                      M.read (|
                        get_constant (|
                          "p3_blake3_air::columns::NUM_BLAKE3_COLS",
                          Ty.path "usize"
                        |)
                      |)
                    ]
                  |)
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ],
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ];
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "p3_blake3_air::columns::Blake3Cols") [] [ F ] ]
                          ];
                        Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]
                      ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ F ],
                      "align_to_mut",
                      [],
                      [ Ty.apply (Ty.path "p3_blake3_air::columns::Blake3Cols") [] [ F ] ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.get_trait_method (|
                              "core::ops::deref::DerefMut",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ],
                              [],
                              [],
                              "deref_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_struct_record_field (|
                                  trace,
                                  "p3_matrix::dense::DenseMatrix",
                                  "values"
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                      let prefix := M.copy (| γ0_0 |) in
                      let rows := M.copy (| γ0_1 |) in
                      let suffix := M.copy (| γ0_2 |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ F ],
                                            "is_empty",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| prefix |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::Arguments",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::Arguments",
                                            "new_const",
                                            [ Value.Integer IntegerKind.Usize 1 ],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [ mk_str (| "Alignment should match" |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ F ],
                                            "is_empty",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| suffix |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::Arguments",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::Arguments",
                                            "new_const",
                                            [ Value.Integer IntegerKind.Usize 1 ],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Value.Array
                                                      [ mk_str (| "Alignment should match" |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (|
                            Value.Tuple
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_blake3_air::columns::Blake3Cols")
                                              []
                                              [ F ]
                                          ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| rows |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.borrow (| Pointer.Kind.Ref, num_rows |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val := M.copy (| γ0_0 |) in
                                let right_val := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.eq,
                                                  [
                                                    M.read (|
                                                      M.deref (| M.read (| left_val |) |)
                                                    |);
                                                    M.read (|
                                                      M.deref (| M.read (| right_val |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let~ kind :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [ Ty.path "core::panicking::AssertKind" ] :=
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [],
                                                    [ Ty.path "usize"; Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| left_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::IterMut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_blake3_air::columns::Blake3Cols")
                                            []
                                            [ F ]
                                        ];
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 24 ]
                                            [ Ty.path "u32" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ],
                              [],
                              [],
                              "for_each",
                              [],
                              [
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_blake3_air::columns::Blake3Cols")
                                                      []
                                                      [ F ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 24 ]
                                                  [ Ty.path "u32" ]
                                              ]
                                          ]
                                      ]
                                  ]
                                  (Ty.tuple [])
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::IterMut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_blake3_air::columns::Blake3Cols")
                                              []
                                              [ F ]
                                          ];
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 24 ]
                                              [ Ty.path "u32" ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::IterMut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_blake3_air::columns::Blake3Cols")
                                            []
                                            [ F ]
                                        ];
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 24 ]
                                            [ Ty.path "u32" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  [],
                                  [],
                                  "enumerate",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::IterMut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_blake3_air::columns::Blake3Cols")
                                              []
                                              [ F ]
                                          ];
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 24 ]
                                              [ Ty.path "u32" ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::IterMut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_blake3_air::columns::Blake3Cols")
                                            []
                                            [ F ]
                                        ],
                                      [],
                                      [],
                                      "zip",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 24 ]
                                              [ Ty.path "u32" ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::slice::iter::IterMut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_blake3_air::columns::Blake3Cols")
                                              []
                                              [ F ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_maybe_rayon::serial::IntoParallelRefMutIterator",
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "p3_blake3_air::columns::Blake3Cols")
                                                []
                                                [ F ]
                                            ],
                                          [],
                                          [],
                                          "par_iter_mut",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| rows |) |)
                                          |)
                                        ]
                                      |);
                                      M.read (| inputs |)
                                    ]
                                  |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_blake3_air::columns::Blake3Cols")
                                                                    []
                                                                    [ F ]
                                                                ];
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 24
                                                                ]
                                                                [ Ty.path "u32" ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.tuple [])
                                            ],
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let counter := M.copy (| γ0_0 |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_1, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_1, 1 |) in
                                                let row := M.copy (| γ1_0 |) in
                                                let input := M.copy (| γ1_1 |) in
                                                M.read (|
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_function (|
                                                          "p3_blake3_air::generation::generate_trace_rows_for_perm",
                                                          [],
                                                          [ F ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (| M.read (| row |) |)
                                                          |);
                                                          M.read (| input |);
                                                          M.read (| counter |);
                                                          M.read (| num_rows |)
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        |) in
                      trace))
                ]
              |)
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_generate_trace_rows :
    M.IsFunction.C "p3_blake3_air::generation::generate_trace_rows" generate_trace_rows.
  Admitted.
  Global Typeclasses Opaque generate_trace_rows.
  
  (*
  fn generate_trace_rows_for_perm<F: PrimeField64>(
      row: &mut Blake3Cols<F>,
      input: [u32; 24],
      counter: usize,
      block_len: usize,
  ) {
      // We split the input into 2 parts.
      // The first 16 elements we treat as the inputs or block_words
      row.inputs = array::from_fn(|i| u32_to_bits_le(input[i]));
  
      // the remaining 8 elements are interpreted as the chaining values.
      row.chaining_values =
          array::from_fn(|i| array::from_fn(|j| u32_to_bits_le(input[16 + 4 * i + j])));
  
      row.counter_low = u32_to_bits_le(counter as u32);
      row.counter_hi = u32_to_bits_le(counter.wrapping_shr(32) as u32);
      row.block_len = u32_to_bits_le(block_len as u32);
  
      // We set the flags initial value to just be 0.
      row.flags = u32_to_bits_le(0);
  
      row.initial_row0 = array::from_fn(|i| {
          [
              F::from_u16(input[16 + i] as u16),
              F::from_u16((input[16 + i] >> 16) as u16),
          ]
      });
  
      row.initial_row2 = array::from_fn(|i| [F::from_u16(IV[i][0]), F::from_u16(IV[i][1])]);
  
      // We save the state and m_vec as u_32's we will quickly compute the hash using these whilst saving
      // the appropriate data in the trace as we go.
      let mut m_vec: [u32; 16] = array::from_fn(|i| input[i]);
      let mut state = [
          [input[16], input[16 + 1], input[16 + 2], input[16 + 3]],
          [input[16 + 4], input[16 + 5], input[16 + 6], input[16 + 7]],
          [
              (IV[0][0] as u32) + ((IV[0][1] as u32) << 16),
              (IV[1][0] as u32) + ((IV[1][1] as u32) << 16),
              (IV[2][0] as u32) + ((IV[2][1] as u32) << 16),
              (IV[3][0] as u32) + ((IV[3][1] as u32) << 16),
          ],
          [
              counter as u32,
              counter.wrapping_shr(32) as u32,
              block_len as u32,
              0,
          ],
      ];
  
      generate_trace_row_for_round(&mut row.full_rounds[0], &mut state, &m_vec); // round 1
      permute(&mut m_vec);
      generate_trace_row_for_round(&mut row.full_rounds[1], &mut state, &m_vec); // round 2
      permute(&mut m_vec);
      generate_trace_row_for_round(&mut row.full_rounds[2], &mut state, &m_vec); // round 3
      permute(&mut m_vec);
      generate_trace_row_for_round(&mut row.full_rounds[3], &mut state, &m_vec); // round 4
      permute(&mut m_vec);
      generate_trace_row_for_round(&mut row.full_rounds[4], &mut state, &m_vec); // round 5
      permute(&mut m_vec);
      generate_trace_row_for_round(&mut row.full_rounds[5], &mut state, &m_vec); // round 6
      permute(&mut m_vec);
      generate_trace_row_for_round(&mut row.full_rounds[6], &mut state, &m_vec); // round 7
  
      // After performing all the rounds, all that is left to do is to populate the final xor data.
  
      row.final_round_helpers = array::from_fn(|i| u32_to_bits_le(state[2][i]));
  
      row.outputs[0] = array::from_fn(|i| u32_to_bits_le(state[0][i] ^ state[2][i]));
      row.outputs[1] = array::from_fn(|i| u32_to_bits_le(state[1][i] ^ state[3][i]));
      row.outputs[2] = array::from_fn(|i| u32_to_bits_le(state[2][i] ^ input[16 + i]));
      row.outputs[3] = array::from_fn(|i| u32_to_bits_le(state[3][i] ^ input[20 + i]));
  }
  *)
  Definition generate_trace_rows_for_perm
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F ], [ row; input; counter; block_len ] =>
      ltac:(M.monadic
        (let row := M.alloc (| row |) in
        let input := M.alloc (| input |) in
        let counter := M.alloc (| counter |) in
        let block_len := M.alloc (| block_len |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| row |) |),
                  "p3_blake3_air::columns::Blake3Cols",
                  "inputs"
                |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 16 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ Value.Integer IntegerKind.Usize 16 ],
                    [
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [ F ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 32 ]
                                          [ F ],
                                        M.get_function (|
                                          "p3_air::utils::u32_to_bits_le",
                                          [],
                                          [ F ]
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_array_field (| input, M.read (| i |) |)
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| row |) |),
                  "p3_blake3_air::columns::Blake3Cols",
                  "chaining_values"
                |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 2 ]
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ] ]
                    ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ Value.Integer IntegerKind.Usize 2 ],
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ] ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ]
                          ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 32 ]
                                            [ F ]
                                        ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 4 ]
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 32 ]
                                              [ F ]
                                          ],
                                        M.get_function (|
                                          "core::array::from_fn",
                                          [ Value.Integer IntegerKind.Usize 4 ],
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 32 ]
                                              [ F ];
                                            Ty.function
                                              [ Ty.tuple [ Ty.path "usize" ] ]
                                              (Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 32 ]
                                                [ F ])
                                          ]
                                        |),
                                        [
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      Ty.apply
                                                        (Ty.path "*")
                                                        []
                                                        [
                                                          Ty.function
                                                            [ Ty.tuple [ Ty.path "usize" ] ]
                                                            (Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 32 ]
                                                              [ F ])
                                                        ],
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let j := M.copy (| γ |) in
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 32
                                                                ]
                                                                [ F ],
                                                              M.get_function (|
                                                                "p3_air::utils::u32_to_bits_le",
                                                                [],
                                                                [ F ]
                                                              |),
                                                              [
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    input,
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.add,
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.add,
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              16;
                                                                            M.call_closure (|
                                                                              Ty.path "usize",
                                                                              BinOp.Wrap.mul,
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  4;
                                                                                M.read (| i |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.read (| j |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)))
                                                      ]
                                                    |)))
                                                | _ => M.impossible "wrong number of arguments"
                                                end))
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| row |) |),
                  "p3_blake3_air::columns::Blake3Cols",
                  "counter_low"
                |),
                M.call_closure (|
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ],
                  M.get_function (| "p3_air::utils::u32_to_bits_le", [], [ F ] |),
                  [ M.cast (Ty.path "u32") (M.read (| counter |)) ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| row |) |),
                  "p3_blake3_air::columns::Blake3Cols",
                  "counter_hi"
                |),
                M.call_closure (|
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ],
                  M.get_function (| "p3_air::utils::u32_to_bits_le", [], [ F ] |),
                  [
                    M.cast
                      (Ty.path "u32")
                      (M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (| Ty.path "usize", "wrapping_shr", [], [] |),
                        [ M.read (| counter |); Value.Integer IntegerKind.U32 32 ]
                      |))
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| row |) |),
                  "p3_blake3_air::columns::Blake3Cols",
                  "block_len"
                |),
                M.call_closure (|
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ],
                  M.get_function (| "p3_air::utils::u32_to_bits_le", [], [ F ] |),
                  [ M.cast (Ty.path "u32") (M.read (| block_len |)) ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| row |) |),
                  "p3_blake3_air::columns::Blake3Cols",
                  "flags"
                |),
                M.call_closure (|
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ],
                  M.get_function (| "p3_air::utils::u32_to_bits_le", [], [ F ] |),
                  [ Value.Integer IntegerKind.U32 0 ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| row |) |),
                  "p3_blake3_air::columns::Blake3Cols",
                  "initial_row0"
                |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ Value.Integer IntegerKind.Usize 4 ],
                    [
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ F ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::PrimeCharacteristicRing",
                                              F,
                                              [],
                                              [],
                                              "from_u16",
                                              [],
                                              []
                                            |),
                                            [
                                              M.cast
                                                (Ty.path "u16")
                                                (M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    input,
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [
                                                        Value.Integer IntegerKind.Usize 16;
                                                        M.read (| i |)
                                                      ]
                                                    |)
                                                  |)
                                                |))
                                            ]
                                          |);
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::PrimeCharacteristicRing",
                                              F,
                                              [],
                                              [],
                                              "from_u16",
                                              [],
                                              []
                                            |),
                                            [
                                              M.cast
                                                (Ty.path "u16")
                                                (M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.shr,
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        input,
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.add,
                                                          [
                                                            Value.Integer IntegerKind.Usize 16;
                                                            M.read (| i |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    Value.Integer IntegerKind.I32 16
                                                  ]
                                                |))
                                            ]
                                          |)
                                        ]))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| row |) |),
                  "p3_blake3_air::columns::Blake3Cols",
                  "initial_row2"
                |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ Value.Integer IntegerKind.Usize 4 ],
                    [
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ F ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::PrimeCharacteristicRing",
                                              F,
                                              [],
                                              [],
                                              "from_u16",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    get_constant (|
                                                      "p3_blake3_air::constants::IV",
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 8 ]
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [ Ty.path "u16" ]
                                                        ]
                                                    |),
                                                    M.read (| i |)
                                                  |),
                                                  Value.Integer IntegerKind.Usize 0
                                                |)
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::PrimeCharacteristicRing",
                                              F,
                                              [],
                                              [],
                                              "from_u16",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    get_constant (|
                                                      "p3_blake3_air::constants::IV",
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 8 ]
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [ Ty.path "u16" ]
                                                        ]
                                                    |),
                                                    M.read (| i |)
                                                  |),
                                                  Value.Integer IntegerKind.Usize 1
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |) in
          let~ m_vec :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 16 ]
                    [ Ty.path "u32" ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ Ty.path "u32" ],
                M.get_function (|
                  "core::array::from_fn",
                  [ Value.Integer IntegerKind.Usize 16 ],
                  [ Ty.path "u32"; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "u32") ]
                |),
                [
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "u32") ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| γ |) in
                                    M.read (|
                                      M.SubPointer.get_array_field (| input, M.read (| i |) |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ state :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [ Ty.path "u32" ]
                    ]
                ] :=
            M.alloc (|
              Value.Array
                [
                  Value.Array
                    [
                      M.read (|
                        M.SubPointer.get_array_field (| input, Value.Integer IntegerKind.Usize 16 |)
                      |);
                      M.read (|
                        M.SubPointer.get_array_field (|
                          input,
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.add,
                            [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 1
                            ]
                          |)
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_array_field (|
                          input,
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.add,
                            [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 2
                            ]
                          |)
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_array_field (|
                          input,
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.add,
                            [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 3
                            ]
                          |)
                        |)
                      |)
                    ];
                  Value.Array
                    [
                      M.read (|
                        M.SubPointer.get_array_field (|
                          input,
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.add,
                            [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 4
                            ]
                          |)
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_array_field (|
                          input,
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.add,
                            [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 5
                            ]
                          |)
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_array_field (|
                          input,
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.add,
                            [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 6
                            ]
                          |)
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_array_field (|
                          input,
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.add,
                            [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 7
                            ]
                          |)
                        |)
                      |)
                    ];
                  Value.Array
                    [
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.add,
                        [
                          M.cast
                            (Ty.path "u32")
                            (M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_array_field (|
                                  get_constant (|
                                    "p3_blake3_air::constants::IV",
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 8 ]
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ Ty.path "u16" ]
                                      ]
                                  |),
                                  Value.Integer IntegerKind.Usize 0
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |));
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.shl,
                            [
                              M.cast
                                (Ty.path "u32")
                                (M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.SubPointer.get_array_field (|
                                      get_constant (|
                                        "p3_blake3_air::constants::IV",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "u16" ]
                                          ]
                                      |),
                                      Value.Integer IntegerKind.Usize 0
                                    |),
                                    Value.Integer IntegerKind.Usize 1
                                  |)
                                |));
                              Value.Integer IntegerKind.I32 16
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.add,
                        [
                          M.cast
                            (Ty.path "u32")
                            (M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_array_field (|
                                  get_constant (|
                                    "p3_blake3_air::constants::IV",
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 8 ]
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ Ty.path "u16" ]
                                      ]
                                  |),
                                  Value.Integer IntegerKind.Usize 1
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |));
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.shl,
                            [
                              M.cast
                                (Ty.path "u32")
                                (M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.SubPointer.get_array_field (|
                                      get_constant (|
                                        "p3_blake3_air::constants::IV",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "u16" ]
                                          ]
                                      |),
                                      Value.Integer IntegerKind.Usize 1
                                    |),
                                    Value.Integer IntegerKind.Usize 1
                                  |)
                                |));
                              Value.Integer IntegerKind.I32 16
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.add,
                        [
                          M.cast
                            (Ty.path "u32")
                            (M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_array_field (|
                                  get_constant (|
                                    "p3_blake3_air::constants::IV",
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 8 ]
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ Ty.path "u16" ]
                                      ]
                                  |),
                                  Value.Integer IntegerKind.Usize 2
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |));
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.shl,
                            [
                              M.cast
                                (Ty.path "u32")
                                (M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.SubPointer.get_array_field (|
                                      get_constant (|
                                        "p3_blake3_air::constants::IV",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "u16" ]
                                          ]
                                      |),
                                      Value.Integer IntegerKind.Usize 2
                                    |),
                                    Value.Integer IntegerKind.Usize 1
                                  |)
                                |));
                              Value.Integer IntegerKind.I32 16
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.add,
                        [
                          M.cast
                            (Ty.path "u32")
                            (M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_array_field (|
                                  get_constant (|
                                    "p3_blake3_air::constants::IV",
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 8 ]
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ Ty.path "u16" ]
                                      ]
                                  |),
                                  Value.Integer IntegerKind.Usize 3
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |));
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.shl,
                            [
                              M.cast
                                (Ty.path "u32")
                                (M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.SubPointer.get_array_field (|
                                      get_constant (|
                                        "p3_blake3_air::constants::IV",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "u16" ]
                                          ]
                                      |),
                                      Value.Integer IntegerKind.Usize 3
                                    |),
                                    Value.Integer IntegerKind.Usize 1
                                  |)
                                |));
                              Value.Integer IntegerKind.I32 16
                            ]
                          |)
                        ]
                      |)
                    ];
                  Value.Array
                    [
                      M.cast (Ty.path "u32") (M.read (| counter |));
                      M.cast
                        (Ty.path "u32")
                        (M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (| Ty.path "usize", "wrapping_shr", [], [] |),
                          [ M.read (| counter |); Value.Integer IntegerKind.U32 32 ]
                        |));
                      M.cast (Ty.path "u32") (M.read (| block_len |));
                      Value.Integer IntegerKind.U32 0
                    ]
                ]
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_blake3_air::generation::generate_trace_row_for_round",
                  [],
                  [ F ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_array_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| row |) |),
                            "p3_blake3_air::columns::Blake3Cols",
                            "full_rounds"
                          |),
                          Value.Integer IntegerKind.Usize 0
                        |)
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, state |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, m_vec |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "p3_blake3_air::constants::permute", [], [ Ty.path "u32" ] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, m_vec |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_blake3_air::generation::generate_trace_row_for_round",
                  [],
                  [ F ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_array_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| row |) |),
                            "p3_blake3_air::columns::Blake3Cols",
                            "full_rounds"
                          |),
                          Value.Integer IntegerKind.Usize 1
                        |)
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, state |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, m_vec |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "p3_blake3_air::constants::permute", [], [ Ty.path "u32" ] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, m_vec |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_blake3_air::generation::generate_trace_row_for_round",
                  [],
                  [ F ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_array_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| row |) |),
                            "p3_blake3_air::columns::Blake3Cols",
                            "full_rounds"
                          |),
                          Value.Integer IntegerKind.Usize 2
                        |)
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, state |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, m_vec |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "p3_blake3_air::constants::permute", [], [ Ty.path "u32" ] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, m_vec |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_blake3_air::generation::generate_trace_row_for_round",
                  [],
                  [ F ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_array_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| row |) |),
                            "p3_blake3_air::columns::Blake3Cols",
                            "full_rounds"
                          |),
                          Value.Integer IntegerKind.Usize 3
                        |)
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, state |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, m_vec |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "p3_blake3_air::constants::permute", [], [ Ty.path "u32" ] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, m_vec |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_blake3_air::generation::generate_trace_row_for_round",
                  [],
                  [ F ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_array_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| row |) |),
                            "p3_blake3_air::columns::Blake3Cols",
                            "full_rounds"
                          |),
                          Value.Integer IntegerKind.Usize 4
                        |)
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, state |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, m_vec |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "p3_blake3_air::constants::permute", [], [ Ty.path "u32" ] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, m_vec |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_blake3_air::generation::generate_trace_row_for_round",
                  [],
                  [ F ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_array_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| row |) |),
                            "p3_blake3_air::columns::Blake3Cols",
                            "full_rounds"
                          |),
                          Value.Integer IntegerKind.Usize 5
                        |)
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, state |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, m_vec |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "p3_blake3_air::constants::permute", [], [ Ty.path "u32" ] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, m_vec |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_blake3_air::generation::generate_trace_row_for_round",
                  [],
                  [ F ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_array_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| row |) |),
                            "p3_blake3_air::columns::Blake3Cols",
                            "full_rounds"
                          |),
                          Value.Integer IntegerKind.Usize 6
                        |)
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (| M.borrow (| Pointer.Kind.MutRef, state |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, m_vec |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| row |) |),
                  "p3_blake3_air::columns::Blake3Cols",
                  "final_round_helpers"
                |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ Value.Integer IntegerKind.Usize 4 ],
                    [
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [ F ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 32 ]
                                          [ F ],
                                        M.get_function (|
                                          "p3_air::utils::u32_to_bits_le",
                                          [],
                                          [ F ]
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.SubPointer.get_array_field (|
                                                state,
                                                Value.Integer IntegerKind.Usize 2
                                              |),
                                              M.read (| i |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row |) |),
                    "p3_blake3_air::columns::Blake3Cols",
                    "outputs"
                  |),
                  Value.Integer IntegerKind.Usize 0
                |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ Value.Integer IntegerKind.Usize 4 ],
                    [
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [ F ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 32 ]
                                          [ F ],
                                        M.get_function (|
                                          "p3_air::utils::u32_to_bits_le",
                                          [],
                                          [ F ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.bit_xor,
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    state,
                                                    Value.Integer IntegerKind.Usize 0
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    state,
                                                    Value.Integer IntegerKind.Usize 2
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row |) |),
                    "p3_blake3_air::columns::Blake3Cols",
                    "outputs"
                  |),
                  Value.Integer IntegerKind.Usize 1
                |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ Value.Integer IntegerKind.Usize 4 ],
                    [
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [ F ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 32 ]
                                          [ F ],
                                        M.get_function (|
                                          "p3_air::utils::u32_to_bits_le",
                                          [],
                                          [ F ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.bit_xor,
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    state,
                                                    Value.Integer IntegerKind.Usize 1
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    state,
                                                    Value.Integer IntegerKind.Usize 3
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row |) |),
                    "p3_blake3_air::columns::Blake3Cols",
                    "outputs"
                  |),
                  Value.Integer IntegerKind.Usize 2
                |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ Value.Integer IntegerKind.Usize 4 ],
                    [
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [ F ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 32 ]
                                          [ F ],
                                        M.get_function (|
                                          "p3_air::utils::u32_to_bits_le",
                                          [],
                                          [ F ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.bit_xor,
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    state,
                                                    Value.Integer IntegerKind.Usize 2
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  input,
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      Value.Integer IntegerKind.Usize 16;
                                                      M.read (| i |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_array_field (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row |) |),
                    "p3_blake3_air::columns::Blake3Cols",
                    "outputs"
                  |),
                  Value.Integer IntegerKind.Usize 3
                |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ Value.Integer IntegerKind.Usize 4 ],
                    [
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ F ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [ F ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 32 ]
                                          [ F ],
                                        M.get_function (|
                                          "p3_air::utils::u32_to_bits_le",
                                          [],
                                          [ F ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.bit_xor,
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    state,
                                                    Value.Integer IntegerKind.Usize 3
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  input,
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      Value.Integer IntegerKind.Usize 20;
                                                      M.read (| i |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_generate_trace_rows_for_perm :
    M.IsFunction.C
      "p3_blake3_air::generation::generate_trace_rows_for_perm"
      generate_trace_rows_for_perm.
  Admitted.
  Global Typeclasses Opaque generate_trace_rows_for_perm.
  
  (*
  fn generate_trace_row_for_round<F: PrimeField64>(
      round_data: &mut FullRound<F>,
      state: &mut [[u32; 4]; 4],
      m_vec: &[u32; 16],
  ) {
      // We populate the round_data as we iterate through and compute the permutation following the reference implementation.
  
      // We start by performing the first half of the four column quarter round functions.
      (0..4).for_each(|i| {
          (state[0][i], state[1][i], state[2][i], state[3][i]) = verifiable_half_round(
              state[0][i],
              state[1][i],
              state[2][i],
              state[3][i],
              m_vec[2 * i],
              false,
          )
      });
  
      // After the first four operations we need to save a copy of the state into the trace.
      save_state_to_trace(&mut round_data.state_prime, state);
  
      // Next we do the second half of the four column quarter round functions.
      (0..4).for_each(|i| {
          (state[0][i], state[1][i], state[2][i], state[3][i]) = verifiable_half_round(
              state[0][i],
              state[1][i],
              state[2][i],
              state[3][i],
              m_vec[2 * i + 1],
              true,
          )
      });
  
      // Again we save another copy of the state.
      save_state_to_trace(&mut round_data.state_middle, state);
  
      // We repeat with the diagonals quarter round function.
  
      // Do the first half of the four diagonal quarter round functions.
      (0..4).for_each(|i| {
          (
              state[0][i],
              state[1][(i + 1) % 4],
              state[2][(i + 2) % 4],
              state[3][(i + 3) % 4],
          ) = verifiable_half_round(
              state[0][i],
              state[1][(i + 1) % 4],
              state[2][(i + 2) % 4],
              state[3][(i + 3) % 4],
              m_vec[8 + 2 * i],
              false,
          )
      });
  
      // Save a copy of the state to the trace.
      save_state_to_trace(&mut round_data.state_middle_prime, state);
  
      // Do the second half of the four diagonal quarter round functions.
      (0..4).for_each(|i| {
          (
              state[0][i],
              state[1][(i + 1) % 4],
              state[2][(i + 2) % 4],
              state[3][(i + 3) % 4],
          ) = verifiable_half_round(
              state[0][i],
              state[1][(i + 1) % 4],
              state[2][(i + 2) % 4],
              state[3][(i + 3) % 4],
              m_vec[9 + 2 * i],
              true,
          )
      });
  
      // Save a copy of the state to the trace.
      save_state_to_trace(&mut round_data.state_output, state);
  }
  *)
  Definition generate_trace_row_for_round
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F ], [ round_data; state; m_vec ] =>
      ltac:(M.monadic
        (let round_data := M.alloc (| round_data |) in
        let state := M.alloc (| state |) in
        let m_vec := M.alloc (| m_vec |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  [],
                  [],
                  "for_each",
                  [],
                  [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.tuple []) ]
                |),
                [
                  Value.StructRecord
                    "core::ops::range::Range"
                    [
                      ("start", Value.Integer IntegerKind.Usize 0);
                      ("end_", Value.Integer IntegerKind.Usize 4)
                    ];
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.tuple []) ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| γ |) in
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple
                                              [
                                                Ty.path "u32";
                                                Ty.path "u32";
                                                Ty.path "u32";
                                                Ty.path "u32"
                                              ],
                                            M.get_function (|
                                              "p3_blake3_air::generation::verifiable_half_round",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 0
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 1
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 2
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 3
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.deref (| M.read (| m_vec |) |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.mul,
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      M.read (| i |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              Value.Bool false
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                              let γ0_3 := M.SubPointer.get_tuple_field (| γ, 3 |) in
                                              let lhs := M.copy (| γ0_0 |) in
                                              let lhs := M.copy (| γ0_1 |) in
                                              let lhs := M.copy (| γ0_2 |) in
                                              let lhs := M.copy (| γ0_3 |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 0
                                                      |),
                                                      M.read (| i |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 1
                                                      |),
                                                      M.read (| i |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 2
                                                      |),
                                                      M.read (| i |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 3
                                                      |),
                                                      M.read (| i |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "p3_blake3_air::generation::save_state_to_trace", [], [ F ] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| round_data |) |),
                          "p3_blake3_air::columns::FullRound",
                          "state_prime"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  [],
                  [],
                  "for_each",
                  [],
                  [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.tuple []) ]
                |),
                [
                  Value.StructRecord
                    "core::ops::range::Range"
                    [
                      ("start", Value.Integer IntegerKind.Usize 0);
                      ("end_", Value.Integer IntegerKind.Usize 4)
                    ];
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.tuple []) ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| γ |) in
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple
                                              [
                                                Ty.path "u32";
                                                Ty.path "u32";
                                                Ty.path "u32";
                                                Ty.path "u32"
                                              ],
                                            M.get_function (|
                                              "p3_blake3_air::generation::verifiable_half_round",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 0
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 1
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 2
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 3
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.deref (| M.read (| m_vec |) |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.mul,
                                                        [
                                                          Value.Integer IntegerKind.Usize 2;
                                                          M.read (| i |)
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              Value.Bool true
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                              let γ0_3 := M.SubPointer.get_tuple_field (| γ, 3 |) in
                                              let lhs := M.copy (| γ0_0 |) in
                                              let lhs := M.copy (| γ0_1 |) in
                                              let lhs := M.copy (| γ0_2 |) in
                                              let lhs := M.copy (| γ0_3 |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 0
                                                      |),
                                                      M.read (| i |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 1
                                                      |),
                                                      M.read (| i |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 2
                                                      |),
                                                      M.read (| i |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 3
                                                      |),
                                                      M.read (| i |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "p3_blake3_air::generation::save_state_to_trace", [], [ F ] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| round_data |) |),
                          "p3_blake3_air::columns::FullRound",
                          "state_middle"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  [],
                  [],
                  "for_each",
                  [],
                  [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.tuple []) ]
                |),
                [
                  Value.StructRecord
                    "core::ops::range::Range"
                    [
                      ("start", Value.Integer IntegerKind.Usize 0);
                      ("end_", Value.Integer IntegerKind.Usize 4)
                    ];
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.tuple []) ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| γ |) in
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple
                                              [
                                                Ty.path "u32";
                                                Ty.path "u32";
                                                Ty.path "u32";
                                                Ty.path "u32"
                                              ],
                                            M.get_function (|
                                              "p3_blake3_air::generation::verifiable_half_round",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 0
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 1
                                                  |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.rem,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.read (| i |);
                                                          Value.Integer IntegerKind.Usize 1
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 2
                                                  |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.rem,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.read (| i |);
                                                          Value.Integer IntegerKind.Usize 2
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 3
                                                  |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.rem,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.read (| i |);
                                                          Value.Integer IntegerKind.Usize 3
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.deref (| M.read (| m_vec |) |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      Value.Integer IntegerKind.Usize 8;
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.mul,
                                                        [
                                                          Value.Integer IntegerKind.Usize 2;
                                                          M.read (| i |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              Value.Bool false
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                              let γ0_3 := M.SubPointer.get_tuple_field (| γ, 3 |) in
                                              let lhs := M.copy (| γ0_0 |) in
                                              let lhs := M.copy (| γ0_1 |) in
                                              let lhs := M.copy (| γ0_2 |) in
                                              let lhs := M.copy (| γ0_3 |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 0
                                                      |),
                                                      M.read (| i |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 1
                                                      |),
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.rem,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.read (| i |);
                                                              Value.Integer IntegerKind.Usize 1
                                                            ]
                                                          |);
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                      |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 2
                                                      |),
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.rem,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.read (| i |);
                                                              Value.Integer IntegerKind.Usize 2
                                                            ]
                                                          |);
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                      |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 3
                                                      |),
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.rem,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.read (| i |);
                                                              Value.Integer IntegerKind.Usize 3
                                                            ]
                                                          |);
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                      |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "p3_blake3_air::generation::save_state_to_trace", [], [ F ] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| round_data |) |),
                          "p3_blake3_air::columns::FullRound",
                          "state_middle_prime"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  [],
                  [],
                  "for_each",
                  [],
                  [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.tuple []) ]
                |),
                [
                  Value.StructRecord
                    "core::ops::range::Range"
                    [
                      ("start", Value.Integer IntegerKind.Usize 0);
                      ("end_", Value.Integer IntegerKind.Usize 4)
                    ];
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.tuple []) ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| γ |) in
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple
                                              [
                                                Ty.path "u32";
                                                Ty.path "u32";
                                                Ty.path "u32";
                                                Ty.path "u32"
                                              ],
                                            M.get_function (|
                                              "p3_blake3_air::generation::verifiable_half_round",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 0
                                                  |),
                                                  M.read (| i |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 1
                                                  |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.rem,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.read (| i |);
                                                          Value.Integer IntegerKind.Usize 1
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 2
                                                  |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.rem,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.read (| i |);
                                                          Value.Integer IntegerKind.Usize 2
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| state |) |),
                                                    Value.Integer IntegerKind.Usize 3
                                                  |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.rem,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.read (| i |);
                                                          Value.Integer IntegerKind.Usize 3
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.deref (| M.read (| m_vec |) |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      Value.Integer IntegerKind.Usize 9;
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.mul,
                                                        [
                                                          Value.Integer IntegerKind.Usize 2;
                                                          M.read (| i |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              Value.Bool true
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                              let γ0_3 := M.SubPointer.get_tuple_field (| γ, 3 |) in
                                              let lhs := M.copy (| γ0_0 |) in
                                              let lhs := M.copy (| γ0_1 |) in
                                              let lhs := M.copy (| γ0_2 |) in
                                              let lhs := M.copy (| γ0_3 |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 0
                                                      |),
                                                      M.read (| i |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 1
                                                      |),
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.rem,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.read (| i |);
                                                              Value.Integer IntegerKind.Usize 1
                                                            ]
                                                          |);
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                      |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 2
                                                      |),
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.rem,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.read (| i |);
                                                              Value.Integer IntegerKind.Usize 2
                                                            ]
                                                          |);
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                      |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| state |) |),
                                                        Value.Integer IntegerKind.Usize 3
                                                      |),
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.rem,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.read (| i |);
                                                              Value.Integer IntegerKind.Usize 3
                                                            ]
                                                          |);
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                      |)
                                                    |),
                                                    M.read (| lhs |)
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (| "p3_blake3_air::generation::save_state_to_trace", [], [ F ] |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| round_data |) |),
                          "p3_blake3_air::columns::FullRound",
                          "state_output"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_generate_trace_row_for_round :
    M.IsFunction.C
      "p3_blake3_air::generation::generate_trace_row_for_round"
      generate_trace_row_for_round.
  Admitted.
  Global Typeclasses Opaque generate_trace_row_for_round.
  
  (*
  const fn verifiable_half_round(
      mut a: u32,
      mut b: u32,
      mut c: u32,
      mut d: u32,
      m: u32,
      flag: bool,
  ) -> (u32, u32, u32, u32) {
      let (rot_1, rot_2) = if flag { (8, 7) } else { (16, 12) };
  
      // The first summation:
      a = a.wrapping_add(b);
      a = a.wrapping_add(m);
  
      // The first xor:
      d = (d ^ a).rotate_right(rot_1);
  
      // The second summation:
      c = c.wrapping_add(d);
  
      // The second xor:
      b = (b ^ c).rotate_right(rot_2);
  
      (a, b, c, d)
  }
  *)
  Definition verifiable_half_round (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ a; b; c; d; m; flag ] =>
      ltac:(M.monadic
        (let a := M.alloc (| a |) in
        let b := M.alloc (| b |) in
        let c := M.alloc (| c |) in
        let d := M.alloc (| d |) in
        let m := M.alloc (| m |) in
        let flag := M.alloc (| flag |) in
        M.read (|
          M.match_operator (|
            Ty.apply
              (Ty.path "*")
              []
              [ Ty.tuple [ Ty.path "u32"; Ty.path "u32"; Ty.path "u32"; Ty.path "u32" ] ],
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.use flag in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      Value.Tuple
                        [ Value.Integer IntegerKind.U32 8; Value.Integer IntegerKind.U32 7 ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.Tuple
                        [ Value.Integer IntegerKind.U32 16; Value.Integer IntegerKind.U32 12 ]
                    |)))
              ]
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let rot_1 := M.copy (| γ0_0 |) in
                  let rot_2 := M.copy (| γ0_1 |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.write (|
                        a,
                        M.call_closure (|
                          Ty.path "u32",
                          M.get_associated_function (| Ty.path "u32", "wrapping_add", [], [] |),
                          [ M.read (| a |); M.read (| b |) ]
                        |)
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.write (|
                        a,
                        M.call_closure (|
                          Ty.path "u32",
                          M.get_associated_function (| Ty.path "u32", "wrapping_add", [], [] |),
                          [ M.read (| a |); M.read (| m |) ]
                        |)
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.write (|
                        d,
                        M.call_closure (|
                          Ty.path "u32",
                          M.get_associated_function (| Ty.path "u32", "rotate_right", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.bit_xor,
                              [ M.read (| d |); M.read (| a |) ]
                            |);
                            M.read (| rot_1 |)
                          ]
                        |)
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.write (|
                        c,
                        M.call_closure (|
                          Ty.path "u32",
                          M.get_associated_function (| Ty.path "u32", "wrapping_add", [], [] |),
                          [ M.read (| c |); M.read (| d |) ]
                        |)
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.write (|
                        b,
                        M.call_closure (|
                          Ty.path "u32",
                          M.get_associated_function (| Ty.path "u32", "rotate_right", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.bit_xor,
                              [ M.read (| b |); M.read (| c |) ]
                            |);
                            M.read (| rot_2 |)
                          ]
                        |)
                      |)
                    |) in
                  M.alloc (|
                    Value.Tuple [ M.read (| a |); M.read (| b |); M.read (| c |); M.read (| d |) ]
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_verifiable_half_round :
    M.IsFunction.C "p3_blake3_air::generation::verifiable_half_round" verifiable_half_round.
  Admitted.
  Global Typeclasses Opaque verifiable_half_round.
  
  (*
  fn save_state_to_trace<R: PrimeCharacteristicRing>(
      trace: &mut Blake3State<R>,
      state: &[[u32; 4]; 4],
  ) {
      trace.row0 = array::from_fn(|i| {
          [
              R::from_u16(state[0][i] as u16), // Store the bottom 16 bits packed.
              R::from_u16((state[0][i] >> 16) as u16), // Store the top 16 bits packed.
          ]
      });
      trace.row1 = array::from_fn(|i| u32_to_bits_le(state[1][i])); // Store all 32 bits unpacked.
      trace.row2 = array::from_fn(|i| {
          [
              R::from_u16(state[2][i] as u16), // Store the bottom 16 bits packed.
              R::from_u16((state[2][i] >> 16) as u16), // Store the top 16 bits packed.
          ]
      });
      trace.row3 = array::from_fn(|i| u32_to_bits_le(state[3][i])); // Store all 32 bits unpacked.
  }
  *)
  Definition save_state_to_trace (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ R ], [ trace; state ] =>
      ltac:(M.monadic
        (let trace := M.alloc (| trace |) in
        let state := M.alloc (| state |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| trace |) |),
                  "p3_blake3_air::columns::Blake3State",
                  "row0"
                |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ R ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ Value.Integer IntegerKind.Usize 4 ],
                    [
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ R ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ R ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ R ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            R,
                                            M.get_trait_method (|
                                              "p3_field::field::PrimeCharacteristicRing",
                                              R,
                                              [],
                                              [],
                                              "from_u16",
                                              [],
                                              []
                                            |),
                                            [
                                              M.cast
                                                (Ty.path "u16")
                                                (M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    M.SubPointer.get_array_field (|
                                                      M.deref (| M.read (| state |) |),
                                                      Value.Integer IntegerKind.Usize 0
                                                    |),
                                                    M.read (| i |)
                                                  |)
                                                |))
                                            ]
                                          |);
                                          M.call_closure (|
                                            R,
                                            M.get_trait_method (|
                                              "p3_field::field::PrimeCharacteristicRing",
                                              R,
                                              [],
                                              [],
                                              "from_u16",
                                              [],
                                              []
                                            |),
                                            [
                                              M.cast
                                                (Ty.path "u16")
                                                (M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.shr,
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| state |) |),
                                                          Value.Integer IntegerKind.Usize 0
                                                        |),
                                                        M.read (| i |)
                                                      |)
                                                    |);
                                                    Value.Integer IntegerKind.I32 16
                                                  ]
                                                |))
                                            ]
                                          |)
                                        ]))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| trace |) |),
                  "p3_blake3_air::columns::Blake3State",
                  "row1"
                |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ R ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ Value.Integer IntegerKind.Usize 4 ],
                    [
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ R ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ R ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [ R ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 32 ]
                                          [ R ],
                                        M.get_function (|
                                          "p3_air::utils::u32_to_bits_le",
                                          [],
                                          [ R ]
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.SubPointer.get_array_field (|
                                                M.deref (| M.read (| state |) |),
                                                Value.Integer IntegerKind.Usize 1
                                              |),
                                              M.read (| i |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| trace |) |),
                  "p3_blake3_air::columns::Blake3State",
                  "row2"
                |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ R ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ Value.Integer IntegerKind.Usize 4 ],
                    [
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ R ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ R ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ R ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            R,
                                            M.get_trait_method (|
                                              "p3_field::field::PrimeCharacteristicRing",
                                              R,
                                              [],
                                              [],
                                              "from_u16",
                                              [],
                                              []
                                            |),
                                            [
                                              M.cast
                                                (Ty.path "u16")
                                                (M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    M.SubPointer.get_array_field (|
                                                      M.deref (| M.read (| state |) |),
                                                      Value.Integer IntegerKind.Usize 2
                                                    |),
                                                    M.read (| i |)
                                                  |)
                                                |))
                                            ]
                                          |);
                                          M.call_closure (|
                                            R,
                                            M.get_trait_method (|
                                              "p3_field::field::PrimeCharacteristicRing",
                                              R,
                                              [],
                                              [],
                                              "from_u16",
                                              [],
                                              []
                                            |),
                                            [
                                              M.cast
                                                (Ty.path "u16")
                                                (M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.shr,
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| state |) |),
                                                          Value.Integer IntegerKind.Usize 2
                                                        |),
                                                        M.read (| i |)
                                                      |)
                                                    |);
                                                    Value.Integer IntegerKind.I32 16
                                                  ]
                                                |))
                                            ]
                                          |)
                                        ]))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| trace |) |),
                  "p3_blake3_air::columns::Blake3State",
                  "row3"
                |),
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ R ] ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ Value.Integer IntegerKind.Usize 4 ],
                    [
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ R ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ R ])
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [ R ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 32 ]
                                          [ R ],
                                        M.get_function (|
                                          "p3_air::utils::u32_to_bits_le",
                                          [],
                                          [ R ]
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.SubPointer.get_array_field (|
                                                M.deref (| M.read (| state |) |),
                                                Value.Integer IntegerKind.Usize 3
                                              |),
                                              M.read (| i |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_save_state_to_trace :
    M.IsFunction.C "p3_blake3_air::generation::save_state_to_trace" save_state_to_trace.
  Admitted.
  Global Typeclasses Opaque save_state_to_trace.
End generation.
