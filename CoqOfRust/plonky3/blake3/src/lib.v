(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* StructTuple
  {
    name := "Blake3";
    const_params := [];
    ty_params := [];
    fields := [];
  } *)

Module Impl_core_marker_Copy_for_p3_blake3_Blake3.
  Definition Self : Ty.t := Ty.path "p3_blake3::Blake3".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_p3_blake3_Blake3.

Module Impl_core_clone_Clone_for_p3_blake3_Blake3.
  Definition Self : Ty.t := Ty.path "p3_blake3::Blake3".
  
  (* Clone *)
  Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.read (| M.deref (| M.read (| self |) |) |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_p3_blake3_Blake3.

Module Impl_core_fmt_Debug_for_p3_blake3_Blake3.
  Definition Self : Ty.t := Ty.path "p3_blake3::Blake3".
  
  (* Debug *)
  Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; Ty.path "core::fmt::Error" ],
          M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
          [
            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Blake3" |) |) |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_p3_blake3_Blake3.

Module Impl_p3_symmetric_hasher_CryptographicHasher_u8_array_Usize_32_u8_for_p3_blake3_Blake3.
  Definition Self : Ty.t := Ty.path "p3_blake3::Blake3".
  
  (*
      fn hash_iter<I>(&self, input: I) -> [u8; 32]
      where
          I: IntoIterator<Item = u8>,
      {
          const BUFLEN: usize = 512; // Tweakable parameter; determined by experiment
          let mut hasher = blake3::Hasher::new();
          p3_util::apply_to_chunks::<BUFLEN, _, _>(input, |buf| {
              hasher.update(buf);
          });
          hasher.finalize().into()
      }
  *)
  Definition hash_iter (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ _ as I ], [ self; input ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let input := M.alloc (| input |) in
        M.read (|
          let~ hasher : Ty.apply (Ty.path "*") [] [ Ty.path "blake3::Hasher" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "blake3::Hasher",
                M.get_associated_function (| Ty.path "blake3::Hasher", "new", [], [] |),
                []
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_util::apply_to_chunks",
                  [ Value.Integer IntegerKind.Usize 512 ],
                  [
                    I;
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.read (| input |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let buf := M.copy (| γ |) in
                                    M.read (|
                                      let~ _ :
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [ Ty.path "blake3::Hasher" ]
                                            ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "blake3::Hasher" ],
                                            M.get_associated_function (|
                                              Ty.path "blake3::Hasher",
                                              "update",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, hasher |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| buf |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ],
              M.get_trait_method (|
                "core::convert::Into",
                Ty.path "blake3::Hash",
                [],
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
                ],
                "into",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.path "blake3::Hash",
                  M.get_associated_function (| Ty.path "blake3::Hasher", "finalize", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, hasher |) ]
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  (*
      fn hash_iter_slices<'a, I>(&self, input: I) -> [u8; 32]
      where
          I: IntoIterator<Item = &'a [u8]>,
      {
          let mut hasher = blake3::Hasher::new();
          for chunk in input {
              hasher.update(chunk);
          }
          hasher.finalize().into()
      }
  *)
  Definition hash_iter_slices (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ _ as I ], [ self; input ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let input := M.alloc (| input |) in
        M.read (|
          let~ hasher : Ty.apply (Ty.path "*") [] [ Ty.path "blake3::Hasher" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "blake3::Hasher",
                M.get_associated_function (| Ty.path "blake3::Hasher", "new", [], [] |),
                []
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter",
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      I,
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| input |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.associated_in_trait
                                      "core::iter::traits::collect::IntoIterator"
                                      []
                                      []
                                      I
                                      "IntoIter",
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let chunk := M.copy (| γ0_0 |) in
                                    let~ _ :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "blake3::Hasher" ]
                                          ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply (Ty.path "&mut") [] [ Ty.path "blake3::Hasher" ],
                                          M.get_associated_function (|
                                            Ty.path "blake3::Hasher",
                                            "update",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.MutRef, hasher |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| chunk |) |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          M.alloc (|
            M.call_closure (|
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ],
              M.get_trait_method (|
                "core::convert::Into",
                Ty.path "blake3::Hash",
                [],
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
                ],
                "into",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.path "blake3::Hash",
                  M.get_associated_function (| Ty.path "blake3::Hasher", "finalize", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, hasher |) ]
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "p3_symmetric::hasher::CryptographicHasher"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *)
      [
        Ty.path "u8";
        Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ Ty.path "u8" ]
      ]
      Self
      (* Instance *)
      [
        ("hash_iter", InstanceField.Method hash_iter);
        ("hash_iter_slices", InstanceField.Method hash_iter_slices)
      ].
End Impl_p3_symmetric_hasher_CryptographicHasher_u8_array_Usize_32_u8_for_p3_blake3_Blake3.
