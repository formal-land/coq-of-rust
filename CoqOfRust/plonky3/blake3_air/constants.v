(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module constants.
  Definition value_BITS_PER_LIMB (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 16 |))).
  
  Global Instance Instance_IsConstant_value_BITS_PER_LIMB :
    M.IsFunction.C "p3_blake3_air::constants::BITS_PER_LIMB" value_BITS_PER_LIMB.
  Admitted.
  Global Typeclasses Opaque value_BITS_PER_LIMB.
  
  Definition value_U32_LIMBS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        M.call_closure (|
          Ty.path "usize",
          BinOp.Wrap.div,
          [
            Value.Integer IntegerKind.Usize 32;
            M.read (|
              get_constant (| "p3_blake3_air::constants::BITS_PER_LIMB", Ty.path "usize" |)
            |)
          ]
        |)
      |))).
  
  Global Instance Instance_IsConstant_value_U32_LIMBS :
    M.IsFunction.C "p3_blake3_air::constants::U32_LIMBS" value_U32_LIMBS.
  Admitted.
  Global Typeclasses Opaque value_U32_LIMBS.
  
  Definition value_IV (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.Array
          [
            Value.Array
              [ Value.Integer IntegerKind.U16 58983; Value.Integer IntegerKind.U16 27145 ];
            Value.Array
              [ Value.Integer IntegerKind.U16 44677; Value.Integer IntegerKind.U16 47975 ];
            Value.Array
              [ Value.Integer IntegerKind.U16 62322; Value.Integer IntegerKind.U16 15470 ];
            Value.Array
              [ Value.Integer IntegerKind.U16 62778; Value.Integer IntegerKind.U16 42319 ];
            Value.Array
              [ Value.Integer IntegerKind.U16 21119; Value.Integer IntegerKind.U16 20750 ];
            Value.Array
              [ Value.Integer IntegerKind.U16 26764; Value.Integer IntegerKind.U16 39685 ];
            Value.Array [ Value.Integer IntegerKind.U16 55723; Value.Integer IntegerKind.U16 8067 ];
            Value.Array [ Value.Integer IntegerKind.U16 52505; Value.Integer IntegerKind.U16 23520 ]
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_IV :
    M.IsFunction.C "p3_blake3_air::constants::IV" value_IV.
  Admitted.
  Global Typeclasses Opaque value_IV.
  
  Definition value_MSG_PERMUTATION (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.Array
          [
            Value.Integer IntegerKind.Usize 2;
            Value.Integer IntegerKind.Usize 6;
            Value.Integer IntegerKind.Usize 3;
            Value.Integer IntegerKind.Usize 10;
            Value.Integer IntegerKind.Usize 7;
            Value.Integer IntegerKind.Usize 0;
            Value.Integer IntegerKind.Usize 4;
            Value.Integer IntegerKind.Usize 13;
            Value.Integer IntegerKind.Usize 1;
            Value.Integer IntegerKind.Usize 11;
            Value.Integer IntegerKind.Usize 12;
            Value.Integer IntegerKind.Usize 5;
            Value.Integer IntegerKind.Usize 9;
            Value.Integer IntegerKind.Usize 14;
            Value.Integer IntegerKind.Usize 15;
            Value.Integer IntegerKind.Usize 8
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_MSG_PERMUTATION :
    M.IsFunction.C "p3_blake3_air::constants::MSG_PERMUTATION" value_MSG_PERMUTATION.
  Admitted.
  Global Typeclasses Opaque value_MSG_PERMUTATION.
  
  (*
  pub(crate) fn permute<T: Clone>(m: &mut [T; 16]) {
      let mut permuted = m.clone();
      for i in 0..16 {
          permuted[i] = m[MSG_PERMUTATION[i]].clone();
      }
      *m = permuted;
  }
  *)
  Definition permute (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ T ], [ m ] =>
      ltac:(M.monadic
        (let m := M.alloc (| m |) in
        M.read (|
          let~ permuted :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ T ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ T ],
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ T ],
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| m |) |) |) ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_", Value.Integer IntegerKind.Usize 16)
                        ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let i := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.write (|
                                          M.SubPointer.get_array_field (|
                                            permuted,
                                            M.read (| i |)
                                          |),
                                          M.call_closure (|
                                            T,
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              T,
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_array_field (|
                                                  M.deref (| M.read (| m |) |),
                                                  M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      get_constant (|
                                                        "p3_blake3_air::constants::MSG_PERMUTATION",
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 16 ]
                                                          [ Ty.path "usize" ]
                                                      |),
                                                      M.read (| i |)
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (| M.write (| M.deref (| M.read (| m |) |), M.read (| permuted |) |) |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_permute :
    M.IsFunction.C "p3_blake3_air::constants::permute" permute.
  Admitted.
  Global Typeclasses Opaque permute.
End constants.
