(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* Trait *)
Module CanObserve.
  Definition observe_slice
      (T Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [], [ self; values ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let values := M.alloc (| values |) in
        M.read (|
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [ M.read (| values |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ T ] ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let value := M.copy (| γ0_0 |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_trait_method (|
                                          "p3_challenger::CanObserve",
                                          Self,
                                          [],
                                          [ T ],
                                          "observe",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| self |) |)
                                          |);
                                          M.call_closure (|
                                            T,
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              T,
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| value |) |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_observe_slice :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_challenger::CanObserve" "observe_slice" (observe_slice T).
End CanObserve.

(* Trait *)
Module CanSample.
  Definition sample_array
      (T Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [ N ], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          Ty.apply (Ty.path "array") [ N ] [ T ],
          M.get_function (|
            "core::array::from_fn",
            [ N ],
            [ T; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ]
          |),
          [
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply
                          (Ty.path "*")
                          []
                          [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ],
                        M.alloc (| α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (M.call_closure (|
                                T,
                                M.get_trait_method (|
                                  "p3_challenger::CanSample",
                                  Self,
                                  [],
                                  [ T ],
                                  "sample",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| self |) |)
                                  |)
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_sample_array :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_challenger::CanSample" "sample_array" (sample_array T).
  Definition sample_vec (T Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; n ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let n := M.alloc (| n |) in
        M.call_closure (|
          Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
          M.get_trait_method (|
            "core::iter::traits::iterator::Iterator",
            Ty.apply
              (Ty.path "core::iter::adapters::map::Map")
              []
              [
                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T
              ],
            [],
            [],
            "collect",
            [],
            [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ]
          |),
          [
            M.call_closure (|
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                  Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                [],
                [],
                "map",
                [],
                [ T; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ]
              |),
              [
                Value.StructRecord
                  "core::ops::range::Range"
                  [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", M.read (| n |)) ];
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path "*")
                              []
                              [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ],
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    T,
                                    M.get_trait_method (|
                                      "p3_challenger::CanSample",
                                      Self,
                                      [],
                                      [ T ],
                                      "sample",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_sample_vec :
    forall (T : Ty.t),
    M.IsProvidedMethod "p3_challenger::CanSample" "sample_vec" (sample_vec T).
End CanSample.

(* Trait *)
(* Empty module 'CanSampleBits' *)

(* Trait *)
Module FieldChallenger.
  Definition observe_algebra_element
      (F Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ A ], [ self; alg_elem ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let alg_elem := M.alloc (| alg_elem |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "p3_challenger::CanObserve",
                  Self,
                  [],
                  [ F ],
                  "observe_slice",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                        M.get_trait_method (|
                          "p3_field::field::BasedVectorSpace",
                          A,
                          [],
                          [ F ],
                          "as_basis_coefficients_slice",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, alg_elem |) ]
                      |)
                    |)
                  |)
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_observe_algebra_element :
    forall (F : Ty.t),
    M.IsProvidedMethod
      "p3_challenger::FieldChallenger"
      "observe_algebra_element"
      (observe_algebra_element F).
  Definition sample_algebra_element
      (F Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ A ], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          A,
          M.get_trait_method (|
            "p3_field::field::BasedVectorSpace",
            A,
            [],
            [ F ],
            "from_basis_coefficients_fn",
            [],
            [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] F ]
          |),
          [
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply
                          (Ty.path "*")
                          []
                          [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] F ],
                        M.alloc (| α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (M.call_closure (|
                                F,
                                M.get_trait_method (|
                                  "p3_challenger::CanSample",
                                  Self,
                                  [],
                                  [ F ],
                                  "sample",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| self |) |)
                                  |)
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_sample_algebra_element :
    forall (F : Ty.t),
    M.IsProvidedMethod
      "p3_challenger::FieldChallenger"
      "sample_algebra_element"
      (sample_algebra_element F).
End FieldChallenger.

Module Impl_p3_challenger_CanObserve_where_p3_challenger_CanObserve_C_T_T_for_ref_mut_C.
  Definition Self (C T : Ty.t) : Ty.t := Ty.apply (Ty.path "&mut") [] [ C ].
  
  (*
      fn observe(&mut self, value: T) {
          ( *self).observe(value)
      }
  *)
  Definition observe (C T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self C T in
    match ε, τ, α with
    | [], [], [ self; value ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let value := M.alloc (| value |) in
        M.call_closure (|
          Ty.tuple [],
          M.get_trait_method (| "p3_challenger::CanObserve", C, [], [ T ], "observe", [], [] |),
          [
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
            |);
            M.read (| value |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  (*
      fn observe_slice(&mut self, values: &[T])
      where
          T: Clone,
      {
          ( *self).observe_slice(values)
      }
  *)
  Definition observe_slice (C T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self C T in
    match ε, τ, α with
    | [], [], [ self; values ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let values := M.alloc (| values |) in
        M.call_closure (|
          Ty.tuple [],
          M.get_trait_method (|
            "p3_challenger::CanObserve",
            C,
            [],
            [ T ],
            "observe_slice",
            [],
            []
          |),
          [
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
            |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    forall (C T : Ty.t),
    M.IsTraitInstance
      "p3_challenger::CanObserve"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ T ]
      (Self C T)
      (* Instance *)
      [
        ("observe", InstanceField.Method (observe C T));
        ("observe_slice", InstanceField.Method (observe_slice C T))
      ].
End Impl_p3_challenger_CanObserve_where_p3_challenger_CanObserve_C_T_T_for_ref_mut_C.

Module Impl_p3_challenger_CanSample_where_p3_challenger_CanSample_C_T_T_for_ref_mut_C.
  Definition Self (C T : Ty.t) : Ty.t := Ty.apply (Ty.path "&mut") [] [ C ].
  
  (*
      fn sample(&mut self) -> T {
          ( *self).sample()
      }
  *)
  Definition sample (C T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self C T in
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          T,
          M.get_trait_method (| "p3_challenger::CanSample", C, [], [ T ], "sample", [], [] |),
          [
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  (*
      fn sample_array<const N: usize>(&mut self) -> [T; N] {
          ( *self).sample_array()
      }
  *)
  Definition sample_array (C T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self C T in
    match ε, τ, α with
    | [ N ], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          Ty.apply (Ty.path "array") [ N ] [ T ],
          M.get_trait_method (|
            "p3_challenger::CanSample",
            C,
            [],
            [ T ],
            "sample_array",
            [ N ],
            []
          |),
          [
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  (*
      fn sample_vec(&mut self, n: usize) -> Vec<T> {
          ( *self).sample_vec(n)
      }
  *)
  Definition sample_vec (C T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self C T in
    match ε, τ, α with
    | [], [], [ self; n ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let n := M.alloc (| n |) in
        M.call_closure (|
          Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
          M.get_trait_method (| "p3_challenger::CanSample", C, [], [ T ], "sample_vec", [], [] |),
          [
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
            |);
            M.read (| n |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    forall (C T : Ty.t),
    M.IsTraitInstance
      "p3_challenger::CanSample"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ T ]
      (Self C T)
      (* Instance *)
      [
        ("sample", InstanceField.Method (sample C T));
        ("sample_array", InstanceField.Method (sample_array C T));
        ("sample_vec", InstanceField.Method (sample_vec C T))
      ].
End Impl_p3_challenger_CanSample_where_p3_challenger_CanSample_C_T_T_for_ref_mut_C.

Module Impl_p3_challenger_CanSampleBits_where_p3_challenger_CanSampleBits_C_T_T_for_ref_mut_C.
  Definition Self (C T : Ty.t) : Ty.t := Ty.apply (Ty.path "&mut") [] [ C ].
  
  (*
      fn sample_bits(&mut self, bits: usize) -> T {
          ( *self).sample_bits(bits)
      }
  *)
  Definition sample_bits (C T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self C T in
    match ε, τ, α with
    | [], [], [ self; bits ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let bits := M.alloc (| bits |) in
        M.call_closure (|
          T,
          M.get_trait_method (|
            "p3_challenger::CanSampleBits",
            C,
            [],
            [ T ],
            "sample_bits",
            [],
            []
          |),
          [
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
            |);
            M.read (| bits |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    forall (C T : Ty.t),
    M.IsTraitInstance
      "p3_challenger::CanSampleBits"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ T ]
      (Self C T)
      (* Instance *) [ ("sample_bits", InstanceField.Method (sample_bits C T)) ].
End Impl_p3_challenger_CanSampleBits_where_p3_challenger_CanSampleBits_C_T_T_for_ref_mut_C.

Module Impl_p3_challenger_FieldChallenger_where_p3_field_field_Field_F_where_p3_challenger_FieldChallenger_C_F_F_for_ref_mut_C.
  Definition Self (C F : Ty.t) : Ty.t := Ty.apply (Ty.path "&mut") [] [ C ].
  
  (*
      fn observe_algebra_element<EF: BasedVectorSpace<F>>(&mut self, ext: EF) {
          ( *self).observe_algebra_element(ext)
      }
  *)
  Definition observe_algebra_element
      (C F : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    let Self : Ty.t := Self C F in
    match ε, τ, α with
    | [], [ EF ], [ self; ext ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let ext := M.alloc (| ext |) in
        M.call_closure (|
          Ty.tuple [],
          M.get_trait_method (|
            "p3_challenger::FieldChallenger",
            C,
            [],
            [ F ],
            "observe_algebra_element",
            [],
            [ EF ]
          |),
          [
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
            |);
            M.read (| ext |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  (*
      fn sample_algebra_element<EF: BasedVectorSpace<F>>(&mut self) -> EF {
          ( *self).sample_algebra_element()
      }
  *)
  Definition sample_algebra_element
      (C F : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    let Self : Ty.t := Self C F in
    match ε, τ, α with
    | [], [ EF ], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.call_closure (|
          EF,
          M.get_trait_method (|
            "p3_challenger::FieldChallenger",
            C,
            [],
            [ F ],
            "sample_algebra_element",
            [],
            [ EF ]
          |),
          [
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    forall (C F : Ty.t),
    M.IsTraitInstance
      "p3_challenger::FieldChallenger"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ F ]
      (Self C F)
      (* Instance *)
      [
        ("observe_algebra_element", InstanceField.Method (observe_algebra_element C F));
        ("sample_algebra_element", InstanceField.Method (sample_algebra_element C F))
      ].
End Impl_p3_challenger_FieldChallenger_where_p3_field_field_Field_F_where_p3_challenger_FieldChallenger_C_F_F_for_ref_mut_C.
