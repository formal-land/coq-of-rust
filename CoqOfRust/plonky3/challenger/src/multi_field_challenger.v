(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module multi_field_challenger.
  (* StructRecord
    {
      name := "MultiField32Challenger";
      const_params := [ "WIDTH"; "RATE" ];
      ty_params := [ "F"; "PF"; "P" ];
      fields :=
        [
          ("sponge_state", Ty.apply (Ty.path "array") [ WIDTH ] [ PF ]);
          ("input_buffer",
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]);
          ("output_buffer",
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]);
          ("permutation", P);
          ("num_f_elms", Ty.path "usize")
        ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_PF_where_core_clone_Clone_P_where_p3_field_field_PrimeField32_F_where_p3_field_field_Field_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
    Definition Self (WIDTH RATE : Value.t) (F PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::multi_field_challenger::MultiField32Challenger")
        [ WIDTH; RATE ]
        [ F; PF; P ].
    
    (* Clone *)
    Definition clone
        (WIDTH RATE : Value.t)
        (F PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE F PF P in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_challenger::multi_field_challenger::MultiField32Challenger"
            [
              ("sponge_state",
                M.call_closure (|
                  Ty.apply (Ty.path "array") [ WIDTH ] [ PF ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "array") [ WIDTH ] [ PF ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_challenger::multi_field_challenger::MultiField32Challenger",
                            "sponge_state"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("input_buffer",
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_challenger::multi_field_challenger::MultiField32Challenger",
                            "input_buffer"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("output_buffer",
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_challenger::multi_field_challenger::MultiField32Challenger",
                            "output_buffer"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("permutation",
                M.call_closure (|
                  P,
                  M.get_trait_method (| "core::clone::Clone", P, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_challenger::multi_field_challenger::MultiField32Challenger",
                            "permutation"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("num_f_elms",
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "usize",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_challenger::multi_field_challenger::MultiField32Challenger",
                            "num_f_elms"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH RATE : Value.t) (F PF P : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH RATE F PF P)
        (* Instance *) [ ("clone", InstanceField.Method (clone WIDTH RATE F PF P)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_PF_where_core_clone_Clone_P_where_p3_field_field_PrimeField32_F_where_p3_field_field_Field_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_PF_where_core_fmt_Debug_P_where_p3_field_field_PrimeField32_F_where_p3_field_field_Field_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
    Definition Self (WIDTH RATE : Value.t) (F PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::multi_field_challenger::MultiField32Challenger")
        [ WIDTH; RATE ]
        [ F; PF; P ].
    
    (* Debug *)
    Definition fmt
        (WIDTH RATE : Value.t)
        (F PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE F PF P in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field5_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MultiField32Challenger" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "sponge_state" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_challenger::multi_field_challenger::MultiField32Challenger",
                        "sponge_state"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "input_buffer" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_challenger::multi_field_challenger::MultiField32Challenger",
                        "input_buffer"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "output_buffer" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_challenger::multi_field_challenger::MultiField32Challenger",
                        "output_buffer"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "permutation" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_challenger::multi_field_challenger::MultiField32Challenger",
                        "permutation"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "num_f_elms" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_challenger::multi_field_challenger::MultiField32Challenger",
                            "num_f_elms"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH RATE : Value.t) (F PF P : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIDTH RATE F PF P)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt WIDTH RATE F PF P)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_PF_where_core_fmt_Debug_P_where_p3_field_field_PrimeField32_F_where_p3_field_field_Field_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
  
  Module Impl_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
    Definition Self (WIDTH RATE : Value.t) (F PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::multi_field_challenger::MultiField32Challenger")
        [ WIDTH; RATE ]
        [ F; PF; P ].
    
    (*
        pub fn new(permutation: P) -> Result<Self, String> {
            if F::order() >= PF::order() {
                return Err(String::from("F::order() must be less than PF::order()"));
            }
            let num_f_elms = PF::bits() / 64;
            Ok(Self {
                sponge_state: [PF::default(); WIDTH],
                input_buffer: vec![],
                output_buffer: vec![],
                permutation,
                num_f_elms,
            })
        }
    *)
    Definition new
        (WIDTH RATE : Value.t)
        (F PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE F PF P in
      match ε, τ, α with
      | [], [], [ permutation ] =>
        ltac:(M.monadic
          (let permutation := M.alloc (| permutation |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "p3_challenger::multi_field_challenger::MultiField32Challenger")
                  [ WIDTH; RATE ]
                  [ F; PF; P ];
                Ty.path "alloc::string::String"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.path "num_bigint::biguint::BigUint",
                                    [],
                                    [ Ty.path "num_bigint::biguint::BigUint" ],
                                    "ge",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "num_bigint::biguint::BigUint",
                                          M.get_trait_method (|
                                            "p3_field::field::Field",
                                            F,
                                            [],
                                            [],
                                            "order",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "num_bigint::biguint::BigUint",
                                          M.get_trait_method (|
                                            "p3_field::field::Field",
                                            PF,
                                            [],
                                            [],
                                            "order",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        Ty.path "alloc::string::String",
                                        M.get_trait_method (|
                                          "core::convert::From",
                                          Ty.path "alloc::string::String",
                                          [],
                                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                          "from",
                                          [],
                                          []
                                        |),
                                        [ mk_str (| "F::order() must be less than PF::order()" |) ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ num_f_elms : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.div,
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_trait_method (|
                            "p3_field::field::Field",
                            PF,
                            [],
                            [],
                            "bits",
                            [],
                            []
                          |),
                          []
                        |);
                        Value.Integer IntegerKind.Usize 64
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      Value.StructRecord
                        "p3_challenger::multi_field_challenger::MultiField32Challenger"
                        [
                          ("sponge_state",
                            repeat (|
                              M.call_closure (|
                                PF,
                                M.get_trait_method (|
                                  "core::default::Default",
                                  PF,
                                  [],
                                  [],
                                  "default",
                                  [],
                                  []
                                |),
                                []
                              |),
                              WIDTH
                            |));
                          ("input_buffer",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ],
                                "new",
                                [],
                                []
                              |),
                              []
                            |));
                          ("output_buffer",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ],
                                "new",
                                [],
                                []
                              |),
                              []
                            |));
                          ("permutation", M.read (| permutation |));
                          ("num_f_elms", M.read (| num_f_elms |))
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (WIDTH RATE : Value.t) (F PF P : Ty.t),
      M.IsAssociatedFunction.C (Self WIDTH RATE F PF P) "new" (new WIDTH RATE F PF P).
    Admitted.
    Global Typeclasses Opaque new.
    (*
        fn duplexing(&mut self) {
            assert!(self.input_buffer.len() <= self.num_f_elms * RATE);
    
            for (i, f_chunk) in self.input_buffer.chunks(self.num_f_elms).enumerate() {
                self.sponge_state[i] = reduce_32(f_chunk);
            }
            self.input_buffer.clear();
    
            // Apply the permutation.
            self.permutation.permute_mut(&mut self.sponge_state);
    
            self.output_buffer.clear();
            for &pf_val in &self.sponge_state {
                let f_vals = split_32(pf_val, self.num_f_elms);
                for f_val in f_vals {
                    self.output_buffer.push(f_val);
                }
            }
        }
    *)
    Definition duplexing
        (WIDTH RATE : Value.t)
        (F PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE F PF P in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.le,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "p3_challenger::multi_field_challenger::MultiField32Challenger",
                                          "input_buffer"
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.mul,
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "p3_challenger::multi_field_challenger::MultiField32Challenger",
                                          "num_f_elms"
                                        |)
                                      |);
                                      RATE
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [
                              mk_str (|
                                "assertion failed: self.input_buffer.len() <= self.num_f_elms * RATE"
                              |)
                            ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Chunks") [] [ F ] ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Chunks") [] [ F ] ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Chunks") [] [ F ] ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::slice::iter::Chunks") [] [ F ],
                            [],
                            [],
                            "enumerate",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "core::slice::iter::Chunks") [] [ F ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ F ],
                                "chunks",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ F; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "p3_challenger::multi_field_challenger::MultiField32Challenger",
                                            "input_buffer"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "p3_challenger::multi_field_challenger::MultiField32Challenger",
                                    "num_f_elms"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                        []
                                        [ Ty.apply (Ty.path "core::slice::iter::Chunks") [] [ F ] ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                      let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                      let i := M.copy (| γ1_0 |) in
                                      let f_chunk := M.copy (| γ1_1 |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.write (|
                                            M.SubPointer.get_array_field (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "p3_challenger::multi_field_challenger::MultiField32Challenger",
                                                "sponge_state"
                                              |),
                                              M.read (| i |)
                                            |),
                                            M.call_closure (|
                                              PF,
                                              M.get_function (|
                                                "p3_field::helpers::reduce_32",
                                                [],
                                                [ F; PF ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| f_chunk |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    "clear",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_challenger::multi_field_challenger::MultiField32Challenger",
                        "input_buffer"
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_symmetric::permutation::Permutation",
                    P,
                    [],
                    [ Ty.apply (Ty.path "array") [ WIDTH ] [ PF ] ],
                    "permute_mut",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_challenger::multi_field_challenger::MultiField32Challenger",
                        "permutation"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_challenger::multi_field_challenger::MultiField32Challenger",
                            "sponge_state"
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    "clear",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_challenger::multi_field_challenger::MultiField32Challenger",
                        "output_buffer"
                      |)
                    |)
                  ]
                |)
              |) in
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ PF ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ WIDTH ] [ PF ] ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_challenger::multi_field_challenger::MultiField32Challenger",
                          "sponge_state"
                        |)
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&") [] [ PF ] ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ PF ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let γ0_0 := M.read (| γ0_0 |) in
                                    let pf_val := M.copy (| γ0_0 |) in
                                    let~ f_vals :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ],
                                          M.get_function (|
                                            "p3_field::helpers::split_32",
                                            [],
                                            [ PF; F ]
                                          |),
                                          [
                                            M.read (| pf_val |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "p3_challenger::multi_field_challenger::MultiField32Challenger",
                                                "num_f_elms"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.use
                                      (M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ],
                                              [],
                                              [],
                                              "into_iter",
                                              [],
                                              []
                                            |),
                                            [ M.read (| f_vals |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter := M.copy (| γ |) in
                                              M.loop (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                ltac:(M.monadic
                                                  (let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.match_operator (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ F ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::vec::into_iter::IntoIter")
                                                              []
                                                              [ F; Ty.path "alloc::alloc::Global" ],
                                                            [],
                                                            [],
                                                            "next",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  iter
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "core::option::Option::None"
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let f_val := M.copy (| γ0_0 |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "push",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| self |)
                                                                        |),
                                                                        "p3_challenger::multi_field_challenger::MultiField32Challenger",
                                                                        "output_buffer"
                                                                      |)
                                                                    |);
                                                                    M.read (| f_val |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                              |)))
                                        ]
                                      |))))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_duplexing :
      forall (WIDTH RATE : Value.t) (F PF P : Ty.t),
      M.IsAssociatedFunction.C (Self WIDTH RATE F PF P) "duplexing" (duplexing WIDTH RATE F PF P).
    Admitted.
    Global Typeclasses Opaque duplexing.
  End Impl_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
  
  
  Module Impl_p3_challenger_FieldChallenger_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_F_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
    Definition Self (WIDTH RATE : Value.t) (F PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::multi_field_challenger::MultiField32Challenger")
        [ WIDTH; RATE ]
        [ F; PF; P ].
    
    Axiom Implements :
      forall (WIDTH RATE : Value.t) (F PF P : Ty.t),
      M.IsTraitInstance
        "p3_challenger::FieldChallenger"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self WIDTH RATE F PF P)
        (* Instance *) [].
  End Impl_p3_challenger_FieldChallenger_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_F_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
  
  Module Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_F_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
    Definition Self (WIDTH RATE : Value.t) (F PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::multi_field_challenger::MultiField32Challenger")
        [ WIDTH; RATE ]
        [ F; PF; P ].
    
    (*
        fn observe(&mut self, value: F) {
            // Any buffered output is now invalid.
            self.output_buffer.clear();
    
            self.input_buffer.push(value);
    
            if self.input_buffer.len() == self.num_f_elms * RATE {
                self.duplexing();
            }
        }
    *)
    Definition observe
        (WIDTH RATE : Value.t)
        (F PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE F PF P in
      match ε, τ, α with
      | [], [], [ self; value ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let value := M.alloc (| value |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    "clear",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_challenger::multi_field_challenger::MultiField32Challenger",
                        "output_buffer"
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    "push",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_challenger::multi_field_challenger::MultiField32Challenger",
                        "input_buffer"
                      |)
                    |);
                    M.read (| value |)
                  ]
                |)
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ],
                                  "len",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "p3_challenger::multi_field_challenger::MultiField32Challenger",
                                      "input_buffer"
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.mul,
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "p3_challenger::multi_field_challenger::MultiField32Challenger",
                                      "num_f_elms"
                                    |)
                                  |);
                                  RATE
                                ]
                              |)
                            ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "p3_challenger::multi_field_challenger::MultiField32Challenger")
                              [ WIDTH; RATE ]
                              [ F; PF; P ],
                            "duplexing",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |) in
                    M.alloc (| Value.Tuple [] |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH RATE : Value.t) (F PF P : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanObserve"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self WIDTH RATE F PF P)
        (* Instance *) [ ("observe", InstanceField.Method (observe WIDTH RATE F PF P)) ].
  End Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_F_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
  
  Module Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_array_N_F_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
    Definition Self (N WIDTH RATE : Value.t) (F PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::multi_field_challenger::MultiField32Challenger")
        [ WIDTH; RATE ]
        [ F; PF; P ].
    
    (*
        fn observe(&mut self, values: [F; N]) {
            for value in values {
                self.observe(value);
            }
        }
    *)
    Definition observe
        (N WIDTH RATE : Value.t)
        (F PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N WIDTH RATE F PF P in
      match ε, τ, α with
      | [], [], [ self; values ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let values := M.alloc (| values |) in
          M.read (|
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::array::iter::IntoIter") [ N ] [ F ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "array") [ N ] [ F ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| values |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply (Ty.path "core::array::iter::IntoIter") [ N ] [ F ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "p3_challenger::CanObserve",
                                            Ty.apply
                                              (Ty.path
                                                "p3_challenger::multi_field_challenger::MultiField32Challenger")
                                              [ WIDTH; RATE ]
                                              [ F; PF; P ],
                                            [],
                                            [ F ],
                                            "observe",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.read (| value |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N WIDTH RATE : Value.t) (F PF P : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanObserve"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "array") [ N ] [ F ] ]
        (Self N WIDTH RATE F PF P)
        (* Instance *) [ ("observe", InstanceField.Method (observe N WIDTH RATE F PF P)) ].
  End Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_array_N_F_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
  
  Module Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_p3_symmetric_hash_Hash_N_F_PF_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
    Definition Self (N WIDTH RATE : Value.t) (F PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::multi_field_challenger::MultiField32Challenger")
        [ WIDTH; RATE ]
        [ F; PF; P ].
    
    (*
        fn observe(&mut self, values: Hash<F, PF, N>) {
            for pf_val in values {
                let f_vals: Vec<F> = split_32(pf_val, self.num_f_elms);
                for f_val in f_vals {
                    self.observe(f_val);
                }
            }
        }
    *)
    Definition observe
        (N WIDTH RATE : Value.t)
        (F PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N WIDTH RATE F PF P in
      match ε, τ, α with
      | [], [], [ self; values ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let values := M.alloc (| values |) in
          M.read (|
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::array::iter::IntoIter") [ N ] [ PF ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ N ] [ F; PF ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| values |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ PF ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply (Ty.path "core::array::iter::IntoIter") [ N ] [ PF ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let pf_val := M.copy (| γ0_0 |) in
                                    let~ f_vals :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ],
                                          M.get_function (|
                                            "p3_field::helpers::split_32",
                                            [],
                                            [ PF; F ]
                                          |),
                                          [
                                            M.read (| pf_val |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "p3_challenger::multi_field_challenger::MultiField32Challenger",
                                                "num_f_elms"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.use
                                      (M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ],
                                              [],
                                              [],
                                              "into_iter",
                                              [],
                                              []
                                            |),
                                            [ M.read (| f_vals |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter := M.copy (| γ |) in
                                              M.loop (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                ltac:(M.monadic
                                                  (let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.match_operator (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ F ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::vec::into_iter::IntoIter")
                                                              []
                                                              [ F; Ty.path "alloc::alloc::Global" ],
                                                            [],
                                                            [],
                                                            "next",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  iter
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "core::option::Option::None"
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let f_val := M.copy (| γ0_0 |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "p3_challenger::CanObserve",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_challenger::multi_field_challenger::MultiField32Challenger")
                                                                      [ WIDTH; RATE ]
                                                                      [ F; PF; P ],
                                                                    [],
                                                                    [ F ],
                                                                    "observe",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.read (| self |)
                                                                      |)
                                                                    |);
                                                                    M.read (| f_val |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                              |)))
                                        ]
                                      |))))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N WIDTH RATE : Value.t) (F PF P : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanObserve"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ N ] [ F; PF ] ]
        (Self N WIDTH RATE F PF P)
        (* Instance *) [ ("observe", InstanceField.Method (observe N WIDTH RATE F PF P)) ].
  End Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_p3_symmetric_hash_Hash_N_F_PF_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
  
  Module Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_alloc_vec_Vec_alloc_vec_Vec_F_alloc_alloc_Global_alloc_alloc_Global_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
    Definition Self (WIDTH RATE : Value.t) (F PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::multi_field_challenger::MultiField32Challenger")
        [ WIDTH; RATE ]
        [ F; PF; P ].
    
    (*
        fn observe(&mut self, valuess: Vec<Vec<F>>) {
            for values in valuess {
                for value in values {
                    self.observe(value);
                }
            }
        }
    *)
    Definition observe
        (WIDTH RATE : Value.t)
        (F PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE F PF P in
      match ε, τ, α with
      | [], [], [ self; valuess ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let valuess := M.alloc (| valuess |) in
          M.read (|
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| valuess |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ F; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let values := M.copy (| γ0_0 |) in
                                    M.use
                                      (M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ],
                                              [],
                                              [],
                                              "into_iter",
                                              [],
                                              []
                                            |),
                                            [ M.read (| values |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter := M.copy (| γ |) in
                                              M.loop (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                ltac:(M.monadic
                                                  (let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.match_operator (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ F ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::vec::into_iter::IntoIter")
                                                              []
                                                              [ F; Ty.path "alloc::alloc::Global" ],
                                                            [],
                                                            [],
                                                            "next",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  iter
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "core::option::Option::None"
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let value := M.copy (| γ0_0 |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "p3_challenger::CanObserve",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_challenger::multi_field_challenger::MultiField32Challenger")
                                                                      [ WIDTH; RATE ]
                                                                      [ F; PF; P ],
                                                                    [],
                                                                    [ F ],
                                                                    "observe",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.read (| self |)
                                                                      |)
                                                                    |);
                                                                    M.read (| value |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                              |)))
                                        ]
                                      |))))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH RATE : Value.t) (F PF P : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanObserve"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            []
            [
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
              Ty.path "alloc::alloc::Global"
            ]
        ]
        (Self WIDTH RATE F PF P)
        (* Instance *) [ ("observe", InstanceField.Method (observe WIDTH RATE F PF P)) ].
  End Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_alloc_vec_Vec_alloc_vec_Vec_F_alloc_alloc_Global_alloc_alloc_Global_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
  
  Module Impl_p3_challenger_CanSample_where_p3_field_field_PrimeField32_F_where_p3_field_field_BasedVectorSpace_EF_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_EF_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
    Definition Self (WIDTH RATE : Value.t) (F EF PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::multi_field_challenger::MultiField32Challenger")
        [ WIDTH; RATE ]
        [ F; PF; P ].
    
    (*
        fn sample(&mut self) -> EF {
            EF::from_basis_coefficients_fn(|_| {
                // If we have buffered inputs, we must perform a duplexing so that the challenge will
                // reflect them. Or if we've run out of outputs, we must perform a duplexing to get more.
                if !self.input_buffer.is_empty() || self.output_buffer.is_empty() {
                    self.duplexing();
                }
    
                self.output_buffer
                    .pop()
                    .expect("Output buffer should be non-empty")
            })
        }
    *)
    Definition sample
        (WIDTH RATE : Value.t)
        (F EF PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE F EF PF P in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            EF,
            M.get_trait_method (|
              "p3_field::field::BasedVectorSpace",
              EF,
              [],
              [ F ],
              "from_basis_coefficients_fn",
              [],
              [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] F ]
            |),
            [
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] F ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.read (|
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  LogicalOp.or (|
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ F; Ty.path "alloc::alloc::Global" ],
                                                          "is_empty",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "p3_challenger::multi_field_challenger::MultiField32Challenger",
                                                              "input_buffer"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ F; Ty.path "alloc::alloc::Global" ],
                                                          "is_empty",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "p3_challenger::multi_field_challenger::MultiField32Challenger",
                                                              "output_buffer"
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_challenger::multi_field_challenger::MultiField32Challenger")
                                                      [ WIDTH; RATE ]
                                                      [ F; PF; P ],
                                                    "duplexing",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (|
                                    M.call_closure (|
                                      F,
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                        "expect",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            "pop",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "p3_challenger::multi_field_challenger::MultiField32Challenger",
                                                "output_buffer"
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            mk_str (| "Output buffer should be non-empty" |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH RATE : Value.t) (F EF PF P : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanSample"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ EF ]
        (Self WIDTH RATE F EF PF P)
        (* Instance *) [ ("sample", InstanceField.Method (sample WIDTH RATE F EF PF P)) ].
  End Impl_p3_challenger_CanSample_where_p3_field_field_PrimeField32_F_where_p3_field_field_BasedVectorSpace_EF_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_EF_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
  
  Module Impl_p3_challenger_CanSampleBits_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_usize_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
    Definition Self (WIDTH RATE : Value.t) (F PF P : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::multi_field_challenger::MultiField32Challenger")
        [ WIDTH; RATE ]
        [ F; PF; P ].
    
    (*
        fn sample_bits(&mut self, bits: usize) -> usize {
            assert!(bits < (usize::BITS as usize));
            assert!((1 << bits) < F::ORDER_U32);
            let rand_f: F = self.sample();
            let rand_usize = rand_f.as_canonical_u32() as usize;
            rand_usize & ((1 << bits) - 1)
        }
    *)
    Definition sample_bits
        (WIDTH RATE : Value.t)
        (F PF P : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self WIDTH RATE F PF P in
      match ε, τ, α with
      | [], [], [ self; bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let bits := M.alloc (| bits |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.lt,
                                [
                                  M.read (| bits |);
                                  M.cast
                                    (Ty.path "usize")
                                    (M.read (|
                                      get_associated_constant (|
                                        Ty.path "usize",
                                        "BITS",
                                        Ty.path "u32"
                                      |)
                                    |))
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: bits < (usize::BITS as usize)" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.lt,
                                [
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.shl,
                                    [ Value.Integer IntegerKind.U32 1; M.read (| bits |) ]
                                  |);
                                  M.read (|
                                    get_constant (|
                                      "p3_field::field::PrimeField32::ORDER_U32",
                                      Ty.path "u32"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: (1 << bits) < F::ORDER_U32" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ rand_f : Ty.apply (Ty.path "*") [] [ F ] :=
              M.alloc (|
                M.call_closure (|
                  F,
                  M.get_trait_method (|
                    "p3_challenger::CanSample",
                    Ty.apply
                      (Ty.path "p3_challenger::multi_field_challenger::MultiField32Challenger")
                      [ WIDTH; RATE ]
                      [ F; PF; P ],
                    [],
                    [ F ],
                    "sample",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ rand_usize : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "usize")
                  (M.call_closure (|
                    Ty.path "u32",
                    M.get_trait_method (|
                      "p3_field::field::PrimeField32",
                      F,
                      [],
                      [],
                      "as_canonical_u32",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, rand_f |) ]
                  |))
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.bit_and,
                [
                  M.read (| rand_usize |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.shl,
                        [ Value.Integer IntegerKind.Usize 1; M.read (| bits |) ]
                      |);
                      Value.Integer IntegerKind.Usize 1
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIDTH RATE : Value.t) (F PF P : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanSampleBits"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "usize" ]
        (Self WIDTH RATE F PF P)
        (* Instance *) [ ("sample_bits", InstanceField.Method (sample_bits WIDTH RATE F PF P)) ].
  End Impl_p3_challenger_CanSampleBits_where_p3_field_field_PrimeField32_F_where_p3_field_field_PrimeField_PF_where_p3_symmetric_permutation_CryptographicPermutation_P_array_WIDTH_PF_usize_for_p3_challenger_multi_field_challenger_MultiField32Challenger_WIDTH_RATE_F_PF_P.
End multi_field_challenger.
