(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module serializing_challenger.
  (* StructRecord
    {
      name := "SerializingChallenger32";
      const_params := [];
      ty_params := [ "F"; "Inner" ];
      fields :=
        [ ("inner", Inner); ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ]) ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_Inner_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
        []
        [ F; Inner ].
    
    (* Clone *)
    Definition clone (F Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_challenger::serializing_challenger::SerializingChallenger32"
            [
              ("inner",
                M.call_closure (|
                  Inner,
                  M.get_trait_method (| "core::clone::Clone", Inner, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_challenger::serializing_challenger::SerializingChallenger32",
                            "inner"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("_marker",
                M.call_closure (|
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_challenger::serializing_challenger::SerializingChallenger32",
                            "_marker"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F Inner)
        (* Instance *) [ ("clone", InstanceField.Method (clone F Inner)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_Inner_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_Inner_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
        []
        [ F; Inner ].
    
    (* Debug *)
    Definition fmt (F Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "SerializingChallenger32" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_challenger::serializing_challenger::SerializingChallenger32",
                        "inner"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_marker" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_challenger::serializing_challenger::SerializingChallenger32",
                            "_marker"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F Inner)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F Inner)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_Inner_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
  
  (* StructRecord
    {
      name := "SerializingChallenger64";
      const_params := [];
      ty_params := [ "F"; "Inner" ];
      fields :=
        [ ("inner", Inner); ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ]) ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_Inner_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
        []
        [ F; Inner ].
    
    (* Clone *)
    Definition clone (F Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_challenger::serializing_challenger::SerializingChallenger64"
            [
              ("inner",
                M.call_closure (|
                  Inner,
                  M.get_trait_method (| "core::clone::Clone", Inner, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_challenger::serializing_challenger::SerializingChallenger64",
                            "inner"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("_marker",
                M.call_closure (|
                  Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_challenger::serializing_challenger::SerializingChallenger64",
                            "_marker"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F Inner)
        (* Instance *) [ ("clone", InstanceField.Method (clone F Inner)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_Inner_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_Inner_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
        []
        [ F; Inner ].
    
    (* Debug *)
    Definition fmt (F Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field2_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "SerializingChallenger64" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_challenger::serializing_challenger::SerializingChallenger64",
                        "inner"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_marker" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_challenger::serializing_challenger::SerializingChallenger64",
                            "_marker"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F Inner)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F Inner)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_Inner_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
  
  Module Impl_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
        []
        [ F; Inner ].
    
    (*
        pub const fn new(inner: Inner) -> Self {
            Self {
                inner,
                _marker: PhantomData,
            }
        }
    *)
    Definition new (F Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [], [ inner ] =>
        ltac:(M.monadic
          (let inner := M.alloc (| inner |) in
          Value.StructRecord
            "p3_challenger::serializing_challenger::SerializingChallenger32"
            [
              ("inner", M.read (| inner |));
              ("_marker", Value.StructTuple "core::marker::PhantomData" [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (F Inner : Ty.t),
      M.IsAssociatedFunction.C (Self F Inner) "new" (new F Inner).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
  
  Module Impl_p3_challenger_serializing_challenger_SerializingChallenger32_F_p3_challenger_hash_challenger_HashChallenger_Usize_32_u8_H.
    Definition Self (F H : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
        []
        [
          F;
          Ty.apply
            (Ty.path "p3_challenger::hash_challenger::HashChallenger")
            [ Value.Integer IntegerKind.Usize 32 ]
            [ Ty.path "u8"; H ]
        ].
    
    (*
        pub const fn from_hasher(initial_state: Vec<u8>, hasher: H) -> Self {
            Self::new(HashChallenger::new(initial_state, hasher))
        }
    *)
    Definition from_hasher (F H : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F H in
      match ε, τ, α with
      | [], [], [ initial_state; hasher ] =>
        ltac:(M.monadic
          (let initial_state := M.alloc (| initial_state |) in
          let hasher := M.alloc (| hasher |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
              []
              [
                F;
                Ty.apply
                  (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                  [ Value.Integer IntegerKind.Usize 32 ]
                  [ Ty.path "u8"; H ]
              ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                    [ Value.Integer IntegerKind.Usize 32 ]
                    [ Ty.path "u8"; H ]
                ],
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                  [ Value.Integer IntegerKind.Usize 32 ]
                  [ Ty.path "u8"; H ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                    [ Value.Integer IntegerKind.Usize 32 ]
                    [ Ty.path "u8"; H ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| initial_state |); M.read (| hasher |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_from_hasher :
      forall (F H : Ty.t),
      M.IsAssociatedFunction.C (Self F H) "from_hasher" (from_hasher F H).
    Admitted.
    Global Typeclasses Opaque from_hasher.
  End Impl_p3_challenger_serializing_challenger_SerializingChallenger32_F_p3_challenger_hash_challenger_HashChallenger_Usize_32_u8_H.
  
  Module Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_challenger_CanObserve_Inner_u8_F_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
        []
        [ F; Inner ].
    
    (*
        fn observe(&mut self, value: F) {
            self.inner
                .observe_slice(&value.to_unique_u32().to_le_bytes());
        }
    *)
    Definition observe (F Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [], [ self; value ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let value := M.alloc (| value |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_challenger::CanObserve",
                    Inner,
                    [],
                    [ Ty.path "u8" ],
                    "observe_slice",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_challenger::serializing_challenger::SerializingChallenger32",
                        "inner"
                      |)
                    |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [ Ty.path "u8" ],
                                M.get_associated_function (|
                                  Ty.path "u32",
                                  "to_le_bytes",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "u32",
                                    M.get_trait_method (|
                                      "p3_field::field::PrimeField32",
                                      F,
                                      [],
                                      [],
                                      "to_unique_u32",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, value |) ]
                                  |)
                                ]
                              |)
                            |)
                          |)
                        |)
                      |))
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanObserve"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F Inner)
        (* Instance *) [ ("observe", InstanceField.Method (observe F Inner)) ].
  End Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_challenger_CanObserve_Inner_u8_F_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
  
  Module Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_challenger_CanObserve_Inner_u8_p3_symmetric_hash_Hash_N_F_u8_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
    Definition Self (N : Value.t) (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
        []
        [ F; Inner ].
    
    (*
        fn observe(&mut self, values: Hash<F, u8, N>) {
            for value in values {
                self.inner.observe(value);
            }
        }
    *)
    Definition observe
        (N : Value.t)
        (F Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N F Inner in
      match ε, τ, α with
      | [], [], [ self; values ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let values := M.alloc (| values |) in
          M.read (|
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::array::iter::IntoIter") [ N ] [ Ty.path "u8" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ N ] [ F; Ty.path "u8" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| values |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u8" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ N ]
                                      [ Ty.path "u8" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "p3_challenger::CanObserve",
                                            Inner,
                                            [],
                                            [ Ty.path "u8" ],
                                            "observe",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "p3_challenger::serializing_challenger::SerializingChallenger32",
                                                "inner"
                                              |)
                                            |);
                                            M.read (| value |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N : Value.t) (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanObserve"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ N ] [ F; Ty.path "u8" ] ]
        (Self N F Inner)
        (* Instance *) [ ("observe", InstanceField.Method (observe N F Inner)) ].
  End Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_challenger_CanObserve_Inner_u8_p3_symmetric_hash_Hash_N_F_u8_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
  
  Module Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_challenger_CanObserve_Inner_u8_p3_symmetric_hash_Hash_N_F_u64_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
    Definition Self (N : Value.t) (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
        []
        [ F; Inner ].
    
    (*
        fn observe(&mut self, values: Hash<F, u64, N>) {
            for value in values {
                self.inner.observe_slice(&value.to_le_bytes());
            }
        }
    *)
    Definition observe
        (N : Value.t)
        (F Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N F Inner in
      match ε, τ, α with
      | [], [], [ self; values ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let values := M.alloc (| values |) in
          M.read (|
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::array::iter::IntoIter") [ N ] [ Ty.path "u64" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ N ] [ F; Ty.path "u64" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| values |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ N ]
                                      [ Ty.path "u64" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "p3_challenger::CanObserve",
                                            Inner,
                                            [],
                                            [ Ty.path "u8" ],
                                            "observe_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "p3_challenger::serializing_challenger::SerializingChallenger32",
                                                "inner"
                                              |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 8 ]
                                                          [ Ty.path "u8" ],
                                                        M.get_associated_function (|
                                                          Ty.path "u64",
                                                          "to_le_bytes",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| value |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N : Value.t) (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanObserve"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ N ] [ F; Ty.path "u64" ] ]
        (Self N F Inner)
        (* Instance *) [ ("observe", InstanceField.Method (observe N F Inner)) ].
  End Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField32_F_where_p3_challenger_CanObserve_Inner_u8_p3_symmetric_hash_Hash_N_F_u64_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
  
  Module Impl_p3_challenger_CanSample_where_p3_field_field_PrimeField32_F_where_p3_field_field_BasedVectorSpace_EF_F_where_p3_challenger_CanSample_Inner_u8_EF_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
    Definition Self (F EF Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
        []
        [ F; Inner ].
    
    (*
        fn sample(&mut self) -> EF {
            let modulus = F::ORDER_U32;
            let log_size = log2_ceil_u64(F::ORDER_U64);
            // We use u64 to avoid overflow in the case that log_size = 32.
            let pow_of_two_bound = ((1u64 << log_size) - 1) as u32;
            // Perform rejection sampling over the uniform range (0..log2_ceil(p))
            let sample_base = |inner: &mut Inner| loop {
                let value = u32::from_le_bytes(inner.sample_array());
                let value = value & pow_of_two_bound;
                if value < modulus {
                    return unsafe {
                        // This is safe as value < F::ORDER_U32.
                        F::from_canonical_unchecked(value)
                    };
                }
            };
            EF::from_basis_coefficients_fn(|_| sample_base(&mut self.inner))
        }
    *)
    Definition sample
        (F EF Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F EF Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ modulus : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.copy (|
                get_constant (| "p3_field::field::PrimeField32::ORDER_U32", Ty.path "u32" |)
              |) in
            let~ log_size : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  M.get_function (| "p3_util::log2_ceil_u64", [], [] |),
                  [
                    M.read (|
                      get_constant (| "p3_field::field::PrimeField64::ORDER_U64", Ty.path "u64" |)
                    |)
                  ]
                |)
              |) in
            let~ pow_of_two_bound : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "u32")
                  (M.call_closure (|
                    Ty.path "u64",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.shl,
                        [ Value.Integer IntegerKind.U64 1; M.read (| log_size |) ]
                      |);
                      Value.Integer IntegerKind.U64 1
                    ]
                  |))
              |) in
            let~ sample_base :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.function [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ Inner ] ] ] F ] :=
              M.alloc (|
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path "*")
                              []
                              [
                                Ty.function
                                  [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ Inner ] ] ]
                                  F
                              ],
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let inner := M.copy (| γ |) in
                                  M.never_to_any (|
                                    M.read (|
                                      M.loop (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                        ltac:(M.monadic
                                          (let~ value :
                                              Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "u32",
                                                M.get_associated_function (|
                                                  Ty.path "u32",
                                                  "from_le_bytes",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 4 ]
                                                      [ Ty.path "u8" ],
                                                    M.get_trait_method (|
                                                      "p3_challenger::CanSample",
                                                      Inner,
                                                      [],
                                                      [ Ty.path "u8" ],
                                                      "sample_array",
                                                      [ Value.Integer IntegerKind.Usize 4 ],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| inner |) |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let~ value :
                                              Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "u32",
                                                BinOp.Wrap.bit_and,
                                                [ M.read (| value |); M.read (| pow_of_two_bound |)
                                                ]
                                              |)
                                            |) in
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.lt,
                                                          [ M.read (| value |); M.read (| modulus |)
                                                          ]
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            F,
                                                            M.get_trait_method (|
                                                              "p3_field::integers::QuotientMap",
                                                              F,
                                                              [],
                                                              [ Ty.path "u32" ],
                                                              "from_canonical_unchecked",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.read (| value |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)))
                                      |)
                                    |)
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              |) in
            M.alloc (|
              M.call_closure (|
                EF,
                M.get_trait_method (|
                  "p3_field::field::BasedVectorSpace",
                  EF,
                  [],
                  [ F ],
                  "from_basis_coefficients_fn",
                  [],
                  [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] F ]
                |),
                [
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] F ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      F,
                                      M.get_trait_method (|
                                        "core::ops::function::Fn",
                                        Ty.function
                                          [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ Inner ] ] ]
                                          F,
                                        [],
                                        [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ Inner ] ] ],
                                        "call",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, sample_base |);
                                        Value.Tuple
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "p3_challenger::serializing_challenger::SerializingChallenger32",
                                                    "inner"
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F EF Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanSample"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ EF ]
        (Self F EF Inner)
        (* Instance *) [ ("sample", InstanceField.Method (sample F EF Inner)) ].
  End Impl_p3_challenger_CanSample_where_p3_field_field_PrimeField32_F_where_p3_field_field_BasedVectorSpace_EF_F_where_p3_challenger_CanSample_Inner_u8_EF_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
  
  Module Impl_p3_challenger_CanSampleBits_where_p3_field_field_PrimeField32_F_where_p3_challenger_CanSample_Inner_u8_usize_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
        []
        [ F; Inner ].
    
    (*
        fn sample_bits(&mut self, bits: usize) -> usize {
            assert!(bits < (usize::BITS as usize));
            // Limiting the number of bits to the field size
            assert!((1 << bits) <= F::ORDER_U64 as usize);
            let rand_usize = u32::from_le_bytes(self.inner.sample_array()) as usize;
            rand_usize & ((1 << bits) - 1)
        }
    *)
    Definition sample_bits
        (F Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [], [ self; bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let bits := M.alloc (| bits |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.lt,
                                [
                                  M.read (| bits |);
                                  M.cast
                                    (Ty.path "usize")
                                    (M.read (|
                                      get_associated_constant (|
                                        Ty.path "usize",
                                        "BITS",
                                        Ty.path "u32"
                                      |)
                                    |))
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: bits < (usize::BITS as usize)" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.le,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.shl,
                                    [ Value.Integer IntegerKind.Usize 1; M.read (| bits |) ]
                                  |);
                                  M.cast
                                    (Ty.path "usize")
                                    (M.read (|
                                      get_constant (|
                                        "p3_field::field::PrimeField64::ORDER_U64",
                                        Ty.path "u64"
                                      |)
                                    |))
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: (1 << bits) <= F::ORDER_U64 as usize" |)
                            ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ rand_usize : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "usize")
                  (M.call_closure (|
                    Ty.path "u32",
                    M.get_associated_function (| Ty.path "u32", "from_le_bytes", [], [] |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [ Ty.path "u8" ],
                        M.get_trait_method (|
                          "p3_challenger::CanSample",
                          Inner,
                          [],
                          [ Ty.path "u8" ],
                          "sample_array",
                          [ Value.Integer IntegerKind.Usize 4 ],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_challenger::serializing_challenger::SerializingChallenger32",
                              "inner"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |))
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.bit_and,
                [
                  M.read (| rand_usize |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.shl,
                        [ Value.Integer IntegerKind.Usize 1; M.read (| bits |) ]
                      |);
                      Value.Integer IntegerKind.Usize 1
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanSampleBits"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "usize" ]
        (Self F Inner)
        (* Instance *) [ ("sample_bits", InstanceField.Method (sample_bits F Inner)) ].
  End Impl_p3_challenger_CanSampleBits_where_p3_field_field_PrimeField32_F_where_p3_challenger_CanSample_Inner_u8_usize_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
  
  Module Impl_p3_challenger_grinding_challenger_GrindingChallenger_where_p3_field_field_PrimeField32_F_where_p3_challenger_CanSample_Inner_u8_where_p3_challenger_CanObserve_Inner_u8_where_core_clone_Clone_Inner_where_core_marker_Send_Inner_where_core_marker_Sync_Inner_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
        []
        [ F; Inner ].
    
    (*     type Witness = F; *)
    Definition _Witness (F Inner : Ty.t) : Ty.t := F.
    
    (*     #[instrument(name = "grind for proof-of-work witness", skip_all)] *)
    Definition grind (F Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [], [ self; bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let bits := M.alloc (| bits |) in
          M.catch_return
            (Ty.associated_in_trait
              "p3_challenger::grinding_challenger::GrindingChallenger"
              []
              []
              (Ty.apply
                (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                []
                [ F; Inner ])
              "Witness") (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (| Value.Tuple [] |) in
                let __tracing_attr_span := M.copy (| Value.DeclaredButUndefined |) in
                let __tracing_attr_guard := M.copy (| Value.DeclaredButUndefined |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.or (|
                                  LogicalOp.and (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "INFO",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_constant (|
                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                            Ty.path "tracing_core::metadata::LevelFilter"
                                          |)
                                        |)
                                      ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialOrd",
                                          Ty.path "tracing_core::metadata::Level",
                                          [],
                                          [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                          "le",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_associated_constant (|
                                              Ty.path "tracing_core::metadata::Level",
                                              "INFO",
                                              Ty.path "tracing_core::metadata::Level"
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::metadata::LevelFilter",
                                                  "current",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                  |),
                                  ltac:(M.monadic (Value.Bool false))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                __tracing_attr_span,
                                M.read (|
                                  let~ interest :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [ Ty.path "tracing_core::subscriber::Interest" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        M.get_associated_function (|
                                          Ty.path "tracing_core::subscriber::Interest",
                                          "never",
                                          [],
                                          []
                                        |),
                                        []
                                      |)
                                    |) in
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.path "tracing::span::Span" ],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    LogicalOp.and (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "INFO",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_constant (|
                                                              "tracing::level_filters::STATIC_MAX_LEVEL",
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            |)
                                                          |)
                                                        ]
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "tracing_core::metadata::Level",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            ],
                                                            "le",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_associated_constant (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                "INFO",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter",
                                                                    "current",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)))
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.read (|
                                                        let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.alloc (|
                                                            M.write (|
                                                              interest,
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  "interest",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "p3_challenger::serializing_challenger::grind::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |) in
                                                        M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                "is_never",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  interest
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_function (|
                                                        "tracing::__macro_support::__is_enabled",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "p3_challenger::serializing_challenger::grind::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.read (| interest |)
                                                      ]
                                                    |)))
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          let~ meta :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "tracing_core::metadata::Metadata" ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ],
                                                M.get_trait_method (|
                                                  "tracing_core::callsite::Callsite",
                                                  Ty.path "tracing_core::callsite::DefaultCallsite",
                                                  [],
                                                  [],
                                                  "metadata",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_challenger::serializing_challenger::grind::__CALLSITE",
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite"
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing::span::Span",
                                              M.get_associated_function (|
                                                Ty.path "tracing::span::Span",
                                                "new",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| meta |) |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "tracing_core::field::ValueSet",
                                                          M.get_associated_function (|
                                                            Ty.path "tracing_core::field::FieldSet",
                                                            "value_set",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 0
                                                                ]
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::Field"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("tracing_core::field::Value::Trait",
                                                                                    [])
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::field::FieldSet"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata",
                                                                    "fields",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| meta |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (| Value.Array [] |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let~ span :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.path "tracing::span::Span" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "tracing::span::Span",
                                                M.get_function (|
                                                  "tracing::__macro_support::__disabled_span",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::Metadata"
                                                          ],
                                                        M.get_trait_method (|
                                                          "tracing_core::callsite::Callsite",
                                                          Ty.path
                                                            "tracing_core::callsite::DefaultCallsite",
                                                          [],
                                                          [],
                                                          "metadata",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_challenger::serializing_challenger::grind::__CALLSITE",
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::callsite::DefaultCallsite"
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                            M.alloc (| Value.Tuple [] |) in
                                          span))
                                    ]
                                  |)
                                |)
                              |)
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                __tracing_attr_guard,
                                M.call_closure (|
                                  Ty.path "tracing::span::Entered",
                                  M.get_associated_function (|
                                    Ty.path "tracing::span::Span",
                                    "enter",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Value.Bool false |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ __tracing_attr_fake_return : Ty.apply (Ty.path "*") [] [ F ] :=
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.loop (|
                                          Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                          ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        |)
                                      |)
                                    |)
                                  |) in
                                M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.lt,
                                    [
                                      M.read (| bits |);
                                      M.cast
                                        (Ty.path "usize")
                                        (M.read (|
                                          get_associated_constant (|
                                            Ty.path "usize",
                                            "BITS",
                                            Ty.path "u32"
                                          |)
                                        |))
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic", [], [] |),
                                [ mk_str (| "assertion failed: bits < (usize::BITS as usize)" |) ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.lt,
                                    [
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.U32 1; M.read (| bits |) ]
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "p3_field::field::PrimeField32::ORDER_U32",
                                          Ty.path "u32"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic", [], [] |),
                                [ mk_str (| "assertion failed: (1 << bits) < F::ORDER_U32" |) ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ witness : Ty.apply (Ty.path "*") [] [ F ] :=
                  M.alloc (|
                    M.call_closure (|
                      F,
                      M.get_associated_function (|
                        Ty.apply (Ty.path "core::option::Option") [] [ F ],
                        "expect",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "core::option::Option") [] [ F ],
                          M.get_trait_method (|
                            "p3_maybe_rayon::serial::ParIterExt",
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "u32" ];
                                Ty.function [ Ty.tuple [ Ty.path "u32" ] ] F
                              ],
                            [],
                            [],
                            "find_any",
                            [],
                            [
                              Ty.function
                                [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ F ] ] ]
                                (Ty.path "bool")
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "u32" ];
                                  Ty.function [ Ty.tuple [ Ty.path "u32" ] ] F
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "u32" ],
                                [],
                                [],
                                "map",
                                [],
                                [ F; Ty.function [ Ty.tuple [ Ty.path "u32" ] ] F ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "u32" ],
                                  M.get_trait_method (|
                                    "p3_maybe_rayon::serial::IntoParallelIterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "u32" ],
                                    [],
                                    [],
                                    "into_par_iter",
                                    [],
                                    []
                                  |),
                                  [
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start", Value.Integer IntegerKind.U32 0);
                                        ("end_",
                                          M.read (|
                                            get_constant (|
                                              "p3_field::field::PrimeField32::ORDER_U32",
                                              Ty.path "u32"
                                            |)
                                          |))
                                      ]
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.function [ Ty.tuple [ Ty.path "u32" ] ] F ],
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let i := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    F,
                                                    M.get_trait_method (|
                                                      "p3_field::integers::QuotientMap",
                                                      F,
                                                      [],
                                                      [ Ty.path "u32" ],
                                                      "from_canonical_unchecked",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| i |) ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.function
                                              [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ F ] ] ]
                                              (Ty.path "bool")
                                          ],
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let witness := M.copy (| γ |) in
                                              M.call_closure (|
                                                Ty.path "bool",
                                                M.get_trait_method (|
                                                  "p3_challenger::grinding_challenger::GrindingChallenger",
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_challenger::serializing_challenger::SerializingChallenger32")
                                                    []
                                                    [ F; Inner ],
                                                  [],
                                                  [],
                                                  "check_witness",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_challenger::serializing_challenger::SerializingChallenger32")
                                                          []
                                                          [ F; Inner ],
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_challenger::serializing_challenger::SerializingChallenger32")
                                                            []
                                                            [ F; Inner ],
                                                          [],
                                                          [],
                                                          "clone",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| self |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.read (| bits |);
                                                  M.read (| M.deref (| M.read (| witness |) |) |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "failed to find witness" |) |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "p3_challenger::grinding_challenger::GrindingChallenger",
                                      Ty.apply
                                        (Ty.path
                                          "p3_challenger::serializing_challenger::SerializingChallenger32")
                                        []
                                        [ F; Inner ],
                                      [],
                                      [],
                                      "check_witness",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| self |) |)
                                      |);
                                      M.read (| bits |);
                                      M.read (| witness |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic", [], [] |),
                                [ mk_str (| "assertion failed: self.check_witness(bits, witness)" |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                witness
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::grinding_challenger::GrindingChallenger"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F Inner)
        (* Instance *)
        [
          ("Witness", InstanceField.Ty (_Witness F Inner));
          ("grind", InstanceField.Method (grind F Inner))
        ].
  End Impl_p3_challenger_grinding_challenger_GrindingChallenger_where_p3_field_field_PrimeField32_F_where_p3_challenger_CanSample_Inner_u8_where_p3_challenger_CanObserve_Inner_u8_where_core_clone_Clone_Inner_where_core_marker_Send_Inner_where_core_marker_Sync_Inner_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
  
  Module Impl_p3_challenger_FieldChallenger_where_p3_field_field_PrimeField32_F_where_p3_challenger_CanSample_Inner_u8_where_p3_challenger_CanObserve_Inner_u8_where_core_clone_Clone_Inner_where_core_marker_Send_Inner_where_core_marker_Sync_Inner_F_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
        []
        [ F; Inner ].
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::FieldChallenger"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F Inner)
        (* Instance *) [].
  End Impl_p3_challenger_FieldChallenger_where_p3_field_field_PrimeField32_F_where_p3_challenger_CanSample_Inner_u8_where_p3_challenger_CanObserve_Inner_u8_where_core_clone_Clone_Inner_where_core_marker_Send_Inner_where_core_marker_Sync_Inner_F_for_p3_challenger_serializing_challenger_SerializingChallenger32_F_Inner.
  
  Module Impl_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
        []
        [ F; Inner ].
    
    (*
        pub const fn new(inner: Inner) -> Self {
            Self {
                inner,
                _marker: PhantomData,
            }
        }
    *)
    Definition new (F Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [], [ inner ] =>
        ltac:(M.monadic
          (let inner := M.alloc (| inner |) in
          Value.StructRecord
            "p3_challenger::serializing_challenger::SerializingChallenger64"
            [
              ("inner", M.read (| inner |));
              ("_marker", Value.StructTuple "core::marker::PhantomData" [])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (F Inner : Ty.t),
      M.IsAssociatedFunction.C (Self F Inner) "new" (new F Inner).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
  
  Module Impl_p3_challenger_serializing_challenger_SerializingChallenger64_F_p3_challenger_hash_challenger_HashChallenger_Usize_32_u8_H.
    Definition Self (F H : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
        []
        [
          F;
          Ty.apply
            (Ty.path "p3_challenger::hash_challenger::HashChallenger")
            [ Value.Integer IntegerKind.Usize 32 ]
            [ Ty.path "u8"; H ]
        ].
    
    (*
        pub const fn from_hasher(initial_state: Vec<u8>, hasher: H) -> Self {
            Self::new(HashChallenger::new(initial_state, hasher))
        }
    *)
    Definition from_hasher (F H : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F H in
      match ε, τ, α with
      | [], [], [ initial_state; hasher ] =>
        ltac:(M.monadic
          (let initial_state := M.alloc (| initial_state |) in
          let hasher := M.alloc (| hasher |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
              []
              [
                F;
                Ty.apply
                  (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                  [ Value.Integer IntegerKind.Usize 32 ]
                  [ Ty.path "u8"; H ]
              ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
                []
                [
                  F;
                  Ty.apply
                    (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                    [ Value.Integer IntegerKind.Usize 32 ]
                    [ Ty.path "u8"; H ]
                ],
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                  [ Value.Integer IntegerKind.Usize 32 ]
                  [ Ty.path "u8"; H ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                    [ Value.Integer IntegerKind.Usize 32 ]
                    [ Ty.path "u8"; H ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| initial_state |); M.read (| hasher |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_from_hasher :
      forall (F H : Ty.t),
      M.IsAssociatedFunction.C (Self F H) "from_hasher" (from_hasher F H).
    Admitted.
    Global Typeclasses Opaque from_hasher.
  End Impl_p3_challenger_serializing_challenger_SerializingChallenger64_F_p3_challenger_hash_challenger_HashChallenger_Usize_32_u8_H.
  
  Module Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField64_F_where_p3_challenger_CanObserve_Inner_u8_F_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
        []
        [ F; Inner ].
    
    (*
        fn observe(&mut self, value: F) {
            self.inner
                .observe_slice(&value.to_unique_u64().to_le_bytes());
        }
    *)
    Definition observe (F Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [], [ self; value ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let value := M.alloc (| value |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_challenger::CanObserve",
                    Inner,
                    [],
                    [ Ty.path "u8" ],
                    "observe_slice",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_challenger::serializing_challenger::SerializingChallenger64",
                        "inner"
                      |)
                    |);
                    (* Unsize *)
                    M.pointer_coercion
                      (M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [ Ty.path "u8" ],
                                M.get_associated_function (|
                                  Ty.path "u64",
                                  "to_le_bytes",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "u64",
                                    M.get_trait_method (|
                                      "p3_field::field::PrimeField64",
                                      F,
                                      [],
                                      [],
                                      "to_unique_u64",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, value |) ]
                                  |)
                                ]
                              |)
                            |)
                          |)
                        |)
                      |))
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanObserve"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F Inner)
        (* Instance *) [ ("observe", InstanceField.Method (observe F Inner)) ].
  End Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField64_F_where_p3_challenger_CanObserve_Inner_u8_F_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
  
  Module Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField64_F_where_p3_challenger_CanObserve_Inner_u8_p3_symmetric_hash_Hash_N_F_u8_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
    Definition Self (N : Value.t) (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
        []
        [ F; Inner ].
    
    (*
        fn observe(&mut self, values: Hash<F, u8, N>) {
            for value in values {
                self.inner.observe(value);
            }
        }
    *)
    Definition observe
        (N : Value.t)
        (F Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N F Inner in
      match ε, τ, α with
      | [], [], [ self; values ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let values := M.alloc (| values |) in
          M.read (|
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::array::iter::IntoIter") [ N ] [ Ty.path "u8" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ N ] [ F; Ty.path "u8" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| values |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u8" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ N ]
                                      [ Ty.path "u8" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "p3_challenger::CanObserve",
                                            Inner,
                                            [],
                                            [ Ty.path "u8" ],
                                            "observe",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "p3_challenger::serializing_challenger::SerializingChallenger64",
                                                "inner"
                                              |)
                                            |);
                                            M.read (| value |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N : Value.t) (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanObserve"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ N ] [ F; Ty.path "u8" ] ]
        (Self N F Inner)
        (* Instance *) [ ("observe", InstanceField.Method (observe N F Inner)) ].
  End Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField64_F_where_p3_challenger_CanObserve_Inner_u8_p3_symmetric_hash_Hash_N_F_u8_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
  
  Module Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField64_F_where_p3_challenger_CanObserve_Inner_u8_p3_symmetric_hash_Hash_N_F_u64_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
    Definition Self (N : Value.t) (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
        []
        [ F; Inner ].
    
    (*
        fn observe(&mut self, values: Hash<F, u64, N>) {
            for value in values {
                self.inner.observe_slice(&value.to_le_bytes());
            }
        }
    *)
    Definition observe
        (N : Value.t)
        (F Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self N F Inner in
      match ε, τ, α with
      | [], [], [ self; values ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let values := M.alloc (| values |) in
          M.read (|
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::array::iter::IntoIter") [ N ] [ Ty.path "u64" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ N ] [ F; Ty.path "u64" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| values |) ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ N ]
                                      [ Ty.path "u64" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let value := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "p3_challenger::CanObserve",
                                            Inner,
                                            [],
                                            [ Ty.path "u8" ],
                                            "observe_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "p3_challenger::serializing_challenger::SerializingChallenger64",
                                                "inner"
                                              |)
                                            |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 8 ]
                                                          [ Ty.path "u8" ],
                                                        M.get_associated_function (|
                                                          Ty.path "u64",
                                                          "to_le_bytes",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| value |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |))
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (N : Value.t) (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanObserve"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "p3_symmetric::hash::Hash") [ N ] [ F; Ty.path "u64" ] ]
        (Self N F Inner)
        (* Instance *) [ ("observe", InstanceField.Method (observe N F Inner)) ].
  End Impl_p3_challenger_CanObserve_where_p3_field_field_PrimeField64_F_where_p3_challenger_CanObserve_Inner_u8_p3_symmetric_hash_Hash_N_F_u64_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
  
  Module Impl_p3_challenger_CanSample_where_p3_field_field_PrimeField64_F_where_p3_field_field_BasedVectorSpace_EF_F_where_p3_challenger_CanSample_Inner_u8_EF_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
    Definition Self (F EF Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
        []
        [ F; Inner ].
    
    (*
        fn sample(&mut self) -> EF {
            let modulus = F::ORDER_U64;
            let log_size = log2_ceil_u64(F::ORDER_U64) as u32;
            // We use u128 to avoid overflow in the case that log_size = 64.
            let pow_of_two_bound = ((1u128 << log_size) - 1) as u64;
    
            // Perform rejection sampling over the uniform range (0..log2_ceil(p))
            let sample_base = |inner: &mut Inner| loop {
                let value = u64::from_le_bytes(inner.sample_array());
                let value = value & pow_of_two_bound;
                if value < modulus {
                    return unsafe {
                        // This is safe as value < F::ORDER_U64.
                        F::from_canonical_unchecked(value)
                    };
                }
            };
            EF::from_basis_coefficients_fn(|_| sample_base(&mut self.inner))
        }
    *)
    Definition sample
        (F EF Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F EF Inner in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ modulus : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.copy (|
                get_constant (| "p3_field::field::PrimeField64::ORDER_U64", Ty.path "u64" |)
              |) in
            let~ log_size : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "u32")
                  (M.call_closure (|
                    Ty.path "u64",
                    M.get_function (| "p3_util::log2_ceil_u64", [], [] |),
                    [
                      M.read (|
                        get_constant (| "p3_field::field::PrimeField64::ORDER_U64", Ty.path "u64" |)
                      |)
                    ]
                  |))
              |) in
            let~ pow_of_two_bound : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "u64")
                  (M.call_closure (|
                    Ty.path "u128",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "u128",
                        BinOp.Wrap.shl,
                        [ Value.Integer IntegerKind.U128 1; M.read (| log_size |) ]
                      |);
                      Value.Integer IntegerKind.U128 1
                    ]
                  |))
              |) in
            let~ sample_base :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.function [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ Inner ] ] ] F ] :=
              M.alloc (|
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path "*")
                              []
                              [
                                Ty.function
                                  [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ Inner ] ] ]
                                  F
                              ],
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let inner := M.copy (| γ |) in
                                  M.never_to_any (|
                                    M.read (|
                                      M.loop (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                        ltac:(M.monadic
                                          (let~ value :
                                              Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "u64",
                                                M.get_associated_function (|
                                                  Ty.path "u64",
                                                  "from_le_bytes",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 8 ]
                                                      [ Ty.path "u8" ],
                                                    M.get_trait_method (|
                                                      "p3_challenger::CanSample",
                                                      Inner,
                                                      [],
                                                      [ Ty.path "u8" ],
                                                      "sample_array",
                                                      [ Value.Integer IntegerKind.Usize 8 ],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| inner |) |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let~ value :
                                              Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.bit_and,
                                                [ M.read (| value |); M.read (| pow_of_two_bound |)
                                                ]
                                              |)
                                            |) in
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.lt,
                                                          [ M.read (| value |); M.read (| modulus |)
                                                          ]
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            F,
                                                            M.get_trait_method (|
                                                              "p3_field::integers::QuotientMap",
                                                              F,
                                                              [],
                                                              [ Ty.path "u64" ],
                                                              "from_canonical_unchecked",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.read (| value |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)))
                                      |)
                                    |)
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              |) in
            M.alloc (|
              M.call_closure (|
                EF,
                M.get_trait_method (|
                  "p3_field::field::BasedVectorSpace",
                  EF,
                  [],
                  [ F ],
                  "from_basis_coefficients_fn",
                  [],
                  [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] F ]
                |),
                [
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] F ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      F,
                                      M.get_trait_method (|
                                        "core::ops::function::Fn",
                                        Ty.function
                                          [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ Inner ] ] ]
                                          F,
                                        [],
                                        [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ Inner ] ] ],
                                        "call",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, sample_base |);
                                        Value.Tuple
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "p3_challenger::serializing_challenger::SerializingChallenger64",
                                                    "inner"
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F EF Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanSample"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ EF ]
        (Self F EF Inner)
        (* Instance *) [ ("sample", InstanceField.Method (sample F EF Inner)) ].
  End Impl_p3_challenger_CanSample_where_p3_field_field_PrimeField64_F_where_p3_field_field_BasedVectorSpace_EF_F_where_p3_challenger_CanSample_Inner_u8_EF_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
  
  Module Impl_p3_challenger_CanSampleBits_where_p3_field_field_PrimeField64_F_where_p3_challenger_CanSample_Inner_u8_usize_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
        []
        [ F; Inner ].
    
    (*
        fn sample_bits(&mut self, bits: usize) -> usize {
            assert!(bits < (usize::BITS as usize));
            // Limiting the number of bits to the field size
            assert!((1 << bits) <= F::ORDER_U64 as usize);
            let rand_usize = u64::from_le_bytes(self.inner.sample_array()) as usize;
            rand_usize & ((1 << bits) - 1)
        }
    *)
    Definition sample_bits
        (F Inner : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [], [ self; bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let bits := M.alloc (| bits |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.lt,
                                [
                                  M.read (| bits |);
                                  M.cast
                                    (Ty.path "usize")
                                    (M.read (|
                                      get_associated_constant (|
                                        Ty.path "usize",
                                        "BITS",
                                        Ty.path "u32"
                                      |)
                                    |))
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: bits < (usize::BITS as usize)" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.le,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.shl,
                                    [ Value.Integer IntegerKind.Usize 1; M.read (| bits |) ]
                                  |);
                                  M.cast
                                    (Ty.path "usize")
                                    (M.read (|
                                      get_constant (|
                                        "p3_field::field::PrimeField64::ORDER_U64",
                                        Ty.path "u64"
                                      |)
                                    |))
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: (1 << bits) <= F::ORDER_U64 as usize" |)
                            ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ rand_usize : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "usize")
                  (M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (| Ty.path "u64", "from_le_bytes", [], [] |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [ Ty.path "u8" ],
                        M.get_trait_method (|
                          "p3_challenger::CanSample",
                          Inner,
                          [],
                          [ Ty.path "u8" ],
                          "sample_array",
                          [ Value.Integer IntegerKind.Usize 8 ],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_challenger::serializing_challenger::SerializingChallenger64",
                              "inner"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |))
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.bit_and,
                [
                  M.read (| rand_usize |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.shl,
                        [ Value.Integer IntegerKind.Usize 1; M.read (| bits |) ]
                      |);
                      Value.Integer IntegerKind.Usize 1
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::CanSampleBits"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "usize" ]
        (Self F Inner)
        (* Instance *) [ ("sample_bits", InstanceField.Method (sample_bits F Inner)) ].
  End Impl_p3_challenger_CanSampleBits_where_p3_field_field_PrimeField64_F_where_p3_challenger_CanSample_Inner_u8_usize_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
  
  Module Impl_p3_challenger_grinding_challenger_GrindingChallenger_where_p3_field_field_PrimeField64_F_where_p3_challenger_CanSample_Inner_u8_where_p3_challenger_CanObserve_Inner_u8_where_core_clone_Clone_Inner_where_core_marker_Send_Inner_where_core_marker_Sync_Inner_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
        []
        [ F; Inner ].
    
    (*     type Witness = F; *)
    Definition _Witness (F Inner : Ty.t) : Ty.t := F.
    
    (*     #[instrument(name = "grind for proof-of-work witness", skip_all)] *)
    Definition grind (F Inner : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F Inner in
      match ε, τ, α with
      | [], [], [ self; bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let bits := M.alloc (| bits |) in
          M.catch_return
            (Ty.associated_in_trait
              "p3_challenger::grinding_challenger::GrindingChallenger"
              []
              []
              (Ty.apply
                (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
                []
                [ F; Inner ])
              "Witness") (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (| Value.Tuple [] |) in
                let __tracing_attr_span := M.copy (| Value.DeclaredButUndefined |) in
                let __tracing_attr_guard := M.copy (| Value.DeclaredButUndefined |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.or (|
                                  LogicalOp.and (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "INFO",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_constant (|
                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                            Ty.path "tracing_core::metadata::LevelFilter"
                                          |)
                                        |)
                                      ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialOrd",
                                          Ty.path "tracing_core::metadata::Level",
                                          [],
                                          [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                          "le",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_associated_constant (|
                                              Ty.path "tracing_core::metadata::Level",
                                              "INFO",
                                              Ty.path "tracing_core::metadata::Level"
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::metadata::LevelFilter",
                                                  "current",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                  |),
                                  ltac:(M.monadic (Value.Bool false))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                __tracing_attr_span,
                                M.read (|
                                  let~ interest :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [ Ty.path "tracing_core::subscriber::Interest" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        M.get_associated_function (|
                                          Ty.path "tracing_core::subscriber::Interest",
                                          "never",
                                          [],
                                          []
                                        |),
                                        []
                                      |)
                                    |) in
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.path "tracing::span::Span" ],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    LogicalOp.and (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "INFO",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_constant (|
                                                              "tracing::level_filters::STATIC_MAX_LEVEL",
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            |)
                                                          |)
                                                        ]
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "tracing_core::metadata::Level",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            ],
                                                            "le",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_associated_constant (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                "INFO",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter",
                                                                    "current",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)))
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.read (|
                                                        let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.alloc (|
                                                            M.write (|
                                                              interest,
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  "interest",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "p3_challenger::serializing_challenger::grind::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |) in
                                                        M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                "is_never",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  interest
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_function (|
                                                        "tracing::__macro_support::__is_enabled",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "p3_challenger::serializing_challenger::grind::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.read (| interest |)
                                                      ]
                                                    |)))
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          let~ meta :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "tracing_core::metadata::Metadata" ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ],
                                                M.get_trait_method (|
                                                  "tracing_core::callsite::Callsite",
                                                  Ty.path "tracing_core::callsite::DefaultCallsite",
                                                  [],
                                                  [],
                                                  "metadata",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_challenger::serializing_challenger::grind::__CALLSITE",
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite"
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing::span::Span",
                                              M.get_associated_function (|
                                                Ty.path "tracing::span::Span",
                                                "new",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| meta |) |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "tracing_core::field::ValueSet",
                                                          M.get_associated_function (|
                                                            Ty.path "tracing_core::field::FieldSet",
                                                            "value_set",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 0
                                                                ]
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::Field"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("tracing_core::field::Value::Trait",
                                                                                    [])
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::field::FieldSet"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata",
                                                                    "fields",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| meta |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (| Value.Array [] |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let~ span :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.path "tracing::span::Span" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "tracing::span::Span",
                                                M.get_function (|
                                                  "tracing::__macro_support::__disabled_span",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::Metadata"
                                                          ],
                                                        M.get_trait_method (|
                                                          "tracing_core::callsite::Callsite",
                                                          Ty.path
                                                            "tracing_core::callsite::DefaultCallsite",
                                                          [],
                                                          [],
                                                          "metadata",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_challenger::serializing_challenger::grind::__CALLSITE",
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::callsite::DefaultCallsite"
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                            M.alloc (| Value.Tuple [] |) in
                                          span))
                                    ]
                                  |)
                                |)
                              |)
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                __tracing_attr_guard,
                                M.call_closure (|
                                  Ty.path "tracing::span::Entered",
                                  M.get_associated_function (|
                                    Ty.path "tracing::span::Span",
                                    "enter",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Value.Bool false |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ __tracing_attr_fake_return : Ty.apply (Ty.path "*") [] [ F ] :=
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.loop (|
                                          Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                          ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        |)
                                      |)
                                    |)
                                  |) in
                                M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.lt,
                                    [
                                      M.read (| bits |);
                                      M.cast
                                        (Ty.path "usize")
                                        (M.read (|
                                          get_associated_constant (|
                                            Ty.path "usize",
                                            "BITS",
                                            Ty.path "u32"
                                          |)
                                        |))
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic", [], [] |),
                                [ mk_str (| "assertion failed: bits < (usize::BITS as usize)" |) ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.lt,
                                    [
                                      M.call_closure (|
                                        Ty.path "u64",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.U64 1; M.read (| bits |) ]
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "p3_field::field::PrimeField64::ORDER_U64",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic", [], [] |),
                                [ mk_str (| "assertion failed: (1 << bits) < F::ORDER_U64" |) ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ witness : Ty.apply (Ty.path "*") [] [ F ] :=
                  M.alloc (|
                    M.call_closure (|
                      F,
                      M.get_associated_function (|
                        Ty.apply (Ty.path "core::option::Option") [] [ F ],
                        "expect",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "core::option::Option") [] [ F ],
                          M.get_trait_method (|
                            "p3_maybe_rayon::serial::ParIterExt",
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "u64" ];
                                Ty.function [ Ty.tuple [ Ty.path "u64" ] ] F
                              ],
                            [],
                            [],
                            "find_any",
                            [],
                            [
                              Ty.function
                                [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ F ] ] ]
                                (Ty.path "bool")
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "u64" ];
                                  Ty.function [ Ty.tuple [ Ty.path "u64" ] ] F
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "u64" ],
                                [],
                                [],
                                "map",
                                [],
                                [ F; Ty.function [ Ty.tuple [ Ty.path "u64" ] ] F ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "u64" ],
                                  M.get_trait_method (|
                                    "p3_maybe_rayon::serial::IntoParallelIterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "u64" ],
                                    [],
                                    [],
                                    "into_par_iter",
                                    [],
                                    []
                                  |),
                                  [
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start", Value.Integer IntegerKind.U64 0);
                                        ("end_",
                                          M.read (|
                                            get_constant (|
                                              "p3_field::field::PrimeField64::ORDER_U64",
                                              Ty.path "u64"
                                            |)
                                          |))
                                      ]
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.function [ Ty.tuple [ Ty.path "u64" ] ] F ],
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let i := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    F,
                                                    M.get_trait_method (|
                                                      "p3_field::integers::QuotientMap",
                                                      F,
                                                      [],
                                                      [ Ty.path "u64" ],
                                                      "from_canonical_unchecked",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| i |) ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.function
                                              [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ F ] ] ]
                                              (Ty.path "bool")
                                          ],
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let witness := M.copy (| γ |) in
                                              M.call_closure (|
                                                Ty.path "bool",
                                                M.get_trait_method (|
                                                  "p3_challenger::grinding_challenger::GrindingChallenger",
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_challenger::serializing_challenger::SerializingChallenger64")
                                                    []
                                                    [ F; Inner ],
                                                  [],
                                                  [],
                                                  "check_witness",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_challenger::serializing_challenger::SerializingChallenger64")
                                                          []
                                                          [ F; Inner ],
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_challenger::serializing_challenger::SerializingChallenger64")
                                                            []
                                                            [ F; Inner ],
                                                          [],
                                                          [],
                                                          "clone",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| self |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.read (| bits |);
                                                  M.read (| M.deref (| M.read (| witness |) |) |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "failed to find witness" |) |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "p3_challenger::grinding_challenger::GrindingChallenger",
                                      Ty.apply
                                        (Ty.path
                                          "p3_challenger::serializing_challenger::SerializingChallenger64")
                                        []
                                        [ F; Inner ],
                                      [],
                                      [],
                                      "check_witness",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| self |) |)
                                      |);
                                      M.read (| bits |);
                                      M.read (| witness |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic", [], [] |),
                                [ mk_str (| "assertion failed: self.check_witness(bits, witness)" |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                witness
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::grinding_challenger::GrindingChallenger"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F Inner)
        (* Instance *)
        [
          ("Witness", InstanceField.Ty (_Witness F Inner));
          ("grind", InstanceField.Method (grind F Inner))
        ].
  End Impl_p3_challenger_grinding_challenger_GrindingChallenger_where_p3_field_field_PrimeField64_F_where_p3_challenger_CanSample_Inner_u8_where_p3_challenger_CanObserve_Inner_u8_where_core_clone_Clone_Inner_where_core_marker_Send_Inner_where_core_marker_Sync_Inner_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
  
  Module Impl_p3_challenger_FieldChallenger_where_p3_field_field_PrimeField64_F_where_p3_challenger_CanSample_Inner_u8_where_p3_challenger_CanObserve_Inner_u8_where_core_clone_Clone_Inner_where_core_marker_Send_Inner_where_core_marker_Sync_Inner_F_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
    Definition Self (F Inner : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger64")
        []
        [ F; Inner ].
    
    Axiom Implements :
      forall (F Inner : Ty.t),
      M.IsTraitInstance
        "p3_challenger::FieldChallenger"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F Inner)
        (* Instance *) [].
  End Impl_p3_challenger_FieldChallenger_where_p3_field_field_PrimeField64_F_where_p3_challenger_CanSample_Inner_u8_where_p3_challenger_CanObserve_Inner_u8_where_core_clone_Clone_Inner_where_core_marker_Send_Inner_where_core_marker_Sync_Inner_F_for_p3_challenger_serializing_challenger_SerializingChallenger64_F_Inner.
End serializing_challenger.
