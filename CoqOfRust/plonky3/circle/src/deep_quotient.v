(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module deep_quotient.
  (*
  pub(crate) fn deep_quotient_vanishing_part<F: ComplexExtendable, EF: ExtensionField<F>>(
      x: Point<F>,
      zeta: Point<EF>,
      alpha_pow_width: EF,
  ) -> (EF, EF) {
      let (re_v_zeta, im_v_zeta) = x.v_p(zeta);
      (
          re_v_zeta - alpha_pow_width * im_v_zeta,
          re_v_zeta.square() + im_v_zeta.square(),
      )
  }
  *)
  Definition deep_quotient_vanishing_part
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F; EF ], [ x; zeta; alpha_pow_width ] =>
      ltac:(M.monadic
        (let x := M.alloc (| x |) in
        let zeta := M.alloc (| zeta |) in
        let alpha_pow_width := M.alloc (| alpha_pow_width |) in
        M.read (|
          M.match_operator (|
            Ty.apply (Ty.path "*") [] [ Ty.tuple [ EF; EF ] ],
            M.alloc (|
              M.call_closure (|
                Ty.tuple [ EF; EF ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
                  "v_p",
                  [],
                  [ EF ]
                |),
                [ M.read (| x |); M.read (| zeta |) ]
              |)
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let re_v_zeta := M.copy (| γ0_0 |) in
                  let im_v_zeta := M.copy (| γ0_1 |) in
                  M.alloc (|
                    Value.Tuple
                      [
                        M.call_closure (|
                          EF,
                          M.get_trait_method (|
                            "core::ops::arith::Sub",
                            EF,
                            [],
                            [ EF ],
                            "sub",
                            [],
                            []
                          |),
                          [
                            M.read (| re_v_zeta |);
                            M.call_closure (|
                              EF,
                              M.get_trait_method (|
                                "core::ops::arith::Mul",
                                EF,
                                [],
                                [ EF ],
                                "mul",
                                [],
                                []
                              |),
                              [ M.read (| alpha_pow_width |); M.read (| im_v_zeta |) ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          EF,
                          M.get_trait_method (|
                            "core::ops::arith::Add",
                            EF,
                            [],
                            [ EF ],
                            "add",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              EF,
                              M.get_trait_method (|
                                "p3_field::field::PrimeCharacteristicRing",
                                EF,
                                [],
                                [],
                                "square",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, re_v_zeta |) ]
                            |);
                            M.call_closure (|
                              EF,
                              M.get_trait_method (|
                                "p3_field::field::PrimeCharacteristicRing",
                                EF,
                                [],
                                [],
                                "square",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, im_v_zeta |) ]
                            |)
                          ]
                        |)
                      ]
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_deep_quotient_vanishing_part :
    M.IsFunction.C
      "p3_circle::deep_quotient::deep_quotient_vanishing_part"
      deep_quotient_vanishing_part.
  Admitted.
  Global Typeclasses Opaque deep_quotient_vanishing_part.
  
  (*
  pub(crate) fn deep_quotient_reduce_row<F: ComplexExtendable, EF: ExtensionField<F>>(
      alpha: EF,
      x: Point<F>,
      zeta: Point<EF>,
      ps_at_x: &[F],
      ps_at_zeta: &[EF],
  ) -> EF {
      let (vp_num, vp_denom) =
          deep_quotient_vanishing_part(x, zeta, alpha.exp_u64(ps_at_x.len() as u64));
      (vp_num / vp_denom)
          * dot_product::<EF, _, _>(
              alpha.powers(),
              izip!(ps_at_x, ps_at_zeta).map(|(&p_at_x, &p_at_zeta)| -p_at_zeta + p_at_x),
          )
  }
  *)
  Definition deep_quotient_reduce_row (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; EF ], [ alpha; x; zeta; ps_at_x; ps_at_zeta ] =>
      ltac:(M.monadic
        (let alpha := M.alloc (| alpha |) in
        let x := M.alloc (| x |) in
        let zeta := M.alloc (| zeta |) in
        let ps_at_x := M.alloc (| ps_at_x |) in
        let ps_at_zeta := M.alloc (| ps_at_zeta |) in
        M.read (|
          M.match_operator (|
            Ty.apply (Ty.path "*") [] [ EF ],
            M.alloc (|
              M.call_closure (|
                Ty.tuple [ EF; EF ],
                M.get_function (|
                  "p3_circle::deep_quotient::deep_quotient_vanishing_part",
                  [],
                  [ F; EF ]
                |),
                [
                  M.read (| x |);
                  M.read (| zeta |);
                  M.call_closure (|
                    EF,
                    M.get_trait_method (|
                      "p3_field::field::PrimeCharacteristicRing",
                      EF,
                      [],
                      [],
                      "exp_u64",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, alpha |);
                      M.cast
                        (Ty.path "u64")
                        (M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ F ],
                            "len",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| ps_at_x |) |) |) ]
                        |))
                    ]
                  |)
                ]
              |)
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let vp_num := M.copy (| γ0_0 |) in
                  let vp_denom := M.copy (| γ0_1 |) in
                  M.alloc (|
                    M.call_closure (|
                      EF,
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        EF,
                        [],
                        [ EF ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          EF,
                          M.get_trait_method (|
                            "core::ops::arith::Div",
                            EF,
                            [],
                            [ EF ],
                            "div",
                            [],
                            []
                          |),
                          [ M.read (| vp_num |); M.read (| vp_denom |) ]
                        |);
                        M.call_closure (|
                          EF,
                          M.get_function (|
                            "p3_field::helpers::dot_product",
                            [],
                            [
                              EF;
                              Ty.apply (Ty.path "p3_field::field::Powers") [] [ EF ];
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply (Ty.path "&") [] [ F ];
                                              Ty.apply (Ty.path "&") [] [ EF ]
                                            ]
                                        ]
                                    ]
                                    EF
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "p3_field::field::Powers") [] [ EF ],
                              M.get_trait_method (|
                                "p3_field::field::PrimeCharacteristicRing",
                                EF,
                                [],
                                [],
                                "powers",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, alpha |) ]
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply (Ty.path "&") [] [ F ];
                                              Ty.apply (Ty.path "&") [] [ EF ]
                                            ]
                                        ]
                                    ]
                                    EF
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  []
                                  [
                                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ]
                                  ],
                                [],
                                [],
                                "map",
                                [],
                                [
                                  EF;
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply (Ty.path "&") [] [ F ];
                                              Ty.apply (Ty.path "&") [] [ EF ]
                                            ]
                                        ]
                                    ]
                                    EF
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                    [],
                                    [],
                                    "zip",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ EF ] ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                        [],
                                        [],
                                        "into_iter",
                                        [],
                                        []
                                      |),
                                      [ M.read (| ps_at_x |) ]
                                    |);
                                    M.read (| ps_at_zeta |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply (Ty.path "&") [] [ F ];
                                                            Ty.apply (Ty.path "&") [] [ EF ]
                                                          ]
                                                      ]
                                                  ]
                                                  EF
                                              ],
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let γ0_0 := M.read (| γ0_0 |) in
                                                  let p_at_x := M.copy (| γ0_0 |) in
                                                  let γ0_1 := M.read (| γ0_1 |) in
                                                  let p_at_zeta := M.copy (| γ0_1 |) in
                                                  M.call_closure (|
                                                    EF,
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      EF,
                                                      [],
                                                      [ F ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        EF,
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Neg",
                                                          EF,
                                                          [],
                                                          [],
                                                          "neg",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| p_at_zeta |) ]
                                                      |);
                                                      M.read (| p_at_x |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_deep_quotient_reduce_row :
    M.IsFunction.C "p3_circle::deep_quotient::deep_quotient_reduce_row" deep_quotient_reduce_row.
  Admitted.
  Global Typeclasses Opaque deep_quotient_reduce_row.
  
  Module Impl_p3_circle_cfft_CircleEvaluations_F_M_.
    Definition Self (F M_ : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_circle::cfft::CircleEvaluations") [] [ F; M_ ].
    
    (*     #[instrument(skip_all, fields(dims = %self.values.dimensions()))] *)
    Definition deep_quotient_reduce
        (F M_ : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F M_ in
      match ε, τ, α with
      | [], [ EF ], [ self; alpha; zeta; ps_at_zeta ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let alpha := M.alloc (| alpha |) in
          let zeta := M.alloc (| zeta |) in
          let ps_at_zeta := M.alloc (| ps_at_zeta |) in
          M.catch_return
            (Ty.apply (Ty.path "alloc::vec::Vec") [] [ EF; Ty.path "alloc::alloc::Global" ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (| Value.Tuple [] |) in
                let __tracing_attr_span := M.copy (| Value.DeclaredButUndefined |) in
                let __tracing_attr_guard := M.copy (| Value.DeclaredButUndefined |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.or (|
                                  LogicalOp.and (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "INFO",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_constant (|
                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                            Ty.path "tracing_core::metadata::LevelFilter"
                                          |)
                                        |)
                                      ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialOrd",
                                          Ty.path "tracing_core::metadata::Level",
                                          [],
                                          [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                          "le",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_associated_constant (|
                                              Ty.path "tracing_core::metadata::Level",
                                              "INFO",
                                              Ty.path "tracing_core::metadata::Level"
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::metadata::LevelFilter",
                                                  "current",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                  |),
                                  ltac:(M.monadic (Value.Bool false))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                __tracing_attr_span,
                                M.read (|
                                  let~ interest :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [ Ty.path "tracing_core::subscriber::Interest" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        M.get_associated_function (|
                                          Ty.path "tracing_core::subscriber::Interest",
                                          "never",
                                          [],
                                          []
                                        |),
                                        []
                                      |)
                                    |) in
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.path "tracing::span::Span" ],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    LogicalOp.and (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "INFO",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_constant (|
                                                              "tracing::level_filters::STATIC_MAX_LEVEL",
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            |)
                                                          |)
                                                        ]
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "tracing_core::metadata::Level",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            ],
                                                            "le",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_associated_constant (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                "INFO",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter",
                                                                    "current",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)))
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.read (|
                                                        let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.alloc (|
                                                            M.write (|
                                                              interest,
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  "interest",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "p3_circle::deep_quotient::deep_quotient_reduce::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |) in
                                                        M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                "is_never",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  interest
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_function (|
                                                        "tracing::__macro_support::__is_enabled",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "p3_circle::deep_quotient::deep_quotient_reduce::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.read (| interest |)
                                                      ]
                                                    |)))
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          let~ meta :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "tracing_core::metadata::Metadata" ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ],
                                                M.get_trait_method (|
                                                  "tracing_core::callsite::Callsite",
                                                  Ty.path "tracing_core::callsite::DefaultCallsite",
                                                  [],
                                                  [],
                                                  "metadata",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_circle::deep_quotient::deep_quotient_reduce::__CALLSITE",
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite"
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing::span::Span",
                                              M.get_associated_function (|
                                                Ty.path "tracing::span::Span",
                                                "new",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| meta |) |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      let~ iter :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.path "tracing_core::field::Iter"
                                                            ] :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.path "tracing_core::field::Iter",
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::field::FieldSet",
                                                              "iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::FieldSet"
                                                                      ],
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::metadata::Metadata",
                                                                      "fields",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| meta |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "tracing_core::field::ValueSet",
                                                          M.get_associated_function (|
                                                            Ty.path "tracing_core::field::FieldSet",
                                                            "value_set",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 1
                                                                ]
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::Field"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("tracing_core::field::Value::Trait",
                                                                                    [])
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::field::FieldSet"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata",
                                                                    "fields",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| meta |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        Value.Tuple
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  Ty.path
                                                                                    "tracing_core::field::Field",
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::field::Field"
                                                                                      ],
                                                                                    "expect",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "tracing_core::field::Field"
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                        Ty.path
                                                                                          "tracing_core::field::Iter",
                                                                                        [],
                                                                                        [],
                                                                                        "next",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              iter
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        mk_str (|
                                                                                          "FieldSet corrupted (this is a bug)"
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            Value.StructTuple
                                                                              "core::option::Option::Some"
                                                                              [
                                                                                M.read (|
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      (* Unsize *)
                                                                                      M.pointer_coercion
                                                                                        (M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "tracing_core::field::DisplayValue")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "p3_matrix::Dimensions"
                                                                                                        ]
                                                                                                    ],
                                                                                                  M.get_function (|
                                                                                                    "tracing_core::field::display",
                                                                                                    [],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "p3_matrix::Dimensions"
                                                                                                        ]
                                                                                                    ]
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.alloc (|
                                                                                                        M.call_closure (|
                                                                                                          Ty.path
                                                                                                            "p3_matrix::Dimensions",
                                                                                                          M.get_trait_method (|
                                                                                                            "p3_matrix::Matrix",
                                                                                                            M_,
                                                                                                            [],
                                                                                                            [
                                                                                                              F
                                                                                                            ],
                                                                                                            "dimensions",
                                                                                                            [],
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                M.deref (|
                                                                                                                  M.read (|
                                                                                                                    self
                                                                                                                  |)
                                                                                                                |),
                                                                                                                "p3_circle::cfft::CircleEvaluations",
                                                                                                                "values"
                                                                                                              |)
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |))
                                                                                    |))
                                                                                |)
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let~ span :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [ Ty.path "tracing::span::Span" ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "tracing::span::Span",
                                                M.get_function (|
                                                  "tracing::__macro_support::__disabled_span",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::Metadata"
                                                          ],
                                                        M.get_trait_method (|
                                                          "tracing_core::callsite::Callsite",
                                                          Ty.path
                                                            "tracing_core::callsite::DefaultCallsite",
                                                          [],
                                                          [],
                                                          "metadata",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_circle::deep_quotient::deep_quotient_reduce::__CALLSITE",
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::callsite::DefaultCallsite"
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                            M.alloc (| Value.Tuple [] |) in
                                          span))
                                    ]
                                  |)
                                |)
                              |)
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                __tracing_attr_guard,
                                M.call_closure (|
                                  Ty.path "tracing::span::Entered",
                                  M.get_associated_function (|
                                    Ty.path "tracing::span::Span",
                                    "enter",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Value.Bool false |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ __tracing_attr_fake_return :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ EF; Ty.path "alloc::alloc::Global" ]
                                      ] :=
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.loop (|
                                          Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                          ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        |)
                                      |)
                                    |)
                                  |) in
                                M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ alpha_pow_width : Ty.apply (Ty.path "*") [] [ EF ] :=
                  M.alloc (|
                    M.call_closure (|
                      EF,
                      M.get_trait_method (|
                        "p3_field::field::PrimeCharacteristicRing",
                        EF,
                        [],
                        [],
                        "exp_u64",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, alpha |);
                        M.cast
                          (Ty.path "u64")
                          (M.call_closure (|
                            Ty.path "usize",
                            M.get_trait_method (|
                              "p3_matrix::Matrix",
                              M_,
                              [],
                              [ F ],
                              "width",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "p3_circle::cfft::CircleEvaluations",
                                  "values"
                                |)
                              |)
                            ]
                          |))
                      ]
                    |)
                  |) in
                let~ points :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_function (|
                        "p3_circle::ordering::cfft_permute_slice",
                        [],
                        [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ]
                                ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          M.get_trait_method (|
                                            "itertools::Itertools",
                                            Ty.associated_unknown,
                                            [],
                                            [],
                                            "collect_vec",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.associated_unknown,
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "p3_circle::domain::CircleDomain")
                                                  []
                                                  [ F ],
                                                "points",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "p3_circle::cfft::CircleEvaluations",
                                                    "domain"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |) in
                M.match_operator (|
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ EF; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ EF; Ty.path "alloc::alloc::Global" ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ EF; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.function
                              [ Ty.tuple [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ] ]
                              (Ty.tuple [ EF; EF ])
                          ],
                        [],
                        [],
                        "unzip",
                        [],
                        [
                          EF;
                          EF;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ EF; Ty.path "alloc::alloc::Global" ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ EF; Ty.path "alloc::alloc::Global" ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.function
                                [ Ty.tuple [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ]
                                ]
                                (Ty.tuple [ EF; EF ])
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "map",
                            [],
                            [
                              Ty.tuple [ EF; EF ];
                              Ty.function
                                [ Ty.tuple [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ]
                                ]
                                (Ty.tuple [ EF; EF ])
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [ M.read (| points |) ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_circle::point::Point")
                                                      []
                                                      [ F ]
                                                  ]
                                              ]
                                              (Ty.tuple [ EF; EF ])
                                          ],
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| γ |) in
                                              M.call_closure (|
                                                Ty.tuple [ EF; EF ],
                                                M.get_function (|
                                                  "p3_circle::deep_quotient::deep_quotient_vanishing_part",
                                                  [],
                                                  [ F; EF ]
                                                |),
                                                [
                                                  M.read (| x |);
                                                  M.read (| zeta |);
                                                  M.read (| alpha_pow_width |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let vp_nums := M.copy (| γ0_0 |) in
                        let vp_denoms := M.copy (| γ0_1 |) in
                        let~ vp_denom_invs :
                            Ty.apply
                              (Ty.path "*")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ EF; Ty.path "alloc::alloc::Global" ]
                              ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ EF; Ty.path "alloc::alloc::Global" ],
                              M.get_function (|
                                "p3_field::batch_inverse::batch_multiplicative_inverse",
                                [],
                                [ EF ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ EF ] ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ EF; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.borrow (| Pointer.Kind.Ref, vp_denoms |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        let~ packed_alpha_powers :
                            Ty.apply
                              (Ty.path "*")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::ExtensionField"
                                      []
                                      [ F ]
                                      EF
                                      "ExtensionPacking";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_field::field::ExtensionField"
                                    []
                                    [ F ]
                                    EF
                                    "ExtensionPacking";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "itertools::Itertools",
                                Ty.associated_in_trait
                                  "p3_field::packed::PackedFieldExtension"
                                  []
                                  [ F; EF ]
                                  (Ty.associated_in_trait
                                    "p3_field::field::ExtensionField"
                                    []
                                    [ F ]
                                    EF
                                    "ExtensionPacking")
                                  "{{synthetic}}'1",
                                [],
                                [],
                                "collect_vec",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait
                                    "p3_field::packed::PackedFieldExtension"
                                    []
                                    [ F; EF ]
                                    (Ty.associated_in_trait
                                      "p3_field::field::ExtensionField"
                                      []
                                      [ F ]
                                      EF
                                      "ExtensionPacking")
                                    "{{synthetic}}'1",
                                  M.get_trait_method (|
                                    "p3_field::packed::PackedFieldExtension",
                                    Ty.associated_in_trait
                                      "p3_field::field::ExtensionField"
                                      []
                                      [ F ]
                                      EF
                                      "ExtensionPacking",
                                    [],
                                    [ F; EF ],
                                    "packed_ext_powers_capped",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| alpha |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_trait_method (|
                                        "p3_matrix::Matrix",
                                        M_,
                                        [],
                                        [ F ],
                                        "width",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "p3_circle::cfft::CircleEvaluations",
                                            "values"
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |) in
                        let~ alpha_powers :
                            Ty.apply
                              (Ty.path "*")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ EF; Ty.path "alloc::alloc::Global" ]
                              ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ EF; Ty.path "alloc::alloc::Global" ],
                              M.get_trait_method (|
                                "itertools::Itertools",
                                Ty.associated_in_trait
                                  "p3_field::packed::PackedFieldExtension"
                                  []
                                  [
                                    F;
                                    EF;
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::copied::Copied")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::field::ExtensionField"
                                              []
                                              [ F ]
                                              EF
                                              "ExtensionPacking"
                                          ]
                                      ]
                                  ]
                                  (Ty.associated_in_trait
                                    "p3_field::field::ExtensionField"
                                    []
                                    [ F ]
                                    EF
                                    "ExtensionPacking")
                                  "{{synthetic}}",
                                [],
                                [],
                                "collect_vec",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait
                                    "p3_field::packed::PackedFieldExtension"
                                    []
                                    [
                                      F;
                                      EF;
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::copied::Copied")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_field::field::ExtensionField"
                                                []
                                                [ F ]
                                                EF
                                                "ExtensionPacking"
                                            ]
                                        ]
                                    ]
                                    (Ty.associated_in_trait
                                      "p3_field::field::ExtensionField"
                                      []
                                      [ F ]
                                      EF
                                      "ExtensionPacking")
                                    "{{synthetic}}",
                                  M.get_trait_method (|
                                    "p3_field::packed::PackedFieldExtension",
                                    Ty.associated_in_trait
                                      "p3_field::field::ExtensionField"
                                      []
                                      [ F ]
                                      EF
                                      "ExtensionPacking",
                                    [],
                                    [ F; EF ],
                                    "to_ext_iter",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::copied::Copied")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_field::field::ExtensionField"
                                                []
                                                [ F ]
                                                EF
                                                "ExtensionPacking"
                                            ]
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::copied::Copied")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_field::field::ExtensionField"
                                                []
                                                [ F ]
                                                EF
                                                "ExtensionPacking"
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::field::ExtensionField"
                                              []
                                              [ F ]
                                              EF
                                              "ExtensionPacking"
                                          ],
                                        [],
                                        [],
                                        "copied",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_field::field::ExtensionField"
                                            []
                                            [ F ]
                                            EF
                                            "ExtensionPacking"
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_field::field::ExtensionField"
                                                []
                                                [ F ]
                                                EF
                                                "ExtensionPacking"
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::field::ExtensionField"
                                                  []
                                                  [ F ]
                                                  EF
                                                  "ExtensionPacking"
                                              ],
                                            "iter",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::field::ExtensionField"
                                                            []
                                                            [ F ]
                                                            EF
                                                            "ExtensionPacking"
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_field::field::ExtensionField"
                                                          []
                                                          [ F ]
                                                          EF
                                                          "ExtensionPacking";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [],
                                                    "deref",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      packed_alpha_powers
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |) in
                        let~ alpha_reduced_ps_at_zeta : Ty.apply (Ty.path "*") [] [ EF ] :=
                          M.alloc (|
                            M.call_closure (|
                              EF,
                              M.get_function (|
                                "p3_field::helpers::dot_product",
                                [],
                                [
                                  EF;
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::copied::Copied")
                                    []
                                    [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ] ];
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::copied::Copied")
                                    []
                                    [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ] ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::copied::Copied")
                                    []
                                    [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ] ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ],
                                    [],
                                    [],
                                    "copied",
                                    [],
                                    [ EF ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [] [ EF ],
                                        "iter",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ EF ] ],
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ EF; Ty.path "alloc::alloc::Global" ],
                                                [],
                                                [],
                                                "deref",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, alpha_powers |) ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::copied::Copied")
                                    []
                                    [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ] ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ],
                                    [],
                                    [],
                                    "copied",
                                    [],
                                    [ EF ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [] [ EF ],
                                        "iter",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| ps_at_zeta |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ EF; Ty.path "alloc::alloc::Global" ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_matrix::Matrix"
                                            []
                                            [ F; EF ]
                                            M_
                                            "{{synthetic}}'12";
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            []
                                            [ EF; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [ EF; Ty.path "alloc::alloc::Global" ]
                                    ];
                                  Ty.function
                                    [ Ty.tuple [ Ty.tuple [ Ty.tuple [ EF; EF ]; EF ] ] ]
                                    EF
                                ],
                              [],
                              [],
                              "collect",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ EF; Ty.path "alloc::alloc::Global" ]
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_matrix::Matrix"
                                              []
                                              [ F; EF ]
                                              M_
                                              "{{synthetic}}'12";
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [ EF; Ty.path "alloc::alloc::Global" ]
                                      ];
                                    Ty.function
                                      [ Ty.tuple [ Ty.tuple [ Ty.tuple [ EF; EF ]; EF ] ] ]
                                      EF
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_matrix::Matrix"
                                            []
                                            [ F; EF ]
                                            M_
                                            "{{synthetic}}'12";
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            []
                                            [ EF; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [ EF; Ty.path "alloc::alloc::Global" ]
                                    ],
                                  [],
                                  [],
                                  "map",
                                  [],
                                  [
                                    EF;
                                    Ty.function
                                      [ Ty.tuple [ Ty.tuple [ Ty.tuple [ EF; EF ]; EF ] ] ]
                                      EF
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_matrix::Matrix"
                                              []
                                              [ F; EF ]
                                              M_
                                              "{{synthetic}}'12";
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [ EF; Ty.path "alloc::alloc::Global" ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_matrix::Matrix"
                                            []
                                            [ F; EF ]
                                            M_
                                            "{{synthetic}}'12";
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            []
                                            [ EF; Ty.path "alloc::alloc::Global" ]
                                        ],
                                      [],
                                      [],
                                      "zip",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [ EF; Ty.path "alloc::alloc::Global" ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_matrix::Matrix"
                                              []
                                              [ F; EF ]
                                              M_
                                              "{{synthetic}}'12";
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.associated_in_trait
                                            "p3_matrix::Matrix"
                                            []
                                            [ F; EF ]
                                            M_
                                            "{{synthetic}}'12",
                                          [],
                                          [],
                                          "zip",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.associated_in_trait
                                              "p3_matrix::Matrix"
                                              []
                                              [ F; EF ]
                                              M_
                                              "{{synthetic}}'12",
                                            M.get_trait_method (|
                                              "p3_matrix::Matrix",
                                              M_,
                                              [],
                                              [ F ],
                                              "rowwise_packed_dot_product",
                                              [],
                                              [ EF ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "p3_circle::cfft::CircleEvaluations",
                                                  "values"
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_field::field::ExtensionField"
                                                              []
                                                              [ F ]
                                                              EF
                                                              "ExtensionPacking"
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_field::field::ExtensionField"
                                                            []
                                                            [ F ]
                                                            EF
                                                            "ExtensionPacking";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            packed_alpha_powers
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ],
                                            M.get_trait_method (|
                                              "p3_maybe_rayon::serial::IntoParallelIterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ],
                                              [],
                                              [],
                                              "into_par_iter",
                                              [],
                                              []
                                            |),
                                            [ M.read (| vp_nums |) ]
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [ EF; Ty.path "alloc::alloc::Global" ],
                                        M.get_trait_method (|
                                          "p3_maybe_rayon::serial::IntoParallelIterator",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ EF; Ty.path "alloc::alloc::Global" ],
                                          [],
                                          [],
                                          "into_par_iter",
                                          [],
                                          []
                                        |),
                                        [ M.read (| vp_denom_invs |) ]
                                      |)
                                    ]
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [ Ty.tuple [ Ty.tuple [ EF; EF ]; EF ] ]
                                                    ]
                                                    EF
                                                ],
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let γ1_0 :=
                                                      M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                    let γ1_1 :=
                                                      M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                    let reduced_ps_at_x := M.copy (| γ1_0 |) in
                                                    let vp_num := M.copy (| γ1_1 |) in
                                                    let vp_denom_inv := M.copy (| γ0_1 |) in
                                                    M.call_closure (|
                                                      EF,
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Mul",
                                                        EF,
                                                        [],
                                                        [ EF ],
                                                        "mul",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          EF,
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Mul",
                                                            EF,
                                                            [],
                                                            [ EF ],
                                                            "mul",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.read (| vp_num |);
                                                            M.read (| vp_denom_inv |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          EF,
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Sub",
                                                            EF,
                                                            [],
                                                            [ EF ],
                                                            "sub",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.read (| reduced_ps_at_x |);
                                                            M.read (| alpha_reduced_ps_at_zeta |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end))
                                ]
                              |)
                            ]
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_deep_quotient_reduce :
      forall (F M_ : Ty.t),
      M.IsAssociatedFunction.C (Self F M_) "deep_quotient_reduce" (deep_quotient_reduce F M_).
    Admitted.
    Global Typeclasses Opaque deep_quotient_reduce.
  End Impl_p3_circle_cfft_CircleEvaluations_F_M_.
  
  (* #[instrument(skip_all, fields(bits = log2_strict_usize(lde.len())))] *)
  Definition extract_lambda (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; EF ], [ lde; log_blowup ] =>
      ltac:(M.monadic
        (let lde := M.alloc (| lde |) in
        let log_blowup := M.alloc (| log_blowup |) in
        M.catch_return EF (|
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] := M.alloc (| Value.Tuple [] |) in
              let __tracing_attr_span := M.copy (| Value.DeclaredButUndefined |) in
              let __tracing_attr_guard := M.copy (| Value.DeclaredButUndefined |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.or (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.path "tracing_core::metadata::Level",
                                      [],
                                      [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                      "le",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_associated_constant (|
                                          Ty.path "tracing_core::metadata::Level",
                                          "INFO",
                                          Ty.path "tracing_core::metadata::Level"
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_constant (|
                                          "tracing::level_filters::STATIC_MAX_LEVEL",
                                          Ty.path "tracing_core::metadata::LevelFilter"
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "INFO",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                "current",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic (Value.Bool false))
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_span,
                              M.read (|
                                let~ interest :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.path "tracing_core::subscriber::Interest" ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "never",
                                        [],
                                        []
                                      |),
                                      []
                                    |)
                                  |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.path "tracing::span::Span" ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              LogicalOp.and (|
                                                LogicalOp.and (|
                                                  LogicalOp.and (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialOrd",
                                                        Ty.path "tracing_core::metadata::Level",
                                                        [],
                                                        [
                                                          Ty.path
                                                            "tracing_core::metadata::LevelFilter"
                                                        ],
                                                        "le",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_associated_constant (|
                                                            Ty.path "tracing_core::metadata::Level",
                                                            "INFO",
                                                            Ty.path "tracing_core::metadata::Level"
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          get_constant (|
                                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          |)
                                                        |)
                                                      ]
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "tracing_core::metadata::Level",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "tracing_core::metadata::LevelFilter"
                                                          ],
                                                          "le",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            get_associated_constant (|
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              "INFO",
                                                              Ty.path
                                                                "tracing_core::metadata::Level"
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  "current",
                                                                  [],
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.alloc (|
                                                          M.write (|
                                                            interest,
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                "interest",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "p3_circle::deep_quotient::extract_lambda::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "tracing_core::subscriber::Interest",
                                                              "is_never",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                interest
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)))
                                                |),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_function (|
                                                      "tracing::__macro_support::__is_enabled",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "p3_circle::deep_quotient::extract_lambda::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| interest |)
                                                    ]
                                                  |)))
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ meta :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "tracing_core::metadata::Metadata" ]
                                              ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "tracing_core::metadata::Metadata" ],
                                              M.get_trait_method (|
                                                "tracing_core::callsite::Callsite",
                                                Ty.path "tracing_core::callsite::DefaultCallsite",
                                                [],
                                                [],
                                                "metadata",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.read (|
                                                      get_constant (|
                                                        "p3_circle::deep_quotient::extract_lambda::__CALLSITE",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite"
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "tracing::span::Span",
                                            M.get_associated_function (|
                                              Ty.path "tracing::span::Span",
                                              "new",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| meta |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    let~ iter :
                                                        Ty.apply
                                                          (Ty.path "*")
                                                          []
                                                          [ Ty.path "tracing_core::field::Iter" ] :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "tracing_core::field::Iter",
                                                          M.get_associated_function (|
                                                            Ty.path "tracing_core::field::FieldSet",
                                                            "iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::field::FieldSet"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata",
                                                                    "fields",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| meta |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "tracing_core::field::ValueSet",
                                                        M.get_associated_function (|
                                                          Ty.path "tracing_core::field::FieldSet",
                                                          "value_set",
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 1 ]
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::Field"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::FieldSet"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata",
                                                                  "fields",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| meta |) |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      Value.Tuple
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                Ty.path
                                                                                  "tracing_core::field::Field",
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "tracing_core::field::Field"
                                                                                    ],
                                                                                  "expect",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::field::Field"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.path
                                                                                        "tracing_core::field::Iter",
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      mk_str (|
                                                                                        "FieldSet corrupted (this is a bug)"
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          Value.StructTuple
                                                                            "core::option::Option::Some"
                                                                            [
                                                                              M.read (|
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    (* Unsize *)
                                                                                    M.pointer_coercion
                                                                                      (M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.alloc (|
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "usize",
                                                                                                M.get_function (|
                                                                                                  "p3_util::log2_strict_usize",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "usize",
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "slice")
                                                                                                        []
                                                                                                        [
                                                                                                          EF
                                                                                                        ],
                                                                                                      "len",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        M.deref (|
                                                                                                          M.read (|
                                                                                                            lde
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |))
                                                                                  |))
                                                                              |)
                                                                            ]
                                                                        ]
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let~ span :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "tracing::span::Span" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "tracing::span::Span",
                                              M.get_function (|
                                                "tracing::__macro_support::__disabled_span",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::metadata::Metadata"
                                                        ],
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        [],
                                                        "metadata",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "p3_circle::deep_quotient::extract_lambda::__CALLSITE",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite"
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (| Value.Tuple [] |) in
                                        span))
                                  ]
                                |)
                              |)
                            |)
                          |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.alloc (|
                            M.write (|
                              __tracing_attr_guard,
                              M.call_closure (|
                                Ty.path "tracing::span::Entered",
                                M.get_associated_function (|
                                  Ty.path "tracing::span::Span",
                                  "enter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, __tracing_attr_span |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool false |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              let~ __tracing_attr_fake_return : Ty.apply (Ty.path "*") [] [ EF ] :=
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.loop (|
                                        Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                                        ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      |)
                                    |)
                                  |)
                                |) in
                              M.return_ (| M.read (| __tracing_attr_fake_return |) |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ log_lde_size : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ EF ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| lde |) |) |) ]
                      |)
                    ]
                  |)
                |) in
              let~ v_d_init :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "itertools::Itertools",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::take::Take")
                            []
                            [ Ty.associated_unknown ];
                          Ty.function
                            [ Ty.tuple [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ] ]
                            F
                        ],
                      [],
                      [],
                      "collect_vec",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::take::Take")
                              []
                              [ Ty.associated_unknown ];
                            Ty.function
                              [ Ty.tuple [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ] ]
                              F
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::take::Take")
                            []
                            [ Ty.associated_unknown ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            F;
                            Ty.function
                              [ Ty.tuple [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ] ]
                              F
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::take::Take")
                              []
                              [ Ty.associated_unknown ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.associated_unknown,
                              [],
                              [],
                              "take",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.associated_unknown,
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "p3_circle::domain::CircleDomain") [] [ F ],
                                  "points",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_circle::domain::CircleDomain")
                                          []
                                          [ F ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_circle::domain::CircleDomain")
                                            []
                                            [ F ],
                                          "standard",
                                          [],
                                          []
                                        |),
                                        [ M.read (| log_lde_size |) ]
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.shl,
                                [ Value.Integer IntegerKind.Usize 1; M.read (| log_blowup |) ]
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_circle::point::Point")
                                                    []
                                                    [ F ]
                                                ]
                                            ]
                                            F
                                        ],
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let p := M.copy (| γ |) in
                                            M.call_closure (|
                                              F,
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "p3_circle::point::Point")
                                                  []
                                                  [ F ],
                                                "v_n",
                                                [],
                                                []
                                              |),
                                              [
                                                M.read (| p |);
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.sub,
                                                  [
                                                    M.read (| log_lde_size |);
                                                    M.read (| log_blowup |)
                                                  ]
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ v_d :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::copied::Copied")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::cycle::Cycle")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::rev::Rev")
                                    []
                                    [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                                ]
                            ]
                        ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::copied::Copied")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::cycle::Cycle")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                              ]
                          ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::cycle::Cycle")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                            ]
                        ],
                      [],
                      [],
                      "copied",
                      [],
                      [ F ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::cycle::Cycle")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                            ],
                          [],
                          [],
                          "cycle",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                              [],
                              [],
                              "chain",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ F ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ],
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, v_d_init |) ]
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                  [],
                                  [],
                                  "rev",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ F ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, v_d_init |) ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ v_d_2 : Ty.apply (Ty.path "*") [] [ F ] :=
                M.alloc (|
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::PrimeCharacteristicRing",
                      F,
                      [],
                      [],
                      "exp_u64",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        get_constant (| "p3_field::field::PrimeCharacteristicRing::TWO", F |)
                      |);
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.sub,
                        [
                          M.cast (Ty.path "u64") (M.read (| log_lde_size |));
                          Value.Integer IntegerKind.U64 1
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ v_d :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "itertools::Itertools",
                      Ty.apply
                        (Ty.path "core::iter::adapters::take::Take")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::copied::Copied")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::cycle::Cycle")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::rev::Rev")
                                        []
                                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                                    ]
                                ]
                            ]
                        ],
                      [],
                      [],
                      "collect_vec",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::take::Take")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::copied::Copied")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::cycle::Cycle")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      []
                                      [
                                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::rev::Rev")
                                          []
                                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                                      ]
                                  ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::copied::Copied")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::cycle::Cycle")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ];
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::rev::Rev")
                                        []
                                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                                    ]
                                ]
                            ],
                          [],
                          [],
                          "take",
                          [],
                          []
                        |),
                        [
                          M.read (| v_d |);
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ EF ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| lde |) |) |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ v_d :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_function (| "p3_circle::ordering::cfft_permute_slice", [], [ F ] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, v_d |) |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ lambda : Ty.apply (Ty.path "*") [] [ EF ] :=
                M.alloc (|
                  M.call_closure (|
                    EF,
                    M.get_trait_method (| "core::ops::arith::Mul", EF, [], [ F ], "mul", [], [] |),
                    [
                      M.call_closure (|
                        EF,
                        M.get_function (|
                          "p3_field::helpers::dot_product",
                          [],
                          [
                            EF;
                            Ty.apply
                              (Ty.path "core::iter::adapters::copied::Copied")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ] ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::copied::Copied")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::copied::Copied")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ] ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ],
                              [],
                              [],
                              "copied",
                              [],
                              [ EF ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ EF ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| lde |) |) |) ]
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::copied::Copied")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ] ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                              [],
                              [],
                              "copied",
                              [],
                              [ F ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ F ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ],
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, v_d |) ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        F,
                        M.get_trait_method (|
                          "p3_field::field::Field",
                          F,
                          [],
                          [],
                          "inverse",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, v_d_2 |) ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.use
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ EF ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ EF ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              []
                              [
                                Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ EF ];
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ EF ],
                              [],
                              [],
                              "zip",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ EF ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ EF ] ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [ M.read (| lde |) ]
                              |);
                              M.read (| v_d |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            ltac:(M.monadic
                              (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ EF ]; F ] ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [ EF ];
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let y := M.copy (| γ1_0 |) in
                                        let v_x := M.copy (| γ1_1 |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "core::ops::arith::SubAssign",
                                                EF,
                                                [],
                                                [ EF ],
                                                "sub_assign",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| y |) |)
                                                |);
                                                M.call_closure (|
                                                  EF,
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Mul",
                                                    EF,
                                                    [],
                                                    [ F ],
                                                    "mul",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| lambda |); M.read (| v_x |) ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              lambda
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_extract_lambda :
    M.IsFunction.C "p3_circle::deep_quotient::extract_lambda" extract_lambda.
  Admitted.
  Global Typeclasses Opaque extract_lambda.
End deep_quotient.
