(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module ordering.
  (*
  pub(crate) const fn cfft_permute_index(index: usize, log_n: usize) -> usize {
      let (index, lsb) = (index >> 1, index & 1);
      reverse_bits_len(
          if lsb == 0 {
              index
          } else {
              (1 << log_n) - index - 1
          },
          log_n,
      )
  }
  *)
  Definition cfft_permute_index (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ index; log_n ] =>
      ltac:(M.monadic
        (let index := M.alloc (| index |) in
        let log_n := M.alloc (| log_n |) in
        M.read (|
          M.match_operator (|
            Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
            M.alloc (|
              Value.Tuple
                [
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.shr,
                    [ M.read (| index |); Value.Integer IntegerKind.I32 1 ]
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.bit_and,
                    [ M.read (| index |); Value.Integer IntegerKind.Usize 1 ]
                  |)
                ]
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let index := M.copy (| γ0_0 |) in
                  let lsb := M.copy (| γ0_1 |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_function (| "p3_util::reverse_bits_len", [], [] |),
                      [
                        M.read (|
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.eq,
                                          [ M.read (| lsb |); Value.Integer IntegerKind.Usize 0 ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  index));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.sub,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.sub,
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.shl,
                                              [
                                                Value.Integer IntegerKind.Usize 1;
                                                M.read (| log_n |)
                                              ]
                                            |);
                                            M.read (| index |)
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  |)))
                            ]
                          |)
                        |);
                        M.read (| log_n |)
                      ]
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_cfft_permute_index :
    M.IsFunction.C "p3_circle::ordering::cfft_permute_index" cfft_permute_index.
  Admitted.
  Global Typeclasses Opaque cfft_permute_index.
  
  (*
  pub(crate) fn cfft_permute_slice<T: Clone>(xs: &[T]) -> Vec<T> {
      let log_n = log2_strict_usize(xs.len());
      (0..xs.len())
          .map(|i| xs[cfft_permute_index(i, log_n)].clone())
          .collect()
  }
  *)
  Definition cfft_permute_slice (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ T ], [ xs ] =>
      ltac:(M.monadic
        (let xs := M.alloc (| xs |) in
        M.read (|
          let~ log_n : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                [
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ T ],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| xs |) |) |) ]
                  |)
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                    Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T
                  ],
                [],
                [],
                "collect",
                [],
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                      Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    [],
                    [],
                    "map",
                    [],
                    [ T; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ]
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.Usize 0);
                        ("end_",
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ T ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| xs |) |) |) ]
                          |))
                      ];
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [ Ty.function [ Ty.tuple [ Ty.path "usize" ] ] T ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| γ |) in
                                      M.call_closure (|
                                        T,
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          T,
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| xs |) |),
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_function (|
                                                  "p3_circle::ordering::cfft_permute_index",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| i |); M.read (| log_n |) ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_cfft_permute_slice :
    M.IsFunction.C "p3_circle::ordering::cfft_permute_slice" cfft_permute_slice.
  Admitted.
  Global Typeclasses Opaque cfft_permute_slice.
  
  (*
  pub(crate) fn cfft_permute_slice_chunked_in_place<T>(xs: &mut [T], chunk_size: usize) {
      assert_eq!(xs.len() % chunk_size, 0);
      let n_chunks = xs.len() / chunk_size;
      let log_n = log2_strict_usize(n_chunks);
      for i in 0..n_chunks {
          let j = cfft_permute_index(i, log_n);
          if i < j {
              // somehow this is slightly faster than the unsafe block below
              for k in 0..chunk_size {
                  xs.swap(i * chunk_size + k, j * chunk_size + k);
              }
              /*
              unsafe {
                  core::ptr::swap_nonoverlapping(
                      xs.as_mut_ptr().add(i * chunk_size),
                      xs.as_mut_ptr().add(j * chunk_size),
                      chunk_size,
                  );
              }
              */
          }
      }
  }
  *)
  Definition cfft_permute_slice_chunked_in_place
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ T ], [ xs; chunk_size ] =>
      ltac:(M.monadic
        (let xs := M.alloc (| xs |) in
        let chunk_size := M.alloc (| chunk_size |) in
        M.read (|
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                Value.Tuple
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.rem,
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ T ],
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| xs |) |) |) ]
                            |);
                            M.read (| chunk_size |)
                          ]
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.alloc (| Value.Integer IntegerKind.Usize 0 |) |)
                  ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let left_val := M.copy (| γ0_0 |) in
                    let right_val := M.copy (| γ0_1 |) in
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [
                                        M.read (| M.deref (| M.read (| left_val |) |) |);
                                        M.read (| M.deref (| M.read (| right_val |) |) |)
                                      ]
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let~ kind :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [ Ty.path "core::panicking::AssertKind" ] :=
                                    M.alloc (|
                                      Value.StructTuple "core::panicking::AssertKind::Eq" []
                                    |) in
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (|
                                        "core::panicking::assert_failed",
                                        [],
                                        [ Ty.path "usize"; Ty.path "usize" ]
                                      |),
                                      [
                                        M.read (| kind |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| left_val |) |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| right_val |) |)
                                            |)
                                          |)
                                        |);
                                        Value.StructTuple "core::option::Option::None" []
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |)))
              ]
            |) in
          let~ n_chunks : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.div,
                [
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ T ],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| xs |) |) |) ]
                  |);
                  M.read (| chunk_size |)
                ]
              |)
            |) in
          let~ log_n : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                [ M.read (| n_chunks |) ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.Usize 0);
                        ("end_", M.read (| n_chunks |))
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let i := M.copy (| γ0_0 |) in
                                  let~ j : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_function (|
                                          "p3_circle::ordering::cfft_permute_index",
                                          [],
                                          []
                                        |),
                                        [ M.read (| i |); M.read (| log_n |) ]
                                      |)
                                    |) in
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.lt,
                                                  [ M.read (| i |); M.read (| j |) ]
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.use
                                            (M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::Range")
                                                      []
                                                      [ Ty.path "usize" ],
                                                    [],
                                                    [],
                                                    "into_iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    Value.StructRecord
                                                      "core::ops::range::Range"
                                                      [
                                                        ("start",
                                                          Value.Integer IntegerKind.Usize 0);
                                                        ("end_", M.read (| chunk_size |))
                                                      ]
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter := M.copy (| γ |) in
                                                    M.loop (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      ltac:(M.monadic
                                                        (let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.match_operator (|
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ],
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let k := M.copy (| γ0_0 |) in
                                                                  let~ _ :
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [ Ty.tuple [] ] :=
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.tuple [],
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [ T ],
                                                                          "swap",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.deref (|
                                                                              M.read (| xs |)
                                                                            |)
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.add,
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.mul,
                                                                                [
                                                                                  M.read (| i |);
                                                                                  M.read (|
                                                                                    chunk_size
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              M.read (| k |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.add,
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.mul,
                                                                                [
                                                                                  M.read (| j |);
                                                                                  M.read (|
                                                                                    chunk_size
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              M.read (| k |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                    |)))
                                              ]
                                            |))));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_cfft_permute_slice_chunked_in_place :
    M.IsFunction.C
      "p3_circle::ordering::cfft_permute_slice_chunked_in_place"
      cfft_permute_slice_chunked_in_place.
  Admitted.
  Global Typeclasses Opaque cfft_permute_slice_chunked_in_place.
  
  Axiom CfftView :
    forall (M_ : Ty.t),
    (Ty.apply (Ty.path "p3_circle::ordering::CfftView") [] [ M_ ]) =
      (Ty.apply
        (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
        []
        [ Ty.path "p3_circle::ordering::CfftPerm"; M_ ]).
  
  (* StructRecord
    {
      name := "CfftPerm";
      const_params := [];
      ty_params := [];
      fields := [ ("log_height", Ty.path "usize") ];
    } *)
  
  Module Impl_core_marker_Copy_for_p3_circle_ordering_CfftPerm.
    Definition Self : Ty.t := Ty.path "p3_circle::ordering::CfftPerm".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_p3_circle_ordering_CfftPerm.
  
  Module Impl_core_clone_Clone_for_p3_circle_ordering_CfftPerm.
    Definition Self : Ty.t := Ty.path "p3_circle::ordering::CfftPerm".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "p3_circle::ordering::CfftPerm" ],
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_p3_circle_ordering_CfftPerm.
  
  Module Impl_p3_matrix_row_index_mapped_RowIndexMap_for_p3_circle_ordering_CfftPerm.
    Definition Self : Ty.t := Ty.path "p3_circle::ordering::CfftPerm".
    
    (*
        fn height(&self) -> usize {
            1 << self.log_height
        }
    *)
    Definition height (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            BinOp.Wrap.shl,
            [
              Value.Integer IntegerKind.Usize 1;
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_circle::ordering::CfftPerm",
                  "log_height"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn map_row_index(&self, r: usize) -> usize {
            cfft_permute_index(r, self.log_height)
        }
    *)
    Definition map_row_index (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; r ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let r := M.alloc (| r |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_function (| "p3_circle::ordering::cfft_permute_index", [], [] |),
            [
              M.read (| r |);
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "p3_circle::ordering::CfftPerm",
                  "log_height"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn to_row_major_matrix<T: Clone + Send + Sync, Inner: Matrix<T>>(
            &self,
            inner: Inner,
        ) -> RowMajorMatrix<T> {
            let mut inner = inner.to_row_major_matrix();
            cfft_permute_slice_chunked_in_place(&mut inner.values, inner.width);
            inner
        }
    *)
    Definition to_row_major_matrix (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ T; Inner ], [ self; inner ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let inner := M.alloc (| inner |) in
          M.read (|
            let~ inner :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        T;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      T;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Inner,
                    [],
                    [ T ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [ M.read (| inner |) ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (|
                    "p3_circle::ordering::cfft_permute_slice_chunked_in_place",
                    [],
                    [ T ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          M.get_trait_method (|
                            "core::ops::deref::DerefMut",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "deref_mut",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    inner,
                                    "p3_matrix::dense::DenseMatrix",
                                    "values"
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        inner,
                        "p3_matrix::dense::DenseMatrix",
                        "width"
                      |)
                    |)
                  ]
                |)
              |) in
            inner
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "p3_matrix::row_index_mapped::RowIndexMap"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("height", InstanceField.Method height);
          ("map_row_index", InstanceField.Method map_row_index);
          ("to_row_major_matrix", InstanceField.Method to_row_major_matrix)
        ].
  End Impl_p3_matrix_row_index_mapped_RowIndexMap_for_p3_circle_ordering_CfftPerm.
  
  (* Trait *)
  (* Empty module 'CfftPermutable' *)
  
  Module Impl_p3_circle_ordering_CfftPermutable_where_core_marker_Send_T_where_core_marker_Sync_T_where_p3_matrix_Matrix_M__T_T_for_M_.
    Definition Self (T M_ : Ty.t) : Ty.t := M_.
    
    (*
        fn cfft_perm_rows(self) -> CfftView<M> {
            RowIndexMappedView {
                index_map: CfftPerm {
                    log_height: log2_strict_usize(self.height()),
                },
                inner: self,
            }
        }
    *)
    Definition cfft_perm_rows
        (T M_ : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self T M_ in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_matrix::row_index_mapped::RowIndexMappedView"
            [
              ("index_map",
                Value.StructRecord
                  "p3_circle::ordering::CfftPerm"
                  [
                    ("log_height",
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_trait_method (|
                              "p3_matrix::Matrix",
                              M_,
                              [],
                              [ T ],
                              "height",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, self |) ]
                          |)
                        ]
                      |))
                  ]);
              ("inner", M.read (| self |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T M_ : Ty.t),
      M.IsTraitInstance
        "p3_circle::ordering::CfftPermutable"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ T ]
        (Self T M_)
        (* Instance *) [ ("cfft_perm_rows", InstanceField.Method (cfft_perm_rows T M_)) ].
  End Impl_p3_circle_ordering_CfftPermutable_where_core_marker_Send_T_where_core_marker_Sync_T_where_p3_matrix_Matrix_M__T_T_for_M_.
End ordering.
