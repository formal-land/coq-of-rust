(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module point.
  (* StructRecord
    {
      name := "Point";
      const_params := [];
      ty_params := [ "F" ];
      fields := [ ("x", F); ("y", F); ("_private", Ty.tuple []) ];
    } *)
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_F_for_p3_circle_point_Point_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ].
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_F_for_p3_circle_point_Point_F.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_p3_circle_point_Point_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ].
    
    (* Clone *)
    Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_circle::point::Point"
            [
              ("x",
                M.call_closure (|
                  F,
                  M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_circle::point::Point",
                            "x"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("y",
                M.call_closure (|
                  F,
                  M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_circle::point::Point",
                            "y"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("_private",
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.tuple [],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_circle::point::Point",
                            "_private"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_for_p3_circle_point_Point_F.
  
  Module Impl_core_marker_StructuralPartialEq_for_p3_circle_point_Point_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ].
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_p3_circle_point_Point_F.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_p3_circle_point_Point_F_for_p3_circle_point_Point_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ].
    
    (* PartialEq *)
    Definition eq (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            LogicalOp.and (|
              M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (| "core::cmp::PartialEq", F, [], [ F ], "eq", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_circle::point::Point",
                      "x"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "p3_circle::point::Point",
                      "x"
                    |)
                  |)
                ]
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (| "core::cmp::PartialEq", F, [], [ F ], "eq", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_circle::point::Point",
                        "y"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "p3_circle::point::Point",
                        "y"
                      |)
                    |)
                  ]
                |)))
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.tuple [],
                  [],
                  [ Ty.tuple [] ],
                  "eq",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_circle::point::Point",
                      "_private"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "p3_circle::point::Point",
                      "_private"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("eq", InstanceField.Method (eq F)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_p3_circle_point_Point_F_for_p3_circle_point_Point_F.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_F_for_p3_circle_point_Point_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq F)) ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_F_for_p3_circle_point_Point_F.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_p3_circle_point_Point_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ].
    
    (* Debug *)
    Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Point" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "x" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_circle::point::Point",
                        "x"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "y" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_circle::point::Point",
                        "y"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_private" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_circle::point::Point",
                            "_private"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_p3_circle_point_Point_F.
  
  Module Impl_core_hash_Hash_where_core_hash_Hash_F_for_p3_circle_point_Point_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ].
    
    (* Hash *)
    Definition hash (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (| "core::hash::Hash", F, [], [], "hash", [], [ __H ] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_circle::point::Point",
                            "x"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (| "core::hash::Hash", F, [], [], "hash", [], [ __H ] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_circle::point::Point",
                            "y"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::hash::Hash",
                  Ty.tuple [],
                  [],
                  [],
                  "hash",
                  [],
                  [ __H ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_circle::point::Point",
                          "_private"
                        |)
                      |)
                    |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("hash", InstanceField.Method (hash F)) ].
  End Impl_core_hash_Hash_where_core_hash_Hash_F_for_p3_circle_point_Point_F.
  
  Module Impl_p3_circle_point_Point_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ].
    
    (*
        pub fn new(x: F, y: F) -> Self {
            debug_assert_eq!(x.square() + y.square(), F::ONE);
            Self { x, y, _private: () }
        }
    *)
    Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ x; y ] =>
        ltac:(M.monadic
          (let x := M.alloc (| x |) in
          let y := M.alloc (| y |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (|
                            Value.Tuple
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    M.call_closure (|
                                      F,
                                      M.get_trait_method (|
                                        "core::ops::arith::Add",
                                        F,
                                        [],
                                        [ F ],
                                        "add",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          F,
                                          M.get_trait_method (|
                                            "p3_field::field::PrimeCharacteristicRing",
                                            F,
                                            [],
                                            [],
                                            "square",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, x |) ]
                                        |);
                                        M.call_closure (|
                                          F,
                                          M.get_trait_method (|
                                            "p3_field::field::PrimeCharacteristicRing",
                                            F,
                                            [],
                                            [],
                                            "square",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, y |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  get_constant (|
                                    "p3_field::field::PrimeCharacteristicRing::ONE",
                                    F
                                  |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val := M.copy (| γ0_0 |) in
                                let right_val := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_trait_method (|
                                                    "core::cmp::PartialEq",
                                                    F,
                                                    [],
                                                    [ F ],
                                                    "eq",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| left_val |) |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| right_val |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let~ kind :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [ Ty.path "core::panicking::AssertKind" ] :=
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [],
                                                    [ F; F ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| left_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              Value.StructRecord
                "p3_circle::point::Point"
                [ ("x", M.read (| x |)); ("y", M.read (| y |)); ("_private", Value.Tuple []) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "new" (new F).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        const ZERO: Self = Self {
            x: F::ONE,
            y: F::ZERO,
            _private: (),
        };
    *)
    (* Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] *)
    Definition value_ZERO (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      ltac:(M.monadic
        (M.alloc (|
          Value.StructRecord
            "p3_circle::point::Point"
            [
              ("x",
                M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", F |) |));
              ("y",
                M.read (|
                  get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |)
                |));
              ("_private", Value.Tuple [])
            ]
        |))).
    
    Global Instance AssociatedConstant_value_ZERO :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "ZERO" (value_ZERO F).
    Admitted.
    Global Typeclasses Opaque value_ZERO.
    
    (*
        pub fn from_projective_line(t: F) -> Self {
            let t2 = t.square();
            let inv_denom = (F::ONE + t2).try_inverse().expect("t^2 = -1");
            Self::new((F::ONE - t2) * inv_denom, t.double() * inv_denom)
        }
    *)
    Definition from_projective_line
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ t ] =>
        ltac:(M.monadic
          (let t := M.alloc (| t |) in
          M.read (|
            let~ t2 : Ty.apply (Ty.path "*") [] [ F ] :=
              M.alloc (|
                M.call_closure (|
                  F,
                  M.get_trait_method (|
                    "p3_field::field::PrimeCharacteristicRing",
                    F,
                    [],
                    [],
                    "square",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, t |) ]
                |)
              |) in
            let~ inv_denom : Ty.apply (Ty.path "*") [] [ F ] :=
              M.alloc (|
                M.call_closure (|
                  F,
                  M.get_associated_function (|
                    Ty.apply (Ty.path "core::option::Option") [] [ F ],
                    "expect",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "core::option::Option") [] [ F ],
                      M.get_trait_method (|
                        "p3_field::field::Field",
                        F,
                        [],
                        [],
                        "try_inverse",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.call_closure (|
                              F,
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                F,
                                [],
                                [ F ],
                                "add",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  get_constant (|
                                    "p3_field::field::PrimeCharacteristicRing::ONE",
                                    F
                                  |)
                                |);
                                M.read (| t2 |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "t^2 = -1" |) |) |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::ops::arith::Mul", F, [], [ F ], "mul", [], [] |),
                    [
                      M.call_closure (|
                        F,
                        M.get_trait_method (|
                          "core::ops::arith::Sub",
                          F,
                          [],
                          [ F ],
                          "sub",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", F |)
                          |);
                          M.read (| t2 |)
                        ]
                      |);
                      M.read (| inv_denom |)
                    ]
                  |);
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::ops::arith::Mul", F, [], [ F ], "mul", [], [] |),
                    [
                      M.call_closure (|
                        F,
                        M.get_trait_method (|
                          "p3_field::field::PrimeCharacteristicRing",
                          F,
                          [],
                          [],
                          "double",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, t |) ]
                      |);
                      M.read (| inv_denom |)
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_from_projective_line :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "from_projective_line" (from_projective_line F).
    Admitted.
    Global Typeclasses Opaque from_projective_line.
    
    (*
        pub fn to_projective_line(self) -> Option<F> {
            (self.x + F::ONE).try_inverse().map(|x| x * self.y)
        }
    *)
    Definition to_projective_line
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "core::option::Option") [] [ F ],
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [] [ F ],
              "map",
              [],
              [ F; Ty.function [ Ty.tuple [ F ] ] F ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ F ],
                M.get_trait_method (| "p3_field::field::Field", F, [], [], "try_inverse", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      M.call_closure (|
                        F,
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          F,
                          [],
                          [ F ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "p3_circle::point::Point",
                              "x"
                            |)
                          |);
                          M.read (|
                            get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", F |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.function [ Ty.tuple [ F ] ] F ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let x := M.copy (| γ |) in
                                M.call_closure (|
                                  F,
                                  M.get_trait_method (|
                                    "core::ops::arith::Mul",
                                    F,
                                    [],
                                    [ F ],
                                    "mul",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| x |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        self,
                                        "p3_circle::point::Point",
                                        "y"
                                      |)
                                    |)
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_to_projective_line :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "to_projective_line" (to_projective_line F).
    Admitted.
    Global Typeclasses Opaque to_projective_line.
    
    (*
        pub fn double(self) -> Self {
            Self::new(self.x.square().double() - F::ONE, self.x.double() * self.y)
        }
    *)
    Definition double (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                F,
                M.get_trait_method (| "core::ops::arith::Sub", F, [], [ F ], "sub", [], [] |),
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::PrimeCharacteristicRing",
                      F,
                      [],
                      [],
                      "double",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            F,
                            M.get_trait_method (|
                              "p3_field::field::PrimeCharacteristicRing",
                              F,
                              [],
                              [],
                              "square",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "p3_circle::point::Point",
                                  "x"
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", F |) |)
                ]
              |);
              M.call_closure (|
                F,
                M.get_trait_method (| "core::ops::arith::Mul", F, [], [ F ], "mul", [], [] |),
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::PrimeCharacteristicRing",
                      F,
                      [],
                      [],
                      "double",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "p3_circle::point::Point",
                          "x"
                        |)
                      |)
                    ]
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (| self, "p3_circle::point::Point", "y" |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_double :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "double" (double F).
    Admitted.
    Global Typeclasses Opaque double.
    
    (*
        pub fn v_n(mut self, log_n: usize) -> F {
            for _ in 0..(log_n - 1) {
                self.x = self.x.square().double() - F::ONE; // TODO: replace this by a custom field impl.
            }
            self.x
        }
    *)
    Definition v_n (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; log_n ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let log_n := M.alloc (| log_n |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_",
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [ M.read (| log_n |); Value.Integer IntegerKind.Usize 1 ]
                              |))
                          ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.write (|
                                            M.SubPointer.get_struct_record_field (|
                                              self,
                                              "p3_circle::point::Point",
                                              "x"
                                            |),
                                            M.call_closure (|
                                              F,
                                              M.get_trait_method (|
                                                "core::ops::arith::Sub",
                                                F,
                                                [],
                                                [ F ],
                                                "sub",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  F,
                                                  M.get_trait_method (|
                                                    "p3_field::field::PrimeCharacteristicRing",
                                                    F,
                                                    [],
                                                    [],
                                                    "double",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          F,
                                                          M.get_trait_method (|
                                                            "p3_field::field::PrimeCharacteristicRing",
                                                            F,
                                                            [],
                                                            [],
                                                            "square",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.SubPointer.get_struct_record_field (|
                                                                self,
                                                                "p3_circle::point::Point",
                                                                "x"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |);
                                                M.read (|
                                                  get_constant (|
                                                    "p3_field::field::PrimeCharacteristicRing::ONE",
                                                    F
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            M.SubPointer.get_struct_record_field (| self, "p3_circle::point::Point", "x" |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_v_n :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "v_n" (v_n F).
    Admitted.
    Global Typeclasses Opaque v_n.
    
    (*
        pub fn v_n_prod(mut self, log_n: usize) -> F {
            let mut output = self.x;
            for _ in 0..(log_n - 2) {
                self.x = self.x.square().double() - F::ONE; // TODO: replace this by a custom field impl.
                output *= self.x;
            }
            output
        }
    *)
    Definition v_n_prod (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; log_n ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let log_n := M.alloc (| log_n |) in
          M.read (|
            let~ output : Ty.apply (Ty.path "*") [] [ F ] :=
              M.copy (|
                M.SubPointer.get_struct_record_field (| self, "p3_circle::point::Point", "x" |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_",
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [ M.read (| log_n |); Value.Integer IntegerKind.Usize 2 ]
                              |))
                          ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.write (|
                                            M.SubPointer.get_struct_record_field (|
                                              self,
                                              "p3_circle::point::Point",
                                              "x"
                                            |),
                                            M.call_closure (|
                                              F,
                                              M.get_trait_method (|
                                                "core::ops::arith::Sub",
                                                F,
                                                [],
                                                [ F ],
                                                "sub",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  F,
                                                  M.get_trait_method (|
                                                    "p3_field::field::PrimeCharacteristicRing",
                                                    F,
                                                    [],
                                                    [],
                                                    "double",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          F,
                                                          M.get_trait_method (|
                                                            "p3_field::field::PrimeCharacteristicRing",
                                                            F,
                                                            [],
                                                            [],
                                                            "square",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.SubPointer.get_struct_record_field (|
                                                                self,
                                                                "p3_circle::point::Point",
                                                                "x"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |);
                                                M.read (|
                                                  get_constant (|
                                                    "p3_field::field::PrimeCharacteristicRing::ONE",
                                                    F
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_trait_method (|
                                              "core::ops::arith::MulAssign",
                                              F,
                                              [],
                                              [ F ],
                                              "mul_assign",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, output |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  self,
                                                  "p3_circle::point::Point",
                                                  "x"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            output
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_v_n_prod :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "v_n_prod" (v_n_prod F).
    Admitted.
    Global Typeclasses Opaque v_n_prod.
    
    (*
        pub fn v_tilde_p<EF: ExtensionField<F>>(self, at: Point<EF>) -> EF {
            (at - self).to_projective_line().unwrap()
        }
    *)
    Definition v_tilde_p (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [ EF ], [ self; at_ ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let at_ := M.alloc (| at_ |) in
          M.call_closure (|
            EF,
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [] [ EF ],
              "unwrap",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ EF ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ],
                  "to_projective_line",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ],
                    M.get_trait_method (|
                      "core::ops::arith::Sub",
                      Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ],
                      [],
                      [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ],
                      "sub",
                      [],
                      []
                    |),
                    [ M.read (| at_ |); M.read (| self |) ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_v_tilde_p :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "v_tilde_p" (v_tilde_p F).
    Admitted.
    Global Typeclasses Opaque v_tilde_p.
    
    (*
        pub fn s_p_at_p(self, log_n: usize) -> F {
            -self.v_n_prod(log_n).mul_2exp_u64((2 * log_n - 1) as u64) * self.y
        }
    *)
    Definition s_p_at_p (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; log_n ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let log_n := M.alloc (| log_n |) in
          M.call_closure (|
            F,
            M.get_trait_method (| "core::ops::arith::Mul", F, [], [ F ], "mul", [], [] |),
            [
              M.call_closure (|
                F,
                M.get_trait_method (| "core::ops::arith::Neg", F, [], [], "neg", [], [] |),
                [
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::PrimeCharacteristicRing",
                      F,
                      [],
                      [],
                      "mul_2exp_u64",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            F,
                            M.get_associated_function (|
                              Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
                              "v_n_prod",
                              [],
                              []
                            |),
                            [ M.read (| self |); M.read (| log_n |) ]
                          |)
                        |)
                      |);
                      M.cast
                        (Ty.path "u64")
                        (M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.mul,
                              [ Value.Integer IntegerKind.Usize 2; M.read (| log_n |) ]
                            |);
                            Value.Integer IntegerKind.Usize 1
                          ]
                        |))
                    ]
                  |)
                ]
              |);
              M.read (|
                M.SubPointer.get_struct_record_field (| self, "p3_circle::point::Point", "y" |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_s_p_at_p :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "s_p_at_p" (s_p_at_p F).
    Admitted.
    Global Typeclasses Opaque s_p_at_p.
    
    (*
        pub fn v_p<EF: ExtensionField<F>>(self, at: Point<EF>) -> (EF, EF) {
            let diff = -at + self;
            (EF::ONE - diff.x, -diff.y)
        }
    *)
    Definition v_p (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [ EF ], [ self; at_ ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let at_ := M.alloc (| at_ |) in
          M.read (|
            let~ diff :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ],
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ],
                    [],
                    [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ],
                      M.get_trait_method (|
                        "core::ops::arith::Neg",
                        Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ],
                        [],
                        [],
                        "neg",
                        [],
                        []
                      |),
                      [ M.read (| at_ |) ]
                    |);
                    M.read (| self |)
                  ]
                |)
              |) in
            M.alloc (|
              Value.Tuple
                [
                  M.call_closure (|
                    EF,
                    M.get_trait_method (| "core::ops::arith::Sub", EF, [], [ EF ], "sub", [], [] |),
                    [
                      M.read (|
                        get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", EF |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          diff,
                          "p3_circle::point::Point",
                          "x"
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    EF,
                    M.get_trait_method (| "core::ops::arith::Neg", EF, [], [], "neg", [], [] |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          diff,
                          "p3_circle::point::Point",
                          "y"
                        |)
                      |)
                    ]
                  |)
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_v_p :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "v_p" (v_p F).
    Admitted.
    Global Typeclasses Opaque v_p.
    (*
        pub fn generator(log_n: usize) -> Self {
            let g = F::circle_two_adic_generator(log_n);
            Self::new(g.real(), g.imag())
        }
    *)
    Definition generator (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ log_n ] =>
        ltac:(M.monadic
          (let log_n := M.alloc (| log_n |) in
          M.read (|
            let~ g :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [ F; F ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                    [ Value.Integer IntegerKind.Usize 2 ]
                    [ F; F ],
                  M.get_trait_method (|
                    "p3_field::extension::complex::ComplexExtendable",
                    F,
                    [],
                    [],
                    "circle_two_adic_generator",
                    [],
                    []
                  |),
                  [ M.read (| log_n |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    F,
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ F; F ],
                      "real",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, g |) ]
                  |);
                  M.call_closure (|
                    F,
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ F; F ],
                      "imag",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, g |) ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_generator :
      forall (F : Ty.t),
      M.IsAssociatedFunction.C (Self F) "generator" (generator F).
    Admitted.
    Global Typeclasses Opaque generator.
  End Impl_p3_circle_point_Point_F.
  
  (*
  pub fn compute_lagrange_den_batched<F: Field, EF: ExtensionField<F>>(
      points: &[Point<F>],
      at: Point<EF>,
      log_n: usize,
  ) -> Vec<EF> {
      // This following line costs about 2% of the runtime for example prove_poseidon2_m31_keccak.
      // Would be nice to find further speedups.
      // Maybe modify to use packed fields here?
      let (numer, denom): (Vec<_>, Vec<_>) = points
          .iter()
          .map(|&pt| {
              let diff = at - pt;
              let numer = diff.x + F::ONE;
              let denom = diff.y * pt.s_p_at_p(log_n);
              (numer, denom)
          })
          .unzip();
  
      let inv_d = batch_multiplicative_inverse(&denom);
  
      numer
          .iter()
          .zip(inv_d.iter())
          .map(|(&num, &inv_d)| num * inv_d)
          .collect()
  }
  *)
  Definition compute_lagrange_den_batched
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F; EF ], [ points; at_; log_n ] =>
      ltac:(M.monadic
        (let points := M.alloc (| points |) in
        let at_ := M.alloc (| at_ |) in
        let log_n := M.alloc (| log_n |) in
        M.read (|
          M.match_operator (|
            Ty.apply
              (Ty.path "*")
              []
              [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ EF; Ty.path "alloc::alloc::Global" ] ],
            M.alloc (|
              M.call_closure (|
                Ty.tuple
                  [
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ EF; Ty.path "alloc::alloc::Global" ];
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ EF; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ]
                            ]
                        ]
                        (Ty.tuple [ EF; EF ])
                    ],
                  [],
                  [],
                  "unzip",
                  [],
                  [
                    EF;
                    EF;
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ EF; Ty.path "alloc::alloc::Global" ];
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ EF; Ty.path "alloc::alloc::Global" ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ]
                              ]
                          ]
                          (Ty.tuple [ EF; EF ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.tuple [ EF; EF ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ]
                              ]
                          ]
                          (Ty.tuple [ EF; EF ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ],
                          "iter",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| points |) |) |) ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_circle::point::Point")
                                                    []
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.tuple [ EF; EF ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.read (| γ |) in
                                        let pt := M.copy (| γ |) in
                                        M.read (|
                                          let~ diff :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_circle::point::Point")
                                                    []
                                                    [ EF ]
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "p3_circle::point::Point")
                                                  []
                                                  [ EF ],
                                                M.get_trait_method (|
                                                  "core::ops::arith::Sub",
                                                  Ty.apply
                                                    (Ty.path "p3_circle::point::Point")
                                                    []
                                                    [ EF ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_circle::point::Point")
                                                      []
                                                      [ F ]
                                                  ],
                                                  "sub",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| at_ |); M.read (| pt |) ]
                                              |)
                                            |) in
                                          let~ numer : Ty.apply (Ty.path "*") [] [ EF ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                EF,
                                                M.get_trait_method (|
                                                  "core::ops::arith::Add",
                                                  EF,
                                                  [],
                                                  [ F ],
                                                  "add",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      diff,
                                                      "p3_circle::point::Point",
                                                      "x"
                                                    |)
                                                  |);
                                                  M.read (|
                                                    get_constant (|
                                                      "p3_field::field::PrimeCharacteristicRing::ONE",
                                                      F
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let~ denom : Ty.apply (Ty.path "*") [] [ EF ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                EF,
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  EF,
                                                  [],
                                                  [ F ],
                                                  "mul",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      diff,
                                                      "p3_circle::point::Point",
                                                      "y"
                                                    |)
                                                  |);
                                                  M.call_closure (|
                                                    F,
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "p3_circle::point::Point")
                                                        []
                                                        [ F ],
                                                      "s_p_at_p",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| pt |); M.read (| log_n |) ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            Value.Tuple [ M.read (| numer |); M.read (| denom |) ]
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let numer := M.copy (| γ0_0 |) in
                  let denom := M.copy (| γ0_1 |) in
                  let~ inv_d :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ EF; Ty.path "alloc::alloc::Global" ]
                        ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ EF; Ty.path "alloc::alloc::Global" ],
                        M.get_function (|
                          "p3_field::batch_inverse::batch_multiplicative_inverse",
                          [],
                          [ EF ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ EF ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ EF; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.borrow (| Pointer.Kind.Ref, denom |) |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ EF; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              []
                              [
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ];
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ]
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ EF ];
                                        Ty.apply (Ty.path "&") [] [ EF ]
                                      ]
                                  ]
                              ]
                              EF
                          ],
                        [],
                        [],
                        "collect",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ EF; Ty.path "alloc::alloc::Global" ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                []
                                [
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ];
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ]
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply (Ty.path "&") [] [ EF ];
                                          Ty.apply (Ty.path "&") [] [ EF ]
                                        ]
                                    ]
                                ]
                                EF
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              []
                              [
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ];
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ]
                              ],
                            [],
                            [],
                            "map",
                            [],
                            [
                              EF;
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply (Ty.path "&") [] [ EF ];
                                          Ty.apply (Ty.path "&") [] [ EF ]
                                        ]
                                    ]
                                ]
                                EF
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                []
                                [
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ];
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ],
                                [],
                                [],
                                "zip",
                                [],
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ] ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ EF ],
                                    "iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ EF ] ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, numer |) ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ EF ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ EF ],
                                    "iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ EF ] ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, inv_d |) ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply (Ty.path "&") [] [ EF ];
                                                        Ty.apply (Ty.path "&") [] [ EF ]
                                                      ]
                                                  ]
                                              ]
                                              EF
                                          ],
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let γ0_0 := M.read (| γ0_0 |) in
                                              let num := M.copy (| γ0_0 |) in
                                              let γ0_1 := M.read (| γ0_1 |) in
                                              let inv_d := M.copy (| γ0_1 |) in
                                              M.call_closure (|
                                                EF,
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  EF,
                                                  [],
                                                  [ EF ],
                                                  "mul",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| num |); M.read (| inv_d |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_compute_lagrange_den_batched :
    M.IsFunction.C "p3_circle::point::compute_lagrange_den_batched" compute_lagrange_den_batched.
  Admitted.
  Global Typeclasses Opaque compute_lagrange_den_batched.
  
  
  Module Impl_core_ops_arith_Neg_where_p3_field_field_Field_F_for_p3_circle_point_Point_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ].
    
    (*     type Output = Self; *)
    Definition _Output (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ].
    
    (*
        fn neg(mut self) -> Self::Output {
            self.y = -self.y;
            self
        }
    *)
    Definition neg (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.SubPointer.get_struct_record_field (| self, "p3_circle::point::Point", "y" |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::ops::arith::Neg", F, [], [], "neg", [], [] |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "p3_circle::point::Point",
                          "y"
                        |)
                      |)
                    ]
                  |)
                |)
              |) in
            self
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Neg"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output F)); ("neg", InstanceField.Method (neg F)) ].
  End Impl_core_ops_arith_Neg_where_p3_field_field_Field_F_for_p3_circle_point_Point_F.
  
  Module Impl_core_ops_arith_Add_where_p3_field_field_Field_F_where_p3_field_field_ExtensionField_EF_F_p3_circle_point_Point_F_for_p3_circle_point_Point_EF.
    Definition Self (F EF : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ].
    
    (*     type Output = Self; *)
    Definition _Output (F EF : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ].
    
    (*
        fn add(self, rhs: Point<F>) -> Self::Output {
            Self::new(
                self.x * rhs.x - self.y * rhs.y,
                self.x * rhs.y + self.y * rhs.x,
            )
        }
    *)
    Definition add (F EF : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F EF in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ],
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                EF,
                M.get_trait_method (| "core::ops::arith::Sub", EF, [], [ EF ], "sub", [], [] |),
                [
                  M.call_closure (|
                    EF,
                    M.get_trait_method (| "core::ops::arith::Mul", EF, [], [ F ], "mul", [], [] |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "p3_circle::point::Point",
                          "x"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          rhs,
                          "p3_circle::point::Point",
                          "x"
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    EF,
                    M.get_trait_method (| "core::ops::arith::Mul", EF, [], [ F ], "mul", [], [] |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "p3_circle::point::Point",
                          "y"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          rhs,
                          "p3_circle::point::Point",
                          "y"
                        |)
                      |)
                    ]
                  |)
                ]
              |);
              M.call_closure (|
                EF,
                M.get_trait_method (| "core::ops::arith::Add", EF, [], [ EF ], "add", [], [] |),
                [
                  M.call_closure (|
                    EF,
                    M.get_trait_method (| "core::ops::arith::Mul", EF, [], [ F ], "mul", [], [] |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "p3_circle::point::Point",
                          "x"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          rhs,
                          "p3_circle::point::Point",
                          "y"
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    EF,
                    M.get_trait_method (| "core::ops::arith::Mul", EF, [], [ F ], "mul", [], [] |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "p3_circle::point::Point",
                          "y"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          rhs,
                          "p3_circle::point::Point",
                          "x"
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F EF : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Add"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ]
        (Self F EF)
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output F EF)); ("add", InstanceField.Method (add F EF)) ].
  End Impl_core_ops_arith_Add_where_p3_field_field_Field_F_where_p3_field_field_ExtensionField_EF_F_p3_circle_point_Point_F_for_p3_circle_point_Point_EF.
  
  Module Impl_core_ops_arith_AddAssign_where_p3_field_field_Field_F_p3_circle_point_Point_F_for_p3_circle_point_Point_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ].
    
    (*
        fn add_assign(&mut self, rhs: Self) {
            *self = *self + rhs;
        }
    *)
    Definition add_assign (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
                      [],
                      [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ],
                      "add",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::AddAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ]
        (Self F)
        (* Instance *) [ ("add_assign", InstanceField.Method (add_assign F)) ].
  End Impl_core_ops_arith_AddAssign_where_p3_field_field_Field_F_p3_circle_point_Point_F_for_p3_circle_point_Point_F.
  
  Module Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_where_p3_field_field_ExtensionField_EF_F_p3_circle_point_Point_F_for_p3_circle_point_Point_EF.
    Definition Self (F EF : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ].
    
    (*     type Output = Self; *)
    Definition _Output (F EF : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ].
    
    (*
        fn sub(self, rhs: Point<F>) -> Self::Output {
            Self::new(
                self.x * rhs.x + self.y * rhs.y,
                self.y * rhs.x - self.x * rhs.y,
            )
        }
    *)
    Definition sub (F EF : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F EF in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ],
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_circle::point::Point") [] [ EF ],
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                EF,
                M.get_trait_method (| "core::ops::arith::Add", EF, [], [ EF ], "add", [], [] |),
                [
                  M.call_closure (|
                    EF,
                    M.get_trait_method (| "core::ops::arith::Mul", EF, [], [ F ], "mul", [], [] |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "p3_circle::point::Point",
                          "x"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          rhs,
                          "p3_circle::point::Point",
                          "x"
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    EF,
                    M.get_trait_method (| "core::ops::arith::Mul", EF, [], [ F ], "mul", [], [] |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "p3_circle::point::Point",
                          "y"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          rhs,
                          "p3_circle::point::Point",
                          "y"
                        |)
                      |)
                    ]
                  |)
                ]
              |);
              M.call_closure (|
                EF,
                M.get_trait_method (| "core::ops::arith::Sub", EF, [], [ EF ], "sub", [], [] |),
                [
                  M.call_closure (|
                    EF,
                    M.get_trait_method (| "core::ops::arith::Mul", EF, [], [ F ], "mul", [], [] |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "p3_circle::point::Point",
                          "y"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          rhs,
                          "p3_circle::point::Point",
                          "x"
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    EF,
                    M.get_trait_method (| "core::ops::arith::Mul", EF, [], [ F ], "mul", [], [] |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "p3_circle::point::Point",
                          "x"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          rhs,
                          "p3_circle::point::Point",
                          "y"
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F EF : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Sub"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ]
        (Self F EF)
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output F EF)); ("sub", InstanceField.Method (sub F EF)) ].
  End Impl_core_ops_arith_Sub_where_p3_field_field_Field_F_where_p3_field_field_ExtensionField_EF_F_p3_circle_point_Point_F_for_p3_circle_point_Point_EF.
  
  Module Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_usize_for_p3_circle_point_Point_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ].
    
    (*     type Output = Self; *)
    Definition _Output (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ].
    
    (*
        fn mul(mut self, mut rhs: usize) -> Self::Output {
            let mut res = Self::ZERO;
            while rhs != 0 {
                if rhs & 1 == 1 {
                    res += self;
                }
                rhs >>= 1;
                self = self.double();
            }
            res
        }
    *)
    Definition mul (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ res :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ] ] :=
              M.copy (|
                get_associated_constant (|
                  Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
                  "ZERO",
                  Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.loop (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.ne,
                                  [ M.read (| rhs |); Value.Integer IntegerKind.Usize 0 ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.eq,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.bit_and,
                                                [
                                                  M.read (| rhs |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "core::ops::arith::AddAssign",
                                            Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
                                            [],
                                            [ Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ]
                                            ],
                                            "add_assign",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.MutRef, res |);
                                            M.read (| self |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              let β := rhs in
                              M.write (|
                                β,
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.shr,
                                  [ M.read (| β |); Value.Integer IntegerKind.I32 1 ]
                                |)
                              |)
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.write (|
                                self,
                                M.call_closure (|
                                  Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "p3_circle::point::Point") [] [ F ],
                                    "double",
                                    [],
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                M.alloc (| Value.Tuple [] |)
                              |)
                            |)
                          |)))
                    ]
                  |)))
              |) in
            res
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Mul"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "usize" ]
        (Self F)
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output F)); ("mul", InstanceField.Method (mul F)) ].
  End Impl_core_ops_arith_Mul_where_p3_field_field_Field_F_usize_for_p3_circle_point_Point_F.
End point.
