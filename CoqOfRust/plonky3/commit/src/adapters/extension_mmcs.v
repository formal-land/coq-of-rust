(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module adapters.
  Module extension_mmcs.
    (* StructRecord
      {
        name := "ExtensionMmcs";
        const_params := [];
        ty_params := [ "F"; "EF"; "InnerMmcs" ];
        fields :=
          [
            ("inner", InnerMmcs);
            ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ Ty.tuple [ F; EF ] ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_EF_where_core_clone_Clone_InnerMmcs_for_p3_commit_adapters_extension_mmcs_ExtensionMmcs_F_EF_InnerMmcs.
      Definition Self (F EF InnerMmcs : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
          []
          [ F; EF; InnerMmcs ].
      
      (* Clone *)
      Definition clone
          (F EF InnerMmcs : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F EF InnerMmcs in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "p3_commit::adapters::extension_mmcs::ExtensionMmcs"
              [
                ("inner",
                  M.call_closure (|
                    InnerMmcs,
                    M.get_trait_method (|
                      "core::clone::Clone",
                      InnerMmcs,
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_commit::adapters::extension_mmcs::ExtensionMmcs",
                              "inner"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("_phantom",
                  M.call_closure (|
                    Ty.apply (Ty.path "core::marker::PhantomData") [] [ Ty.tuple [ F; EF ] ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "core::marker::PhantomData") [] [ Ty.tuple [ F; EF ] ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_commit::adapters::extension_mmcs::ExtensionMmcs",
                              "_phantom"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F EF InnerMmcs : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F EF InnerMmcs)
          (* Instance *) [ ("clone", InstanceField.Method (clone F EF InnerMmcs)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_core_clone_Clone_EF_where_core_clone_Clone_InnerMmcs_for_p3_commit_adapters_extension_mmcs_ExtensionMmcs_F_EF_InnerMmcs.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_EF_where_core_fmt_Debug_InnerMmcs_for_p3_commit_adapters_extension_mmcs_ExtensionMmcs_F_EF_InnerMmcs.
      Definition Self (F EF InnerMmcs : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
          []
          [ F; EF; InnerMmcs ].
      
      (* Debug *)
      Definition fmt
          (F EF InnerMmcs : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F EF InnerMmcs in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "ExtensionMmcs" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_commit::adapters::extension_mmcs::ExtensionMmcs",
                          "inner"
                        |)
                      |)
                    |)
                  |));
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_phantom" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "p3_commit::adapters::extension_mmcs::ExtensionMmcs",
                              "_phantom"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F EF InnerMmcs : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F EF InnerMmcs)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F EF InnerMmcs)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_core_fmt_Debug_EF_where_core_fmt_Debug_InnerMmcs_for_p3_commit_adapters_extension_mmcs_ExtensionMmcs_F_EF_InnerMmcs.
    
    Module Impl_p3_commit_adapters_extension_mmcs_ExtensionMmcs_F_EF_InnerMmcs.
      Definition Self (F EF InnerMmcs : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
          []
          [ F; EF; InnerMmcs ].
      
      (*
          pub const fn new(inner: InnerMmcs) -> Self {
              Self {
                  inner,
                  _phantom: PhantomData,
              }
          }
      *)
      Definition new
          (F EF InnerMmcs : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F EF InnerMmcs in
        match ε, τ, α with
        | [], [], [ inner ] =>
          ltac:(M.monadic
            (let inner := M.alloc (| inner |) in
            Value.StructRecord
              "p3_commit::adapters::extension_mmcs::ExtensionMmcs"
              [
                ("inner", M.read (| inner |));
                ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F EF InnerMmcs : Ty.t),
        M.IsAssociatedFunction.C (Self F EF InnerMmcs) "new" (new F EF InnerMmcs).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_p3_commit_adapters_extension_mmcs_ExtensionMmcs_F_EF_InnerMmcs.
    
    Module Impl_p3_commit_mmcs_Mmcs_where_p3_field_field_Field_F_where_p3_field_field_ExtensionField_EF_F_where_p3_commit_mmcs_Mmcs_InnerMmcs_F_EF_for_p3_commit_adapters_extension_mmcs_ExtensionMmcs_F_EF_InnerMmcs.
      Definition Self (F EF InnerMmcs : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
          []
          [ F; EF; InnerMmcs ].
      
      (*     type ProverData<M> = InnerMmcs::ProverData<FlatMatrixView<F, EF, M>>; *)
      Definition _ProverData (F EF InnerMmcs : Ty.t) : Ty.t :=
        Ty.associated_in_trait
          "p3_commit::mmcs::Mmcs"
          []
          [ F; Ty.apply (Ty.path "p3_matrix::extension::FlatMatrixView") [] [ F; EF; M_ ] ]
          InnerMmcs
          "ProverData".
      
      (*     type Commitment = InnerMmcs::Commitment; *)
      Definition _Commitment (F EF InnerMmcs : Ty.t) : Ty.t :=
        Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ F ] InnerMmcs "Commitment".
      
      (*     type Proof = InnerMmcs::Proof; *)
      Definition _Proof (F EF InnerMmcs : Ty.t) : Ty.t :=
        Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ F ] InnerMmcs "Proof".
      
      (*     type Error = InnerMmcs::Error; *)
      Definition _Error (F EF InnerMmcs : Ty.t) : Ty.t :=
        Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ F ] InnerMmcs "Error".
      
      (*
          fn commit<M: Matrix<EF>>(&self, inputs: Vec<M>) -> (Self::Commitment, Self::ProverData<M>) {
              self.inner
                  .commit(inputs.into_iter().map(FlatMatrixView::new).collect())
          }
      *)
      Definition commit
          (F EF InnerMmcs : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F EF InnerMmcs in
        match ε, τ, α with
        | [], [ M_ ], [ self; inputs ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let inputs := M.alloc (| inputs |) in
            M.call_closure (|
              Ty.tuple
                [
                  Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ F ] InnerMmcs "Commitment";
                  Ty.associated_in_trait
                    "p3_commit::mmcs::Mmcs"
                    []
                    [ F; Ty.apply (Ty.path "p3_matrix::extension::FlatMatrixView") [] [ F; EF; M_ ]
                    ]
                    InnerMmcs
                    "ProverData"
                ],
              M.get_trait_method (|
                "p3_commit::mmcs::Mmcs",
                InnerMmcs,
                [],
                [ F ],
                "commit",
                [],
                [ Ty.apply (Ty.path "p3_matrix::extension::FlatMatrixView") [] [ F; EF; M_ ] ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "p3_commit::adapters::extension_mmcs::ExtensionMmcs",
                    "inner"
                  |)
                |);
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply (Ty.path "p3_matrix::extension::FlatMatrixView") [] [ F; EF; M_ ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ M_; Ty.path "alloc::alloc::Global" ];
                        Ty.function
                          [ M_ ]
                          (Ty.apply
                            (Ty.path "p3_matrix::extension::FlatMatrixView")
                            []
                            [ F; EF; M_ ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_matrix::extension::FlatMatrixView")
                            []
                            [ F; EF; M_ ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ M_; Ty.path "alloc::alloc::Global" ];
                          Ty.function
                            [ M_ ]
                            (Ty.apply
                              (Ty.path "p3_matrix::extension::FlatMatrixView")
                              []
                              [ F; EF; M_ ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ M_; Ty.path "alloc::alloc::Global" ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.apply
                            (Ty.path "p3_matrix::extension::FlatMatrixView")
                            []
                            [ F; EF; M_ ];
                          Ty.function
                            [ M_ ]
                            (Ty.apply
                              (Ty.path "p3_matrix::extension::FlatMatrixView")
                              []
                              [ F; EF; M_ ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ M_; Ty.path "alloc::alloc::Global" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ M_; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| inputs |) ]
                        |);
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "p3_matrix::extension::FlatMatrixView")
                            []
                            [ F; EF; M_ ],
                          "new",
                          [],
                          []
                        |)
                      ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn open_batch<M: Matrix<EF>>(
              &self,
              index: usize,
              prover_data: &Self::ProverData<M>,
          ) -> (Vec<Vec<EF>>, Self::Proof) {
              let (opened_base_values, proof) = self.inner.open_batch(index, prover_data);
              let opened_ext_values = opened_base_values
                  .into_iter()
                  .map(|row| {
                      // By construction, the width of the row is a multiple of EF::DIMENSION.
                      // So there will be no remainder when we call chunks_exact.
                      row.chunks_exact(EF::DIMENSION)
                          // As each chunk has length EF::DIMENSION, from_basis_coefficients_slice
                          // will produce some(elem) which into_iter converts to the iterator once(elem).
                          .flat_map(EF::from_basis_coefficients_slice)
                          .collect()
                  })
                  .collect();
              (opened_ext_values, proof)
          }
      *)
      Definition open_batch
          (F EF InnerMmcs : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F EF InnerMmcs in
        match ε, τ, α with
        | [], [ M_ ], [ self; index; prover_data ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let index := M.alloc (| index |) in
            let prover_data := M.alloc (| prover_data |) in
            M.read (|
              M.match_operator (|
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ EF; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ F ] InnerMmcs "Proof"
                      ]
                  ],
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ F ] InnerMmcs "Proof"
                      ],
                    M.get_trait_method (|
                      "p3_commit::mmcs::Mmcs",
                      InnerMmcs,
                      [],
                      [ F ],
                      "open_batch",
                      [],
                      [ Ty.apply (Ty.path "p3_matrix::extension::FlatMatrixView") [] [ F; EF; M_ ] ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "p3_commit::adapters::extension_mmcs::ExtensionMmcs",
                          "inner"
                        |)
                      |);
                      M.read (| index |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| prover_data |) |) |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let opened_base_values := M.copy (| γ0_0 |) in
                      let proof := M.copy (| γ0_1 |) in
                      let~ opened_ext_values :
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ EF; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ EF; Ty.path "alloc::alloc::Global" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ EF; Ty.path "alloc::alloc::Global" ])
                                ],
                              [],
                              [],
                              "collect",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ EF; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ F; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ EF; Ty.path "alloc::alloc::Global" ])
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "map",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ EF; Ty.path "alloc::alloc::Global" ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ EF; Ty.path "alloc::alloc::Global" ])
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ F; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "into_iter",
                                      [],
                                      []
                                    |),
                                    [ M.read (| opened_base_values |) ]
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ F; Ty.path "alloc::alloc::Global" ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ EF; Ty.path "alloc::alloc::Global" ])
                                                ],
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let row := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ EF; Ty.path "alloc::alloc::Global" ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::flatten::FlatMap")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::slice::iter::ChunksExact")
                                                              []
                                                              [ F ];
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [ EF ];
                                                            Ty.function
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ F ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ EF ])
                                                          ],
                                                        [],
                                                        [],
                                                        "collect",
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ EF; Ty.path "alloc::alloc::Global" ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::flatten::FlatMap")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::ChunksExact")
                                                                []
                                                                [ F ];
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ EF ];
                                                              Ty.function
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ F ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ EF ])
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::slice::iter::ChunksExact")
                                                              []
                                                              [ F ],
                                                            [],
                                                            [],
                                                            "flat_map",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ EF ];
                                                              Ty.function
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ F ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ EF ])
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::ChunksExact")
                                                                []
                                                                [ F ],
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ F ],
                                                                "chunks_exact",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [ F ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::Deref",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            F;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "deref",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          row
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  get_constant (|
                                                                    "p3_field::field::BasedVectorSpace::DIMENSION",
                                                                    Ty.path "usize"
                                                                  |)
                                                                |)
                                                              ]
                                                            |);
                                                            M.get_trait_method (|
                                                              "p3_field::field::BasedVectorSpace",
                                                              EF,
                                                              [],
                                                              [ F ],
                                                              "from_basis_coefficients_slice",
                                                              [],
                                                              []
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end))
                                ]
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (|
                        Value.Tuple [ M.read (| opened_ext_values |); M.read (| proof |) ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn get_matrices<'a, M: Matrix<EF>>(&self, prover_data: &'a Self::ProverData<M>) -> Vec<&'a M> {
              self.inner
                  .get_matrices(prover_data)
                  .into_iter()
                  .map(|mat| mat.deref())
                  .collect()
          }
      *)
      Definition get_matrices
          (F EF InnerMmcs : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F EF InnerMmcs in
        match ε, τ, α with
        | [], [ M_ ], [ self; prover_data ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let prover_data := M.alloc (| prover_data |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global" ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_matrix::extension::FlatMatrixView")
                              []
                              [ F; EF; M_ ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::extension::FlatMatrixView")
                                  []
                                  [ F; EF; M_ ]
                              ]
                          ]
                      ]
                      (Ty.apply (Ty.path "&") [] [ M_ ])
                  ],
                [],
                [],
                "collect",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global" ]
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::extension::FlatMatrixView")
                                []
                                [ F; EF; M_ ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_matrix::extension::FlatMatrixView")
                                    []
                                    [ F; EF; M_ ]
                                ]
                            ]
                        ]
                        (Ty.apply (Ty.path "&") [] [ M_ ])
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_matrix::extension::FlatMatrixView")
                              []
                              [ F; EF; M_ ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "map",
                    [],
                    [
                      Ty.apply (Ty.path "&") [] [ M_ ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_matrix::extension::FlatMatrixView")
                                    []
                                    [ F; EF; M_ ]
                                ]
                            ]
                        ]
                        (Ty.apply (Ty.path "&") [] [ M_ ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::extension::FlatMatrixView")
                                []
                                [ F; EF; M_ ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::extension::FlatMatrixView")
                                  []
                                  [ F; EF; M_ ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_matrix::extension::FlatMatrixView")
                                    []
                                    [ F; EF; M_ ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "p3_commit::mmcs::Mmcs",
                            InnerMmcs,
                            [],
                            [ F ],
                            "get_matrices",
                            [],
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::extension::FlatMatrixView")
                                []
                                [ F; EF; M_ ]
                            ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "p3_commit::adapters::extension_mmcs::ExtensionMmcs",
                                "inner"
                              |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| prover_data |) |) |)
                          ]
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_matrix::extension::FlatMatrixView")
                                                  []
                                                  [ F; EF; M_ ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply (Ty.path "&") [] [ M_ ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let mat := M.copy (| γ |) in
                                      M.call_closure (|
                                        Ty.apply (Ty.path "&") [] [ M_ ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "p3_matrix::extension::FlatMatrixView")
                                            []
                                            [ F; EF; M_ ],
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| mat |) |)
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn verify_batch(
              &self,
              commit: &Self::Commitment,
              dimensions: &[Dimensions],
              index: usize,
              opened_values: &[Vec<EF>],
              proof: &Self::Proof,
          ) -> Result<(), Self::Error> {
              let opened_base_values: Vec<Vec<F>> = opened_values
                  .iter()
                  .map(|row| {
                      row.iter()
                          .flat_map(|el| el.as_basis_coefficients_slice())
                          .copied()
                          .collect()
                  })
                  .collect();
              let base_dimensions = dimensions
                  .iter()
                  .map(|dim| Dimensions {
                      width: dim.width * EF::DIMENSION,
                      height: dim.height,
                  })
                  .collect::<Vec<_>>();
              self.inner
                  .verify_batch(commit, &base_dimensions, index, &opened_base_values, proof)
          }
      *)
      Definition verify_batch
          (F EF InnerMmcs : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F EF InnerMmcs in
        match ε, τ, α with
        | [], [], [ self; commit; dimensions; index; opened_values; proof ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let commit := M.alloc (| commit |) in
            let dimensions := M.alloc (| dimensions |) in
            let index := M.alloc (| index |) in
            let opened_values := M.alloc (| opened_values |) in
            let proof := M.alloc (| proof |) in
            M.read (|
              let~ opened_base_values :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ EF; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ EF; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ])
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ EF; Ty.path "alloc::alloc::Global" ]
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ EF; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ])
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ EF; Ty.path "alloc::alloc::Global" ]
                            ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ EF; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ EF; Ty.path "alloc::alloc::Global" ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ EF; Ty.path "alloc::alloc::Global" ]
                                ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.read (| opened_values |) |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ EF; Ty.path "alloc::alloc::Global" ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ])
                                        ],
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let row := M.copy (| γ |) in
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::copied::Copied")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ EF ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ F ] ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [ Ty.apply (Ty.path "&") [] [ EF ] ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ])
                                                      ]
                                                  ],
                                                [],
                                                [],
                                                "collect",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::copied::Copied")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::flatten::FlatMap")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ EF ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [ Ty.apply (Ty.path "&") [] [ EF ] ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.apply (Ty.path "slice") [] [ F ]
                                                              ])
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ EF ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ F ] ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [ Ty.apply (Ty.path "&") [] [ EF ] ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ])
                                                      ],
                                                    [],
                                                    [],
                                                    "copied",
                                                    [],
                                                    [ F ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::flatten::FlatMap")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ EF ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [ Ty.apply (Ty.path "&") [] [ EF ] ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.apply (Ty.path "slice") [] [ F ]
                                                              ])
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ EF ],
                                                        [],
                                                        [],
                                                        "flat_map",
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ F ] ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [ Ty.apply (Ty.path "&") [] [ EF ] ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.apply (Ty.path "slice") [] [ F ]
                                                              ])
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ EF ],
                                                          M.get_associated_function (|
                                                            Ty.apply (Ty.path "slice") [] [ EF ],
                                                            "iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ EF ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        EF;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "deref",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (| M.read (| row |) |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0 ] =>
                                                                ltac:(M.monadic
                                                                  (M.match_operator (|
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ EF ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [ F ]
                                                                            ])
                                                                      ],
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let el :=
                                                                            M.copy (| γ |) in
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ F ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "p3_field::field::BasedVectorSpace",
                                                                              EF,
                                                                              [],
                                                                              [ F ],
                                                                              "as_basis_coefficients_slice",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (| el |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)))
                                                                    ]
                                                                  |)))
                                                              | _ =>
                                                                M.impossible
                                                                  "wrong number of arguments"
                                                              end))
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ base_dimensions :
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "p3_matrix::Dimensions"; Ty.path "alloc::alloc::Global" ]
                    ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "p3_matrix::Dimensions"; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.path "p3_matrix::Dimensions" ];
                          Ty.function
                            [
                              Ty.tuple
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "p3_matrix::Dimensions" ] ]
                            ]
                            (Ty.path "p3_matrix::Dimensions")
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "p3_matrix::Dimensions"; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.path "p3_matrix::Dimensions" ];
                            Ty.function
                              [
                                Ty.tuple
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "p3_matrix::Dimensions" ] ]
                              ]
                              (Ty.path "p3_matrix::Dimensions")
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.path "p3_matrix::Dimensions" ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.path "p3_matrix::Dimensions";
                            Ty.function
                              [
                                Ty.tuple
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "p3_matrix::Dimensions" ] ]
                              ]
                              (Ty.path "p3_matrix::Dimensions")
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.path "p3_matrix::Dimensions" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "p3_matrix::Dimensions" ],
                              "iter",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| dimensions |) |) |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "p3_matrix::Dimensions" ]
                                                ]
                                            ]
                                            (Ty.path "p3_matrix::Dimensions")
                                        ],
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let dim := M.copy (| γ |) in
                                            Value.StructRecord
                                              "p3_matrix::Dimensions"
                                              [
                                                ("width",
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.mul,
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| dim |) |),
                                                          "p3_matrix::Dimensions",
                                                          "width"
                                                        |)
                                                      |);
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_field::field::BasedVectorSpace::DIMENSION",
                                                          Ty.path "usize"
                                                        |)
                                                      |)
                                                    ]
                                                  |));
                                                ("height",
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| dim |) |),
                                                      "p3_matrix::Dimensions",
                                                      "height"
                                                    |)
                                                  |))
                                              ]))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.tuple [];
                      Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ F ] InnerMmcs "Error"
                    ],
                  M.get_trait_method (|
                    "p3_commit::mmcs::Mmcs",
                    InnerMmcs,
                    [],
                    [ F ],
                    "verify_batch",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_commit::adapters::extension_mmcs::ExtensionMmcs",
                        "inner"
                      |)
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| commit |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "p3_matrix::Dimensions" ] ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "p3_matrix::Dimensions"; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, base_dimensions |) |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.read (| index |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, opened_base_values |) |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| proof |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F EF InnerMmcs : Ty.t),
        M.IsTraitInstance
          "p3_commit::mmcs::Mmcs"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ EF ]
          (Self F EF InnerMmcs)
          (* Instance *)
          [
            ("ProverData", InstanceField.Ty (_ProverData F EF InnerMmcs));
            ("Commitment", InstanceField.Ty (_Commitment F EF InnerMmcs));
            ("Proof", InstanceField.Ty (_Proof F EF InnerMmcs));
            ("Error", InstanceField.Ty (_Error F EF InnerMmcs));
            ("commit", InstanceField.Method (commit F EF InnerMmcs));
            ("open_batch", InstanceField.Method (open_batch F EF InnerMmcs));
            ("get_matrices", InstanceField.Method (get_matrices F EF InnerMmcs));
            ("verify_batch", InstanceField.Method (verify_batch F EF InnerMmcs))
          ].
    End Impl_p3_commit_mmcs_Mmcs_where_p3_field_field_Field_F_where_p3_field_field_ExtensionField_EF_F_where_p3_commit_mmcs_Mmcs_InnerMmcs_F_EF_for_p3_commit_adapters_extension_mmcs_ExtensionMmcs_F_EF_InnerMmcs.
  End extension_mmcs.
End adapters.
