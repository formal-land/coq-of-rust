(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module domain.
  (* StructRecord
    {
      name := "LagrangeSelectors";
      const_params := [];
      ty_params := [ "T" ];
      fields :=
        [ ("is_first_row", T); ("is_last_row", T); ("is_transition", T); ("inv_vanishing", T) ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_p3_commit_domain_LagrangeSelectors_T.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_commit::domain::LagrangeSelectors") [] [ T ].
    
    (* Debug *)
    Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field4_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "LagrangeSelectors" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_first_row" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_commit::domain::LagrangeSelectors",
                        "is_first_row"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_last_row" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_commit::domain::LagrangeSelectors",
                        "is_last_row"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_transition" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_commit::domain::LagrangeSelectors",
                        "is_transition"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inv_vanishing" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_commit::domain::LagrangeSelectors",
                            "inv_vanishing"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self T)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_p3_commit_domain_LagrangeSelectors_T.
  
  (* Trait *)
  (* Empty module 'PolynomialSpace' *)
  
  Module Impl_p3_commit_domain_PolynomialSpace_where_p3_field_field_TwoAdicField_Val_for_p3_field_coset_TwoAdicMultiplicativeCoset_Val.
    Definition Self (Val : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ].
    
    (*     type Val = Val; *)
    Definition _Val (Val : Ty.t) : Ty.t := Val.
    
    (*
        fn size(&self) -> usize {
            self.size()
        }
    *)
    Definition size (Val : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Val in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ],
              "size",
              [],
              []
            |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn first_point(&self) -> Self::Val {
            self.shift()
        }
    *)
    Definition first_point (Val : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Val in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Val,
            M.get_associated_function (|
              Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ],
              "shift",
              [],
              []
            |),
            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn next_point<Ext: ExtensionField<Val>>(&self, x: Ext) -> Option<Ext> {
            Some(x * self.subgroup_generator())
        }
    *)
    Definition next_point (Val : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Val in
      match ε, τ, α with
      | [], [ Ext ], [ self; x ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let x := M.alloc (| x |) in
          Value.StructTuple
            "core::option::Option::Some"
            [
              M.call_closure (|
                Ext,
                M.get_trait_method (| "core::ops::arith::Mul", Ext, [], [ Val ], "mul", [], [] |),
                [
                  M.read (| x |);
                  M.call_closure (|
                    Val,
                    M.get_associated_function (|
                      Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ],
                      "subgroup_generator",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn create_disjoint_domain(&self, min_size: usize) -> Self {
            // We provide a short proof that these cosets are always disjoint:
            //
            // Assume without loss of generality that `|H| <= min_size <= |K|`.
            // Then we know that `gH` is entirely contained in `gK`. As cosets are
            // either equal or disjoint, this means that `gH` is disjoint from `g'K`
            // for every `g'` not contained in `gK`. As `f` is a generator of `F^*`
            // it does not lie in `K` and so `gf` cannot lie in `gK`.
            //
            // Thus `gH` and `gfK` are disjoint.
    
            // This panics if (and only if) `min_size` > `1 << Val::TWO_ADICITY`.
            Self::new(self.shift() * Val::GENERATOR, log2_ceil_usize(min_size)).unwrap()
        }
    *)
    Definition create_disjoint_domain
        (Val : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val in
      match ε, τ, α with
      | [], [], [ self; min_size ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let min_size := M.alloc (| min_size |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ] ],
              "unwrap",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ] ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Val,
                    M.get_trait_method (|
                      "core::ops::arith::Mul",
                      Val,
                      [],
                      [ Val ],
                      "mul",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Val,
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                            []
                            [ Val ],
                          "shift",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |);
                      M.read (| get_constant (| "p3_field::field::Field::GENERATOR", Val |) |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "p3_util::log2_ceil_usize", [], [] |),
                    [ M.read (| min_size |) ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn split_domains(&self, num_chunks: usize) -> Vec<Self> {
            let log_chunks = log2_strict_usize(num_chunks);
            debug_assert!(log_chunks <= self.log_size());
            (0..num_chunks)
                .map(|i| {
                    Self::new(
                        self.shift() * self.subgroup_generator().exp_u64(i as u64),
                        self.log_size() - log_chunks,
                    )
                    .unwrap() // This won't panic as `self.log_size() - log_chunks < self.log_size() < Val::TWO_ADICITY`
                })
                .collect()
        }
    *)
    Definition split_domains
        (Val : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val in
      match ε, τ, α with
      | [], [], [ self; num_chunks ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let num_chunks := M.alloc (| num_chunks |) in
          M.read (|
            let~ log_chunks : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                  [ M.read (| num_chunks |) ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.le,
                                          [
                                            M.read (| log_chunks |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                  []
                                                  [ Val ],
                                                "log_size",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic", [], [] |),
                                      [
                                        mk_str (|
                                          "assertion failed: log_chunks <= self.log_size()"
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply
                          (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                          []
                          [ Val ])
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.apply
                            (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                            []
                            [ Val ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.apply
                            (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                            []
                            [ Val ])
                      ]
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_", M.read (| num_chunks |))
                        ];
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.apply
                                          (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                          []
                                          [ Val ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let i := M.copy (| γ |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                            []
                                            [ Val ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                  []
                                                  [ Val ]
                                              ],
                                            "unwrap",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                    []
                                                    [ Val ]
                                                ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                  []
                                                  [ Val ],
                                                "new",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Val,
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Mul",
                                                    Val,
                                                    [],
                                                    [ Val ],
                                                    "mul",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Val,
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                          []
                                                          [ Val ],
                                                        "shift",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| self |) |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Val,
                                                      M.get_trait_method (|
                                                        "p3_field::field::PrimeCharacteristicRing",
                                                        Val,
                                                        [],
                                                        [],
                                                        "exp_u64",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Val,
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                  []
                                                                  [ Val ],
                                                                "subgroup_generator",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| self |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.cast (Ty.path "u64") (M.read (| i |))
                                                      ]
                                                    |)
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.sub,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                          []
                                                          [ Val ],
                                                        "log_size",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| self |) |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.read (| log_chunks |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn split_evals(
            &self,
            num_chunks: usize,
            evals: RowMajorMatrix<Self::Val>,
        ) -> Vec<RowMajorMatrix<Self::Val>> {
            debug_assert_eq!(evals.height(), self.size());
            debug_assert!(log2_strict_usize(num_chunks) <= self.log_size());
            // todo less copy
            (0..num_chunks)
                .map(|i| {
                    evals
                        .as_view()
                        .vertically_strided(num_chunks, i)
                        .to_row_major_matrix()
                })
                .collect()
        }
    *)
    Definition split_evals (Val : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Val in
      match ε, τ, α with
      | [], [], [ self; num_chunks; evals ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let num_chunks := M.alloc (| num_chunks |) in
          let evals := M.alloc (| evals |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (|
                            Value.Tuple
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_trait_method (|
                                        "p3_matrix::Matrix",
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            Val;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Val; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        [],
                                        [ Val ],
                                        "height",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, evals |) ]
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                          []
                                          [ Val ],
                                        "size",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val := M.copy (| γ0_0 |) in
                                let right_val := M.copy (| γ0_1 |) in
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.eq,
                                                  [
                                                    M.read (|
                                                      M.deref (| M.read (| left_val |) |)
                                                    |);
                                                    M.read (|
                                                      M.deref (| M.read (| right_val |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let~ kind :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [ Ty.path "core::panicking::AssertKind" ] :=
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [],
                                                    [ Ty.path "usize"; Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| left_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.le,
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_function (|
                                                "p3_util::log2_strict_usize",
                                                [],
                                                []
                                              |),
                                              [ M.read (| num_chunks |) ]
                                            |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                  []
                                                  [ Val ],
                                                "log_size",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic", [], [] |),
                                      [
                                        mk_str (|
                                          "assertion failed: log2_strict_usize(num_chunks) <= self.log_size()"
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        Val;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Val; Ty.path "alloc::alloc::Global" ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                      Ty.function
                        [ Ty.tuple [ Ty.path "usize" ] ]
                        (Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            Val;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Val; Ty.path "alloc::alloc::Global" ]
                          ])
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            Val;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Val; Ty.path "alloc::alloc::Global" ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Val;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Val; Ty.path "alloc::alloc::Global" ]
                            ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            Val;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Val; Ty.path "alloc::alloc::Global" ]
                          ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize" ] ]
                          (Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Val;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Val; Ty.path "alloc::alloc::Global" ]
                            ])
                      ]
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_", M.read (| num_chunks |))
                        ];
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            Val;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Val; Ty.path "alloc::alloc::Global" ]
                                          ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let i := M.copy (| γ |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              Val;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Val; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          M.get_trait_method (|
                                            "p3_matrix::Matrix",
                                            Ty.apply
                                              (Ty.path
                                                "p3_matrix::row_index_mapped::RowIndexMappedView")
                                              []
                                              [
                                                Ty.path
                                                  "p3_matrix::strided::VerticallyStridedRowIndexMap";
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    Val;
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ Val ] ]
                                                  ]
                                              ],
                                            [],
                                            [ Val ],
                                            "to_row_major_matrix",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path
                                                  "p3_matrix::row_index_mapped::RowIndexMappedView")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_matrix::strided::VerticallyStridedRowIndexMap";
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      Val;
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.apply (Ty.path "slice") [] [ Val ] ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "p3_matrix::Matrix",
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    Val;
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ Val ] ]
                                                  ],
                                                [],
                                                [ Val ],
                                                "vertically_strided",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      Val;
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.apply (Ty.path "slice") [] [ Val ] ]
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        Val;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ Val; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    "as_view",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, evals |) ]
                                                |);
                                                M.read (| num_chunks |);
                                                M.read (| i |)
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn vanishing_poly_at_point<Ext: ExtensionField<Val>>(&self, point: Ext) -> Ext {
            (point * self.shift().inverse()).exp_power_of_2(self.log_size()) - Ext::ONE
        }
    *)
    Definition vanishing_poly_at_point
        (Val : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val in
      match ε, τ, α with
      | [], [ Ext ], [ self; point ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let point := M.alloc (| point |) in
          M.call_closure (|
            Ext,
            M.get_trait_method (| "core::ops::arith::Sub", Ext, [], [ Ext ], "sub", [], [] |),
            [
              M.call_closure (|
                Ext,
                M.get_trait_method (|
                  "p3_field::field::PrimeCharacteristicRing",
                  Ext,
                  [],
                  [],
                  "exp_power_of_2",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      M.call_closure (|
                        Ext,
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ext,
                          [],
                          [ Val ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.read (| point |);
                          M.call_closure (|
                            Val,
                            M.get_trait_method (|
                              "p3_field::field::Field",
                              Val,
                              [],
                              [],
                              "inverse",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Val,
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                        []
                                        [ Val ],
                                      "shift",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ],
                      "log_size",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                ]
              |);
              M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", Ext |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn selectors_at_point<Ext: ExtensionField<Val>>(&self, point: Ext) -> LagrangeSelectors<Ext> {
            let unshifted_point = point * self.shift().inverse();
            let z_h = unshifted_point.exp_power_of_2(self.log_size()) - Ext::ONE;
            LagrangeSelectors {
                is_first_row: z_h / (unshifted_point - Ext::ONE),
                is_last_row: z_h / (unshifted_point - self.subgroup_generator().inverse()),
                is_transition: unshifted_point - self.subgroup_generator().inverse(),
                inv_vanishing: z_h.inverse(),
            }
        }
    *)
    Definition selectors_at_point
        (Val : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val in
      match ε, τ, α with
      | [], [ Ext ], [ self; point ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let point := M.alloc (| point |) in
          M.read (|
            let~ unshifted_point : Ty.apply (Ty.path "*") [] [ Ext ] :=
              M.alloc (|
                M.call_closure (|
                  Ext,
                  M.get_trait_method (| "core::ops::arith::Mul", Ext, [], [ Val ], "mul", [], [] |),
                  [
                    M.read (| point |);
                    M.call_closure (|
                      Val,
                      M.get_trait_method (|
                        "p3_field::field::Field",
                        Val,
                        [],
                        [],
                        "inverse",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.call_closure (|
                              Val,
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                  []
                                  [ Val ],
                                "shift",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ z_h : Ty.apply (Ty.path "*") [] [ Ext ] :=
              M.alloc (|
                M.call_closure (|
                  Ext,
                  M.get_trait_method (| "core::ops::arith::Sub", Ext, [], [ Ext ], "sub", [], [] |),
                  [
                    M.call_closure (|
                      Ext,
                      M.get_trait_method (|
                        "p3_field::field::PrimeCharacteristicRing",
                        Ext,
                        [],
                        [],
                        "exp_power_of_2",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, unshifted_point |);
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                              []
                              [ Val ],
                            "log_size",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      ]
                    |);
                    M.read (|
                      get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", Ext |)
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              Value.StructRecord
                "p3_commit::domain::LagrangeSelectors"
                [
                  ("is_first_row",
                    M.call_closure (|
                      Ext,
                      M.get_trait_method (|
                        "core::ops::arith::Div",
                        Ext,
                        [],
                        [ Ext ],
                        "div",
                        [],
                        []
                      |),
                      [
                        M.read (| z_h |);
                        M.call_closure (|
                          Ext,
                          M.get_trait_method (|
                            "core::ops::arith::Sub",
                            Ext,
                            [],
                            [ Ext ],
                            "sub",
                            [],
                            []
                          |),
                          [
                            M.read (| unshifted_point |);
                            M.read (|
                              get_constant (|
                                "p3_field::field::PrimeCharacteristicRing::ONE",
                                Ext
                              |)
                            |)
                          ]
                        |)
                      ]
                    |));
                  ("is_last_row",
                    M.call_closure (|
                      Ext,
                      M.get_trait_method (|
                        "core::ops::arith::Div",
                        Ext,
                        [],
                        [ Ext ],
                        "div",
                        [],
                        []
                      |),
                      [
                        M.read (| z_h |);
                        M.call_closure (|
                          Ext,
                          M.get_trait_method (|
                            "core::ops::arith::Sub",
                            Ext,
                            [],
                            [ Val ],
                            "sub",
                            [],
                            []
                          |),
                          [
                            M.read (| unshifted_point |);
                            M.call_closure (|
                              Val,
                              M.get_trait_method (|
                                "p3_field::field::Field",
                                Val,
                                [],
                                [],
                                "inverse",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    M.call_closure (|
                                      Val,
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                          []
                                          [ Val ],
                                        "subgroup_generator",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |));
                  ("is_transition",
                    M.call_closure (|
                      Ext,
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ext,
                        [],
                        [ Val ],
                        "sub",
                        [],
                        []
                      |),
                      [
                        M.read (| unshifted_point |);
                        M.call_closure (|
                          Val,
                          M.get_trait_method (|
                            "p3_field::field::Field",
                            Val,
                            [],
                            [],
                            "inverse",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                M.call_closure (|
                                  Val,
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                      []
                                      [ Val ],
                                    "subgroup_generator",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |));
                  ("inv_vanishing",
                    M.call_closure (|
                      Ext,
                      M.get_trait_method (|
                        "p3_field::field::Field",
                        Ext,
                        [],
                        [],
                        "inverse",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, z_h |) ]
                    |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn selectors_on_coset(&self, coset: Self) -> LagrangeSelectors<Vec<Val>> {
            assert_eq!(self.shift(), Val::ONE);
            assert_ne!(coset.shift(), Val::ONE);
            assert!(coset.log_size() >= self.log_size());
            let rate_bits = coset.log_size() - self.log_size();
    
            let s_pow_n = coset.shift().exp_power_of_2(self.log_size());
            // evals of Z_H(X) = X^n - 1
            let evals = Val::two_adic_generator(rate_bits)
                .powers()
                .take(1 << rate_bits)
                .map(|x| s_pow_n * x - Val::ONE)
                .collect_vec();
    
            let xs = cyclic_subgroup_coset_known_order(
                coset.subgroup_generator(),
                coset.shift(),
                coset.size(),
            )
            .collect_vec();
    
            let single_point_selector = |i: u64| {
                let coset_i = self.subgroup_generator().exp_u64(i);
                let denoms = xs.iter().map(|&x| x - coset_i).collect_vec();
                let invs = batch_multiplicative_inverse(&denoms);
                evals
                    .iter()
                    .cycle()
                    .zip(invs)
                    .map(|(&z_h, inv)| z_h * inv)
                    .collect_vec()
            };
    
            let subgroup_last = self.subgroup_generator().inverse();
    
            LagrangeSelectors {
                is_first_row: single_point_selector(0),
                is_last_row: single_point_selector(self.size() as u64 - 1),
                is_transition: xs.into_iter().map(|x| x - subgroup_last).collect(),
                inv_vanishing: batch_multiplicative_inverse(&evals)
                    .into_iter()
                    .cycle()
                    .take(coset.size())
                    .collect(),
            }
        }
    *)
    Definition selectors_on_coset
        (Val : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val in
      match ε, τ, α with
      | [], [], [ self; coset ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let coset := M.alloc (| coset |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Val,
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                []
                                [ Val ],
                              "shift",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", Val |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          Val,
                                          [],
                                          [ Val ],
                                          "eq",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| left_val |) |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| right_val |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Val; Val ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple "core::option::Option::None" []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Val,
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                []
                                [ Val ],
                              "shift",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, coset |) ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", Val |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Val,
                                        [],
                                        [ Val ],
                                        "eq",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| left_val |) |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| right_val |) |)
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Ne" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Val; Val ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple "core::option::Option::None" []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ge,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                        []
                                        [ Val ],
                                      "log_size",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, coset |) ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                        []
                                        [ Val ],
                                      "log_size",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: coset.log_size() >= self.log_size()" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ rate_bits : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.sub,
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ],
                        "log_size",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, coset |) ]
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ],
                        "log_size",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  ]
                |)
              |) in
            let~ s_pow_n : Ty.apply (Ty.path "*") [] [ Val ] :=
              M.alloc (|
                M.call_closure (|
                  Val,
                  M.get_trait_method (|
                    "p3_field::field::PrimeCharacteristicRing",
                    Val,
                    [],
                    [],
                    "exp_power_of_2",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.call_closure (|
                          Val,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                              []
                              [ Val ],
                            "shift",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, coset |) ]
                        |)
                      |)
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ],
                        "log_size",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  ]
                |)
              |) in
            let~ evals :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ Val; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ Val; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "itertools::Itertools",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::take::Take")
                          []
                          [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ Val ] ];
                        Ty.function [ Ty.tuple [ Val ] ] Val
                      ],
                    [],
                    [],
                    "collect_vec",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::take::Take")
                            []
                            [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ Val ] ];
                          Ty.function [ Ty.tuple [ Val ] ] Val
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::take::Take")
                          []
                          [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ Val ] ],
                        [],
                        [],
                        "map",
                        [],
                        [ Val; Ty.function [ Ty.tuple [ Val ] ] Val ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::take::Take")
                            []
                            [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ Val ] ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "p3_field::field::Powers") [] [ Val ],
                            [],
                            [],
                            "take",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "p3_field::field::Powers") [] [ Val ],
                              M.get_trait_method (|
                                "p3_field::field::PrimeCharacteristicRing",
                                Val,
                                [],
                                [],
                                "powers",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    M.call_closure (|
                                      Val,
                                      M.get_trait_method (|
                                        "p3_field::field::TwoAdicField",
                                        Val,
                                        [],
                                        [],
                                        "two_adic_generator",
                                        [],
                                        []
                                      |),
                                      [ M.read (| rate_bits |) ]
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.shl,
                              [ Value.Integer IntegerKind.Usize 1; M.read (| rate_bits |) ]
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.function [ Ty.tuple [ Val ] ] Val ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let x := M.copy (| γ |) in
                                          M.call_closure (|
                                            Val,
                                            M.get_trait_method (|
                                              "core::ops::arith::Sub",
                                              Val,
                                              [],
                                              [ Val ],
                                              "sub",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Val,
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  Val,
                                                  [],
                                                  [ Val ],
                                                  "mul",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| s_pow_n |); M.read (| x |) ]
                                              |);
                                              M.read (|
                                                get_constant (|
                                                  "p3_field::field::PrimeCharacteristicRing::ONE",
                                                  Val
                                                |)
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            let~ xs :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ Val; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ Val; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "itertools::Itertools",
                    Ty.associated_unknown,
                    [],
                    [],
                    "collect_vec",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_unknown,
                      M.get_function (|
                        "p3_field::helpers::cyclic_subgroup_coset_known_order",
                        [],
                        [ Val ]
                      |),
                      [
                        M.call_closure (|
                          Val,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                              []
                              [ Val ],
                            "subgroup_generator",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, coset |) ]
                        |);
                        M.call_closure (|
                          Val,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                              []
                              [ Val ],
                            "shift",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, coset |) ]
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                              []
                              [ Val ],
                            "size",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, coset |) ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ single_point_selector :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.function
                      [ Ty.tuple [ Ty.path "u64" ] ]
                      (Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Val; Ty.path "alloc::alloc::Global" ])
                  ] :=
              M.alloc (|
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path "*")
                              []
                              [
                                Ty.function
                                  [ Ty.tuple [ Ty.path "u64" ] ]
                                  (Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Val; Ty.path "alloc::alloc::Global" ])
                              ],
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let i := M.copy (| γ |) in
                                  M.read (|
                                    let~ coset_i : Ty.apply (Ty.path "*") [] [ Val ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Val,
                                          M.get_trait_method (|
                                            "p3_field::field::PrimeCharacteristicRing",
                                            Val,
                                            [],
                                            [],
                                            "exp_u64",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Val,
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                      []
                                                      [ Val ],
                                                    "subgroup_generator",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.read (| i |)
                                          ]
                                        |)
                                      |) in
                                    let~ denoms :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Val; Ty.path "alloc::alloc::Global" ]
                                          ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Val; Ty.path "alloc::alloc::Global" ],
                                          M.get_trait_method (|
                                            "itertools::Itertools",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ Val ];
                                                Ty.function
                                                  [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Val ] ] ]
                                                  Val
                                              ],
                                            [],
                                            [],
                                            "collect_vec",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::map::Map")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Val ];
                                                  Ty.function
                                                    [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Val ] ]
                                                    ]
                                                    Val
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ Val ],
                                                [],
                                                [],
                                                "map",
                                                [],
                                                [
                                                  Val;
                                                  Ty.function
                                                    [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Val ] ]
                                                    ]
                                                    Val
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Val ],
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ Val ],
                                                    "iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.apply (Ty.path "slice") [] [ Val ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [ Val; Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            [],
                                                            "deref",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.borrow (| Pointer.Kind.Ref, xs |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |);
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0 ] =>
                                                        ltac:(M.monadic
                                                          (M.match_operator (|
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Val ]
                                                                      ]
                                                                  ]
                                                                  Val
                                                              ],
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ := M.read (| γ |) in
                                                                  let x := M.copy (| γ |) in
                                                                  M.call_closure (|
                                                                    Val,
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Sub",
                                                                      Val,
                                                                      [],
                                                                      [ Val ],
                                                                      "sub",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| x |);
                                                                      M.read (| coset_i |)
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |)))
                                                      | _ =>
                                                        M.impossible "wrong number of arguments"
                                                      end))
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let~ invs :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Val; Ty.path "alloc::alloc::Global" ]
                                          ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Val; Ty.path "alloc::alloc::Global" ],
                                          M.get_function (|
                                            "p3_field::batch_inverse::batch_multiplicative_inverse",
                                            [],
                                            [ Val ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.apply (Ty.path "slice") [] [ Val ] ],
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Val; Ty.path "alloc::alloc::Global" ],
                                                    [],
                                                    [],
                                                    "deref",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (| Pointer.Kind.Ref, denoms |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Val; Ty.path "alloc::alloc::Global" ],
                                        M.get_trait_method (|
                                          "itertools::Itertools",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::cycle::Cycle")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Val ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [ Val; Ty.path "alloc::alloc::Global" ]
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [ Ty.apply (Ty.path "&") [] [ Val ]; Val ]
                                                    ]
                                                ]
                                                Val
                                            ],
                                          [],
                                          [],
                                          "collect_vec",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::cycle::Cycle")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Val ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                                      []
                                                      [ Val; Ty.path "alloc::alloc::Global" ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [ Ty.apply (Ty.path "&") [] [ Val ]; Val ]
                                                      ]
                                                  ]
                                                  Val
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::cycle::Cycle")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Val ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [ Val; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "map",
                                              [],
                                              [
                                                Val;
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [ Ty.apply (Ty.path "&") [] [ Val ]; Val ]
                                                      ]
                                                  ]
                                                  Val
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::cycle::Cycle")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Val ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                                      []
                                                      [ Val; Ty.path "alloc::alloc::Global" ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::cycle::Cycle")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Val ]
                                                    ],
                                                  [],
                                                  [],
                                                  "zip",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Val; Ty.path "alloc::alloc::Global" ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::cycle::Cycle")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Val ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [ Val ],
                                                      [],
                                                      [],
                                                      "cycle",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Val ],
                                                        M.get_associated_function (|
                                                          Ty.apply (Ty.path "slice") [] [ Val ],
                                                          "iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ Val ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Val;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    evals
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |);
                                                  M.read (| invs |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Val ];
                                                                          Val
                                                                        ]
                                                                    ]
                                                                ]
                                                                Val
                                                            ],
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    0
                                                                  |) in
                                                                let γ0_1 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    1
                                                                  |) in
                                                                let γ0_0 := M.read (| γ0_0 |) in
                                                                let z_h := M.copy (| γ0_0 |) in
                                                                let inv := M.copy (| γ0_1 |) in
                                                                M.call_closure (|
                                                                  Val,
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Mul",
                                                                    Val,
                                                                    [],
                                                                    [ Val ],
                                                                    "mul",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| z_h |);
                                                                    M.read (| inv |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              |) in
            let~ subgroup_last : Ty.apply (Ty.path "*") [] [ Val ] :=
              M.alloc (|
                M.call_closure (|
                  Val,
                  M.get_trait_method (| "p3_field::field::Field", Val, [], [], "inverse", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.call_closure (|
                          Val,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                              []
                              [ Val ],
                            "subgroup_generator",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              Value.StructRecord
                "p3_commit::domain::LagrangeSelectors"
                [
                  ("is_first_row",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Val; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "core::ops::function::Fn",
                        Ty.function
                          [ Ty.tuple [ Ty.path "u64" ] ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Val; Ty.path "alloc::alloc::Global" ]),
                        [],
                        [ Ty.tuple [ Ty.path "u64" ] ],
                        "call",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, single_point_selector |);
                        Value.Tuple [ Value.Integer IntegerKind.U64 0 ]
                      ]
                    |));
                  ("is_last_row",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Val; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "core::ops::function::Fn",
                        Ty.function
                          [ Ty.tuple [ Ty.path "u64" ] ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Val; Ty.path "alloc::alloc::Global" ]),
                        [],
                        [ Ty.tuple [ Ty.path "u64" ] ],
                        "call",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, single_point_selector |);
                        Value.Tuple
                          [
                            M.call_closure (|
                              Ty.path "u64",
                              BinOp.Wrap.sub,
                              [
                                M.cast
                                  (Ty.path "u64")
                                  (M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                        []
                                        [ Val ],
                                      "size",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |));
                                Value.Integer IntegerKind.U64 1
                              ]
                            |)
                          ]
                      ]
                    |));
                  ("is_transition",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Val; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Val; Ty.path "alloc::alloc::Global" ];
                            Ty.function [ Ty.tuple [ Val ] ] Val
                          ],
                        [],
                        [],
                        "collect",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Val; Ty.path "alloc::alloc::Global" ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Val; Ty.path "alloc::alloc::Global" ];
                              Ty.function [ Ty.tuple [ Val ] ] Val
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Val; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "map",
                            [],
                            [ Val; Ty.function [ Ty.tuple [ Val ] ] Val ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Val; Ty.path "alloc::alloc::Global" ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Val; Ty.path "alloc::alloc::Global" ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [ M.read (| xs |) ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.function [ Ty.tuple [ Val ] ] Val ],
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| γ |) in
                                              M.call_closure (|
                                                Val,
                                                M.get_trait_method (|
                                                  "core::ops::arith::Sub",
                                                  Val,
                                                  [],
                                                  [ Val ],
                                                  "sub",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| x |); M.read (| subgroup_last |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |));
                  ("inv_vanishing",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Val; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::take::Take")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::cycle::Cycle")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [ Val; Ty.path "alloc::alloc::Global" ]
                              ]
                          ],
                        [],
                        [],
                        "collect",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Val; Ty.path "alloc::alloc::Global" ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::take::Take")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::cycle::Cycle")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [ Val; Ty.path "alloc::alloc::Global" ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::cycle::Cycle")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [ Val; Ty.path "alloc::alloc::Global" ]
                              ],
                            [],
                            [],
                            "take",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::cycle::Cycle")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [ Val; Ty.path "alloc::alloc::Global" ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [ Val; Ty.path "alloc::alloc::Global" ],
                                [],
                                [],
                                "cycle",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [ Val; Ty.path "alloc::alloc::Global" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Val; Ty.path "alloc::alloc::Global" ],
                                    [],
                                    [],
                                    "into_iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Val; Ty.path "alloc::alloc::Global" ],
                                      M.get_function (|
                                        "p3_field::batch_inverse::batch_multiplicative_inverse",
                                        [],
                                        [ Val ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ Val ] ],
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Val; Ty.path "alloc::alloc::Global" ],
                                                [],
                                                [],
                                                "deref",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.Ref, evals |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                  []
                                  [ Val ],
                                "size",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, coset |) ]
                            |)
                          ]
                        |)
                      ]
                    |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Val : Ty.t),
      M.IsTraitInstance
        "p3_commit::domain::PolynomialSpace"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Val)
        (* Instance *)
        [
          ("Val", InstanceField.Ty (_Val Val));
          ("size", InstanceField.Method (size Val));
          ("first_point", InstanceField.Method (first_point Val));
          ("next_point", InstanceField.Method (next_point Val));
          ("create_disjoint_domain", InstanceField.Method (create_disjoint_domain Val));
          ("split_domains", InstanceField.Method (split_domains Val));
          ("split_evals", InstanceField.Method (split_evals Val));
          ("vanishing_poly_at_point", InstanceField.Method (vanishing_poly_at_point Val));
          ("selectors_at_point", InstanceField.Method (selectors_at_point Val));
          ("selectors_on_coset", InstanceField.Method (selectors_on_coset Val))
        ].
  End Impl_p3_commit_domain_PolynomialSpace_where_p3_field_field_TwoAdicField_Val_for_p3_field_coset_TwoAdicMultiplicativeCoset_Val.
End domain.
