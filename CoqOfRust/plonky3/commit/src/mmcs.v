(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module mmcs.
  (* Trait *)
  Module Mmcs.
    Definition commit_matrix
        (T Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ M_ ], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.tuple
              [
                Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ T ] Self "Commitment";
                Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ T; M_ ] Self "ProverData"
              ],
            M.get_trait_method (| "p3_commit::mmcs::Mmcs", Self, [], [ T ], "commit", [], [ M_ ] |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ M_; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "slice") [] [ M_ ],
                  "into_vec",
                  [],
                  [ Ty.path "alloc::alloc::Global" ]
                |),
                [
                  (* Unsize *)
                  M.pointer_coercion
                    (M.read (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          []
                          [
                            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 1 ] [ M_ ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [ M_ ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          [],
                          []
                        |),
                        [ M.alloc (| Value.Array [ M.read (| input |) ] |) ]
                      |)
                    |))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_commit_matrix :
      forall (T : Ty.t),
      M.IsProvidedMethod "p3_commit::mmcs::Mmcs" "commit_matrix" (commit_matrix T).
    Definition commit_vec
        (T Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; input ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let input := M.alloc (| input |) in
          M.call_closure (|
            Ty.tuple
              [
                Ty.associated_in_trait "p3_commit::mmcs::Mmcs" [] [ T ] Self "Commitment";
                Ty.associated_in_trait
                  "p3_commit::mmcs::Mmcs"
                  []
                  [
                    T;
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        T;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ]
                      ]
                  ]
                  Self
                  "ProverData"
              ],
            M.get_trait_method (|
              "p3_commit::mmcs::Mmcs",
              Self,
              [],
              [ T ],
              "commit_matrix",
              [],
              [
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                  ]
              ]
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ T; Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      T;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                    ],
                  "new_col",
                  [],
                  []
                |),
                [ M.read (| input |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_commit_vec :
      forall (T : Ty.t),
      M.IsProvidedMethod "p3_commit::mmcs::Mmcs" "commit_vec" (commit_vec T).
    Definition get_matrix_heights
        (T Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ M_ ], [ self; prover_data ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let prover_data := M.alloc (| prover_data |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    []
                    [ Ty.apply (Ty.path "&") [] [ M_ ] ];
                  Ty.function
                    [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ M_ ] ] ] ]
                    (Ty.path "usize")
                ],
              [],
              [],
              "collect",
              [],
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [ Ty.apply (Ty.path "&") [] [ M_ ] ];
                    Ty.function
                      [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ M_ ] ] ]
                      ]
                      (Ty.path "usize")
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    []
                    [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                  [],
                  [],
                  "map",
                  [],
                  [
                    Ty.path "usize";
                    Ty.function
                      [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ M_ ] ] ]
                      ]
                      (Ty.path "usize")
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.apply (Ty.path "&") [] [ M_ ] ],
                      "iter",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.apply (Ty.path "&") [] [ M_ ]; Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply (Ty.path "&") [] [ M_ ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "p3_commit::mmcs::Mmcs",
                                      Self,
                                      [],
                                      [ T ],
                                      "get_matrices",
                                      [],
                                      [ M_ ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| prover_data |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "&") [] [ M_ ] ]
                                        ]
                                    ]
                                    (Ty.path "usize")
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let matrix := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_trait_method (|
                                        "p3_matrix::Matrix",
                                        M_,
                                        [],
                                        [ T ],
                                        "height",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.read (| M.deref (| M.read (| matrix |) |) |)
                                          |)
                                        |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_get_matrix_heights :
      forall (T : Ty.t),
      M.IsProvidedMethod "p3_commit::mmcs::Mmcs" "get_matrix_heights" (get_matrix_heights T).
    Definition get_max_height
        (T Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ M_ ], [ self; prover_data ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let prover_data := M.alloc (| prover_data |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
              "unwrap_or_else",
              [],
              [ Ty.function [ Ty.tuple [] ] (Ty.path "usize") ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                  [],
                  [],
                  "max",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                        M.get_trait_method (|
                          "p3_commit::mmcs::Mmcs",
                          Self,
                          [],
                          [ T ],
                          "get_matrix_heights",
                          [],
                          [ M_ ]
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| prover_data |) |) |)
                        ]
                      |)
                    ]
                  |)
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.function [ Ty.tuple [] ] (Ty.path "usize") ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.never_to_any (|
                                  M.call_closure (|
                                    Ty.path "never",
                                    M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                    [
                                      M.call_closure (|
                                        Ty.path "core::fmt::Arguments",
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::Arguments",
                                          "new_const",
                                          [ Value.Integer IntegerKind.Usize 1 ],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Value.Array
                                                    [ mk_str (| "No committed matrices?" |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_get_max_height :
      forall (T : Ty.t),
      M.IsProvidedMethod "p3_commit::mmcs::Mmcs" "get_max_height" (get_max_height T).
  End Mmcs.
End mmcs.
