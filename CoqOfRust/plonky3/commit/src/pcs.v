(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module pcs.
  Axiom Val :
    forall (D : Ty.t),
    (Ty.apply (Ty.path "p3_commit::pcs::Val") [] [ D ]) =
      (Ty.associated_in_trait "p3_commit::domain::PolynomialSpace" [] [] D "Val").
  
  (* Trait *)
  (* Empty module 'Pcs' *)
  
  Axiom OpenedValues :
    forall (F : Ty.t),
    (Ty.apply (Ty.path "p3_commit::pcs::OpenedValues") [] [ F ]) =
      (Ty.apply
        (Ty.path "alloc::vec::Vec")
        []
        [
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            []
            [
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                  Ty.path "alloc::alloc::Global"
                ];
              Ty.path "alloc::alloc::Global"
            ];
          Ty.path "alloc::alloc::Global"
        ]).
  
  Axiom OpenedValuesForRound :
    forall (F : Ty.t),
    (Ty.apply (Ty.path "p3_commit::pcs::OpenedValuesForRound") [] [ F ]) =
      (Ty.apply
        (Ty.path "alloc::vec::Vec")
        []
        [
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            []
            [
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
              Ty.path "alloc::alloc::Global"
            ];
          Ty.path "alloc::alloc::Global"
        ]).
  
  Axiom OpenedValuesForMatrix :
    forall (F : Ty.t),
    (Ty.apply (Ty.path "p3_commit::pcs::OpenedValuesForMatrix") [] [ F ]) =
      (Ty.apply
        (Ty.path "alloc::vec::Vec")
        []
        [
          Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
          Ty.path "alloc::alloc::Global"
        ]).
  
  Axiom OpenedValuesForPoint :
    forall (F : Ty.t),
    (Ty.apply (Ty.path "p3_commit::pcs::OpenedValuesForPoint") [] [ F ]) =
      (Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]).
End pcs.
