(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module testing.
  (* StructRecord
    {
      name := "TrivialPcs";
      const_params := [];
      ty_params := [ "Val"; "Dft" ];
      fields :=
        [
          ("dft", Dft);
          ("log_n", Ty.path "usize");
          ("_phantom", Ty.apply (Ty.path "core::marker::PhantomData") [] [ Val ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_Val_where_p3_field_field_TwoAdicField_Val_where_core_fmt_Debug_Dft_where_p3_dft_traits_TwoAdicSubgroupDft_Dft_Val_for_p3_commit_testing_TrivialPcs_Val_Dft.
    Definition Self (Val Dft : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_commit::testing::TrivialPcs") [] [ Val; Dft ].
    
    (* Debug *)
    Definition fmt (Val Dft : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self Val Dft in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "TrivialPcs" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "dft" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_commit::testing::TrivialPcs",
                        "dft"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "log_n" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_commit::testing::TrivialPcs",
                        "log_n"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_phantom" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_commit::testing::TrivialPcs",
                            "_phantom"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Val Dft : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self Val Dft)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt Val Dft)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_Val_where_p3_field_field_TwoAdicField_Val_where_core_fmt_Debug_Dft_where_p3_dft_traits_TwoAdicSubgroupDft_Dft_Val_for_p3_commit_testing_TrivialPcs_Val_Dft.
  
  (*
  pub fn eval_coeffs_at_pt<F: Field, EF: ExtensionField<F>>(
      coeffs: &RowMajorMatrix<F>,
      x: EF,
  ) -> Vec<EF> {
      let mut acc = vec![EF::ZERO; coeffs.width()];
      for r in (0..coeffs.height()).rev() {
          let row = coeffs.row_slice(r);
          for (acc_c, row_c) in acc.iter_mut().zip(row.iter()) {
              *acc_c *= x;
              *acc_c += *row_c;
          }
      }
      acc
  }
  *)
  Definition eval_coeffs_at_pt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; EF ], [ coeffs; x ] =>
      ltac:(M.monadic
        (let coeffs := M.alloc (| coeffs |) in
        let x := M.alloc (| x |) in
        M.read (|
          let~ acc :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ EF; Ty.path "alloc::alloc::Global" ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ EF; Ty.path "alloc::alloc::Global" ],
                M.get_function (| "alloc::vec::from_elem", [], [ EF ] |),
                [
                  M.read (|
                    get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", EF |)
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "p3_matrix::Matrix",
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ],
                      [],
                      [ F ],
                      "width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| coeffs |) |) |) ]
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::rev::Rev")
                      []
                      [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::rev::Rev")
                        []
                        [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "rev",
                          [],
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start", Value.Integer IntegerKind.Usize 0);
                              ("end_",
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_trait_method (|
                                    "p3_matrix::Matrix",
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        F;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ F; Ty.path "alloc::alloc::Global" ]
                                      ],
                                    [],
                                    [ F ],
                                    "height",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| coeffs |) |)
                                    |)
                                  ]
                                |))
                            ]
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::rev::Rev")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let r := M.copy (| γ0_0 |) in
                                    let~ row :
                                        Ty.apply (Ty.path "*") [] [ Ty.associated_unknown ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.associated_unknown,
                                          M.get_trait_method (|
                                            "p3_matrix::Matrix",
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ F; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            [],
                                            [ F ],
                                            "row_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| coeffs |) |)
                                            |);
                                            M.read (| r |)
                                          ]
                                        |)
                                      |) in
                                    M.use
                                      (M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  []
                                                  [ EF ];
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::IterMut")
                                                    []
                                                    [ EF ];
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ F ]
                                                ],
                                              [],
                                              [],
                                              "into_iter",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [ EF ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ F ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::IterMut")
                                                    []
                                                    [ EF ],
                                                  [],
                                                  [],
                                                  "zip",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ F ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [ EF ],
                                                    M.get_associated_function (|
                                                      Ty.apply (Ty.path "slice") [] [ EF ],
                                                      "iter_mut",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [ Ty.apply (Ty.path "slice") [] [ EF ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::DerefMut",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [ EF; Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              [],
                                                              "deref_mut",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                acc
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ F ],
                                                    M.get_associated_function (|
                                                      Ty.apply (Ty.path "slice") [] [ F ],
                                                      "iter",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.apply (Ty.path "slice") [] [ F ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.associated_unknown,
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.borrow (| Pointer.Kind.Ref, row |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter := M.copy (| γ |) in
                                              M.loop (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                ltac:(M.monadic
                                                  (let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.match_operator (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [ EF ];
                                                                  Ty.apply (Ty.path "&") [] [ F ]
                                                                ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [ EF ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [ F ]
                                                              ],
                                                            [],
                                                            [],
                                                            "next",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  iter
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "core::option::Option::None"
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let γ1_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                0
                                                              |) in
                                                            let γ1_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                1
                                                              |) in
                                                            let acc_c := M.copy (| γ1_0 |) in
                                                            let row_c := M.copy (| γ1_1 |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::MulAssign",
                                                                    EF,
                                                                    [],
                                                                    [ EF ],
                                                                    "mul_assign",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.read (| acc_c |)
                                                                      |)
                                                                    |);
                                                                    M.read (| x |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::AddAssign",
                                                                    EF,
                                                                    [],
                                                                    [ F ],
                                                                    "add_assign",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.read (| acc_c |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| row_c |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                              |)))
                                        ]
                                      |))))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          acc
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_eval_coeffs_at_pt :
    M.IsFunction.C "p3_commit::testing::eval_coeffs_at_pt" eval_coeffs_at_pt.
  Admitted.
  Global Typeclasses Opaque eval_coeffs_at_pt.
  
  Module Impl_p3_commit_pcs_Pcs_where_p3_field_field_TwoAdicField_Val_where_p3_field_field_ExtensionField_Challenge_Val_where_p3_challenger_CanSample_Challenger_Challenge_where_p3_dft_traits_TwoAdicSubgroupDft_Dft_Val_where_serde_ser_Serialize_alloc_vec_Vec_alloc_vec_Vec_Val_alloc_alloc_Global_alloc_alloc_Global_where_serde_de_Deserialize_alloc_vec_Vec_alloc_vec_Vec_Val_alloc_alloc_Global_alloc_alloc_Global_Challenge_Challenger_for_p3_commit_testing_TrivialPcs_Val_Dft.
    Definition Self (Val Dft Challenge Challenger : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_commit::testing::TrivialPcs") [] [ Val; Dft ].
    
    (*     type Domain = TwoAdicMultiplicativeCoset<Val>; *)
    Definition _Domain (Val Dft Challenge Challenger : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ].
    
    (*     type Commitment = Vec<Vec<Val>>; *)
    Definition _Commitment (Val Dft Challenge Challenger : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "alloc::vec::Vec")
        []
        [
          Ty.apply (Ty.path "alloc::vec::Vec") [] [ Val; Ty.path "alloc::alloc::Global" ];
          Ty.path "alloc::alloc::Global"
        ].
    
    (*     type ProverData = Vec<RowMajorMatrix<Val>>; *)
    Definition _ProverData (Val Dft Challenge Challenger : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "alloc::vec::Vec")
        []
        [
          Ty.apply
            (Ty.path "p3_matrix::dense::DenseMatrix")
            []
            [ Val; Ty.apply (Ty.path "alloc::vec::Vec") [] [ Val; Ty.path "alloc::alloc::Global" ]
            ];
          Ty.path "alloc::alloc::Global"
        ].
    
    (*     type EvaluationsOnDomain<'a> = Dft::Evaluations; *)
    Definition _EvaluationsOnDomain (Val Dft Challenge Challenger : Ty.t) : Ty.t :=
      Ty.associated_in_trait "p3_dft::traits::TwoAdicSubgroupDft" [] [ Val ] Dft "Evaluations".
    
    (*     type Proof = (); *)
    Definition _Proof (Val Dft Challenge Challenger : Ty.t) : Ty.t := Ty.tuple [].
    
    (*     type Error = (); *)
    Definition _Error (Val Dft Challenge Challenger : Ty.t) : Ty.t := Ty.tuple [].
    
    (*
        fn natural_domain_for_degree(&self, degree: usize) -> Self::Domain {
            // This panics if (and only if) `degree` is not a power of 2 or `degree`
            // > `1 << Val::TWO_ADICITY`.
            TwoAdicMultiplicativeCoset::new(Val::ONE, log2_strict_usize(degree)).unwrap()
        }
    *)
    Definition natural_domain_for_degree
        (Val Dft Challenge Challenger : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val Dft Challenge Challenger in
      match ε, τ, α with
      | [], [], [ self; degree ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let degree := M.alloc (| degree |) in
          M.call_closure (|
            Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ] ],
              "unwrap",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ] ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ],
                  "new",
                  [],
                  []
                |),
                [
                  M.read (|
                    get_constant (| "p3_field::field::PrimeCharacteristicRing::ONE", Val |)
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                    [ M.read (| degree |) ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn commit(
            &self,
            evaluations: Vec<(Self::Domain, RowMajorMatrix<Val>)>,
        ) -> (Self::Commitment, Self::ProverData) {
            let coeffs: Vec<_> = evaluations
                .into_iter()
                .map(|(domain, evals)| {
                    let log_domain_size = log2_strict_usize(domain.size());
                    // for now, only commit on larger domain than natural
                    assert!(log_domain_size >= self.log_n);
                    assert_eq!(domain.size(), evals.height());
                    // coset_idft_batch
                    let mut coeffs = self.dft.idft_batch(evals);
                    coeffs
                        .rows_mut()
                        .zip(domain.shift().inverse().powers())
                        .for_each(|(row, weight)| {
                            row.iter_mut().for_each(|coeff| {
                                *coeff *= weight;
                            })
                        });
                    coeffs
                })
                .collect();
            (
                coeffs.clone().into_iter().map(|m| m.values).collect(),
                coeffs,
            )
        }
    *)
    Definition commit
        (Val Dft Challenge Challenger : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val Dft Challenge Challenger in
      match ε, τ, α with
      | [], [], [ self; evaluations ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let evaluations := M.alloc (| evaluations |) in
          M.read (|
            let~ coeffs :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            Val;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Val; Ty.path "alloc::alloc::Global" ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Val;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Val; Ty.path "alloc::alloc::Global" ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                  []
                                  [ Val ];
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Val;
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Val; Ty.path "alloc::alloc::Global" ]
                                  ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                      []
                                      [ Val ];
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Val;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Val; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Val;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Val; Ty.path "alloc::alloc::Global" ]
                            ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Val;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Val; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                    []
                                    [ Val ];
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Val;
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Val; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                        []
                                        [ Val ];
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Val;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Val; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Val;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Val; Ty.path "alloc::alloc::Global" ]
                              ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                  []
                                  [ Val ];
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Val;
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Val; Ty.path "alloc::alloc::Global" ]
                                  ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Val;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Val; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                        []
                                        [ Val ];
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Val;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Val; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Val;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Val; Ty.path "alloc::alloc::Global" ]
                              ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                    []
                                    [ Val ];
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Val;
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Val; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                      []
                                      [ Val ];
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Val;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Val; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| evaluations |) ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                      []
                                                      [ Val ];
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        Val;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ Val; Ty.path "alloc::alloc::Global" ]
                                                      ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              Val;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Val; Ty.path "alloc::alloc::Global" ]
                                            ])
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let domain := M.copy (| γ0_0 |) in
                                          let evals := M.copy (| γ0_1 |) in
                                          M.read (|
                                            let~ log_domain_size :
                                                Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_function (|
                                                    "p3_util::log2_strict_usize",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                          []
                                                          [ Val ],
                                                        "size",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, domain |) ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.ge,
                                                                [
                                                                  M.read (| log_domain_size |);
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| self |)
                                                                      |),
                                                                      "p3_commit::testing::TrivialPcs",
                                                                      "log_n"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::panic",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              mk_str (|
                                                                "assertion failed: log_domain_size >= self.log_n"
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                M.alloc (|
                                                  Value.Tuple
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                []
                                                                [ Val ],
                                                              "size",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                domain
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            M.get_trait_method (|
                                                              "p3_matrix::Matrix",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_matrix::dense::DenseMatrix")
                                                                []
                                                                [
                                                                  Val;
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Val;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ],
                                                              [],
                                                              [ Val ],
                                                              "height",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.borrow (| Pointer.Kind.Ref, evals |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let left_val := M.copy (| γ0_0 |) in
                                                      let right_val := M.copy (| γ0_1 |) in
                                                      M.match_operator (|
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                        M.alloc (| Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    UnOp.not (|
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        BinOp.eq,
                                                                        [
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |);
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    let~ kind :
                                                                        Ty.apply
                                                                          (Ty.path "*")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "core::panicking::AssertKind"
                                                                          ] :=
                                                                      M.alloc (|
                                                                        Value.StructTuple
                                                                          "core::panicking::AssertKind::Eq"
                                                                          []
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.path "never",
                                                                        M.get_function (|
                                                                          "core::panicking::assert_failed",
                                                                          [],
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.path "usize"
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.read (| kind |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    left_val
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    right_val
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          Value.StructTuple
                                                                            "core::option::Option::None"
                                                                            []
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.alloc (| Value.Tuple [] |)))
                                                        ]
                                                      |)))
                                                ]
                                              |) in
                                            let~ coeffs :
                                                Ty.apply
                                                  (Ty.path "*")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        Val;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ Val; Ty.path "alloc::alloc::Global" ]
                                                      ]
                                                  ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      Val;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ Val; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_dft::traits::TwoAdicSubgroupDft",
                                                    Dft,
                                                    [],
                                                    [ Val ],
                                                    "idft_batch",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| self |) |),
                                                        "p3_commit::testing::TrivialPcs",
                                                        "dft"
                                                      |)
                                                    |);
                                                    M.read (| evals |)
                                                  ]
                                                |)
                                              |) in
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      []
                                                      [
                                                        Ty.associated_unknown;
                                                        Ty.apply
                                                          (Ty.path "p3_field::field::Powers")
                                                          []
                                                          [ Val ]
                                                      ],
                                                    [],
                                                    [],
                                                    "for_each",
                                                    [],
                                                    [
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ Val ]
                                                                    ];
                                                                  Val
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.tuple [])
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.associated_unknown;
                                                          Ty.apply
                                                            (Ty.path "p3_field::field::Powers")
                                                            []
                                                            [ Val ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.associated_unknown,
                                                        [],
                                                        [],
                                                        "zip",
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "p3_field::field::Powers")
                                                            []
                                                            [ Val ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.associated_unknown,
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_matrix::dense::DenseMatrix")
                                                              []
                                                              [
                                                                Val;
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Val;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ],
                                                            "rows_mut",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              coeffs
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "p3_field::field::Powers")
                                                            []
                                                            [ Val ],
                                                          M.get_trait_method (|
                                                            "p3_field::field::PrimeCharacteristicRing",
                                                            Val,
                                                            [],
                                                            [],
                                                            "powers",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Val,
                                                                  M.get_trait_method (|
                                                                    "p3_field::field::Field",
                                                                    Val,
                                                                    [],
                                                                    [],
                                                                    "inverse",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Val,
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                              []
                                                                              [ Val ],
                                                                            "shift",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              domain
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |);
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            ltac:(M.monadic
                                                              (M.match_operator (|
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&mut")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      []
                                                                                      [ Val ]
                                                                                  ];
                                                                                Val
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.tuple [])
                                                                  ],
                                                                M.alloc (| α0 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          0
                                                                        |) in
                                                                      let γ0_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          1
                                                                        |) in
                                                                      let row :=
                                                                        M.copy (| γ0_0 |) in
                                                                      let weight :=
                                                                        M.copy (| γ0_1 |) in
                                                                      M.call_closure (|
                                                                        Ty.tuple [],
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::IterMut")
                                                                            []
                                                                            [ Val ],
                                                                          [],
                                                                          [],
                                                                          "for_each",
                                                                          [],
                                                                          [
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      []
                                                                                      [ Val ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.tuple [])
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::IterMut")
                                                                              []
                                                                              [ Val ],
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [ Val ],
                                                                              "iter_mut",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.read (| row |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.closure
                                                                            (fun γ =>
                                                                              ltac:(M.monadic
                                                                                match γ with
                                                                                | [ α0 ] =>
                                                                                  ltac:(M.monadic
                                                                                    (M.match_operator (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "*")
                                                                                        []
                                                                                        [
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&mut")
                                                                                                    []
                                                                                                    [
                                                                                                      Val
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                            (Ty.tuple
                                                                                              [])
                                                                                        ],
                                                                                      M.alloc (|
                                                                                        α0
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  coeff :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.read (|
                                                                                              let~
                                                                                                    _ :
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "*")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        []
                                                                                                    ] :=
                                                                                                M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    Ty.tuple
                                                                                                      [],
                                                                                                    M.get_trait_method (|
                                                                                                      "core::ops::arith::MulAssign",
                                                                                                      Val,
                                                                                                      [],
                                                                                                      [
                                                                                                        Val
                                                                                                      ],
                                                                                                      "mul_assign",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.MutRef,
                                                                                                        M.deref (|
                                                                                                          M.read (|
                                                                                                            coeff
                                                                                                          |)
                                                                                                        |)
                                                                                                      |);
                                                                                                      M.read (|
                                                                                                        weight
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                Value.Tuple
                                                                                                  []
                                                                                              |)
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                                | _ =>
                                                                                  M.impossible
                                                                                    "wrong number of arguments"
                                                                                end))
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |)))
                                                          | _ =>
                                                            M.impossible "wrong number of arguments"
                                                          end))
                                                  ]
                                                |)
                                              |) in
                                            coeffs
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              Value.Tuple
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Val; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Val;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Val; Ty.path "alloc::alloc::Global" ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Val;
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Val; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Val; Ty.path "alloc::alloc::Global" ])
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Val; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Val;
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Val; Ty.path "alloc::alloc::Global" ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Val;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Val; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Val; Ty.path "alloc::alloc::Global" ])
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Val;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Val; Ty.path "alloc::alloc::Global" ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Val; Ty.path "alloc::alloc::Global" ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Val;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Val; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Val; Ty.path "alloc::alloc::Global" ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Val;
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Val; Ty.path "alloc::alloc::Global" ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Val;
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Val; Ty.path "alloc::alloc::Global" ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Val;
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Val; Ty.path "alloc::alloc::Global" ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Val;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Val; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "clone",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, coeffs |) ]
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      Val;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ Val; Ty.path "alloc::alloc::Global" ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Val; Ty.path "alloc::alloc::Global" ])
                                        ],
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let m := M.copy (| γ |) in
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                m,
                                                "p3_matrix::dense::DenseMatrix",
                                                "values"
                                              |)
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |);
                  M.read (| coeffs |)
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn get_evaluations_on_domain<'a>(
            &self,
            prover_data: &'a Self::ProverData,
            idx: usize,
            domain: Self::Domain,
        ) -> Self::EvaluationsOnDomain<'a> {
            let mut coeffs = prover_data[idx].clone();
            assert!(domain.log_size() >= self.log_n);
            coeffs.values.resize(
                coeffs.values.len() << (domain.log_size() - self.log_n),
                Val::ZERO,
            );
            self.dft.coset_dft_batch(coeffs, domain.shift())
        }
    *)
    Definition get_evaluations_on_domain
        (Val Dft Challenge Challenger : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val Dft Challenge Challenger in
      match ε, τ, α with
      | [], [], [ self; prover_data; idx; domain ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let prover_data := M.alloc (| prover_data |) in
          let idx := M.alloc (| idx |) in
          let domain := M.alloc (| domain |) in
          M.read (|
            let~ coeffs :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        Val;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Val; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      Val;
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Val; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        Val;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Val; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Val;
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Val; Ty.path "alloc::alloc::Global" ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::ops::index::Index",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Val;
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Val; Ty.path "alloc::alloc::Global" ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [ Ty.path "usize" ],
                            "index",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| prover_data |) |) |);
                            M.read (| idx |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ge,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                        []
                                        [ Val ],
                                      "log_size",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, domain |) ]
                                  |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "p3_commit::testing::TrivialPcs",
                                      "log_n"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: domain.log_size() >= self.log_n" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ Val; Ty.path "alloc::alloc::Global" ],
                    "resize",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        coeffs,
                        "p3_matrix::dense::DenseMatrix",
                        "values"
                      |)
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.shl,
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Val; Ty.path "alloc::alloc::Global" ],
                            "len",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                coeffs,
                                "p3_matrix::dense::DenseMatrix",
                                "values"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                  []
                                  [ Val ],
                                "log_size",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, domain |) ]
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "p3_commit::testing::TrivialPcs",
                                "log_n"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.read (|
                      get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", Val |)
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_dft::traits::TwoAdicSubgroupDft"
                  []
                  [ Val ]
                  Dft
                  "Evaluations",
                M.get_trait_method (|
                  "p3_dft::traits::TwoAdicSubgroupDft",
                  Dft,
                  [],
                  [ Val ],
                  "coset_dft_batch",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_commit::testing::TrivialPcs",
                      "dft"
                    |)
                  |);
                  M.read (| coeffs |);
                  M.call_closure (|
                    Val,
                    M.get_associated_function (|
                      Ty.apply (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset") [] [ Val ],
                      "shift",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, domain |) ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn open(
            &self,
            // For each round,
            rounds: Vec<(
                &Self::ProverData,
                // for each matrix,
                Vec<
                    // points to open
                    Vec<Challenge>,
                >,
            )>,
            _challenger: &mut Challenger,
        ) -> (OpenedValues<Challenge>, Self::Proof) {
            (
                rounds
                    .into_iter()
                    .map(|(coeffs_for_round, points_for_round)| {
                        // ensure that each matrix corresponds to a set of opening points
                        debug_assert_eq!(coeffs_for_round.len(), points_for_round.len());
                        coeffs_for_round
                            .iter()
                            .zip(points_for_round)
                            .map(|(coeffs_for_mat, points_for_mat)| {
                                points_for_mat
                                    .into_iter()
                                    .map(|pt| eval_coeffs_at_pt(coeffs_for_mat, pt))
                                    .collect()
                            })
                            .collect()
                    })
                    .collect(),
                (),
            )
        }
    *)
    Definition open
        (Val Dft Challenge Challenger : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val Dft Challenge Challenger in
      match ε, τ, α with
      | [], [], [ self; rounds; _challenger ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rounds := M.alloc (| rounds |) in
          let _challenger := M.alloc (| _challenger |) in
          Value.Tuple
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Challenge; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Val;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Val; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              Val;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Val; Ty.path "alloc::alloc::Global" ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Challenge; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Challenge; Ty.path "alloc::alloc::Global" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ])
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Challenge; Ty.path "alloc::alloc::Global" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            Val;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Val; Ty.path "alloc::alloc::Global" ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Challenge; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                Val;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Val; Ty.path "alloc::alloc::Global" ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Challenge; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Val;
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Val; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Challenge; Ty.path "alloc::alloc::Global" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                Val;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Val; Ty.path "alloc::alloc::Global" ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Challenge; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Challenge; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            Val;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Val; Ty.path "alloc::alloc::Global" ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Challenge; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              Val;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Val; Ty.path "alloc::alloc::Global" ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Challenge; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [ M.read (| rounds |) ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_matrix::dense::DenseMatrix")
                                                            []
                                                            [
                                                              Val;
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Val;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ Challenge; Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Challenge; Ty.path "alloc::alloc::Global" ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ])
                                    ],
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let coeffs_for_round := M.copy (| γ0_0 |) in
                                        let points_for_round := M.copy (| γ0_1 |) in
                                        M.read (|
                                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use (M.alloc (| Value.Bool true |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    let~ _ :
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                      M.match_operator (|
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                        M.alloc (|
                                                          Value.Tuple
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_matrix::dense::DenseMatrix")
                                                                            []
                                                                            [
                                                                              Val;
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Val;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "len",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            coeffs_for_round
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Challenge;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "len",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        points_for_round
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  0
                                                                |) in
                                                              let γ0_1 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  1
                                                                |) in
                                                              let left_val := M.copy (| γ0_0 |) in
                                                              let right_val := M.copy (| γ0_1 |) in
                                                              M.match_operator (|
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ],
                                                                M.alloc (| Value.Tuple [] |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ :=
                                                                        M.use
                                                                          (M.alloc (|
                                                                            UnOp.not (|
                                                                              M.call_closure (|
                                                                                Ty.path "bool",
                                                                                BinOp.eq,
                                                                                [
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        left_val
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        right_val
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)) in
                                                                      let _ :=
                                                                        is_constant_or_break_match (|
                                                                          M.read (| γ |),
                                                                          Value.Bool true
                                                                        |) in
                                                                      M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.read (|
                                                                            let~ kind :
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::panicking::AssertKind"
                                                                                  ] :=
                                                                              M.alloc (|
                                                                                Value.StructTuple
                                                                                  "core::panicking::AssertKind::Eq"
                                                                                  []
                                                                              |) in
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                Ty.path "never",
                                                                                M.get_function (|
                                                                                  "core::panicking::assert_failed",
                                                                                  [],
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.path "usize"
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  M.read (| kind |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            left_val
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            right_val
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  Value.StructTuple
                                                                                    "core::option::Option::None"
                                                                                    []
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.alloc (|
                                                                        Value.Tuple []
                                                                      |)))
                                                                ]
                                                              |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ Challenge; Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_matrix::dense::DenseMatrix")
                                                              []
                                                              [
                                                                Val;
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Val;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::into_iter::IntoIter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Challenge;
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_matrix::dense::DenseMatrix")
                                                                      []
                                                                      [
                                                                        Val;
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Val;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Challenge;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Challenge;
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ])
                                                  ],
                                                [],
                                                [],
                                                "collect",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Challenge;
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::map::Map")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_matrix::dense::DenseMatrix")
                                                                []
                                                                [
                                                                  Val;
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Val;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::vec::into_iter::IntoIter")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Challenge;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_matrix::dense::DenseMatrix")
                                                                        []
                                                                        [
                                                                          Val;
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Val;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Challenge;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Challenge;
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ])
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_matrix::dense::DenseMatrix")
                                                              []
                                                              [
                                                                Val;
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Val;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::into_iter::IntoIter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Challenge;
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ],
                                                    [],
                                                    [],
                                                    "map",
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Challenge;
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_matrix::dense::DenseMatrix")
                                                                        []
                                                                        [
                                                                          Val;
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Val;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Challenge;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Challenge;
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ])
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::zip::Zip")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_matrix::dense::DenseMatrix")
                                                                []
                                                                [
                                                                  Val;
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Val;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::vec::into_iter::IntoIter")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Challenge;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_matrix::dense::DenseMatrix")
                                                              []
                                                              [
                                                                Val;
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Val;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ],
                                                        [],
                                                        [],
                                                        "zip",
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Challenge;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_matrix::dense::DenseMatrix")
                                                                []
                                                                [
                                                                  Val;
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Val;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    Val;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Val;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                              ],
                                                            "iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_matrix::dense::DenseMatrix")
                                                                            []
                                                                            [
                                                                              Val;
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Val;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_matrix::dense::DenseMatrix")
                                                                          []
                                                                          [
                                                                            Val;
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Val;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    [],
                                                                    "deref",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (|
                                                                          coeffs_for_round
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (| points_for_round |)
                                                      ]
                                                    |);
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            ltac:(M.monadic
                                                              (M.match_operator (|
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "p3_matrix::dense::DenseMatrix")
                                                                                      []
                                                                                      [
                                                                                        Val;
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Val;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ]
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Challenge;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ])
                                                                  ],
                                                                M.alloc (| α0 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          0
                                                                        |) in
                                                                      let γ0_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          1
                                                                        |) in
                                                                      let coeffs_for_mat :=
                                                                        M.copy (| γ0_0 |) in
                                                                      let points_for_mat :=
                                                                        M.copy (| γ0_1 |) in
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Challenge;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::map::Map")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::into_iter::IntoIter")
                                                                                []
                                                                                [
                                                                                  Challenge;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ];
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [ Challenge ]
                                                                                ]
                                                                                (Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ])
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "collect",
                                                                          [],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::map::Map")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::into_iter::IntoIter")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ];
                                                                                Ty.function
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [ Challenge ]
                                                                                  ]
                                                                                  (Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Challenge;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ])
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::into_iter::IntoIter")
                                                                                []
                                                                                [
                                                                                  Challenge;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              [],
                                                                              "map",
                                                                              [],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ];
                                                                                Ty.function
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [ Challenge ]
                                                                                  ]
                                                                                  (Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Challenge;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ])
                                                                              ]
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::into_iter::IntoIter")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "core::iter::traits::collect::IntoIterator",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Challenge;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [],
                                                                                  [],
                                                                                  "into_iter",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    points_for_mat
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              M.closure
                                                                                (fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    match γ with
                                                                                    | [ α0 ] =>
                                                                                      ltac:(M.monadic
                                                                                        (M.match_operator (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "*")
                                                                                            []
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Challenge
                                                                                                    ]
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  []
                                                                                                  [
                                                                                                    Challenge;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ])
                                                                                            ],
                                                                                          M.alloc (|
                                                                                            α0
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      pt :=
                                                                                                  M.copy (|
                                                                                                    γ
                                                                                                  |) in
                                                                                                M.call_closure (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Challenge;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  M.get_function (|
                                                                                                    "p3_commit::testing::eval_coeffs_at_pt",
                                                                                                    [],
                                                                                                    [
                                                                                                      Val;
                                                                                                      Challenge
                                                                                                    ]
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.deref (|
                                                                                                        M.read (|
                                                                                                          coeffs_for_mat
                                                                                                        |)
                                                                                                      |)
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      pt
                                                                                                    |)
                                                                                                  ]
                                                                                                |)))
                                                                                          ]
                                                                                        |)))
                                                                                    | _ =>
                                                                                      M.impossible
                                                                                        "wrong number of arguments"
                                                                                    end))
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |)))
                                                          | _ =>
                                                            M.impossible "wrong number of arguments"
                                                          end))
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |);
              Value.Tuple []
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn verify(
            &self,
            // For each round:
            rounds: Vec<(
                Self::Commitment,
                // for each matrix:
                Vec<(
                    // its domain,
                    Self::Domain,
                    // for each point:
                    Vec<(
                        Challenge,
                        // values at this point
                        Vec<Challenge>,
                    )>,
                )>,
            )>,
            _proof: &Self::Proof,
            _challenger: &mut Challenger,
        ) -> Result<(), Self::Error> {
            for (comm, round_opening) in rounds {
                for (coeff_vec, (domain, points_and_values)) in zip_eq(comm, round_opening, ())? {
                    let width = coeff_vec.len() / domain.size();
                    assert_eq!(width * domain.size(), coeff_vec.len());
                    let coeffs = RowMajorMatrix::new(coeff_vec, width);
                    for (pt, values) in points_and_values {
                        assert_eq!(eval_coeffs_at_pt(&coeffs, pt), values);
                    }
                }
            }
            Ok(())
        }
    *)
    Definition verify
        (Val Dft Challenge Challenger : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self Val Dft Challenge Challenger in
      match ε, τ, α with
      | [], [], [ self; rounds; _proof; _challenger ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rounds := M.alloc (| rounds |) in
          let _proof := M.alloc (| _proof |) in
          let _challenger := M.alloc (| _challenger |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.tuple [];
                Ty.associated_in_trait
                  "p3_commit::pcs::Pcs"
                  []
                  [ Challenge; Challenger ]
                  (Ty.apply (Ty.path "p3_commit::testing::TrivialPcs") [] [ Val; Dft ])
                  "Error"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.use
                    (M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Val; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "p3_field::coset::TwoAdicMultiplicativeCoset")
                                            []
                                            [ Val ];
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Challenge;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ Challenge; Ty.path "alloc::alloc::Global" ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Val; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "p3_field::coset::TwoAdicMultiplicativeCoset")
                                              []
                                              [ Val ];
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Challenge;
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Challenge; Ty.path "alloc::alloc::Global" ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| rounds |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              ltac:(M.monadic
                                (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Val; Ty.path "alloc::alloc::Global" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                          []
                                                          [ Val ];
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Challenge;
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Challenge;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ Val; Ty.path "alloc::alloc::Global" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                            []
                                                            [ Val ];
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Challenge;
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Challenge;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let comm := M.copy (| γ1_0 |) in
                                          let round_opening := M.copy (| γ1_1 |) in
                                          M.use
                                            (M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_util::zip_eq::ZipEq")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ Val; Ty.path "alloc::alloc::Global" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                                        []
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                []
                                                                [ Val ];
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Challenge;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Challenge;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "p3_util::zip_eq::ZipEq")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::into_iter::IntoIter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [ Val; Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::into_iter::IntoIter")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                  []
                                                                  [ Val ];
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Challenge;
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Challenge;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ],
                                                    [],
                                                    [],
                                                    "into_iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.match_operator (|
                                                        Ty.apply
                                                          (Ty.path "*")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "p3_util::zip_eq::ZipEq")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::vec::into_iter::IntoIter")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Val;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::vec::into_iter::IntoIter")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                          []
                                                                          [ Val ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Challenge;
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ],
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::control_flow::ControlFlow")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.tuple []
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path "p3_util::zip_eq::ZipEq")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloc::vec::into_iter::IntoIter")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Val;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloc::vec::into_iter::IntoIter")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                              []
                                                                              [ Val ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Challenge;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::Try",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_util::zip_eq::ZipEq")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::vec::into_iter::IntoIter")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Val;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::vec::into_iter::IntoIter")
                                                                        []
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                []
                                                                                [ Val ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Challenge;
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Challenge;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.tuple []
                                                                ],
                                                              [],
                                                              [],
                                                              "branch",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_util::zip_eq::ZipEq")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::into_iter::IntoIter")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Val;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::into_iter::IntoIter")
                                                                          []
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                  []
                                                                                  [ Val ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Challenge;
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            Challenge;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ];
                                                                    Ty.tuple []
                                                                  ],
                                                                M.get_function (|
                                                                  "p3_util::zip_eq::zip_eq",
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Val;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloc::vec::into_iter::IntoIter")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Val;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                              []
                                                                              [ Val ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Challenge;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloc::vec::into_iter::IntoIter")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                              []
                                                                              [ Val ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Challenge;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.tuple []
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (| comm |);
                                                                  M.read (| round_opening |);
                                                                  Value.Tuple []
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                  0
                                                                |) in
                                                              let residual := M.copy (| γ0_0 |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    M.return_ (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [ Ty.tuple []; Ty.tuple []
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::try_trait::FromResidual",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.tuple [];
                                                                              Ty.tuple []
                                                                            ],
                                                                          [],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "core::convert::Infallible";
                                                                                Ty.tuple []
                                                                              ]
                                                                          ],
                                                                          "from_residual",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [ M.read (| residual |) ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                  0
                                                                |) in
                                                              let val := M.copy (| γ0_0 |) in
                                                              val))
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter := M.copy (| γ |) in
                                                    M.loop (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      ltac:(M.monadic
                                                        (let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.match_operator (|
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ],
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Val;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ];
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                              []
                                                                              [ Val ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Challenge;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_util::zip_eq::ZipEq")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::vec::into_iter::IntoIter")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Val;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::vec::into_iter::IntoIter")
                                                                        []
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                []
                                                                                [ Val ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Challenge;
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          Challenge;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let γ1_0 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      0
                                                                    |) in
                                                                  let γ1_1 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ0_0,
                                                                      1
                                                                    |) in
                                                                  let coeff_vec :=
                                                                    M.copy (| γ1_0 |) in
                                                                  let γ2_0 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ1_1,
                                                                      0
                                                                    |) in
                                                                  let γ2_1 :=
                                                                    M.SubPointer.get_tuple_field (|
                                                                      γ1_1,
                                                                      1
                                                                    |) in
                                                                  let domain := M.copy (| γ2_0 |) in
                                                                  let points_and_values :=
                                                                    M.copy (| γ2_1 |) in
                                                                  let~ width :
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [ Ty.path "usize" ] :=
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.div,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Val;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              "len",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                coeff_vec
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                []
                                                                                [ Val ],
                                                                              "size",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                domain
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |) in
                                                                  let~ _ :
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [ Ty.tuple [] ] :=
                                                                    M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [ Ty.tuple [] ],
                                                                      M.alloc (|
                                                                        Value.Tuple
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  Ty.path "usize",
                                                                                  BinOp.Wrap.mul,
                                                                                  [
                                                                                    M.read (|
                                                                                      width
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "usize",
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_field::coset::TwoAdicMultiplicativeCoset")
                                                                                          []
                                                                                          [ Val ],
                                                                                        "size",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          domain
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  Ty.path "usize",
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Val;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    "len",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      coeff_vec
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                0
                                                                              |) in
                                                                            let γ0_1 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                1
                                                                              |) in
                                                                            let left_val :=
                                                                              M.copy (| γ0_0 |) in
                                                                            let right_val :=
                                                                              M.copy (| γ0_1 |) in
                                                                            M.match_operator (|
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [ Ty.tuple [] ],
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          UnOp.not (|
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "bool",
                                                                                              BinOp.eq,
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      left_val
                                                                                                    |)
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      right_val
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        |)) in
                                                                                    let _ :=
                                                                                      is_constant_or_break_match (|
                                                                                        M.read (|
                                                                                          γ
                                                                                        |),
                                                                                        Value.Bool
                                                                                          true
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      M.never_to_any (|
                                                                                        M.read (|
                                                                                          let~
                                                                                                kind :
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "*")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "core::panicking::AssertKind"
                                                                                                ] :=
                                                                                            M.alloc (|
                                                                                              Value.StructTuple
                                                                                                "core::panicking::AssertKind::Eq"
                                                                                                []
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "never",
                                                                                              M.get_function (|
                                                                                                "core::panicking::assert_failed",
                                                                                                [],
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize";
                                                                                                  Ty.path
                                                                                                    "usize"
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  kind
                                                                                                |);
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.deref (|
                                                                                                        M.read (|
                                                                                                          left_val
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |);
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.deref (|
                                                                                                        M.read (|
                                                                                                          right_val
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |);
                                                                                                Value.StructTuple
                                                                                                  "core::option::Option::None"
                                                                                                  []
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.alloc (|
                                                                                      Value.Tuple []
                                                                                    |)))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |) in
                                                                  let~ coeffs :
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_matrix::dense::DenseMatrix")
                                                                            []
                                                                            [
                                                                              Val;
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Val;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ]
                                                                        ] :=
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "p3_matrix::dense::DenseMatrix")
                                                                          []
                                                                          [
                                                                            Val;
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Val;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ],
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "p3_matrix::dense::DenseMatrix")
                                                                            []
                                                                            [
                                                                              Val;
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Val;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ],
                                                                          "new",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (| coeff_vec |);
                                                                          M.read (| width |)
                                                                        ]
                                                                      |)
                                                                    |) in
                                                                  M.use
                                                                    (M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [ Ty.tuple [] ],
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::into_iter::IntoIter")
                                                                            []
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Challenge;
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Challenge;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ]
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::collect::IntoIterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Challenge;
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      []
                                                                                      [
                                                                                        Challenge;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            [],
                                                                            "into_iter",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (|
                                                                              points_and_values
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let iter :=
                                                                              M.copy (| γ |) in
                                                                            M.loop (|
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [ Ty.tuple [] ],
                                                                              ltac:(M.monadic
                                                                                (let~ _ :
                                                                                    Ty.apply
                                                                                      (Ty.path "*")
                                                                                      []
                                                                                      [ Ty.tuple []
                                                                                      ] :=
                                                                                  M.match_operator (|
                                                                                    Ty.apply
                                                                                      (Ty.path "*")
                                                                                      []
                                                                                      [ Ty.tuple []
                                                                                      ],
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::option::Option")
                                                                                          []
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Challenge;
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  []
                                                                                                  [
                                                                                                    Challenge;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ]
                                                                                          ],
                                                                                        M.get_trait_method (|
                                                                                          "core::iter::traits::iterator::Iterator",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::into_iter::IntoIter")
                                                                                            []
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Challenge;
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Challenge;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ]
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          [],
                                                                                          [],
                                                                                          "next",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            M.deref (|
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.MutRef,
                                                                                                iter
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let _ :=
                                                                                            M.is_struct_tuple (|
                                                                                              γ,
                                                                                              "core::option::Option::None"
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            M.never_to_any (|
                                                                                              M.read (|
                                                                                                M.break (||)
                                                                                              |)
                                                                                            |)
                                                                                          |)));
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                γ0_0 :=
                                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                                              γ,
                                                                                              "core::option::Option::Some",
                                                                                              0
                                                                                            |) in
                                                                                          let
                                                                                                γ1_0 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ0_0,
                                                                                              0
                                                                                            |) in
                                                                                          let
                                                                                                γ1_1 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ0_0,
                                                                                              1
                                                                                            |) in
                                                                                          let pt :=
                                                                                            M.copy (|
                                                                                              γ1_0
                                                                                            |) in
                                                                                          let
                                                                                                values :=
                                                                                            M.copy (|
                                                                                              γ1_1
                                                                                            |) in
                                                                                          let~ _ :
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "*")
                                                                                                []
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ] :=
                                                                                            M.match_operator (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "*")
                                                                                                []
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ],
                                                                                              M.alloc (|
                                                                                                Value.Tuple
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.alloc (|
                                                                                                        M.call_closure (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            []
                                                                                                            [
                                                                                                              Challenge;
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ],
                                                                                                          M.get_function (|
                                                                                                            "p3_commit::testing::eval_coeffs_at_pt",
                                                                                                            [],
                                                                                                            [
                                                                                                              Val;
                                                                                                              Challenge
                                                                                                            ]
                                                                                                          |),
                                                                                                          [
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.deref (|
                                                                                                                M.borrow (|
                                                                                                                  Pointer.Kind.Ref,
                                                                                                                  coeffs
                                                                                                                |)
                                                                                                              |)
                                                                                                            |);
                                                                                                            M.read (|
                                                                                                              pt
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      |)
                                                                                                    |);
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      values
                                                                                                    |)
                                                                                                  ]
                                                                                              |),
                                                                                              [
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (let
                                                                                                          γ0_0 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ,
                                                                                                        0
                                                                                                      |) in
                                                                                                    let
                                                                                                          γ0_1 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ,
                                                                                                        1
                                                                                                      |) in
                                                                                                    let
                                                                                                          left_val :=
                                                                                                      M.copy (|
                                                                                                        γ0_0
                                                                                                      |) in
                                                                                                    let
                                                                                                          right_val :=
                                                                                                      M.copy (|
                                                                                                        γ0_1
                                                                                                      |) in
                                                                                                    M.match_operator (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "*")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            []
                                                                                                        ],
                                                                                                      M.alloc (|
                                                                                                        Value.Tuple
                                                                                                          []
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (let
                                                                                                                  γ :=
                                                                                                              M.use
                                                                                                                (M.alloc (|
                                                                                                                  UnOp.not (|
                                                                                                                    M.call_closure (|
                                                                                                                      Ty.path
                                                                                                                        "bool",
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::cmp::PartialEq",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "alloc::vec::Vec")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Challenge;
                                                                                                                            Ty.path
                                                                                                                              "alloc::alloc::Global"
                                                                                                                          ],
                                                                                                                        [],
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "alloc::vec::Vec")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Challenge;
                                                                                                                              Ty.path
                                                                                                                                "alloc::alloc::Global"
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                        "eq",
                                                                                                                        [],
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.borrow (|
                                                                                                                          Pointer.Kind.Ref,
                                                                                                                          M.deref (|
                                                                                                                            M.read (|
                                                                                                                              left_val
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        |);
                                                                                                                        M.borrow (|
                                                                                                                          Pointer.Kind.Ref,
                                                                                                                          M.deref (|
                                                                                                                            M.read (|
                                                                                                                              right_val
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)) in
                                                                                                            let
                                                                                                                  _ :=
                                                                                                              is_constant_or_break_match (|
                                                                                                                M.read (|
                                                                                                                  γ
                                                                                                                |),
                                                                                                                Value.Bool
                                                                                                                  true
                                                                                                              |) in
                                                                                                            M.alloc (|
                                                                                                              M.never_to_any (|
                                                                                                                M.read (|
                                                                                                                  let~
                                                                                                                        kind :
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "*")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "core::panicking::AssertKind"
                                                                                                                        ] :=
                                                                                                                    M.alloc (|
                                                                                                                      Value.StructTuple
                                                                                                                        "core::panicking::AssertKind::Eq"
                                                                                                                        []
                                                                                                                    |) in
                                                                                                                  M.alloc (|
                                                                                                                    M.call_closure (|
                                                                                                                      Ty.path
                                                                                                                        "never",
                                                                                                                      M.get_function (|
                                                                                                                        "core::panicking::assert_failed",
                                                                                                                        [],
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "alloc::vec::Vec")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Challenge;
                                                                                                                              Ty.path
                                                                                                                                "alloc::alloc::Global"
                                                                                                                            ];
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "alloc::vec::Vec")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Challenge;
                                                                                                                              Ty.path
                                                                                                                                "alloc::alloc::Global"
                                                                                                                            ]
                                                                                                                        ]
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.read (|
                                                                                                                          kind
                                                                                                                        |);
                                                                                                                        M.borrow (|
                                                                                                                          Pointer.Kind.Ref,
                                                                                                                          M.deref (|
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              M.deref (|
                                                                                                                                M.read (|
                                                                                                                                  left_val
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        |);
                                                                                                                        M.borrow (|
                                                                                                                          Pointer.Kind.Ref,
                                                                                                                          M.deref (|
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              M.deref (|
                                                                                                                                M.read (|
                                                                                                                                  right_val
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        |);
                                                                                                                        Value.StructTuple
                                                                                                                          "core::option::Option::None"
                                                                                                                          []
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)));
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.alloc (|
                                                                                                              Value.Tuple
                                                                                                                []
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)))
                                                                                              ]
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            Value.Tuple
                                                                                              []
                                                                                          |)))
                                                                                    ]
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                            |)))
                                                                      ]
                                                                    |))))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                    |)))
                                              ]
                                            |))))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (Val Dft Challenge Challenger : Ty.t),
      M.IsTraitInstance
        "p3_commit::pcs::Pcs"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Challenge; Challenger ]
        (Self Val Dft Challenge Challenger)
        (* Instance *)
        [
          ("Domain", InstanceField.Ty (_Domain Val Dft Challenge Challenger));
          ("Commitment", InstanceField.Ty (_Commitment Val Dft Challenge Challenger));
          ("ProverData", InstanceField.Ty (_ProverData Val Dft Challenge Challenger));
          ("EvaluationsOnDomain",
            InstanceField.Ty (_EvaluationsOnDomain Val Dft Challenge Challenger));
          ("Proof", InstanceField.Ty (_Proof Val Dft Challenge Challenger));
          ("Error", InstanceField.Ty (_Error Val Dft Challenge Challenger));
          ("natural_domain_for_degree",
            InstanceField.Method (natural_domain_for_degree Val Dft Challenge Challenger));
          ("commit", InstanceField.Method (commit Val Dft Challenge Challenger));
          ("get_evaluations_on_domain",
            InstanceField.Method (get_evaluations_on_domain Val Dft Challenge Challenger));
          ("open", InstanceField.Method (open Val Dft Challenge Challenger));
          ("verify", InstanceField.Method (verify Val Dft Challenge Challenger))
        ].
  End Impl_p3_commit_pcs_Pcs_where_p3_field_field_TwoAdicField_Val_where_p3_field_field_ExtensionField_Challenge_Val_where_p3_challenger_CanSample_Challenger_Challenge_where_p3_dft_traits_TwoAdicSubgroupDft_Dft_Val_where_serde_ser_Serialize_alloc_vec_Vec_alloc_vec_Vec_Val_alloc_alloc_Global_alloc_alloc_Global_where_serde_de_Deserialize_alloc_vec_Vec_alloc_vec_Vec_Val_alloc_alloc_Global_alloc_alloc_Global_Challenge_Challenger_for_p3_commit_testing_TrivialPcs_Val_Dft.
End testing.
