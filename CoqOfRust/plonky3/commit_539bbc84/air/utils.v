(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module utils.
  (*
  pub fn pack_bits_le<FA, Var, I>(iter: I) -> FA
  where
      FA: FieldAlgebra,
      Var: Into<FA> + Clone,
      I: DoubleEndedIterator<Item = Var>,
  {
      let mut output = FA::ZERO;
      for elem in iter.rev() {
          output = output.double();
          output += elem.clone().into();
      }
      output
  }
  *)
  Definition pack_bits_le (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA; Var; _ as I ], [ iter ] =>
      ltac:(M.monadic
        (let iter := M.alloc (| I, iter |) in
        M.read (|
          let~ output : FA :=
            M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", FA |) |) in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply (Ty.path "core::iter::adapters::rev::Rev") [] [ I ],
                      M.call_closure (|
                        Ty.apply (Ty.path "core::iter::adapters::rev::Rev") [] [ I ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::iter::adapters::rev::Rev") [] [ I ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::iter::adapters::rev::Rev") [] [ I ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              I,
                              [],
                              [],
                              "rev",
                              [],
                              []
                            |),
                            [ M.read (| iter |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter :=
                            M.copy (|
                              Ty.apply (Ty.path "core::iter::adapters::rev::Rev") [] [ I ],
                              γ
                            |) in
                          M.read (|
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply (Ty.path "core::option::Option") [] [ Var ],
                                      M.call_closure (|
                                        Ty.apply (Ty.path "core::option::Option") [] [ Var ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::rev::Rev")
                                            []
                                            [ I ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.never_to_any (| M.read (| M.break (||) |) |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let elem := M.copy (| Var, γ0_0 |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.write (|
                                                output,
                                                M.call_closure (|
                                                  FA,
                                                  M.get_trait_method (|
                                                    "p3_field::field::FieldAlgebra",
                                                    FA,
                                                    [],
                                                    [],
                                                    "double",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, output |) ]
                                                |)
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_trait_method (|
                                                  "core::ops::arith::AddAssign",
                                                  FA,
                                                  [],
                                                  [ FA ],
                                                  "add_assign",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (| Pointer.Kind.MutRef, output |);
                                                  M.call_closure (|
                                                    FA,
                                                    M.get_trait_method (|
                                                      "core::convert::Into",
                                                      Var,
                                                      [],
                                                      [ FA ],
                                                      "into",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Var,
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Var,
                                                          [],
                                                          [],
                                                          "clone",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.borrow (| Pointer.Kind.Ref, elem |) ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                            |)
                          |)))
                    ]
                  |)
                |))
            |) in
          output
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_pack_bits_le :
    M.IsFunction.C "p3_air::utils::pack_bits_le" pack_bits_le.
  Admitted.
  Global Typeclasses Opaque pack_bits_le.
  
  (*
  pub fn xor<FA: FieldAlgebra>(x: FA, y: FA) -> FA {
      x.clone() + y.clone() - x * y.double()
  }
  *)
  Definition xor (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ x; y ] =>
      ltac:(M.monadic
        (let x := M.alloc (| FA, x |) in
        let y := M.alloc (| FA, y |) in
        M.call_closure (|
          FA,
          M.get_trait_method (| "core::ops::arith::Sub", FA, [], [ FA ], "sub", [], [] |),
          [
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Add", FA, [], [ FA ], "add", [], [] |),
              [
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, x |) ]
                |);
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, y |) ]
                |)
              ]
            |);
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.read (| x |);
                M.call_closure (|
                  FA,
                  M.get_trait_method (|
                    "p3_field::field::FieldAlgebra",
                    FA,
                    [],
                    [],
                    "double",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, y |) ]
                |)
              ]
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_xor : M.IsFunction.C "p3_air::utils::xor" xor.
  Admitted.
  Global Typeclasses Opaque xor.
  
  (*
  pub fn xor3<FA: FieldAlgebra>(x: FA, y: FA, z: FA) -> FA {
      // The cheapest way to implement this polynomial is to simply apply xor twice.
      // This costs 2 adds, 2 subs, 2 muls and 2 doubles.
      xor(x, xor(y, z))
  }
  *)
  Definition xor3 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ x; y; z ] =>
      ltac:(M.monadic
        (let x := M.alloc (| FA, x |) in
        let y := M.alloc (| FA, y |) in
        let z := M.alloc (| FA, z |) in
        M.call_closure (|
          FA,
          M.get_function (| "p3_air::utils::xor", [], [ FA ] |),
          [
            M.read (| x |);
            M.call_closure (|
              FA,
              M.get_function (| "p3_air::utils::xor", [], [ FA ] |),
              [ M.read (| y |); M.read (| z |) ]
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_xor3 : M.IsFunction.C "p3_air::utils::xor3" xor3.
  Admitted.
  Global Typeclasses Opaque xor3.
  
  (*
  pub fn andn<FA: FieldAlgebra>(x: FA, y: FA) -> FA {
      (FA::ONE - x) * y
  }
  *)
  Definition andn (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ x; y ] =>
      ltac:(M.monadic
        (let x := M.alloc (| FA, x |) in
        let y := M.alloc (| FA, y |) in
        M.call_closure (|
          FA,
          M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
          [
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Sub", FA, [], [ FA ], "sub", [], [] |),
              [
                M.read (| get_constant (| "p3_field::field::FieldAlgebra::ONE", FA |) |);
                M.read (| x |)
              ]
            |);
            M.read (| y |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_andn : M.IsFunction.C "p3_air::utils::andn" andn.
  Admitted.
  Global Typeclasses Opaque andn.
  
  (*
  pub fn checked_xor<F: Field, const N: usize>(xs: [F; N]) -> F {
      xs.into_iter().fold(F::ZERO, |acc, x| {
          debug_assert!(x.is_zero() || x.is_one());
          xor(acc, x)
      })
  }
  *)
  Definition checked_xor (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ F ], [ xs ] =>
      ltac:(M.monadic
        (let xs := M.alloc (| Ty.apply (Ty.path "array") [ N ] [ F ], xs |) in
        M.call_closure (|
          F,
          M.get_trait_method (|
            "core::iter::traits::iterator::Iterator",
            Ty.apply (Ty.path "core::array::iter::IntoIter") [ N ] [ F ],
            [],
            [],
            "fold",
            [],
            [ F; Ty.function [ F; F ] F ]
          |),
          [
            M.call_closure (|
              Ty.apply (Ty.path "core::array::iter::IntoIter") [ N ] [ F ],
              M.get_trait_method (|
                "core::iter::traits::collect::IntoIterator",
                Ty.apply (Ty.path "array") [ N ] [ F ],
                [],
                [],
                "into_iter",
                [],
                []
              |),
              [ M.read (| xs |) ]
            |);
            M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |);
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0; α1 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        F,
                        M.alloc (| F, α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let acc := M.copy (| F, γ |) in
                              M.match_operator (|
                                F,
                                M.alloc (| F, α1 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let x := M.copy (| F, γ |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.path "bool",
                                                        Value.Bool true
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    Ty.path "bool",
                                                                    UnOp.not (|
                                                                      LogicalOp.or (|
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          M.get_trait_method (|
                                                                            "p3_field::field::Field",
                                                                            F,
                                                                            [],
                                                                            [],
                                                                            "is_zero",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              x
                                                                            |)
                                                                          ]
                                                                        |),
                                                                        ltac:(M.monadic
                                                                          (M.call_closure (|
                                                                            Ty.path "bool",
                                                                            M.get_trait_method (|
                                                                              "p3_field::field::Field",
                                                                              F,
                                                                              [],
                                                                              [],
                                                                              "is_one",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                x
                                                                              |)
                                                                            ]
                                                                          |)))
                                                                      |)
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.never_to_any (|
                                                                M.call_closure (|
                                                                  Ty.path "never",
                                                                  M.get_function (|
                                                                    "core::panicking::panic",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    mk_str (|
                                                                      "assertion failed: x.is_zero() || x.is_one()"
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)));
                                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                                        ]
                                                      |) in
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                  |)));
                                              fun γ => ltac:(M.monadic (Value.Tuple []))
                                            ]
                                          |) in
                                        M.alloc (|
                                          F,
                                          M.call_closure (|
                                            F,
                                            M.get_function (| "p3_air::utils::xor", [], [ F ] |),
                                            [ M.read (| acc |); M.read (| x |) ]
                                          |)
                                        |)
                                      |)))
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_checked_xor :
    M.IsFunction.C "p3_air::utils::checked_xor" checked_xor.
  Admitted.
  Global Typeclasses Opaque checked_xor.
  
  (*
  pub fn checked_andn<F: Field>(x: F, y: F) -> F {
      debug_assert!(x.is_zero() || x.is_one());
      debug_assert!(y.is_zero() || y.is_one());
      andn(x, y)
  }
  *)
  Definition checked_andn (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ x; y ] =>
      ltac:(M.monadic
        (let x := M.alloc (| F, x |) in
        let y := M.alloc (| F, y |) in
        M.read (|
          let~ _ : Ty.tuple [] :=
            M.match_operator (|
              Ty.tuple [],
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      UnOp.not (|
                                        LogicalOp.or (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_trait_method (|
                                              "p3_field::field::Field",
                                              F,
                                              [],
                                              [],
                                              "is_zero",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, x |) ]
                                          |),
                                          ltac:(M.monadic
                                            (M.call_closure (|
                                              Ty.path "bool",
                                              M.get_trait_method (|
                                                "p3_field::field::Field",
                                                F,
                                                [],
                                                [],
                                                "is_one",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, x |) ]
                                            |)))
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.never_to_any (|
                                  M.call_closure (|
                                    Ty.path "never",
                                    M.get_function (| "core::panicking::panic", [], [] |),
                                    [ mk_str (| "assertion failed: x.is_zero() || x.is_one()" |) ]
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                    |)));
                fun γ => ltac:(M.monadic (Value.Tuple []))
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.match_operator (|
              Ty.tuple [],
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      UnOp.not (|
                                        LogicalOp.or (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_trait_method (|
                                              "p3_field::field::Field",
                                              F,
                                              [],
                                              [],
                                              "is_zero",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, y |) ]
                                          |),
                                          ltac:(M.monadic
                                            (M.call_closure (|
                                              Ty.path "bool",
                                              M.get_trait_method (|
                                                "p3_field::field::Field",
                                                F,
                                                [],
                                                [],
                                                "is_one",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, y |) ]
                                            |)))
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.never_to_any (|
                                  M.call_closure (|
                                    Ty.path "never",
                                    M.get_function (| "core::panicking::panic", [], [] |),
                                    [ mk_str (| "assertion failed: y.is_zero() || y.is_one()" |) ]
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                    |)));
                fun γ => ltac:(M.monadic (Value.Tuple []))
              ]
            |) in
          M.alloc (|
            F,
            M.call_closure (|
              F,
              M.get_function (| "p3_air::utils::andn", [], [ F ] |),
              [ M.read (| x |); M.read (| y |) ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_checked_andn :
    M.IsFunction.C "p3_air::utils::checked_andn" checked_andn.
  Admitted.
  Global Typeclasses Opaque checked_andn.
  
  (*
  pub fn u32_to_bits_le<FA: FieldAlgebra>(val: u32) -> [FA; 32] {
      array::from_fn(|i| FA::from_bool(val & (1 << i) != 0))
  }
  *)
  Definition u32_to_bits_le (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ val ] =>
      ltac:(M.monadic
        (let val := M.alloc (| Ty.path "u32", val |) in
        M.call_closure (|
          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 32 ] [ FA ],
          M.get_function (|
            "core::array::from_fn",
            [ Value.Integer IntegerKind.Usize 32 ],
            [ FA; Ty.function [ Ty.path "usize" ] FA ]
          |),
          [
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        FA,
                        M.alloc (| Ty.path "usize", α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let i := M.copy (| Ty.path "usize", γ |) in
                              M.call_closure (|
                                FA,
                                M.get_trait_method (|
                                  "p3_field::field::FieldAlgebra",
                                  FA,
                                  [],
                                  [],
                                  "from_bool",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ne,
                                    [
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.bit_and,
                                        [
                                          M.read (| val |);
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.shl,
                                            [ Value.Integer IntegerKind.U32 1; M.read (| i |) ]
                                          |)
                                        ]
                                      |);
                                      Value.Integer IntegerKind.U32 0
                                    ]
                                  |)
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_u32_to_bits_le :
    M.IsFunction.C "p3_air::utils::u32_to_bits_le" u32_to_bits_le.
  Admitted.
  Global Typeclasses Opaque u32_to_bits_le.
  
  (*
  pub fn u64_to_bits_le<FA: FieldAlgebra>(val: u64) -> [FA; 64] {
      array::from_fn(|i| FA::from_bool(val & (1 << i) != 0))
  }
  *)
  Definition u64_to_bits_le (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ val ] =>
      ltac:(M.monadic
        (let val := M.alloc (| Ty.path "u64", val |) in
        M.call_closure (|
          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 64 ] [ FA ],
          M.get_function (|
            "core::array::from_fn",
            [ Value.Integer IntegerKind.Usize 64 ],
            [ FA; Ty.function [ Ty.path "usize" ] FA ]
          |),
          [
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        FA,
                        M.alloc (| Ty.path "usize", α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let i := M.copy (| Ty.path "usize", γ |) in
                              M.call_closure (|
                                FA,
                                M.get_trait_method (|
                                  "p3_field::field::FieldAlgebra",
                                  FA,
                                  [],
                                  [],
                                  "from_bool",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ne,
                                    [
                                      M.call_closure (|
                                        Ty.path "u64",
                                        BinOp.Wrap.bit_and,
                                        [
                                          M.read (| val |);
                                          M.call_closure (|
                                            Ty.path "u64",
                                            BinOp.Wrap.shl,
                                            [ Value.Integer IntegerKind.U64 1; M.read (| i |) ]
                                          |)
                                        ]
                                      |);
                                      Value.Integer IntegerKind.U64 0
                                    ]
                                  |)
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_u64_to_bits_le :
    M.IsFunction.C "p3_air::utils::u64_to_bits_le" u64_to_bits_le.
  Admitted.
  Global Typeclasses Opaque u64_to_bits_le.
  
  (*
  pub fn u64_to_16_bit_limbs<FA: FieldAlgebra>(val: u64) -> [FA; 4] {
      array::from_fn(|i| FA::from_canonical_u16((val >> (16 * i)) as u16))
  }
  *)
  Definition u64_to_16_bit_limbs (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ val ] =>
      ltac:(M.monadic
        (let val := M.alloc (| Ty.path "u64", val |) in
        M.call_closure (|
          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ FA ],
          M.get_function (|
            "core::array::from_fn",
            [ Value.Integer IntegerKind.Usize 4 ],
            [ FA; Ty.function [ Ty.path "usize" ] FA ]
          |),
          [
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        FA,
                        M.alloc (| Ty.path "usize", α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let i := M.copy (| Ty.path "usize", γ |) in
                              M.call_closure (|
                                FA,
                                M.get_trait_method (|
                                  "p3_field::field::FieldAlgebra",
                                  FA,
                                  [],
                                  [],
                                  "from_canonical_u16",
                                  [],
                                  []
                                |),
                                [
                                  M.cast
                                    (Ty.path "u16")
                                    (M.call_closure (|
                                      Ty.path "u64",
                                      BinOp.Wrap.shr,
                                      [
                                        M.read (| val |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.mul,
                                          [ Value.Integer IntegerKind.Usize 16; M.read (| i |) ]
                                        |)
                                      ]
                                    |))
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_u64_to_16_bit_limbs :
    M.IsFunction.C "p3_air::utils::u64_to_16_bit_limbs" u64_to_16_bit_limbs.
  Admitted.
  Global Typeclasses Opaque u64_to_16_bit_limbs.
  
  (*
  pub fn add3<AB: AirBuilder>(
      builder: &mut AB,
      a: &[<AB as AirBuilder>::Var; 2],
      b: &[<AB as AirBuilder>::Var; 2],
      c: &[<AB as AirBuilder>::Expr; 2],
      d: &[<AB as AirBuilder>::Expr; 2],
  ) {
      // Define:
      //  acc    = a - b - c - d (mod P)
      //  acc_16 = a[0] - b[0] - c[0] - d[0] (mod P)
      //
      // We perform 2 checks:
      //
      // (1) acc*(acc + 2^32)*(acc + 2*2^32) = 0.
      // (2) acc_16*(acc_16 + 2^16)*(acc_16 + 2*2^16) = 0.
      //
      // We give a short proof for why this lets us conclude that a = b + c + d mod 2^32:
      //
      // As all 16 bit limbs have been range checked, we know that a, b, c, d lie in [0, 2^32) and hence
      // a = b + c + d mod 2^32 if and only if, over the integers, a - b - c - d = 0, -2^32 or -2*2^32.
      //
      // Equation (1) verifies that a - b - c - d mod P = 0, -2^32 or -2*2^32.
      //
      // Field overflow cannot occur when computing acc_16 as our characteristic is larger than 3*2^16.
      // Hence, equation (2) verifies that, over the integers, a[0] - b[0] - c[0] - d[0] = 0, -2^16 or -2*2^16.
      // Either way we can immediately conclude that a - b - c - d = 0 mod 2^16.
      //
      // Now we can use the chinese remainder theorem to combine these results to conclude that
      // a - b - c - d mod 2^16P = 0, -2^32 or -2*2^32.
      //
      // No overflow can occur mod 2^16 P as 2^16 P > 3*2^32 and a, b, c, d < 2^32. Hence we conclude that
      // over the integers a - b - c - d = 0, -2^32 or -2*2^32 which implies a = b + c + d mod 2^32.
  
      // By assumption P > 3*2^16 so we can safely use from_canonical here.
      let two_16 = <AB as AirBuilder>::Expr::from_canonical_u32(1 << 16);
      let two_32 = two_16.square();
  
      let acc_16 = a[0] - b[0] - c[0].clone() - d[0].clone();
      let acc_32 = a[1] - b[1] - c[1].clone() - d[1].clone();
      let acc = acc_16.clone() + two_16.clone() * acc_32;
  
      builder.assert_zero(acc.clone() * (acc.clone() + two_32.clone()) * (acc + two_32.double()));
      builder.assert_zero(
          acc_16.clone() * (acc_16.clone() + two_16.clone()) * (acc_16 + two_16.double()),
      );
  }
  *)
  Definition add3 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ AB ], [ builder; a; b; c; d ] =>
      ltac:(M.monadic
        (let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
        let a :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
              ],
            a
          |) in
        let b :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
              ],
            b
          |) in
        let c :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
              ],
            c
          |) in
        let d :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
              ],
            d
          |) in
        M.read (|
          let~ two_16 : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                [],
                [],
                "from_canonical_u32",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.shl,
                  [ Value.Integer IntegerKind.U32 1; Value.Integer IntegerKind.I32 16 ]
                |)
              ]
            |) in
          let~ two_32 : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                [],
                [],
                "square",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, two_16 |) ]
            |) in
          let~ acc_16 : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
              M.get_trait_method (|
                "core::ops::arith::Sub",
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                [],
                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                "sub",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Sub",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "sub",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "sub",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| a |) |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| b |) |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| c |) |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |)
                      ]
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_array_field (|
                        M.deref (| M.read (| d |) |),
                        Value.Integer IntegerKind.Usize 0
                      |)
                    |)
                  ]
                |)
              ]
            |) in
          let~ acc_32 : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
              M.get_trait_method (|
                "core::ops::arith::Sub",
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                [],
                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                "sub",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Sub",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "sub",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "sub",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| a |) |),
                            Value.Integer IntegerKind.Usize 1
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| b |) |),
                            Value.Integer IntegerKind.Usize 1
                          |)
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| c |) |),
                            Value.Integer IntegerKind.Usize 1
                          |)
                        |)
                      ]
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_array_field (|
                        M.deref (| M.read (| d |) |),
                        Value.Integer IntegerKind.Usize 1
                      |)
                    |)
                  ]
                |)
              ]
            |) in
          let~ acc : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
              M.get_trait_method (|
                "core::ops::arith::Add",
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                [],
                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                "add",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, acc_16 |) ]
                |);
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, two_16 |) ]
                    |);
                    M.read (| acc_32 |)
                  ]
                |)
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (|
                "p3_air::air::AirBuilder",
                AB,
                [],
                [],
                "assert_zero",
                [],
                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, acc |) ]
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Add",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "add",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, acc |) ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, two_32 |) ]
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "add",
                        [],
                        []
                      |),
                      [
                        M.read (| acc |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "double",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, two_32 |) ]
                        |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (|
                "p3_air::air::AirBuilder",
                AB,
                [],
                [],
                "assert_zero",
                [],
                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, acc_16 |) ]
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Add",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "add",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, acc_16 |) ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, two_16 |) ]
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "add",
                        [],
                        []
                      |),
                      [
                        M.read (| acc_16 |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "double",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, two_16 |) ]
                        |)
                      ]
                    |)
                  ]
                |)
              ]
            |) in
          M.alloc (| Ty.tuple [], Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_add3 : M.IsFunction.C "p3_air::utils::add3" add3.
  Admitted.
  Global Typeclasses Opaque add3.
  
  (*
  pub fn add2<AB: AirBuilder>(
      builder: &mut AB,
      a: &[<AB as AirBuilder>::Var; 2],
      b: &[<AB as AirBuilder>::Var; 2],
      c: &[<AB as AirBuilder>::Expr; 2],
  ) {
      // Define:
      //  acc    = a - b - c (mod P)
      //  acc_16 = a[0] - b[0] - c[0] (mod P)
      //
      // We perform 2 checks:
      //
      // (1) acc*(acc + 2^32) = 0.
      // (2) acc_16*(acc_16 + 2^16) = 0.
      //
      // We give a short proof for why this lets us conclude that a = b + c mod 2^32:
      //
      // As all 16 bit limbs have been range checked, we know that a, b, c lie in [0, 2^32) and hence
      // a = b + c mod 2^32 if and only if, over the integers, a - b - c = 0 or -2^32.
      //
      // Equation (1) verifies that either a - b - c = 0 mod P or a - b - c = -2^32 mod P.
      //
      // Field overflow cannot occur when computing acc_16 as our characteristic is larger than 2^17.
      // Hence, equation (2) verifies that, over the integers, a[0] - b[0] - c[0] = 0 or -2^16.
      // Either way we can immediately conclude that a - b - c = 0 mod 2^16.
      //
      // Now we can use the chinese remainder theorem to combine these results to conclude that
      // either a - b - c = 0 mod 2^16 P or a - b - c = -2^32 mod 2^16 P.
      //
      // No overflow can occur mod 2^16 P as 2^16 P > 2^33 and a, b, c < 2^32. Hence we conclude that
      // over the integers a - b - c = 0 or a - b - c = -2^32 which is equivalent to a = b + c mod 2^32.
  
      // By assumption P > 2^17 so we can safely use from_canonical here.
      let two_16 = <AB as AirBuilder>::Expr::from_canonical_u32(1 << 16);
      let two_32 = two_16.square();
  
      let acc_16 = a[0] - b[0] - c[0].clone();
      let acc_32 = a[1] - b[1] - c[1].clone();
      let acc = acc_16.clone() + two_16.clone() * acc_32;
  
      builder.assert_zero(acc.clone() * (acc + two_32));
      builder.assert_zero(acc_16.clone() * (acc_16 + two_16));
  }
  *)
  Definition add2 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ AB ], [ builder; a; b; c ] =>
      ltac:(M.monadic
        (let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
        let a :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
              ],
            a
          |) in
        let b :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
              ],
            b
          |) in
        let c :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
              ],
            c
          |) in
        M.read (|
          let~ two_16 : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                [],
                [],
                "from_canonical_u32",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.shl,
                  [ Value.Integer IntegerKind.U32 1; Value.Integer IntegerKind.I32 16 ]
                |)
              ]
            |) in
          let~ two_32 : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                [],
                [],
                "square",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, two_16 |) ]
            |) in
          let~ acc_16 : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
              M.get_trait_method (|
                "core::ops::arith::Sub",
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                [],
                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                "sub",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Sub",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    "sub",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_array_field (|
                        M.deref (| M.read (| a |) |),
                        Value.Integer IntegerKind.Usize 0
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_array_field (|
                        M.deref (| M.read (| b |) |),
                        Value.Integer IntegerKind.Usize 0
                      |)
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_array_field (|
                        M.deref (| M.read (| c |) |),
                        Value.Integer IntegerKind.Usize 0
                      |)
                    |)
                  ]
                |)
              ]
            |) in
          let~ acc_32 : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
              M.get_trait_method (|
                "core::ops::arith::Sub",
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                [],
                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                "sub",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Sub",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    "sub",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_array_field (|
                        M.deref (| M.read (| a |) |),
                        Value.Integer IntegerKind.Usize 1
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_array_field (|
                        M.deref (| M.read (| b |) |),
                        Value.Integer IntegerKind.Usize 1
                      |)
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_array_field (|
                        M.deref (| M.read (| c |) |),
                        Value.Integer IntegerKind.Usize 1
                      |)
                    |)
                  ]
                |)
              ]
            |) in
          let~ acc : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
              M.get_trait_method (|
                "core::ops::arith::Add",
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                [],
                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                "add",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, acc_16 |) ]
                |);
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, two_16 |) ]
                    |);
                    M.read (| acc_32 |)
                  ]
                |)
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (|
                "p3_air::air::AirBuilder",
                AB,
                [],
                [],
                "assert_zero",
                [],
                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, acc |) ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "add",
                        [],
                        []
                      |),
                      [ M.read (| acc |); M.read (| two_32 |) ]
                    |)
                  ]
                |)
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (|
                "p3_air::air::AirBuilder",
                AB,
                [],
                [],
                "assert_zero",
                [],
                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, acc_16 |) ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "add",
                        [],
                        []
                      |),
                      [ M.read (| acc_16 |); M.read (| two_16 |) ]
                    |)
                  ]
                |)
              ]
            |) in
          M.alloc (| Ty.tuple [], Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_add2 : M.IsFunction.C "p3_air::utils::add2" add2.
  Admitted.
  Global Typeclasses Opaque add2.
  
  (*
  pub fn xor_32_shift<AB: AirBuilder>(
      builder: &mut AB,
      a: &[<AB as AirBuilder>::Var; 2],
      b: &[<AB as AirBuilder>::Var; 32],
      c: &[<AB as AirBuilder>::Var; 32],
      shift: usize,
  ) {
      // First we range check all elements of c.
      c.iter().for_each(|&elem| builder.assert_bool(elem));
  
      // Next we compute (b ^ (c << shift)) and pack the result into two 16-bit integers.
      let xor_shift_c_0_16 = b[..16]
          .iter()
          .enumerate()
          .map(|(i, elem)| xor(( *elem).into(), c[(32 + i - shift) % 32].into()));
      let sum_0_16: <AB as AirBuilder>::Expr = pack_bits_le(xor_shift_c_0_16);
  
      let xor_shift_c_16_32 = b[16..]
          .iter()
          .enumerate()
          .map(|(i, elem)| xor(( *elem).into(), c[(32 + (i + 16) - shift) % 32].into()));
      let sum_16_32: <AB as AirBuilder>::Expr = pack_bits_le(xor_shift_c_16_32);
  
      // As both b and c have been range checked to be boolean, all the (b ^ (c << shift))
      // are also boolean and so this final check additionally has the effect of range checking a[0], a[1].
      builder.assert_eq(a[0], sum_0_16);
      builder.assert_eq(a[1], sum_16_32);
  }
  *)
  Definition xor_32_shift (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ AB ], [ builder; a; b; c; shift ] =>
      ltac:(M.monadic
        (let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
        let a :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
              ],
            a
          |) in
        let b :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 32 ]
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
              ],
            b
          |) in
        let c :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 32 ]
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
              ],
            c
          |) in
        let shift := M.alloc (| Ty.path "usize", shift |) in
        M.read (|
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::slice::iter::Iter")
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                [],
                [],
                "for_each",
                [],
                [
                  Ty.function
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ]
                    (Ty.tuple [])
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    []
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    "iter",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          ])
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| c |) |) |) ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                              α0
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.deref (| M.read (| γ |) |) in
                                  let elem :=
                                    M.copy (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var",
                                      γ
                                    |) in
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_trait_method (|
                                      "p3_air::air::AirBuilder",
                                      AB,
                                      [],
                                      [],
                                      "assert_bool",
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| builder |) |)
                                      |);
                                      M.read (| elem |)
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |) in
          let~ xor_shift_c_0_16 :
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply
                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ];
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.path "usize";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                    ]
                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                ] :=
            M.call_closure (|
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply
                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ];
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.path "usize";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                    ]
                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                [],
                [],
                "map",
                [],
                [
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.path "usize";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                    ]
                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    [],
                    [],
                    "enumerate",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeTo")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| b |) |) |);
                                Value.mkStructRecord
                                  "core::ops::range::RangeTo"
                                  []
                                  [ Ty.path "usize" ]
                                  [ ("end_", Value.Integer IntegerKind.Usize 16) ]
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.alloc (|
                              Ty.tuple
                                [
                                  Ty.path "usize";
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ],
                              α0
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                  let elem :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ],
                                      γ0_1
                                    |) in
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.get_function (|
                                      "p3_air::utils::xor",
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [ M.read (| M.deref (| M.read (| elem |) |) |) ]
                                      |);
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| c |) |),
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.rem,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.sub,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          Value.Integer IntegerKind.Usize 32;
                                                          M.read (| i |)
                                                        ]
                                                      |);
                                                      M.read (| shift |)
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 32
                                                ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |) in
          let~ sum_0_16 : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
              M.get_function (|
                "p3_air::utils::pack_bits_le",
                [],
                [
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.path "usize";
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ]
                        ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                ]
              |),
              [ M.read (| xor_shift_c_0_16 |) ]
            |) in
          let~ xor_shift_c_16_32 :
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply
                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ];
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.path "usize";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                    ]
                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                ] :=
            M.call_closure (|
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply
                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ];
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.path "usize";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                    ]
                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                [],
                [],
                "map",
                [],
                [
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.path "usize";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                    ]
                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    [],
                    [],
                    "enumerate",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeFrom")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| b |) |) |);
                                Value.mkStructRecord
                                  "core::ops::range::RangeFrom"
                                  []
                                  [ Ty.path "usize" ]
                                  [ ("start", Value.Integer IntegerKind.Usize 16) ]
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.alloc (|
                              Ty.tuple
                                [
                                  Ty.path "usize";
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ],
                              α0
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                  let elem :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ],
                                      γ0_1
                                    |) in
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.get_function (|
                                      "p3_air::utils::xor",
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [ M.read (| M.deref (| M.read (| elem |) |) |) ]
                                      |);
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| c |) |),
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.rem,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.sub,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          Value.Integer IntegerKind.Usize 32;
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.read (| i |);
                                                              Value.Integer IntegerKind.Usize 16
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (| shift |)
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 32
                                                ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |) in
          let~ sum_16_32 : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
              M.get_function (|
                "p3_air::utils::pack_bits_le",
                [],
                [
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.path "usize";
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ]
                        ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                ]
              |),
              [ M.read (| xor_shift_c_16_32 |) ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (|
                "p3_air::air::AirBuilder",
                AB,
                [],
                [],
                "assert_eq",
                [],
                [
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                ]
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                M.read (|
                  M.SubPointer.get_array_field (|
                    M.deref (| M.read (| a |) |),
                    Value.Integer IntegerKind.Usize 0
                  |)
                |);
                M.read (| sum_0_16 |)
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (|
                "p3_air::air::AirBuilder",
                AB,
                [],
                [],
                "assert_eq",
                [],
                [
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                ]
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                M.read (|
                  M.SubPointer.get_array_field (|
                    M.deref (| M.read (| a |) |),
                    Value.Integer IntegerKind.Usize 1
                  |)
                |);
                M.read (| sum_16_32 |)
              ]
            |) in
          M.alloc (| Ty.tuple [], Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_xor_32_shift :
    M.IsFunction.C "p3_air::utils::xor_32_shift" xor_32_shift.
  Admitted.
  Global Typeclasses Opaque xor_32_shift.
End utils.
