(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module exponentiation.
  (*
  pub fn exp_u64_by_squaring<FA: FieldAlgebra>(val: FA, power: u64) -> FA {
      let mut current = val;
      let mut product = FA::ONE;
  
      for j in 0..bits_u64(power) {
          if (power >> j & 1) != 0 {
              product *= current.clone();
          }
          current = current.square();
      }
      product
  }
  *)
  Definition exp_u64_by_squaring (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ val; power ] =>
      ltac:(M.monadic
        (let val := M.alloc (| FA, val |) in
        let power := M.alloc (| Ty.path "u64", power |) in
        M.read (|
          let~ current : FA := M.read (| val |) in
          let~ product : FA :=
            M.read (| get_constant (| "p3_field::field::FieldAlgebra::ONE", FA |) |) in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.call_closure (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          Value.mkStructRecord
                            "core::ops::range::Range"
                            []
                            [ Ty.path "usize" ]
                            [
                              ("start", Value.Integer IntegerKind.Usize 0);
                              ("end_",
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_function (| "p3_field::exponentiation::bits_u64", [], [] |),
                                  [ M.read (| power |) ]
                                |))
                            ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter :=
                            M.copy (|
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              γ
                            |) in
                          M.read (|
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "usize" ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.never_to_any (| M.read (| M.break (||) |) |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let j := M.copy (| Ty.path "usize", γ0_0 |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.ne,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "u64",
                                                                  BinOp.Wrap.bit_and,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "u64",
                                                                      BinOp.Wrap.shr,
                                                                      [
                                                                        M.read (| power |);
                                                                        M.read (| j |)
                                                                      ]
                                                                    |);
                                                                    Value.Integer IntegerKind.U64 1
                                                                  ]
                                                                |);
                                                                Value.Integer IntegerKind.U64 0
                                                              ]
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.read (|
                                                        let~ _ : Ty.tuple [] :=
                                                          M.call_closure (|
                                                            Ty.tuple [],
                                                            M.get_trait_method (|
                                                              "core::ops::arith::MulAssign",
                                                              FA,
                                                              [],
                                                              [ FA ],
                                                              "mul_assign",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                product
                                                              |);
                                                              M.call_closure (|
                                                                FA,
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  FA,
                                                                  [],
                                                                  [],
                                                                  "clone",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    current
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |) in
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                      |)));
                                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.write (|
                                                current,
                                                M.call_closure (|
                                                  FA,
                                                  M.get_trait_method (|
                                                    "p3_field::field::FieldAlgebra",
                                                    FA,
                                                    [],
                                                    [],
                                                    "square",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, current |) ]
                                                |)
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                            |)
                          |)))
                    ]
                  |)
                |))
            |) in
          product
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_exp_u64_by_squaring :
    M.IsFunction.C "p3_field::exponentiation::exp_u64_by_squaring" exp_u64_by_squaring.
  Admitted.
  Global Typeclasses Opaque exp_u64_by_squaring.
  
  (*
  const fn bits_u64(n: u64) -> usize {
      (64 - n.leading_zeros()) as usize
  }
  *)
  Definition bits_u64 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ n ] =>
      ltac:(M.monadic
        (let n := M.alloc (| Ty.path "u64", n |) in
        M.cast
          (Ty.path "usize")
          (M.call_closure (|
            Ty.path "u32",
            BinOp.Wrap.sub,
            [
              Value.Integer IntegerKind.U32 64;
              M.call_closure (|
                Ty.path "u32",
                M.get_associated_function (| Ty.path "u64", "leading_zeros", [], [] |),
                [ M.read (| n |) ]
              |)
            ]
          |))))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_bits_u64 :
    M.IsFunction.C "p3_field::exponentiation::bits_u64" bits_u64.
  Admitted.
  Global Typeclasses Opaque bits_u64.
  
  (*
  pub fn exp_1717986917<FA: FieldAlgebra>(val: FA) -> FA {
      // Note that 5 * 1717986917 = 4*(2^31 - 2) + 1 = 1 mod p - 1.
      // Thus as a^{p - 1} = 1 for all a \in F_p, (a^{1717986917})^5 = a.
      // Note the binary expansion: 1717986917 = 1100110011001100110011001100101_2
      // This uses 30 Squares + 7 Multiplications => 37 Operations total.
      // Suspect it's possible to improve this with enough effort. For example 1717986918 takes only 4 Multiplications.
      let p1 = val;
      let p10 = p1.square();
      let p11 = p10.clone() * p1;
      let p101 = p10 * p11.clone();
      let p110000 = p11.exp_power_of_2(4);
      let p110011 = p110000 * p11.clone();
      let p11001100000000 = p110011.exp_power_of_2(8);
      let p11001100110011 = p11001100000000.clone() * p110011;
      let p1100110000000000000000 = p11001100000000.exp_power_of_2(8);
      let p1100110011001100110011 = p1100110000000000000000 * p11001100110011;
      let p11001100110011001100110000 = p1100110011001100110011.exp_power_of_2(4);
      let p11001100110011001100110011 = p11001100110011001100110000 * p11;
      let p1100110011001100110011001100000 = p11001100110011001100110011.exp_power_of_2(5);
      p1100110011001100110011001100000 * p101
  }
  *)
  Definition exp_1717986917 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ val ] =>
      ltac:(M.monadic
        (let val := M.alloc (| FA, val |) in
        M.read (|
          let~ p1 : FA := M.read (| val |) in
          let~ p10 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "square",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p1 |) ]
            |) in
          let~ p11 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p10 |) ]
                |);
                M.read (| p1 |)
              ]
            |) in
          let~ p101 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.read (| p10 |);
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p11 |) ]
                |)
              ]
            |) in
          let~ p110000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p11 |); Value.Integer IntegerKind.Usize 4 ]
            |) in
          let~ p110011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.read (| p110000 |);
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p11 |) ]
                |)
              ]
            |) in
          let~ p11001100000000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p110011 |); Value.Integer IntegerKind.Usize 8 ]
            |) in
          let~ p11001100110011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p11001100000000 |) ]
                |);
                M.read (| p110011 |)
              ]
            |) in
          let~ p1100110000000000000000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p11001100000000 |); Value.Integer IntegerKind.Usize 8
              ]
            |) in
          let~ p1100110011001100110011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [ M.read (| p1100110000000000000000 |); M.read (| p11001100110011 |) ]
            |) in
          let~ p11001100110011001100110000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.Ref, p1100110011001100110011 |);
                Value.Integer IntegerKind.Usize 4
              ]
            |) in
          let~ p11001100110011001100110011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [ M.read (| p11001100110011001100110000 |); M.read (| p11 |) ]
            |) in
          let~ p1100110011001100110011001100000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.Ref, p11001100110011001100110011 |);
                Value.Integer IntegerKind.Usize 5
              ]
            |) in
          M.alloc (|
            FA,
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [ M.read (| p1100110011001100110011001100000 |); M.read (| p101 |) ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_exp_1717986917 :
    M.IsFunction.C "p3_field::exponentiation::exp_1717986917" exp_1717986917.
  Admitted.
  Global Typeclasses Opaque exp_1717986917.
  
  (*
  pub fn exp_1420470955<FA: FieldAlgebra>(val: FA) -> FA {
      // Note that 3 * 1420470955 = 2*(2^31 - 2^24) + 1 = 1 mod (p - 1).
      // Thus as a^{p - 1} = 1 for all a \in F_p, (a^{1420470955})^3 = a.
      // Note the binary expansion: 1420470955 = 1010100101010101010101010101011_2
      // This uses 29 Squares + 7 Multiplications => 36 Operations total.
      // Suspect it's possible to improve this with enough effort.
      let p1 = val;
      let p100 = p1.exp_power_of_2(2);
      let p101 = p100.clone() * p1.clone();
      let p10000 = p100.exp_power_of_2(2);
      let p10101 = p10000 * p101;
      let p10101000000 = p10101.clone().exp_power_of_2(6);
      let p10101010101 = p10101000000.clone() * p10101.clone();
      let p101010010101 = p10101000000 * p10101010101.clone();
      let p101010010101000000000000 = p101010010101.exp_power_of_2(12);
      let p101010010101010101010101 = p101010010101000000000000 * p10101010101;
      let p101010010101010101010101000000 = p101010010101010101010101.exp_power_of_2(6);
      let p101010010101010101010101010101 = p101010010101010101010101000000 * p10101;
      let p1010100101010101010101010101010 = p101010010101010101010101010101.square();
      p1010100101010101010101010101010 * p1.clone()
  }
  *)
  Definition exp_1420470955 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ val ] =>
      ltac:(M.monadic
        (let val := M.alloc (| FA, val |) in
        M.read (|
          let~ p1 : FA := M.read (| val |) in
          let~ p100 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p1 |); Value.Integer IntegerKind.Usize 2 ]
            |) in
          let~ p101 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p100 |) ]
                |);
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p1 |) ]
                |)
              ]
            |) in
          let~ p10000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p100 |); Value.Integer IntegerKind.Usize 2 ]
            |) in
          let~ p10101 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [ M.read (| p10000 |); M.read (| p101 |) ]
            |) in
          let~ p10101000000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.alloc (|
                    FA,
                    M.call_closure (|
                      FA,
                      M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                      [ M.borrow (| Pointer.Kind.Ref, p10101 |) ]
                    |)
                  |)
                |);
                Value.Integer IntegerKind.Usize 6
              ]
            |) in
          let~ p10101010101 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p10101000000 |) ]
                |);
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p10101 |) ]
                |)
              ]
            |) in
          let~ p101010010101 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.read (| p10101000000 |);
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p10101010101 |) ]
                |)
              ]
            |) in
          let~ p101010010101000000000000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p101010010101 |); Value.Integer IntegerKind.Usize 12 ]
            |) in
          let~ p101010010101010101010101 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [ M.read (| p101010010101000000000000 |); M.read (| p10101010101 |) ]
            |) in
          let~ p101010010101010101010101000000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.Ref, p101010010101010101010101 |);
                Value.Integer IntegerKind.Usize 6
              ]
            |) in
          let~ p101010010101010101010101010101 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [ M.read (| p101010010101010101010101000000 |); M.read (| p10101 |) ]
            |) in
          let~ p1010100101010101010101010101010 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "square",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p101010010101010101010101010101 |) ]
            |) in
          M.alloc (|
            FA,
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.read (| p1010100101010101010101010101010 |);
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p1 |) ]
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_exp_1420470955 :
    M.IsFunction.C "p3_field::exponentiation::exp_1420470955" exp_1420470955.
  Admitted.
  Global Typeclasses Opaque exp_1420470955.
  
  (*
  pub fn exp_1725656503<FA: FieldAlgebra>(val: FA) -> FA {
      // Note that 7 * 1725656503 = 6*(2^31 - 2^27) + 1 = 1 mod (p - 1).
      // Thus as a^{p - 1} = 1 for all a \in F_p, (a^{1725656503})^7 = a.
      // Note the binary expansion: 1725656503 = 1100110110110110110110110110111_2
      // This uses 29 Squares + 8 Multiplications => 37 Operations total.
      // Suspect it's possible to improve this with enough effort.
      let p1 = val;
      let p10 = p1.square();
      let p11 = p10 * p1.clone();
      let p110 = p11.square();
      let p111 = p110.clone() * p1;
      let p11000 = p110.exp_power_of_2(2);
      let p11011 = p11000.clone() * p11;
      let p11000000 = p11000.exp_power_of_2(3);
      let p11011011 = p11000000.clone() * p11011;
      let p110011011 = p11011011.clone() * p11000000;
      let p110011011000000000 = p110011011.exp_power_of_2(9);
      let p110011011011011011 = p110011011000000000 * p11011011.clone();
      let p110011011011011011000000000 = p110011011011011011.exp_power_of_2(9);
      let p110011011011011011011011011 = p110011011011011011000000000 * p11011011;
      let p1100110110110110110110110110000 = p110011011011011011011011011.exp_power_of_2(4);
      p1100110110110110110110110110000 * p111
  }
  *)
  Definition exp_1725656503 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ val ] =>
      ltac:(M.monadic
        (let val := M.alloc (| FA, val |) in
        M.read (|
          let~ p1 : FA := M.read (| val |) in
          let~ p10 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "square",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p1 |) ]
            |) in
          let~ p11 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.read (| p10 |);
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p1 |) ]
                |)
              ]
            |) in
          let~ p110 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "square",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p11 |) ]
            |) in
          let~ p111 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p110 |) ]
                |);
                M.read (| p1 |)
              ]
            |) in
          let~ p11000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p110 |); Value.Integer IntegerKind.Usize 2 ]
            |) in
          let~ p11011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p11000 |) ]
                |);
                M.read (| p11 |)
              ]
            |) in
          let~ p11000000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p11000 |); Value.Integer IntegerKind.Usize 3 ]
            |) in
          let~ p11011011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p11000000 |) ]
                |);
                M.read (| p11011 |)
              ]
            |) in
          let~ p110011011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p11011011 |) ]
                |);
                M.read (| p11000000 |)
              ]
            |) in
          let~ p110011011000000000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p110011011 |); Value.Integer IntegerKind.Usize 9 ]
            |) in
          let~ p110011011011011011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.read (| p110011011000000000 |);
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p11011011 |) ]
                |)
              ]
            |) in
          let~ p110011011011011011000000000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.Ref, p110011011011011011 |);
                Value.Integer IntegerKind.Usize 9
              ]
            |) in
          let~ p110011011011011011011011011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [ M.read (| p110011011011011011000000000 |); M.read (| p11011011 |) ]
            |) in
          let~ p1100110110110110110110110110000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.Ref, p110011011011011011011011011 |);
                Value.Integer IntegerKind.Usize 4
              ]
            |) in
          M.alloc (|
            FA,
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [ M.read (| p1100110110110110110110110110000 |); M.read (| p111 |) ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_exp_1725656503 :
    M.IsFunction.C "p3_field::exponentiation::exp_1725656503" exp_1725656503.
  Admitted.
  Global Typeclasses Opaque exp_1725656503.
  
  (*
  pub fn exp_10540996611094048183<FA: FieldAlgebra>(val: FA) -> FA {
      // Note that 7*10540996611094048183 = 4*(2^64 - 2**32) + 1 = 1 mod (p - 1).
      // Thus as a^{p - 1} = 1 for all a \in F_p, (a^{10540996611094048183})^7 = a.
      // Also: 10540996611094048183 = 1001001001001001001001001001000110110110110110110110110110110111_2.
      // This uses 63 Squares + 8 Multiplications => 71 Operations total.
      // Suspect it's possible to improve this a little with enough effort.
      let p1 = val;
      let p10 = p1.square();
      let p11 = p10.clone() * p1.clone();
      let p100 = p10.square();
      let p111 = p100.clone() * p11.clone();
      let p100000000000000000000000000000000 = p100.exp_power_of_2(30);
      let p100000000000000000000000000000011 = p100000000000000000000000000000000 * p11;
      let p100000000000000000000000000000011000 =
          p100000000000000000000000000000011.exp_power_of_2(3);
      let p100100000000000000000000000000011011 =
          p100000000000000000000000000000011000 * p100000000000000000000000000000011;
      let p100100000000000000000000000000011011000000 =
          p100100000000000000000000000000011011.exp_power_of_2(6);
      let p100100100100000000000000000000011011011011 =
          p100100000000000000000000000000011011000000 * p100100000000000000000000000000011011.clone();
      let p100100100100000000000000000000011011011011000000000000 =
          p100100100100000000000000000000011011011011.exp_power_of_2(12);
      let p100100100100100100100100000000011011011011011011011011 =
          p100100100100000000000000000000011011011011000000000000
              * p100100100100000000000000000000011011011011;
      let p100100100100100100100100000000011011011011011011011011000000 =
          p100100100100100100100100000000011011011011011011011011.exp_power_of_2(6);
      let p100100100100100100100100100100011011011011011011011011011011 =
          p100100100100100100100100000000011011011011011011011011000000
              * p100100000000000000000000000000011011;
      let p1001001001001001001001001001000110110110110110110110110110110000 =
          p100100100100100100100100100100011011011011011011011011011011.exp_power_of_2(4);
  
      p1001001001001001001001001001000110110110110110110110110110110000 * p111
  }
  *)
  Definition exp_10540996611094048183 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ val ] =>
      ltac:(M.monadic
        (let val := M.alloc (| FA, val |) in
        M.read (|
          let~ p1 : FA := M.read (| val |) in
          let~ p10 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "square",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p1 |) ]
            |) in
          let~ p11 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p10 |) ]
                |);
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p1 |) ]
                |)
              ]
            |) in
          let~ p100 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "square",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p10 |) ]
            |) in
          let~ p111 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p100 |) ]
                |);
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p11 |) ]
                |)
              ]
            |) in
          let~ p100000000000000000000000000000000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, p100 |); Value.Integer IntegerKind.Usize 30 ]
            |) in
          let~ p100000000000000000000000000000011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [ M.read (| p100000000000000000000000000000000 |); M.read (| p11 |) ]
            |) in
          let~ p100000000000000000000000000000011000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.Ref, p100000000000000000000000000000011 |);
                Value.Integer IntegerKind.Usize 3
              ]
            |) in
          let~ p100100000000000000000000000000011011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.read (| p100000000000000000000000000000011000 |);
                M.read (| p100000000000000000000000000000011 |)
              ]
            |) in
          let~ p100100000000000000000000000000011011000000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.Ref, p100100000000000000000000000000011011 |);
                Value.Integer IntegerKind.Usize 6
              ]
            |) in
          let~ p100100100100000000000000000000011011011011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.read (| p100100000000000000000000000000011011000000 |);
                M.call_closure (|
                  FA,
                  M.get_trait_method (| "core::clone::Clone", FA, [], [], "clone", [], [] |),
                  [ M.borrow (| Pointer.Kind.Ref, p100100000000000000000000000000011011 |) ]
                |)
              ]
            |) in
          let~ p100100100100000000000000000000011011011011000000000000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.Ref, p100100100100000000000000000000011011011011 |);
                Value.Integer IntegerKind.Usize 12
              ]
            |) in
          let~ p100100100100100100100100000000011011011011011011011011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.read (| p100100100100000000000000000000011011011011000000000000 |);
                M.read (| p100100100100000000000000000000011011011011 |)
              ]
            |) in
          let~ p100100100100100100100100000000011011011011011011011011000000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  p100100100100100100100100000000011011011011011011011011
                |);
                Value.Integer IntegerKind.Usize 6
              ]
            |) in
          let~ p100100100100100100100100100100011011011011011011011011011011 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.read (| p100100100100100100100100000000011011011011011011011011000000 |);
                M.read (| p100100000000000000000000000000011011 |)
              ]
            |) in
          let~ p1001001001001001001001001001000110110110110110110110110110110000 : FA :=
            M.call_closure (|
              FA,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                FA,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  p100100100100100100100100100100011011011011011011011011011011
                |);
                Value.Integer IntegerKind.Usize 4
              ]
            |) in
          M.alloc (|
            FA,
            M.call_closure (|
              FA,
              M.get_trait_method (| "core::ops::arith::Mul", FA, [], [ FA ], "mul", [], [] |),
              [
                M.read (| p1001001001001001001001001001000110110110110110110110110110110000 |);
                M.read (| p111 |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_exp_10540996611094048183 :
    M.IsFunction.C "p3_field::exponentiation::exp_10540996611094048183" exp_10540996611094048183.
  Admitted.
  Global Typeclasses Opaque exp_10540996611094048183.
End exponentiation.
