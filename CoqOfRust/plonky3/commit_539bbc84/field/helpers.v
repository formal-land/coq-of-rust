(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module helpers.
  (*
  pub fn two_adic_subgroup_zerofier<F: TwoAdicField>(log_n: usize, x: F) -> F {
      x.exp_power_of_2(log_n) - F::ONE
  }
  *)
  Definition two_adic_subgroup_zerofier (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ log_n; x ] =>
      ltac:(M.monadic
        (let log_n := M.alloc (| Ty.path "usize", log_n |) in
        let x := M.alloc (| F, x |) in
        M.call_closure (|
          F,
          M.get_trait_method (| "core::ops::arith::Sub", F, [], [ F ], "sub", [], [] |),
          [
            M.call_closure (|
              F,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                F,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, x |); M.read (| log_n |) ]
            |);
            M.read (| get_constant (| "p3_field::field::FieldAlgebra::ONE", F |) |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_two_adic_subgroup_zerofier :
    M.IsFunction.C "p3_field::helpers::two_adic_subgroup_zerofier" two_adic_subgroup_zerofier.
  Admitted.
  Global Typeclasses Opaque two_adic_subgroup_zerofier.
  
  (*
  pub fn two_adic_coset_zerofier<F: TwoAdicField>(log_n: usize, shift: F, x: F) -> F {
      x.exp_power_of_2(log_n) - shift.exp_power_of_2(log_n)
  }
  *)
  Definition two_adic_coset_zerofier (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ log_n; shift; x ] =>
      ltac:(M.monadic
        (let log_n := M.alloc (| Ty.path "usize", log_n |) in
        let shift := M.alloc (| F, shift |) in
        let x := M.alloc (| F, x |) in
        M.call_closure (|
          F,
          M.get_trait_method (| "core::ops::arith::Sub", F, [], [ F ], "sub", [], [] |),
          [
            M.call_closure (|
              F,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                F,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, x |); M.read (| log_n |) ]
            |);
            M.call_closure (|
              F,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                F,
                [],
                [],
                "exp_power_of_2",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, shift |); M.read (| log_n |) ]
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_two_adic_coset_zerofier :
    M.IsFunction.C "p3_field::helpers::two_adic_coset_zerofier" two_adic_coset_zerofier.
  Admitted.
  Global Typeclasses Opaque two_adic_coset_zerofier.
  
  (*
  pub fn cyclic_subgroup_known_order<F: Field>(
      generator: F,
      order: usize,
  ) -> impl Iterator<Item = F> + Clone {
      generator.powers().take(order)
  }
  *)
  Definition cyclic_subgroup_known_order
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F ], [ generator; order ] =>
      ltac:(M.monadic
        (let generator := M.alloc (| F, generator |) in
        let order := M.alloc (| Ty.path "usize", order |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "core::iter::adapters::take::Take")
            []
            [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ] ],
          M.get_trait_method (|
            "core::iter::traits::iterator::Iterator",
            Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ],
            [],
            [],
            "take",
            [],
            []
          |),
          [
            M.call_closure (|
              Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ],
              M.get_trait_method (| "p3_field::field::FieldAlgebra", F, [], [], "powers", [], [] |),
              [ M.borrow (| Pointer.Kind.Ref, generator |) ]
            |);
            M.read (| order |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_cyclic_subgroup_known_order :
    M.IsFunction.C "p3_field::helpers::cyclic_subgroup_known_order" cyclic_subgroup_known_order.
  Admitted.
  Global Typeclasses Opaque cyclic_subgroup_known_order.
  
  (*
  pub fn cyclic_subgroup_coset_known_order<F: Field>(
      generator: F,
      shift: F,
      order: usize,
  ) -> impl Iterator<Item = F> + Clone {
      generator.shifted_powers(shift).take(order)
  }
  *)
  Definition cyclic_subgroup_coset_known_order
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F ], [ generator; shift; order ] =>
      ltac:(M.monadic
        (let generator := M.alloc (| F, generator |) in
        let shift := M.alloc (| F, shift |) in
        let order := M.alloc (| Ty.path "usize", order |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "core::iter::adapters::take::Take")
            []
            [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ] ],
          M.get_trait_method (|
            "core::iter::traits::iterator::Iterator",
            Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ],
            [],
            [],
            "take",
            [],
            []
          |),
          [
            M.call_closure (|
              Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ],
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                F,
                [],
                [],
                "shifted_powers",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, generator |); M.read (| shift |) ]
            |);
            M.read (| order |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_cyclic_subgroup_coset_known_order :
    M.IsFunction.C
      "p3_field::helpers::cyclic_subgroup_coset_known_order"
      cyclic_subgroup_coset_known_order.
  Admitted.
  Global Typeclasses Opaque cyclic_subgroup_coset_known_order.
  
  (*
  pub fn add_vecs<F: Field>(v: Vec<F>, w: Vec<F>) -> Vec<F> {
      assert_eq!(v.len(), w.len());
      v.into_iter().zip(w).map(|(x, y)| x + y).collect()
  }
  *)
  Definition add_vecs (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ v; w ] =>
      ltac:(M.monadic
        (let v :=
          M.alloc (|
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
            v
          |) in
        let w :=
          M.alloc (|
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
            w
          |) in
        M.read (|
          let~ _ : Ty.tuple [] :=
            M.match_operator (|
              Ty.tuple [],
              M.alloc (|
                Ty.tuple
                  [
                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                  ],
                Value.Tuple
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.path "usize",
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            "len",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, v |) ]
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.path "usize",
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            "len",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, w |) ]
                        |)
                      |)
                    |)
                  ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let left_val :=
                      M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                    let right_val :=
                      M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [
                                        M.read (| M.deref (| M.read (| left_val |) |) |);
                                        M.read (| M.deref (| M.read (| right_val |) |) |)
                                      ]
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                  Value.StructTuple "core::panicking::AssertKind::Eq" [] [] [] in
                                M.alloc (|
                                  Ty.path "never",
                                  M.call_closure (|
                                    Ty.path "never",
                                    M.get_function (|
                                      "core::panicking::assert_failed",
                                      [],
                                      [ Ty.path "usize"; Ty.path "usize" ]
                                    |),
                                    [
                                      M.read (| kind |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| left_val |) |)
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| right_val |) |)
                                          |)
                                        |)
                                      |);
                                      Value.StructTuple
                                        "core::option::Option::None"
                                        []
                                        [ Ty.path "core::fmt::Arguments" ]
                                        []
                                    ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |)))
              ]
            |) in
          M.alloc (|
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
            M.call_closure (|
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::zip::Zip")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ];
                    Ty.function [ Ty.tuple [ F; F ] ] F
                  ],
                [],
                [],
                "collect",
                [],
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ];
                      Ty.function [ Ty.tuple [ F; F ] ] F
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::zip::Zip")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [],
                    "map",
                    [],
                    [ F; Ty.function [ Ty.tuple [ F; F ] ] F ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::zip::Zip")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ],
                        [],
                        [],
                        "zip",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| v |) ]
                        |);
                        M.read (| w |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                F,
                                M.alloc (| Ty.tuple [ F; F ], α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let x := M.copy (| F, γ0_0 |) in
                                      let y := M.copy (| F, γ0_1 |) in
                                      M.call_closure (|
                                        F,
                                        M.get_trait_method (|
                                          "core::ops::arith::Add",
                                          F,
                                          [],
                                          [ F ],
                                          "add",
                                          [],
                                          []
                                        |),
                                        [ M.read (| x |); M.read (| y |) ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_add_vecs :
    M.IsFunction.C "p3_field::helpers::add_vecs" add_vecs.
  Admitted.
  Global Typeclasses Opaque add_vecs.
  
  (*
  pub fn sum_vecs<F: Field, I: Iterator<Item = Vec<F>>>(iter: I) -> Vec<F> {
      iter.reduce(|v, w| add_vecs(v, w))
          .expect("sum_vecs: empty iterator")
  }
  *)
  Definition sum_vecs (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; _ as I ], [ iter ] =>
      ltac:(M.monadic
        (let iter := M.alloc (| I, iter |) in
        M.call_closure (|
          Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
          M.get_associated_function (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ],
            "expect",
            [],
            []
          |),
          [
            M.call_closure (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                I,
                [],
                [],
                "reduce",
                [],
                [
                  Ty.function
                    [
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ]
                    (Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ])
                ]
              |),
              [
                M.read (| iter |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0; α1 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ],
                              α0
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let v :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ],
                                      γ
                                    |) in
                                  M.match_operator (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ],
                                      α1
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let w :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ],
                                              γ
                                            |) in
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            M.get_function (|
                                              "p3_field::helpers::add_vecs",
                                              [],
                                              [ F ]
                                            |),
                                            [ M.read (| v |); M.read (| w |) ]
                                          |)))
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "sum_vecs: empty iterator" |) |) |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_sum_vecs :
    M.IsFunction.C "p3_field::helpers::sum_vecs" sum_vecs.
  Admitted.
  Global Typeclasses Opaque sum_vecs.
  
  (*
  pub fn scale_vec<F: Field>(s: F, vec: Vec<F>) -> Vec<F> {
      vec.into_iter().map(|x| s * x).collect()
  }
  *)
  Definition scale_vec (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ s; vec ] =>
      ltac:(M.monadic
        (let s := M.alloc (| F, s |) in
        let vec :=
          M.alloc (|
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
            vec
          |) in
        M.call_closure (|
          Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
          M.get_trait_method (|
            "core::iter::traits::iterator::Iterator",
            Ty.apply
              (Ty.path "core::iter::adapters::map::Map")
              []
              [
                Ty.apply
                  (Ty.path "alloc::vec::into_iter::IntoIter")
                  []
                  [ F; Ty.path "alloc::alloc::Global" ];
                Ty.function [ F ] F
              ],
            [],
            [],
            "collect",
            [],
            [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ]
          |),
          [
            M.call_closure (|
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    []
                    [ F; Ty.path "alloc::alloc::Global" ];
                  Ty.function [ F ] F
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "alloc::vec::into_iter::IntoIter")
                  []
                  [ F; Ty.path "alloc::alloc::Global" ],
                [],
                [],
                "map",
                [],
                [ F; Ty.function [ F ] F ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    []
                    [ F; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [ M.read (| vec |) ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            F,
                            M.alloc (| F, α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let x := M.copy (| F, γ |) in
                                  M.call_closure (|
                                    F,
                                    M.get_trait_method (|
                                      "core::ops::arith::Mul",
                                      F,
                                      [],
                                      [ F ],
                                      "mul",
                                      [],
                                      []
                                    |),
                                    [ M.read (| s |); M.read (| x |) ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_scale_vec :
    M.IsFunction.C "p3_field::helpers::scale_vec" scale_vec.
  Admitted.
  Global Typeclasses Opaque scale_vec.
  
  (*
  pub fn scale_slice_in_place<F: Field>(s: F, slice: &mut [F]) {
      let (packed, sfx) = F::Packing::pack_slice_with_suffix_mut(slice);
      let packed_s: F::Packing = s.into();
      packed.par_iter_mut().for_each(|x| *x *= packed_s);
      sfx.iter_mut().for_each(|x| *x *= s);
  }
  *)
  Definition scale_slice_in_place (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ s; slice ] =>
      ltac:(M.monadic
        (let s := M.alloc (| F, s |) in
        let slice :=
          M.alloc (|
            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
            slice
          |) in
        M.match_operator (|
          Ty.tuple [],
          M.alloc (|
            Ty.tuple
              [
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing" ]
                  ];
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]
              ],
            M.call_closure (|
              Ty.tuple
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing" ]
                    ];
                  Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]
                ],
              M.get_trait_method (|
                "p3_field::packed::PackedValue",
                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing",
                [],
                [],
                "pack_slice_with_suffix_mut",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| slice |) |) |) ]
            |)
          |),
          [
            fun γ =>
              ltac:(M.monadic
                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                let packed :=
                  M.copy (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing" ]
                      ],
                    γ0_0
                  |) in
                let sfx :=
                  M.copy (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                    γ0_1
                  |) in
                M.read (|
                  let~ packed_s :
                      Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing" :=
                    M.call_closure (|
                      Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing",
                      M.get_trait_method (|
                        "core::convert::Into",
                        F,
                        [],
                        [ Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing" ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| s |) ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::IterMut")
                          []
                          [ Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing" ],
                        [],
                        [],
                        "for_each",
                        [],
                        [
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing"
                                ]
                            ]
                            (Ty.tuple [])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::slice::iter::IterMut")
                            []
                            [ Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing" ],
                          M.get_trait_method (|
                            "p3_maybe_rayon::serial::IntoParallelRefMutIterator",
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing" ],
                            [],
                            [],
                            "par_iter_mut",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| packed |) |) |) ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_field::field::Field"
                                            []
                                            []
                                            F
                                            "Packing"
                                        ],
                                      α0
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let x :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_field::field::Field"
                                                    []
                                                    []
                                                    F
                                                    "Packing"
                                                ],
                                              γ
                                            |) in
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_trait_method (|
                                              "core::ops::arith::MulAssign",
                                              Ty.associated_in_trait
                                                "p3_field::field::Field"
                                                []
                                                []
                                                F
                                                "Packing",
                                              [],
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::field::Field"
                                                  []
                                                  []
                                                  F
                                                  "Packing"
                                              ],
                                              "mul_assign",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| x |) |)
                                              |);
                                              M.read (| packed_s |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ F ],
                        [],
                        [],
                        "for_each",
                        [],
                        [ Ty.function [ Ty.apply (Ty.path "&mut") [] [ F ] ] (Ty.tuple []) ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ F ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ F ],
                            "iter_mut",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| sfx |) |) |) ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Ty.apply (Ty.path "&mut") [] [ F ], α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let x :=
                                            M.copy (| Ty.apply (Ty.path "&mut") [] [ F ], γ |) in
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_trait_method (|
                                              "core::ops::arith::MulAssign",
                                              F,
                                              [],
                                              [ F ],
                                              "mul_assign",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| x |) |)
                                              |);
                                              M.read (| s |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |) in
                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                |)))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_scale_slice_in_place :
    M.IsFunction.C "p3_field::helpers::scale_slice_in_place" scale_slice_in_place.
  Admitted.
  Global Typeclasses Opaque scale_slice_in_place.
  
  (*
  pub fn add_scaled_slice_in_place<F, Y>(x: &mut [F], y: Y, s: F)
  where
      F: Field,
      Y: Iterator<Item = F>,
  {
      // TODO: Use PackedField
      x.iter_mut().zip(y).for_each(|(x_i, y_i)| *x_i += y_i * s);
  }
  *)
  Definition add_scaled_slice_in_place (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; Y ], [ x; y; s ] =>
      ltac:(M.monadic
        (let x :=
          M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ], x |) in
        let y := M.alloc (| Y, y |) in
        let s := M.alloc (| F, s |) in
        M.read (|
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::zip::Zip")
                  []
                  [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ F ]; Y ],
                [],
                [],
                "for_each",
                [],
                [ Ty.function [ Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ F ]; F ] ] (Ty.tuple []) ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    []
                    [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ F ]; Y ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ F ],
                    [],
                    [],
                    "zip",
                    [],
                    [ Y ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ F ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ F ],
                        "iter_mut",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |) ]
                    |);
                    M.read (| y |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [ Ty.apply (Ty.path "&mut") [] [ F ]; F ], α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let x_i :=
                                    M.copy (| Ty.apply (Ty.path "&mut") [] [ F ], γ0_0 |) in
                                  let y_i := M.copy (| F, γ0_1 |) in
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_trait_method (|
                                      "core::ops::arith::AddAssign",
                                      F,
                                      [],
                                      [ F ],
                                      "add_assign",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| x_i |) |)
                                      |);
                                      M.call_closure (|
                                        F,
                                        M.get_trait_method (|
                                          "core::ops::arith::Mul",
                                          F,
                                          [],
                                          [ F ],
                                          "mul",
                                          [],
                                          []
                                        |),
                                        [ M.read (| y_i |); M.read (| s |) ]
                                      |)
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |) in
          M.alloc (| Ty.tuple [], Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_add_scaled_slice_in_place :
    M.IsFunction.C "p3_field::helpers::add_scaled_slice_in_place" add_scaled_slice_in_place.
  Admitted.
  Global Typeclasses Opaque add_scaled_slice_in_place.
  
  (* Error Union *)
  
  Module Impl_p3_field_helpers_HackyWorkAround_D_T.
    Definition Self (D : Value.t) (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_field::helpers::HackyWorkAround") [ D ] [ T ].
    
    (*
        const fn transpose(arr: [MaybeUninit<T>; D]) -> MaybeUninit<[T; D]> {
            // This is safe as [MaybeUninit<T>; D]> and MaybeUninit<[T; D]> are
            // the same type regardless of T. Both are an array or size equal to [T; D]
            // with some data potentially not initialized.
            let transpose = Self {
                elements: ManuallyDrop::new(arr),
            };
            unsafe { ManuallyDrop::into_inner(transpose.complete) }
        }
    *)
    Definition transpose
        (D : Value.t)
        (T : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self D T in
      match ε, τ, α with
      | [], [], [ arr ] =>
        ltac:(M.monadic
          (let arr :=
            M.alloc (|
              Ty.apply
                (Ty.path "array")
                [ D ]
                [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ],
              arr
            |) in
          M.read (|
            let~ transpose : Ty.apply (Ty.path "p3_field::helpers::HackyWorkAround") [ D ] [ T ] :=
              Value.mkStructRecord
                "p3_field::helpers::HackyWorkAround"
                [ D ]
                [ T ]
                [
                  ("elements",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::mem::manually_drop::ManuallyDrop")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ D ]
                            [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::mem::manually_drop::ManuallyDrop")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ D ]
                              [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ]
                          ],
                        "new",
                        [],
                        []
                      |),
                      [ M.read (| arr |) ]
                    |))
                ] in
            M.alloc (|
              Ty.apply
                (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                []
                [ Ty.apply (Ty.path "array") [ D ] [ T ] ],
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                  []
                  [ Ty.apply (Ty.path "array") [ D ] [ T ] ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::mem::manually_drop::ManuallyDrop")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                        []
                        [ Ty.apply (Ty.path "array") [ D ] [ T ] ]
                    ],
                  "into_inner",
                  [],
                  []
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      transpose,
                      "p3_field::helpers::HackyWorkAround",
                      "complete"
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_transpose :
      forall (D : Value.t) (T : Ty.t),
      M.IsAssociatedFunction.C (Self D T) "transpose" (transpose D T).
    Admitted.
    Global Typeclasses Opaque transpose.
  End Impl_p3_field_helpers_HackyWorkAround_D_T.
  
  (*
  pub const fn field_to_array<FA: FieldAlgebra, const D: usize>(x: FA) -> [FA; D] {
      let mut arr: [MaybeUninit<FA>; D] = unsafe { MaybeUninit::uninit().assume_init() };
  
      arr[0] = MaybeUninit::new(x);
      let mut acc = 1;
      loop {
          if acc == D {
              break;
          }
          arr[acc] = MaybeUninit::new(FA::ZERO);
          acc += 1;
      }
      // If the code has reached this point every element of arr is correctly initialized.
      // Hence we are safe to reinterpret the array as [FA; D].
  
      unsafe { HackyWorkAround::transpose(arr).assume_init() }
  }
  *)
  Definition field_to_array (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ D ], [ FA ], [ x ] =>
      ltac:(M.monadic
        (let x := M.alloc (| FA, x |) in
        M.read (|
          let~ arr :
              Ty.apply
                (Ty.path "array")
                [ D ]
                [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ FA ] ] :=
            M.call_closure (|
              Ty.apply
                (Ty.path "array")
                [ D ]
                [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ FA ] ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ D ]
                      [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ FA ] ]
                  ],
                "assume_init",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ D ]
                        [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ FA ] ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ D ]
                          [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ FA ] ]
                      ],
                    "uninit",
                    [],
                    []
                  |),
                  []
                |)
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              M.SubPointer.get_array_field (| arr, Value.Integer IntegerKind.Usize 0 |),
              M.call_closure (|
                Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ FA ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ FA ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| x |) ]
              |)
            |) in
          let~ acc : Ty.path "usize" := Value.Integer IntegerKind.Usize 1 in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.loop (|
                Ty.tuple [],
                ltac:(M.monadic
                  (let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.eq,
                                    [ M.read (| acc |); D ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (| M.read (| M.break (||) |) |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.write (|
                      M.SubPointer.get_array_field (| arr, M.read (| acc |) |),
                      M.call_closure (|
                        Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ FA ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ FA ],
                          "new",
                          [],
                          []
                        |),
                        [ M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", FA |) |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    let β := acc in
                    M.write (|
                      β,
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.add,
                        [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                      |)
                    |) in
                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
              |)
            |) in
          M.alloc (|
            Ty.apply (Ty.path "array") [ D ] [ FA ],
            M.call_closure (|
              Ty.apply (Ty.path "array") [ D ] [ FA ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                  []
                  [ Ty.apply (Ty.path "array") [ D ] [ FA ] ],
                "assume_init",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                    []
                    [ Ty.apply (Ty.path "array") [ D ] [ FA ] ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "p3_field::helpers::HackyWorkAround") [ D ] [ FA ],
                    "transpose",
                    [],
                    []
                  |),
                  [ M.read (| arr |) ]
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_field_to_array :
    M.IsFunction.C "p3_field::helpers::field_to_array" field_to_array.
  Admitted.
  Global Typeclasses Opaque field_to_array.
  
  (*
  pub fn naive_poly_mul<FA: FieldAlgebra>(a: &[FA], b: &[FA]) -> Vec<FA> {
      // Grade school algorithm
      let mut product = vec![FA::ZERO; a.len() + b.len() - 1];
      for (i, c1) in a.iter().enumerate() {
          for (j, c2) in b.iter().enumerate() {
              product[i + j] += c1.clone() * c2.clone();
          }
      }
      product
  }
  *)
  Definition naive_poly_mul (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ a; b ] =>
      ltac:(M.monadic
        (let a :=
          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ FA ] ], a |) in
        let b :=
          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ FA ] ], b |) in
        M.read (|
          let~ product :
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ FA; Ty.path "alloc::alloc::Global" ] :=
            M.call_closure (|
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ FA; Ty.path "alloc::alloc::Global" ],
              M.get_function (| "alloc::vec::from_elem", [], [ FA ] |),
              [
                M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", FA |) |);
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.sub,
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.add,
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ FA ],
                            "len",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| a |) |) |) ]
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ FA ],
                            "len",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| b |) |) |) ]
                        |)
                      ]
                    |);
                    Value.Integer IntegerKind.Usize 1
                  ]
                |)
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ],
                              [],
                              [],
                              "enumerate",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ FA ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| a |) |) |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                              γ
                            |) in
                          M.read (|
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ FA ] ]
                                        ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.tuple
                                              [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ FA ] ]
                                          ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                            []
                                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ]
                                            ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.never_to_any (| M.read (| M.break (||) |) |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                          let c1 :=
                                            M.copy (| Ty.apply (Ty.path "&") [] [ FA ], γ1_1 |) in
                                          M.read (|
                                            M.use
                                              (M.alloc (|
                                                Ty.tuple [],
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ FA ]
                                                      ],
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ FA ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::collect::IntoIterator",
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              []
                                                              [ FA ]
                                                          ],
                                                        [],
                                                        [],
                                                        "into_iter",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::enumerate::Enumerate")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                []
                                                                [ FA ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              []
                                                              [ FA ],
                                                            [],
                                                            [],
                                                            "enumerate",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                []
                                                                [ FA ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [ FA ],
                                                                "iter",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| b |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let iter :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::enumerate::Enumerate")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [ FA ]
                                                              ],
                                                            γ
                                                          |) in
                                                        M.read (|
                                                          M.loop (|
                                                            Ty.tuple [],
                                                            ltac:(M.monadic
                                                              (let~ _ : Ty.tuple [] :=
                                                                M.match_operator (|
                                                                  Ty.tuple [],
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [ FA ]
                                                                          ]
                                                                      ],
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path "usize";
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [ FA ]
                                                                            ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              []
                                                                              [ FA ]
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "next",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              iter
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let _ :=
                                                                          M.is_struct_tuple (|
                                                                            γ,
                                                                            "core::option::Option::None"
                                                                          |) in
                                                                        M.never_to_any (|
                                                                          M.read (| M.break (||) |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let γ1_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_0,
                                                                            0
                                                                          |) in
                                                                        let γ1_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_0,
                                                                            1
                                                                          |) in
                                                                        let j :=
                                                                          M.copy (|
                                                                            Ty.path "usize",
                                                                            γ1_0
                                                                          |) in
                                                                        let c2 :=
                                                                          M.copy (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [ FA ],
                                                                            γ1_1
                                                                          |) in
                                                                        M.read (|
                                                                          let~ _ : Ty.tuple [] :=
                                                                            M.call_closure (|
                                                                              Ty.tuple [],
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::AddAssign",
                                                                                FA,
                                                                                [],
                                                                                [ FA ],
                                                                                "add_assign",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&mut")
                                                                                        []
                                                                                        [ FA ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::index::IndexMut",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            FA;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [],
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                        "index_mut",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          product
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "usize",
                                                                                          BinOp.Wrap.add,
                                                                                          [
                                                                                            M.read (|
                                                                                              i
                                                                                            |);
                                                                                            M.read (|
                                                                                              j
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.call_closure (|
                                                                                  FA,
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    FA,
                                                                                    [],
                                                                                    [ FA ],
                                                                                    "mul",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      FA,
                                                                                      M.get_trait_method (|
                                                                                        "core::clone::Clone",
                                                                                        FA,
                                                                                        [],
                                                                                        [],
                                                                                        "clone",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              c1
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      FA,
                                                                                      M.get_trait_method (|
                                                                                        "core::clone::Clone",
                                                                                        FA,
                                                                                        [],
                                                                                        [],
                                                                                        "clone",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              c2
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |) in
                                                                          M.alloc (|
                                                                            Ty.tuple [],
                                                                            Value.Tuple []
                                                                          |)
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (|
                                                                Ty.tuple [],
                                                                Value.Tuple []
                                                              |)))
                                                          |)
                                                        |)))
                                                  ]
                                                |)
                                              |))
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                            |)
                          |)))
                    ]
                  |)
                |))
            |) in
          product
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_naive_poly_mul :
    M.IsFunction.C "p3_field::helpers::naive_poly_mul" naive_poly_mul.
  Admitted.
  Global Typeclasses Opaque naive_poly_mul.
  
  (*
  pub fn binomial_expand<FA: FieldAlgebra>(roots: &[FA]) -> Vec<FA> {
      let mut coeffs = vec![FA::ZERO; roots.len() + 1];
      coeffs[0] = FA::ONE;
      for (i, x) in roots.iter().enumerate() {
          for j in (1..i + 2).rev() {
              coeffs[j] = coeffs[j - 1].clone() - x.clone() * coeffs[j].clone();
          }
          coeffs[0] *= -x.clone();
      }
      coeffs
  }
  *)
  Definition binomial_expand (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ roots ] =>
      ltac:(M.monadic
        (let roots :=
          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ FA ] ], roots |) in
        M.read (|
          let~ coeffs :
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ FA; Ty.path "alloc::alloc::Global" ] :=
            M.call_closure (|
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ FA; Ty.path "alloc::alloc::Global" ],
              M.get_function (| "alloc::vec::from_elem", [], [ FA ] |),
              [
                M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", FA |) |);
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.add,
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ FA ],
                        "len",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| roots |) |) |) ]
                    |);
                    Value.Integer IntegerKind.Usize 1
                  ]
                |)
              ]
            |) in
          let~ _ : Ty.tuple [] :=
            M.write (|
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&mut") [] [ FA ],
                  M.get_trait_method (|
                    "core::ops::index::IndexMut",
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ FA; Ty.path "alloc::alloc::Global" ],
                    [],
                    [ Ty.path "usize" ],
                    "index_mut",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, coeffs |); Value.Integer IntegerKind.Usize 0 ]
                |)
              |),
              M.read (| get_constant (| "p3_field::field::FieldAlgebra::ONE", FA |) |)
            |) in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ],
                              [],
                              [],
                              "enumerate",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ FA ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| roots |) |) |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                              γ
                            |) in
                          M.read (|
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ FA ] ]
                                        ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.tuple
                                              [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ FA ] ]
                                          ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                            []
                                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ]
                                            ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.never_to_any (| M.read (| M.break (||) |) |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                          let x :=
                                            M.copy (| Ty.apply (Ty.path "&") [] [ FA ], γ1_1 |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.read (|
                                                M.use
                                                  (M.alloc (|
                                                    Ty.tuple [],
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::rev::Rev")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::ops::range::Range")
                                                              []
                                                              [ Ty.path "usize" ]
                                                          ],
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::rev::Rev")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::ops::range::Range")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::collect::IntoIterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::rev::Rev")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::Range")
                                                                  []
                                                                  [ Ty.path "usize" ]
                                                              ],
                                                            [],
                                                            [],
                                                            "into_iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::rev::Rev")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::Range")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                [],
                                                                [],
                                                                "rev",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                Value.mkStructRecord
                                                                  "core::ops::range::Range"
                                                                  []
                                                                  [ Ty.path "usize" ]
                                                                  [
                                                                    ("start",
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1);
                                                                    ("end_",
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.add,
                                                                        [
                                                                          M.read (| i |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                      |))
                                                                  ]
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let iter :=
                                                              M.copy (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::rev::Rev")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::ops::range::Range")
                                                                      []
                                                                      [ Ty.path "usize" ]
                                                                  ],
                                                                γ
                                                              |) in
                                                            M.read (|
                                                              M.loop (|
                                                                Ty.tuple [],
                                                                ltac:(M.monadic
                                                                  (let~ _ : Ty.tuple [] :=
                                                                    M.match_operator (|
                                                                      Ty.tuple [],
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [ Ty.path "usize" ],
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::iterator::Iterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::rev::Rev")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::ops::range::Range")
                                                                                  []
                                                                                  [ Ty.path "usize"
                                                                                  ]
                                                                              ],
                                                                            [],
                                                                            [],
                                                                            "next",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  iter
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let _ :=
                                                                              M.is_struct_tuple (|
                                                                                γ,
                                                                                "core::option::Option::None"
                                                                              |) in
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.break (||)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::option::Option::Some",
                                                                                0
                                                                              |) in
                                                                            let j :=
                                                                              M.copy (|
                                                                                Ty.path "usize",
                                                                                γ0_0
                                                                              |) in
                                                                            M.read (|
                                                                              let~ _ :
                                                                                  Ty.tuple [] :=
                                                                                M.write (|
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&mut")
                                                                                        []
                                                                                        [ FA ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::index::IndexMut",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          []
                                                                                          [
                                                                                            FA;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [],
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                        "index_mut",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          coeffs
                                                                                        |);
                                                                                        M.read (|
                                                                                          j
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  M.call_closure (|
                                                                                    FA,
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::arith::Sub",
                                                                                      FA,
                                                                                      [],
                                                                                      [ FA ],
                                                                                      "sub",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        FA,
                                                                                        M.get_trait_method (|
                                                                                          "core::clone::Clone",
                                                                                          FA,
                                                                                          [],
                                                                                          [],
                                                                                          "clone",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.deref (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    FA
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::index::Index",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      FA;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                  "index",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    coeffs
                                                                                                  |);
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "usize",
                                                                                                    BinOp.Wrap.sub,
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        j
                                                                                                      |);
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        1
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        FA,
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::arith::Mul",
                                                                                          FA,
                                                                                          [],
                                                                                          [ FA ],
                                                                                          "mul",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            FA,
                                                                                            M.get_trait_method (|
                                                                                              "core::clone::Clone",
                                                                                              FA,
                                                                                              [],
                                                                                              [],
                                                                                              "clone",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    x
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |);
                                                                                          M.call_closure (|
                                                                                            FA,
                                                                                            M.get_trait_method (|
                                                                                              "core::clone::Clone",
                                                                                              FA,
                                                                                              [],
                                                                                              [],
                                                                                              "clone",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.deref (|
                                                                                                  M.call_closure (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        FA
                                                                                                      ],
                                                                                                    M.get_trait_method (|
                                                                                                      "core::ops::index::Index",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "alloc::vec::Vec")
                                                                                                        []
                                                                                                        [
                                                                                                          FA;
                                                                                                          Ty.path
                                                                                                            "alloc::alloc::Global"
                                                                                                        ],
                                                                                                      [],
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "usize"
                                                                                                      ],
                                                                                                      "index",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        coeffs
                                                                                                      |);
                                                                                                      M.read (|
                                                                                                        j
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Ty.tuple [],
                                                                                Value.Tuple []
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |) in
                                                                  M.alloc (|
                                                                    Ty.tuple [],
                                                                    Value.Tuple []
                                                                  |)))
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  |))
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_trait_method (|
                                                  "core::ops::arith::MulAssign",
                                                  FA,
                                                  [],
                                                  [ FA ],
                                                  "mul_assign",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply (Ty.path "&mut") [] [ FA ],
                                                        M.get_trait_method (|
                                                          "core::ops::index::IndexMut",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ FA; Ty.path "alloc::alloc::Global" ],
                                                          [],
                                                          [ Ty.path "usize" ],
                                                          "index_mut",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            coeffs
                                                          |);
                                                          Value.Integer IntegerKind.Usize 0
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.call_closure (|
                                                    FA,
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Neg",
                                                      FA,
                                                      [],
                                                      [],
                                                      "neg",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        FA,
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          FA,
                                                          [],
                                                          [],
                                                          "clone",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| x |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                            |)
                          |)))
                    ]
                  |)
                |))
            |) in
          coeffs
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_binomial_expand :
    M.IsFunction.C "p3_field::helpers::binomial_expand" binomial_expand.
  Admitted.
  Global Typeclasses Opaque binomial_expand.
  
  (*
  pub fn eval_poly<FA: FieldAlgebra>(poly: &[FA], x: FA) -> FA {
      let mut acc = FA::ZERO;
      for coeff in poly.iter().rev() {
          acc *= x.clone();
          acc += coeff.clone();
      }
      acc
  }
  *)
  Definition eval_poly (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ FA ], [ poly; x ] =>
      ltac:(M.monadic
        (let poly :=
          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ FA ] ], poly |) in
        let x := M.alloc (| FA, x |) in
        M.read (|
          let~ acc : FA :=
            M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", FA |) |) in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::rev::Rev")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ],
                              [],
                              [],
                              "rev",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ FA ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| poly |) |) |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ] ],
                              γ
                            |) in
                          M.read (|
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ FA ] ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.apply (Ty.path "&") [] [ FA ] ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::rev::Rev")
                                            []
                                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ FA ]
                                            ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.never_to_any (| M.read (| M.break (||) |) |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let coeff :=
                                            M.copy (| Ty.apply (Ty.path "&") [] [ FA ], γ0_0 |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_trait_method (|
                                                  "core::ops::arith::MulAssign",
                                                  FA,
                                                  [],
                                                  [ FA ],
                                                  "mul_assign",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (| Pointer.Kind.MutRef, acc |);
                                                  M.call_closure (|
                                                    FA,
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      FA,
                                                      [],
                                                      [],
                                                      "clone",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, x |) ]
                                                  |)
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_trait_method (|
                                                  "core::ops::arith::AddAssign",
                                                  FA,
                                                  [],
                                                  [ FA ],
                                                  "add_assign",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (| Pointer.Kind.MutRef, acc |);
                                                  M.call_closure (|
                                                    FA,
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      FA,
                                                      [],
                                                      [],
                                                      "clone",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| coeff |) |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                            |)
                          |)))
                    ]
                  |)
                |))
            |) in
          acc
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_eval_poly :
    M.IsFunction.C "p3_field::helpers::eval_poly" eval_poly.
  Admitted.
  Global Typeclasses Opaque eval_poly.
  
  (*
  pub fn halve_u32<const P: u32>(input: u32) -> u32 {
      let shift = (P + 1) >> 1;
      let shr = input >> 1;
      let lo_bit = input & 1;
      let shr_corr = shr + shift;
      if lo_bit == 0 {
          shr
      } else {
          shr_corr
      }
  }
  *)
  Definition halve_u32 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ P ], [], [ input ] =>
      ltac:(M.monadic
        (let input := M.alloc (| Ty.path "u32", input |) in
        M.read (|
          let~ shift : Ty.path "u32" :=
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.add,
                  [ P; Value.Integer IntegerKind.U32 1 ]
                |);
                Value.Integer IntegerKind.I32 1
              ]
            |) in
          let~ shr : Ty.path "u32" :=
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.shr,
              [ M.read (| input |); Value.Integer IntegerKind.I32 1 ]
            |) in
          let~ lo_bit : Ty.path "u32" :=
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.bit_and,
              [ M.read (| input |); Value.Integer IntegerKind.U32 1 ]
            |) in
          let~ shr_corr : Ty.path "u32" :=
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.add,
              [ M.read (| shr |); M.read (| shift |) ]
            |) in
          M.alloc (|
            Ty.path "u32",
            M.match_operator (|
              Ty.path "u32",
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          Ty.path "bool",
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [ M.read (| lo_bit |); Value.Integer IntegerKind.U32 0 ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.read (| shr |)));
                fun γ => ltac:(M.monadic (M.read (| shr_corr |)))
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_halve_u32 :
    M.IsFunction.C "p3_field::helpers::halve_u32" halve_u32.
  Admitted.
  Global Typeclasses Opaque halve_u32.
  
  (*
  pub fn halve_u64<const P: u64>(input: u64) -> u64 {
      let shift = (P + 1) >> 1;
      let shr = input >> 1;
      let lo_bit = input & 1;
      let shr_corr = shr + shift;
      if lo_bit == 0 {
          shr
      } else {
          shr_corr
      }
  }
  *)
  Definition halve_u64 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ P ], [], [ input ] =>
      ltac:(M.monadic
        (let input := M.alloc (| Ty.path "u64", input |) in
        M.read (|
          let~ shift : Ty.path "u64" :=
            M.call_closure (|
              Ty.path "u64",
              BinOp.Wrap.shr,
              [
                M.call_closure (|
                  Ty.path "u64",
                  BinOp.Wrap.add,
                  [ P; Value.Integer IntegerKind.U64 1 ]
                |);
                Value.Integer IntegerKind.I32 1
              ]
            |) in
          let~ shr : Ty.path "u64" :=
            M.call_closure (|
              Ty.path "u64",
              BinOp.Wrap.shr,
              [ M.read (| input |); Value.Integer IntegerKind.I32 1 ]
            |) in
          let~ lo_bit : Ty.path "u64" :=
            M.call_closure (|
              Ty.path "u64",
              BinOp.Wrap.bit_and,
              [ M.read (| input |); Value.Integer IntegerKind.U64 1 ]
            |) in
          let~ shr_corr : Ty.path "u64" :=
            M.call_closure (|
              Ty.path "u64",
              BinOp.Wrap.add,
              [ M.read (| shr |); M.read (| shift |) ]
            |) in
          M.alloc (|
            Ty.path "u64",
            M.match_operator (|
              Ty.path "u64",
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          Ty.path "bool",
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [ M.read (| lo_bit |); Value.Integer IntegerKind.U64 0 ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.read (| shr |)));
                fun γ => ltac:(M.monadic (M.read (| shr_corr |)))
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_halve_u64 :
    M.IsFunction.C "p3_field::helpers::halve_u64" halve_u64.
  Admitted.
  Global Typeclasses Opaque halve_u64.
  
  (*
  pub fn reduce_32<SF: PrimeField32, TF: PrimeField>(vals: &[SF]) -> TF {
      let po2 = TF::from_canonical_u64(1u64 << 32);
      let mut result = TF::ZERO;
      for val in vals.iter().rev() {
          result = result * po2 + TF::from_canonical_u32(val.as_canonical_u32());
      }
      result
  }
  *)
  Definition reduce_32 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ SF; TF ], [ vals ] =>
      ltac:(M.monadic
        (let vals :=
          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ SF ] ], vals |) in
        M.read (|
          let~ po2 : TF :=
            M.call_closure (|
              TF,
              M.get_trait_method (|
                "p3_field::field::FieldAlgebra",
                TF,
                [],
                [],
                "from_canonical_u64",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.path "u64",
                  BinOp.Wrap.shl,
                  [ Value.Integer IntegerKind.U64 1; Value.Integer IntegerKind.I32 32 ]
                |)
              ]
            |) in
          let~ result : TF :=
            M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", TF |) |) in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::rev::Rev")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ SF ] ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ SF ] ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ SF ] ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ SF ] ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ SF ],
                              [],
                              [],
                              "rev",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ SF ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ SF ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| vals |) |) |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ SF ] ],
                              γ
                            |) in
                          M.read (|
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ SF ] ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.apply (Ty.path "&") [] [ SF ] ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::rev::Rev")
                                            []
                                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ SF ]
                                            ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.never_to_any (| M.read (| M.break (||) |) |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let val :=
                                            M.copy (| Ty.apply (Ty.path "&") [] [ SF ], γ0_0 |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.write (|
                                                result,
                                                M.call_closure (|
                                                  TF,
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Add",
                                                    TF,
                                                    [],
                                                    [ TF ],
                                                    "add",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      TF,
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Mul",
                                                        TF,
                                                        [],
                                                        [ TF ],
                                                        "mul",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.read (| result |); M.read (| po2 |) ]
                                                    |);
                                                    M.call_closure (|
                                                      TF,
                                                      M.get_trait_method (|
                                                        "p3_field::field::FieldAlgebra",
                                                        TF,
                                                        [],
                                                        [],
                                                        "from_canonical_u32",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          M.get_trait_method (|
                                                            "p3_field::field::PrimeField32",
                                                            SF,
                                                            [],
                                                            [],
                                                            "as_canonical_u32",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                            |)
                          |)))
                    ]
                  |)
                |))
            |) in
          result
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_reduce_32 :
    M.IsFunction.C "p3_field::helpers::reduce_32" reduce_32.
  Admitted.
  Global Typeclasses Opaque reduce_32.
  
  (*
  pub fn split_32<SF: PrimeField, TF: PrimeField32>(val: SF, n: usize) -> Vec<TF> {
      let po2 = BigUint::from(1u128 << 64);
      let mut val = val.as_canonical_biguint();
      let mut result = Vec::new();
      for _ in 0..n {
          let mask: BigUint = po2.clone() - BigUint::from(1u128);
          let digit: BigUint = val.clone() & mask;
          let digit_u64s = digit.to_u64_digits();
          if !digit_u64s.is_empty() {
              result.push(TF::from_wrapped_u64(digit_u64s[0]));
          } else {
              result.push(TF::ZERO)
          }
          val /= po2.clone();
      }
      result
  }
  *)
  Definition split_32 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ SF; TF ], [ val; n ] =>
      ltac:(M.monadic
        (let val := M.alloc (| SF, val |) in
        let n := M.alloc (| Ty.path "usize", n |) in
        M.read (|
          let~ po2 : Ty.path "num_bigint::biguint::BigUint" :=
            M.call_closure (|
              Ty.path "num_bigint::biguint::BigUint",
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "num_bigint::biguint::BigUint",
                [],
                [ Ty.path "u128" ],
                "from",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.path "u128",
                  BinOp.Wrap.shl,
                  [ Value.Integer IntegerKind.U128 1; Value.Integer IntegerKind.I32 64 ]
                |)
              ]
            |) in
          let~ val : Ty.path "num_bigint::biguint::BigUint" :=
            M.call_closure (|
              Ty.path "num_bigint::biguint::BigUint",
              M.get_trait_method (|
                "p3_field::field::PrimeField",
                SF,
                [],
                [],
                "as_canonical_biguint",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, val |) ]
            |) in
          let~ result :
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ TF; Ty.path "alloc::alloc::Global" ] :=
            M.call_closure (|
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ TF; Ty.path "alloc::alloc::Global" ],
              M.get_associated_function (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ TF; Ty.path "alloc::alloc::Global" ],
                "new",
                [],
                []
              |),
              []
            |) in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.call_closure (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          Value.mkStructRecord
                            "core::ops::range::Range"
                            []
                            [ Ty.path "usize" ]
                            [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", M.read (| n |))
                            ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter :=
                            M.copy (|
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              γ
                            |) in
                          M.read (|
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "usize" ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.never_to_any (| M.read (| M.break (||) |) |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          M.read (|
                                            let~ mask : Ty.path "num_bigint::biguint::BigUint" :=
                                              M.call_closure (|
                                                Ty.path "num_bigint::biguint::BigUint",
                                                M.get_trait_method (|
                                                  "core::ops::arith::Sub",
                                                  Ty.path "num_bigint::biguint::BigUint",
                                                  [],
                                                  [ Ty.path "num_bigint::biguint::BigUint" ],
                                                  "sub",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.path "num_bigint::biguint::BigUint",
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      [],
                                                      [],
                                                      "clone",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, po2 |) ]
                                                  |);
                                                  M.call_closure (|
                                                    Ty.path "num_bigint::biguint::BigUint",
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      [],
                                                      [ Ty.path "u128" ],
                                                      "from",
                                                      [],
                                                      []
                                                    |),
                                                    [ Value.Integer IntegerKind.U128 1 ]
                                                  |)
                                                ]
                                              |) in
                                            let~ digit : Ty.path "num_bigint::biguint::BigUint" :=
                                              M.call_closure (|
                                                Ty.path "num_bigint::biguint::BigUint",
                                                M.get_trait_method (|
                                                  "core::ops::bit::BitAnd",
                                                  Ty.path "num_bigint::biguint::BigUint",
                                                  [],
                                                  [ Ty.path "num_bigint::biguint::BigUint" ],
                                                  "bitand",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.path "num_bigint::biguint::BigUint",
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      [],
                                                      [],
                                                      "clone",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, val |) ]
                                                  |);
                                                  M.read (| mask |)
                                                ]
                                              |) in
                                            let~ digit_u64s :
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Ty.path "u64"; Ty.path "alloc::alloc::Global"
                                                  ] :=
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                                                M.get_associated_function (|
                                                  Ty.path "num_bigint::biguint::BigUint",
                                                  "to_u64_digits",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, digit |) ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.path "u64";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "is_empty",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    digit_u64s
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.read (|
                                                        let~ _ : Ty.tuple [] :=
                                                          M.call_closure (|
                                                            Ty.tuple [],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [ TF; Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "push",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                result
                                                              |);
                                                              M.call_closure (|
                                                                TF,
                                                                M.get_trait_method (|
                                                                  "p3_field::field::FieldAlgebra",
                                                                  TF,
                                                                  [],
                                                                  [],
                                                                  "from_wrapped_u64",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "u64" ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::index::Index",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Ty.path "u64";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          [ Ty.path "usize" ],
                                                                          "index",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            digit_u64s
                                                                          |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            0
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |) in
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ TF; Ty.path "alloc::alloc::Global" ],
                                                          "push",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            result
                                                          |);
                                                          M.read (|
                                                            get_constant (|
                                                              "p3_field::field::FieldAlgebra::ZERO",
                                                              TF
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_trait_method (|
                                                  "core::ops::arith::DivAssign",
                                                  Ty.path "num_bigint::biguint::BigUint",
                                                  [],
                                                  [ Ty.path "num_bigint::biguint::BigUint" ],
                                                  "div_assign",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (| Pointer.Kind.MutRef, val |);
                                                  M.call_closure (|
                                                    Ty.path "num_bigint::biguint::BigUint",
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      [],
                                                      [],
                                                      "clone",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, po2 |) ]
                                                  |)
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                            |)
                          |)))
                    ]
                  |)
                |))
            |) in
          result
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_split_32 :
    M.IsFunction.C "p3_field::helpers::split_32" split_32.
  Admitted.
  Global Typeclasses Opaque split_32.
  
  (*
  pub fn dot_product<S, LI, RI>(li: LI, ri: RI) -> S
  where
      LI: Iterator,
      RI: Iterator,
      LI::Item: Mul<RI::Item>,
      S: Sum<<LI::Item as Mul<RI::Item>>::Output>,
  {
      li.zip(ri).map(|(l, r)| l * r).sum()
  }
  *)
  Definition dot_product (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ _ as S; LI; RI ], [ li; ri ] =>
      ltac:(M.monadic
        (let li := M.alloc (| LI, li |) in
        let ri := M.alloc (| RI, ri |) in
        M.call_closure (|
          S,
          M.get_trait_method (|
            "core::iter::traits::iterator::Iterator",
            Ty.apply
              (Ty.path "core::iter::adapters::map::Map")
              []
              [
                Ty.apply (Ty.path "core::iter::adapters::zip::Zip") [] [ LI; RI ];
                Ty.function
                  [
                    Ty.tuple
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          LI
                          "Item";
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          RI
                          "Item"
                      ]
                  ]
                  (Ty.associated_in_trait
                    "core::ops::arith::Mul"
                    []
                    [
                      Ty.associated_in_trait
                        "core::iter::traits::iterator::Iterator"
                        []
                        []
                        RI
                        "Item"
                    ]
                    (Ty.associated_in_trait
                      "core::iter::traits::iterator::Iterator"
                      []
                      []
                      LI
                      "Item")
                    "Output")
              ],
            [],
            [],
            "sum",
            [],
            [ S ]
          |),
          [
            M.call_closure (|
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply (Ty.path "core::iter::adapters::zip::Zip") [] [ LI; RI ];
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            LI
                            "Item";
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            RI
                            "Item"
                        ]
                    ]
                    (Ty.associated_in_trait
                      "core::ops::arith::Mul"
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          RI
                          "Item"
                      ]
                      (Ty.associated_in_trait
                        "core::iter::traits::iterator::Iterator"
                        []
                        []
                        LI
                        "Item")
                      "Output")
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply (Ty.path "core::iter::adapters::zip::Zip") [] [ LI; RI ],
                [],
                [],
                "map",
                [],
                [
                  Ty.associated_in_trait
                    "core::ops::arith::Mul"
                    []
                    [
                      Ty.associated_in_trait
                        "core::iter::traits::iterator::Iterator"
                        []
                        []
                        RI
                        "Item"
                    ]
                    (Ty.associated_in_trait
                      "core::iter::traits::iterator::Iterator"
                      []
                      []
                      LI
                      "Item")
                    "Output";
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            LI
                            "Item";
                          Ty.associated_in_trait
                            "core::iter::traits::iterator::Iterator"
                            []
                            []
                            RI
                            "Item"
                        ]
                    ]
                    (Ty.associated_in_trait
                      "core::ops::arith::Mul"
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          RI
                          "Item"
                      ]
                      (Ty.associated_in_trait
                        "core::iter::traits::iterator::Iterator"
                        []
                        []
                        LI
                        "Item")
                      "Output")
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply (Ty.path "core::iter::adapters::zip::Zip") [] [ LI; RI ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    LI,
                    [],
                    [],
                    "zip",
                    [],
                    [ RI ]
                  |),
                  [ M.read (| li |); M.read (| ri |) ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.associated_in_trait
                              "core::ops::arith::Mul"
                              []
                              [
                                Ty.associated_in_trait
                                  "core::iter::traits::iterator::Iterator"
                                  []
                                  []
                                  RI
                                  "Item"
                              ]
                              (Ty.associated_in_trait
                                "core::iter::traits::iterator::Iterator"
                                []
                                []
                                LI
                                "Item")
                              "Output",
                            M.alloc (|
                              Ty.tuple
                                [
                                  Ty.associated_in_trait
                                    "core::iter::traits::iterator::Iterator"
                                    []
                                    []
                                    LI
                                    "Item";
                                  Ty.associated_in_trait
                                    "core::iter::traits::iterator::Iterator"
                                    []
                                    []
                                    RI
                                    "Item"
                                ],
                              α0
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let l :=
                                    M.copy (|
                                      Ty.associated_in_trait
                                        "core::iter::traits::iterator::Iterator"
                                        []
                                        []
                                        LI
                                        "Item",
                                      γ0_0
                                    |) in
                                  let r :=
                                    M.copy (|
                                      Ty.associated_in_trait
                                        "core::iter::traits::iterator::Iterator"
                                        []
                                        []
                                        RI
                                        "Item",
                                      γ0_1
                                    |) in
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "core::ops::arith::Mul"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::iterator::Iterator"
                                          []
                                          []
                                          RI
                                          "Item"
                                      ]
                                      (Ty.associated_in_trait
                                        "core::iter::traits::iterator::Iterator"
                                        []
                                        []
                                        LI
                                        "Item")
                                      "Output",
                                    M.get_trait_method (|
                                      "core::ops::arith::Mul",
                                      Ty.associated_in_trait
                                        "core::iter::traits::iterator::Iterator"
                                        []
                                        []
                                        LI
                                        "Item",
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::iterator::Iterator"
                                          []
                                          []
                                          RI
                                          "Item"
                                      ],
                                      "mul",
                                      [],
                                      []
                                    |),
                                    [ M.read (| l |); M.read (| r |) ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_dot_product :
    M.IsFunction.C "p3_field::helpers::dot_product" dot_product.
  Admitted.
  Global Typeclasses Opaque dot_product.
End helpers.
