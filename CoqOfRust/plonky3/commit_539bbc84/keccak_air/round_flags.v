(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module round_flags.
  (*
  pub(crate) fn eval_round_flags<AB: AirBuilder>(builder: &mut AB) {
      let main = builder.main();
      let (local, next) = (main.row_slice(0), main.row_slice(1));
      let local: &KeccakCols<AB::Var> = ( *local).borrow();
      let next: &KeccakCols<AB::Var> = ( *next).borrow();
  
      // Initially, the first step flag should be 1 while the others should be 0.
      builder.when_first_row().assert_one(local.step_flags[0]);
      for i in 1..NUM_ROUNDS {
          builder.when_first_row().assert_zero(local.step_flags[i]);
      }
  
      for i in 0..NUM_ROUNDS {
          let current_round_flag = local.step_flags[i];
          let next_round_flag = next.step_flags[(i + 1) % NUM_ROUNDS];
          builder
              .when_transition()
              .assert_eq(next_round_flag, current_round_flag);
      }
  }
  *)
  Definition eval_round_flags (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ AB ], [ builder ] =>
      ltac:(M.monadic
        (let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
        M.read (|
          let~ main : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M" :=
            M.call_closure (|
              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
              M.get_trait_method (| "p3_air::air::AirBuilder", AB, [], [], "main", [], [] |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
            |) in
          M.alloc (|
            Ty.tuple [],
            M.match_operator (|
              Ty.tuple [],
              M.alloc (|
                Ty.tuple
                  [
                    Ty.associated_in_trait
                      "p3_matrix::Matrix"
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                      "{{synthetic}}'2";
                    Ty.associated_in_trait
                      "p3_matrix::Matrix"
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                      "{{synthetic}}'2"
                  ],
                Value.Tuple
                  [
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_matrix::Matrix"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                        "{{synthetic}}'2",
                      M.get_trait_method (|
                        "p3_matrix::Matrix",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "row_slice",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, main |); Value.Integer IntegerKind.Usize 0 ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_matrix::Matrix"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                        "{{synthetic}}'2",
                      M.get_trait_method (|
                        "p3_matrix::Matrix",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "row_slice",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, main |); Value.Integer IntegerKind.Usize 1 ]
                    |)
                  ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let local :=
                      M.copy (|
                        Ty.associated_in_trait
                          "p3_matrix::Matrix"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                          "{{synthetic}}'2",
                        γ0_0
                      |) in
                    let next :=
                      M.copy (|
                        Ty.associated_in_trait
                          "p3_matrix::Matrix"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                          "{{synthetic}}'2",
                        γ0_1
                      |) in
                    M.read (|
                      let~ local :
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_keccak_air::columns::KeccakCols")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ] :=
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_keccak_air::columns::KeccakCols")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::borrow::Borrow",
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "p3_keccak_air::columns::KeccakCols")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ],
                                "borrow",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.associated_in_trait
                                          "p3_matrix::Matrix"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                          (Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "M")
                                          "{{synthetic}}'2",
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, local |) ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |) in
                      let~ next :
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_keccak_air::columns::KeccakCols")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ] :=
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_keccak_air::columns::KeccakCols")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::borrow::Borrow",
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "p3_keccak_air::columns::KeccakCols")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ],
                                "borrow",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.associated_in_trait
                                          "p3_matrix::Matrix"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                          (Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "M")
                                          "{{synthetic}}'2",
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, next |) ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                            [],
                            [],
                            "assert_one",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.alloc (|
                                Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                M.call_closure (|
                                  Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                  M.get_trait_method (|
                                    "p3_air::air::AirBuilder",
                                    AB,
                                    [],
                                    [],
                                    "when_first_row",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| builder |) |)
                                    |)
                                  ]
                                |)
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| local |) |),
                                  "p3_keccak_air::columns::KeccakCols",
                                  "step_flags"
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |)
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.read (|
                          M.use
                            (M.alloc (|
                              Ty.tuple [],
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "into_iter",
                                      [],
                                      []
                                    |),
                                    [
                                      Value.mkStructRecord
                                        "core::ops::range::Range"
                                        []
                                        [ Ty.path "usize" ]
                                        [
                                          ("start", Value.Integer IntegerKind.Usize 1);
                                          ("end_",
                                            M.read (|
                                              get_constant (|
                                                "p3_keccak_air::NUM_ROUNDS",
                                                Ty.path "usize"
                                              |)
                                            |))
                                        ]
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let iter :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ],
                                          γ
                                        |) in
                                      M.read (|
                                        M.loop (|
                                          Ty.tuple [],
                                          ltac:(M.monadic
                                            (let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "usize" ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::Range")
                                                        []
                                                        [ Ty.path "usize" ],
                                                      [],
                                                      [],
                                                      "next",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.borrow (| Pointer.Kind.MutRef, iter |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.is_struct_tuple (|
                                                          γ,
                                                          "core::option::Option::None"
                                                        |) in
                                                      M.never_to_any (|
                                                        M.read (| M.break (||) |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::option::Option::Some",
                                                          0
                                                        |) in
                                                      let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                                      M.read (|
                                                        let~ _ : Ty.tuple [] :=
                                                          M.call_closure (|
                                                            Ty.tuple [],
                                                            M.get_trait_method (|
                                                              "p3_air::air::AirBuilder",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_air::air::FilteredAirBuilder")
                                                                []
                                                                [ AB ],
                                                              [],
                                                              [],
                                                              "assert_zero",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Var"
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_air::air::FilteredAirBuilder")
                                                                    []
                                                                    [ AB ],
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_air::air::FilteredAirBuilder")
                                                                      []
                                                                      [ AB ],
                                                                    M.get_trait_method (|
                                                                      "p3_air::air::AirBuilder",
                                                                      AB,
                                                                      [],
                                                                      [],
                                                                      "when_first_row",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (|
                                                                          M.read (| builder |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (|
                                                                      M.read (| local |)
                                                                    |),
                                                                    "p3_keccak_air::columns::KeccakCols",
                                                                    "step_flags"
                                                                  |),
                                                                  M.read (| i |)
                                                                |)
                                                              |)
                                                            ]
                                                          |) in
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                      |)))
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                        |)
                                      |)))
                                ]
                              |)
                            |))
                        |) in
                      M.use
                        (M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              M.call_closure (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [
                                  Value.mkStructRecord
                                    "core::ops::range::Range"
                                    []
                                    [ Ty.path "usize" ]
                                    [
                                      ("start", Value.Integer IntegerKind.Usize 0);
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "p3_keccak_air::NUM_ROUNDS",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      γ
                                    |) in
                                  M.read (|
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "usize" ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "usize" ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.never_to_any (| M.read (| M.break (||) |) |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                                  M.read (|
                                                    let~ current_round_flag :
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var" :=
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| local |) |),
                                                            "p3_keccak_air::columns::KeccakCols",
                                                            "step_flags"
                                                          |),
                                                          M.read (| i |)
                                                        |)
                                                      |) in
                                                    let~ next_round_flag :
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var" :=
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| next |) |),
                                                            "p3_keccak_air::columns::KeccakCols",
                                                            "step_flags"
                                                          |),
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.rem,
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.add,
                                                                [
                                                                  M.read (| i |);
                                                                  Value.Integer IntegerKind.Usize 1
                                                                ]
                                                              |);
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_keccak_air::NUM_ROUNDS",
                                                                  Ty.path "usize"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |) in
                                                    let~ _ : Ty.tuple [] :=
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_trait_method (|
                                                          "p3_air::air::AirBuilder",
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_air::air::FilteredAirBuilder")
                                                            []
                                                            [ AB ],
                                                          [],
                                                          [],
                                                          "assert_eq",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Var";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Var"
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_air::air::FilteredAirBuilder")
                                                                []
                                                                [ AB ],
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_air::air::FilteredAirBuilder")
                                                                  []
                                                                  [ AB ],
                                                                M.get_trait_method (|
                                                                  "p3_air::air::AirBuilder",
                                                                  AB,
                                                                  [],
                                                                  [],
                                                                  "when_transition",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.read (| builder |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.read (| next_round_flag |);
                                                          M.read (| current_round_flag |)
                                                        ]
                                                      |) in
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)))
                            ]
                          |)
                        |))
                    |)))
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_eval_round_flags :
    M.IsFunction.C "p3_keccak_air::round_flags::eval_round_flags" eval_round_flags.
  Admitted.
  Global Typeclasses Opaque eval_round_flags.
End round_flags.
