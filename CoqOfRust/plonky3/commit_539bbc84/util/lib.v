(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
pub const fn log2_ceil_usize(n: usize) -> usize {
    (usize::BITS - n.saturating_sub(1).leading_zeros()) as usize
}
*)
Definition log2_ceil_usize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ n ] =>
    ltac:(M.monadic
      (let n := M.alloc (| Ty.path "usize", n |) in
      M.cast
        (Ty.path "usize")
        (M.call_closure (|
          Ty.path "u32",
          BinOp.Wrap.sub,
          [
            M.read (| get_associated_constant (| Ty.path "usize", "BITS", Ty.path "u32" |) |);
            M.call_closure (|
              Ty.path "u32",
              M.get_associated_function (| Ty.path "usize", "leading_zeros", [], [] |),
              [
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (| Ty.path "usize", "saturating_sub", [], [] |),
                  [ M.read (| n |); Value.Integer IntegerKind.Usize 1 ]
                |)
              ]
            |)
          ]
        |))))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_log2_ceil_usize :
  M.IsFunction.C "p3_util::log2_ceil_usize" log2_ceil_usize.
Admitted.
Global Typeclasses Opaque log2_ceil_usize.

(*
pub fn log2_ceil_u64(n: u64) -> u64 {
    (u64::BITS - n.saturating_sub(1).leading_zeros()).into()
}
*)
Definition log2_ceil_u64 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ n ] =>
    ltac:(M.monadic
      (let n := M.alloc (| Ty.path "u64", n |) in
      M.call_closure (|
        Ty.path "u64",
        M.get_trait_method (|
          "core::convert::Into",
          Ty.path "u32",
          [],
          [ Ty.path "u64" ],
          "into",
          [],
          []
        |),
        [
          M.call_closure (|
            Ty.path "u32",
            BinOp.Wrap.sub,
            [
              M.read (| get_associated_constant (| Ty.path "u64", "BITS", Ty.path "u32" |) |);
              M.call_closure (|
                Ty.path "u32",
                M.get_associated_function (| Ty.path "u64", "leading_zeros", [], [] |),
                [
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (| Ty.path "u64", "saturating_sub", [], [] |),
                    [ M.read (| n |); Value.Integer IntegerKind.U64 1 ]
                  |)
                ]
              |)
            ]
          |)
        ]
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_log2_ceil_u64 :
  M.IsFunction.C "p3_util::log2_ceil_u64" log2_ceil_u64.
Admitted.
Global Typeclasses Opaque log2_ceil_u64.

(*
pub fn log2_strict_usize(n: usize) -> usize {
    let res = n.trailing_zeros();
    assert_eq!(n.wrapping_shr(res), 1, "Not a power of two: {n}");
    // Tell the optimizer about the semantics of `log2_strict`. i.e. it can replace `n` with
    // `1 << res` and vice versa.
    assume(n == 1 << res);
    res as usize
}
*)
Definition log2_strict_usize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ n ] =>
    ltac:(M.monadic
      (let n := M.alloc (| Ty.path "usize", n |) in
      M.read (|
        let~ res : Ty.path "u32" :=
          M.call_closure (|
            Ty.path "u32",
            M.get_associated_function (| Ty.path "usize", "trailing_zeros", [], [] |),
            [ M.read (| n |) ]
          |) in
        let~ _ : Ty.tuple [] :=
          M.match_operator (|
            Ty.tuple [],
            M.alloc (|
              Ty.tuple
                [
                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                ],
              Value.Tuple
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      Ty.path "usize",
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (| Ty.path "usize", "wrapping_shr", [], [] |),
                        [ M.read (| n |); M.read (| res |) ]
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 1 |)
                  |)
                ]
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let left_val :=
                    M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                  let right_val :=
                    M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.eq,
                                    [
                                      M.read (| M.deref (| M.read (| left_val |) |) |);
                                      M.read (| M.deref (| M.read (| right_val |) |) |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              let~ kind : Ty.path "core::panicking::AssertKind" :=
                                Value.StructTuple "core::panicking::AssertKind::Eq" [] [] [] in
                              M.alloc (|
                                Ty.path "never",
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (|
                                    "core::panicking::assert_failed",
                                    [],
                                    [ Ty.path "usize"; Ty.path "usize" ]
                                  |),
                                  [
                                    M.read (| kind |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| left_val |) |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| right_val |) |)
                                        |)
                                      |)
                                    |);
                                    Value.StructTuple
                                      "core::option::Option::Some"
                                      []
                                      [ Ty.path "core::fmt::Arguments" ]
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::Arguments",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::Arguments",
                                            "new_v1",
                                            [
                                              Value.Integer IntegerKind.Usize 1;
                                              Value.Integer IntegerKind.Usize 1
                                            ],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 1 ]
                                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                                      ],
                                                    Value.Array
                                                      [ mk_str (| "Not a power of two: " |) ]
                                                  |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 1 ]
                                                      [ Ty.path "core::fmt::rt::Argument" ],
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            "new_display",
                                                            [],
                                                            [ Ty.path "usize" ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (| Pointer.Kind.Ref, n |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |)))
            ]
          |) in
        let~ _ : Ty.tuple [] :=
          M.call_closure (|
            Ty.tuple [],
            M.get_function (| "p3_util::assume", [], [] |),
            [
              M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.read (| n |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.shl,
                    [ Value.Integer IntegerKind.Usize 1; M.read (| res |) ]
                  |)
                ]
              |)
            ]
          |) in
        M.alloc (| Ty.path "usize", M.cast (Ty.path "usize") (M.read (| res |)) |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_log2_strict_usize :
  M.IsFunction.C "p3_util::log2_strict_usize" log2_strict_usize.
Admitted.
Global Typeclasses Opaque log2_strict_usize.

(*
pub const fn indices_arr<const N: usize>() -> [usize; N] {
    let mut indices_arr = [0; N];
    let mut i = 0;
    while i < N {
        indices_arr[i] = i;
        i += 1;
    }
    indices_arr
}
*)
Definition indices_arr (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [ N ], [], [] =>
    ltac:(M.monadic
      (M.read (|
        let~ indices_arr : Ty.apply (Ty.path "array") [ N ] [ Ty.path "usize" ] :=
          lib.repeat (| Value.Integer IntegerKind.Usize 0, N |) in
        let~ i : Ty.path "usize" := Value.Integer IntegerKind.Usize 0 in
        let~ _ : Ty.tuple [] :=
          M.read (|
            M.loop (|
              Ty.tuple [],
              ltac:(M.monadic
                (M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (| Ty.path "bool", BinOp.lt, [ M.read (| i |); N ] |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.write (|
                                M.SubPointer.get_array_field (| indices_arr, M.read (| i |) |),
                                M.read (| i |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              let β := i in
                              M.write (|
                                β,
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                |)
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.never_to_any (|
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.never_to_any (| M.read (| M.break (||) |) |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)
                          |)))
                    ]
                  |)
                |)))
            |)
          |) in
        indices_arr
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_indices_arr : M.IsFunction.C "p3_util::indices_arr" indices_arr.
Admitted.
Global Typeclasses Opaque indices_arr.

(*
pub const fn reverse_bits(x: usize, n: usize) -> usize {
    // Assert that n is a power of 2
    debug_assert!(n.is_power_of_two());
    reverse_bits_len(x, n.trailing_zeros() as usize)
}
*)
Definition reverse_bits (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ x; n ] =>
    ltac:(M.monadic
      (let x := M.alloc (| Ty.path "usize", x |) in
      let n := M.alloc (| Ty.path "usize", n |) in
      M.read (|
        let~ _ : Ty.tuple [] :=
          M.match_operator (|
            Ty.tuple [],
            M.alloc (| Ty.tuple [], Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.read (|
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    Ty.path "bool",
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.path "usize",
                                          "is_power_of_two",
                                          [],
                                          []
                                        |),
                                        [ M.read (| n |) ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.never_to_any (|
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (| "core::panicking::panic", [], [] |),
                                  [ mk_str (| "assertion failed: n.is_power_of_two()" |) ]
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |) in
                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                  |)));
              fun γ => ltac:(M.monadic (Value.Tuple []))
            ]
          |) in
        M.alloc (|
          Ty.path "usize",
          M.call_closure (|
            Ty.path "usize",
            M.get_function (| "p3_util::reverse_bits_len", [], [] |),
            [
              M.read (| x |);
              M.cast
                (Ty.path "usize")
                (M.call_closure (|
                  Ty.path "u32",
                  M.get_associated_function (| Ty.path "usize", "trailing_zeros", [], [] |),
                  [ M.read (| n |) ]
                |))
            ]
          |)
        |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_reverse_bits :
  M.IsFunction.C "p3_util::reverse_bits" reverse_bits.
Admitted.
Global Typeclasses Opaque reverse_bits.

(*
pub const fn reverse_bits_len(x: usize, bit_len: usize) -> usize {
    // NB: The only reason we need overflowing_shr() here as opposed
    // to plain '>>' is to accommodate the case n == num_bits == 0,
    // which would become `0 >> 64`. Rust thinks that any shift of 64
    // bits causes overflow, even when the argument is zero.
    x.reverse_bits()
        .overflowing_shr(usize::BITS - bit_len as u32)
        .0
}
*)
Definition reverse_bits_len (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ x; bit_len ] =>
    ltac:(M.monadic
      (let x := M.alloc (| Ty.path "usize", x |) in
      let bit_len := M.alloc (| Ty.path "usize", bit_len |) in
      M.read (|
        M.SubPointer.get_tuple_field (|
          M.alloc (|
            Ty.tuple [ Ty.path "usize"; Ty.path "bool" ],
            M.call_closure (|
              Ty.tuple [ Ty.path "usize"; Ty.path "bool" ],
              M.get_associated_function (| Ty.path "usize", "overflowing_shr", [], [] |),
              [
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (| Ty.path "usize", "reverse_bits", [], [] |),
                  [ M.read (| x |) ]
                |);
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.sub,
                  [
                    M.read (|
                      get_associated_constant (| Ty.path "usize", "BITS", Ty.path "u32" |)
                    |);
                    M.cast (Ty.path "u32") (M.read (| bit_len |))
                  ]
                |)
              ]
            |)
          |),
          0
        |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_reverse_bits_len :
  M.IsFunction.C "p3_util::reverse_bits_len" reverse_bits_len.
Admitted.
Global Typeclasses Opaque reverse_bits_len.

Definition value_BIT_REVERSE_6BIT (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  ltac:(M.monadic
    (M.alloc (|
      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
      M.call_closure (|
        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
        M.pointer_coercion
          M.PointerCoercion.Unsize
          (Ty.apply
            (Ty.path "&")
            []
            [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 64 ] [ Ty.path "u8" ] ])
          (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]),
        [
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.alloc (|
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 64 ]
                    [ Ty.path "u8" ],
                  Value.Array
                    [
                      Value.Integer IntegerKind.U8 0;
                      Value.Integer IntegerKind.U8 32;
                      Value.Integer IntegerKind.U8 16;
                      Value.Integer IntegerKind.U8 48;
                      Value.Integer IntegerKind.U8 8;
                      Value.Integer IntegerKind.U8 40;
                      Value.Integer IntegerKind.U8 24;
                      Value.Integer IntegerKind.U8 56;
                      Value.Integer IntegerKind.U8 4;
                      Value.Integer IntegerKind.U8 36;
                      Value.Integer IntegerKind.U8 20;
                      Value.Integer IntegerKind.U8 52;
                      Value.Integer IntegerKind.U8 12;
                      Value.Integer IntegerKind.U8 44;
                      Value.Integer IntegerKind.U8 28;
                      Value.Integer IntegerKind.U8 60;
                      Value.Integer IntegerKind.U8 2;
                      Value.Integer IntegerKind.U8 34;
                      Value.Integer IntegerKind.U8 18;
                      Value.Integer IntegerKind.U8 50;
                      Value.Integer IntegerKind.U8 10;
                      Value.Integer IntegerKind.U8 42;
                      Value.Integer IntegerKind.U8 26;
                      Value.Integer IntegerKind.U8 58;
                      Value.Integer IntegerKind.U8 6;
                      Value.Integer IntegerKind.U8 38;
                      Value.Integer IntegerKind.U8 22;
                      Value.Integer IntegerKind.U8 54;
                      Value.Integer IntegerKind.U8 14;
                      Value.Integer IntegerKind.U8 46;
                      Value.Integer IntegerKind.U8 30;
                      Value.Integer IntegerKind.U8 62;
                      Value.Integer IntegerKind.U8 1;
                      Value.Integer IntegerKind.U8 33;
                      Value.Integer IntegerKind.U8 17;
                      Value.Integer IntegerKind.U8 49;
                      Value.Integer IntegerKind.U8 9;
                      Value.Integer IntegerKind.U8 41;
                      Value.Integer IntegerKind.U8 25;
                      Value.Integer IntegerKind.U8 57;
                      Value.Integer IntegerKind.U8 5;
                      Value.Integer IntegerKind.U8 37;
                      Value.Integer IntegerKind.U8 21;
                      Value.Integer IntegerKind.U8 53;
                      Value.Integer IntegerKind.U8 13;
                      Value.Integer IntegerKind.U8 45;
                      Value.Integer IntegerKind.U8 29;
                      Value.Integer IntegerKind.U8 61;
                      Value.Integer IntegerKind.U8 3;
                      Value.Integer IntegerKind.U8 35;
                      Value.Integer IntegerKind.U8 19;
                      Value.Integer IntegerKind.U8 51;
                      Value.Integer IntegerKind.U8 11;
                      Value.Integer IntegerKind.U8 43;
                      Value.Integer IntegerKind.U8 27;
                      Value.Integer IntegerKind.U8 59;
                      Value.Integer IntegerKind.U8 7;
                      Value.Integer IntegerKind.U8 39;
                      Value.Integer IntegerKind.U8 23;
                      Value.Integer IntegerKind.U8 55;
                      Value.Integer IntegerKind.U8 15;
                      Value.Integer IntegerKind.U8 47;
                      Value.Integer IntegerKind.U8 31;
                      Value.Integer IntegerKind.U8 63
                    ]
                |)
              |)
            |)
          |)
        ]
      |)
    |))).

Global Instance Instance_IsConstant_value_BIT_REVERSE_6BIT :
  M.IsFunction.C "p3_util::BIT_REVERSE_6BIT" value_BIT_REVERSE_6BIT.
Admitted.
Global Typeclasses Opaque value_BIT_REVERSE_6BIT.

Definition value_BIG_T_SIZE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  ltac:(M.monadic
    (M.alloc (|
      Ty.path "usize",
      M.call_closure (|
        Ty.path "usize",
        BinOp.Wrap.shl,
        [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.I32 14 ]
      |)
    |))).

Global Instance Instance_IsConstant_value_BIG_T_SIZE :
  M.IsFunction.C "p3_util::BIG_T_SIZE" value_BIG_T_SIZE.
Admitted.
Global Typeclasses Opaque value_BIG_T_SIZE.

Definition value_SMALL_ARR_SIZE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  ltac:(M.monadic
    (M.alloc (|
      Ty.path "usize",
      M.call_closure (|
        Ty.path "usize",
        BinOp.Wrap.shl,
        [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.I32 16 ]
      |)
    |))).

Global Instance Instance_IsConstant_value_SMALL_ARR_SIZE :
  M.IsFunction.C "p3_util::SMALL_ARR_SIZE" value_SMALL_ARR_SIZE.
Admitted.
Global Typeclasses Opaque value_SMALL_ARR_SIZE.

(*
pub fn reverse_slice_index_bits<F>(vals: &mut [F]) {
    let n = vals.len();
    if n == 0 {
        return;
    }
    let log_n = log2_strict_usize(n);

    // If the whole array fits in fast cache, then the trivial algorithm is cache friendly. Also, if
    // `T` is really big, then the trivial algorithm is cache-friendly, no matter the size of the array.
    if core::mem::size_of::<F>() << log_n <= SMALL_ARR_SIZE
        || core::mem::size_of::<F>() >= BIG_T_SIZE
    {
        reverse_slice_index_bits_small(vals, log_n);
    } else {
        debug_assert!(n >= 4); // By our choice of `BIG_T_SIZE` and `SMALL_ARR_SIZE`.

        // Algorithm:
        //
        // Treat `arr` as a `sqrt(n)` by `sqrt(n)` row-major matrix. (Assume for now that `lb_n` is
        // even, i.e., `n` is a square number.) To perform bit-order reversal we:
        //  1. Bit-reverse the order of the rows. (They are contiguous in memory, so this is
        //     basically a series of large `memcpy`s.)
        //  2. Transpose the matrix.
        //  3. Bit-reverse the order of the rows.
        //
        // This is equivalent to, for every index `0 <= i < n`:
        //  1. bit-reversing `i[lb_n / 2..lb_n]`,
        //  2. swapping `i[0..lb_n / 2]` and `i[lb_n / 2..lb_n]`,
        //  3. bit-reversing `i[lb_n / 2..lb_n]`.
        //
        // If `lb_n` is odd, i.e., `n` is not a square number, then the above procedure requires
        // slight modification. At steps 1 and 3 we bit-reverse bits `ceil(lb_n / 2)..lb_n`, of the
        // index (shuffling `floor(lb_n / 2)` chunks of length `ceil(lb_n / 2)`). At step 2, we
        // perform _two_ transposes. We treat `arr` as two matrices, one where the middle bit of the
        // index is `0` and another, where the middle bit is `1`; we transpose each individually.

        let lb_num_chunks = log_n >> 1;
        let lb_chunk_size = log_n - lb_num_chunks;
        unsafe {
            reverse_slice_index_bits_chunks(vals, lb_num_chunks, lb_chunk_size);
            transpose_in_place_square(vals, lb_chunk_size, lb_num_chunks, 0);
            if lb_num_chunks != lb_chunk_size {
                // `arr` cannot be interpreted as a square matrix. We instead interpret it as a
                // `1 << lb_num_chunks` by `2` by `1 << lb_num_chunks` tensor, in row-major order.
                // The above transpose acted on `tensor[..., 0, ...]` (all indices with middle bit
                // `0`). We still need to transpose `tensor[..., 1, ...]`. To do so, we advance
                // arr by `1 << lb_num_chunks` effectively, adding that to every index.
                let vals_with_offset = &mut vals[1 << lb_num_chunks..];
                transpose_in_place_square(vals_with_offset, lb_chunk_size, lb_num_chunks, 0);
            }
            reverse_slice_index_bits_chunks(vals, lb_num_chunks, lb_chunk_size);
        }
    }
}
*)
Definition reverse_slice_index_bits (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [ F ], [ vals ] =>
    ltac:(M.monadic
      (let vals :=
        M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ], vals |) in
      M.catch_return (Ty.tuple []) (|
        ltac:(M.monadic
          (M.read (|
            let~ n : Ty.path "usize" :=
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (| Ty.apply (Ty.path "slice") [] [ F ], "len", [], [] |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| vals |) |) |) ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Ty.tuple [],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            Ty.path "bool",
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.eq,
                              [ M.read (| n |); Value.Integer IntegerKind.Usize 0 ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.never_to_any (| M.read (| M.return_ (| Value.Tuple [] |) |) |)));
                  fun γ => ltac:(M.monadic (Value.Tuple []))
                ]
              |) in
            let~ log_n : Ty.path "usize" :=
              M.call_closure (|
                Ty.path "usize",
                M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                [ M.read (| n |) ]
              |) in
            M.alloc (|
              Ty.tuple [],
              M.match_operator (|
                Ty.tuple [],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            Ty.path "bool",
                            LogicalOp.or (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.le,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.shl,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_function (| "core::mem::size_of", [], [ F ] |),
                                        []
                                      |);
                                      M.read (| log_n |)
                                    ]
                                  |);
                                  M.read (|
                                    get_constant (| "p3_util::SMALL_ARR_SIZE", Ty.path "usize" |)
                                  |)
                                ]
                              |),
                              ltac:(M.monadic
                                (M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.ge,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_function (| "core::mem::size_of", [], [ F ] |),
                                      []
                                    |);
                                    M.read (|
                                      get_constant (| "p3_util::BIG_T_SIZE", Ty.path "usize" |)
                                    |)
                                  ]
                                |)))
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.read (|
                        let~ _ : Ty.tuple [] :=
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_function (|
                              "p3_util::reverse_slice_index_bits_small",
                              [],
                              [ F ]
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| vals |) |) |);
                              M.read (| log_n |)
                            ]
                          |) in
                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.read (|
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    Ty.path "bool",
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.ge,
                                                        [
                                                          M.read (| n |);
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.never_to_any (|
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::panic",
                                                    [],
                                                    []
                                                  |),
                                                  [ mk_str (| "assertion failed: n >= 4" |) ]
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |) in
                        let~ lb_num_chunks : Ty.path "usize" :=
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.shr,
                            [ M.read (| log_n |); Value.Integer IntegerKind.I32 1 ]
                          |) in
                        let~ lb_chunk_size : Ty.path "usize" :=
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.sub,
                            [ M.read (| log_n |); M.read (| lb_num_chunks |) ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_function (|
                              "p3_util::reverse_slice_index_bits_chunks",
                              [],
                              [ F ]
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| vals |) |) |);
                              M.read (| lb_num_chunks |);
                              M.read (| lb_chunk_size |)
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_function (| "p3_util::transpose_in_place_square", [], [ F ] |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| vals |) |) |);
                              M.read (| lb_chunk_size |);
                              M.read (| lb_num_chunks |);
                              Value.Integer IntegerKind.Usize 0
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        Ty.path "bool",
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.ne,
                                          [ M.read (| lb_num_chunks |); M.read (| lb_chunk_size |) ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.read (|
                                    let~ vals_with_offset :
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ F ] ] :=
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                            M.get_trait_method (|
                                              "core::ops::index::IndexMut",
                                              Ty.apply (Ty.path "slice") [] [ F ],
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::RangeFrom")
                                                  []
                                                  [ Ty.path "usize" ]
                                              ],
                                              "index_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| vals |) |)
                                              |);
                                              Value.mkStructRecord
                                                "core::ops::range::RangeFrom"
                                                []
                                                [ Ty.path "usize" ]
                                                [
                                                  ("start",
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.shl,
                                                      [
                                                        Value.Integer IntegerKind.Usize 1;
                                                        M.read (| lb_num_chunks |)
                                                      ]
                                                    |))
                                                ]
                                            ]
                                          |)
                                        |)
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_function (|
                                          "p3_util::transpose_in_place_square",
                                          [],
                                          [ F ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| vals_with_offset |) |)
                                          |);
                                          M.read (| lb_chunk_size |);
                                          M.read (| lb_num_chunks |);
                                          Value.Integer IntegerKind.Usize 0
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_function (|
                              "p3_util::reverse_slice_index_bits_chunks",
                              [],
                              [ F ]
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| vals |) |) |);
                              M.read (| lb_num_chunks |);
                              M.read (| lb_chunk_size |)
                            ]
                          |) in
                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                      |)))
                ]
              |)
            |)
          |)))
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_reverse_slice_index_bits :
  M.IsFunction.C "p3_util::reverse_slice_index_bits" reverse_slice_index_bits.
Admitted.
Global Typeclasses Opaque reverse_slice_index_bits.

(*
fn reverse_slice_index_bits_small<F>(vals: &mut [F], lb_n: usize) {
    if lb_n <= 6 {
        // BIT_REVERSE_6BIT holds 6-bit reverses. This shift makes them lb_n-bit reverses.
        let dst_shr_amt = 6 - lb_n as u32;
        #[allow(clippy::needless_range_loop)]
        for src in 0..vals.len() {
            let dst = (BIT_REVERSE_6BIT[src] as usize).wrapping_shr(dst_shr_amt);
            if src < dst {
                vals.swap(src, dst);
            }
        }
    } else {
        // LLVM does not know that it does not need to reverse src at each iteration (which is
        // expensive on x86). We take advantage of the fact that the low bits of dst change rarely and the high
        // bits of dst are dependent only on the low bits of src.
        let dst_lo_shr_amt = usize::BITS - (lb_n - 6) as u32;
        let dst_hi_shl_amt = lb_n - 6;
        for src_chunk in 0..(vals.len() >> 6) {
            let src_hi = src_chunk << 6;
            let dst_lo = src_chunk.reverse_bits().wrapping_shr(dst_lo_shr_amt);
            #[allow(clippy::needless_range_loop)]
            for src_lo in 0..(1 << 6) {
                let dst_hi = (BIT_REVERSE_6BIT[src_lo] as usize) << dst_hi_shl_amt;
                let src = src_hi + src_lo;
                let dst = dst_hi + dst_lo;
                if src < dst {
                    vals.swap(src, dst);
                }
            }
        }
    }
}
*)
Definition reverse_slice_index_bits_small
    (ε : list Value.t)
    (τ : list Ty.t)
    (α : list Value.t)
    : M :=
  match ε, τ, α with
  | [], [ F ], [ vals; lb_n ] =>
    ltac:(M.monadic
      (let vals :=
        M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ], vals |) in
      let lb_n := M.alloc (| Ty.path "usize", lb_n |) in
      M.match_operator (|
        Ty.tuple [],
        M.alloc (| Ty.tuple [], Value.Tuple [] |),
        [
          fun γ =>
            ltac:(M.monadic
              (let γ :=
                M.use
                  (M.alloc (|
                    Ty.path "bool",
                    M.call_closure (|
                      Ty.path "bool",
                      BinOp.le,
                      [ M.read (| lb_n |); Value.Integer IntegerKind.Usize 6 ]
                    |)
                  |)) in
              let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
              M.read (|
                let~ dst_shr_amt : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.sub,
                    [ Value.Integer IntegerKind.U32 6; M.cast (Ty.path "u32") (M.read (| lb_n |)) ]
                  |) in
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.mkStructRecord
                              "core::ops::range::Range"
                              []
                              [ Ty.path "usize" ]
                              [
                                ("start", Value.Integer IntegerKind.Usize 0);
                                ("end_",
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ F ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| vals |) |)
                                      |)
                                    ]
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let src := M.copy (| Ty.path "usize", γ0_0 |) in
                                            M.read (|
                                              let~ dst : Ty.path "usize" :=
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.path "usize",
                                                    "wrapping_shr",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.cast
                                                      (Ty.path "usize")
                                                      (M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "p3_util::BIT_REVERSE_6BIT",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ Ty.path "u8" ]
                                                                  ]
                                                              |)
                                                            |)
                                                          |),
                                                          M.read (| src |)
                                                        |)
                                                      |));
                                                    M.read (| dst_shr_amt |)
                                                  ]
                                                |) in
                                              M.alloc (|
                                                Ty.tuple [],
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.lt,
                                                                [ M.read (| src |); M.read (| dst |)
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ F ],
                                                                "swap",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (| M.read (| vals |) |)
                                                                |);
                                                                M.read (| src |);
                                                                M.read (| dst |)
                                                              ]
                                                            |) in
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)
                                              |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |)));
          fun γ =>
            ltac:(M.monadic
              (M.read (|
                let~ dst_lo_shr_amt : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.sub,
                    [
                      M.read (|
                        get_associated_constant (| Ty.path "usize", "BITS", Ty.path "u32" |)
                      |);
                      M.cast
                        (Ty.path "u32")
                        (M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [ M.read (| lb_n |); Value.Integer IntegerKind.Usize 6 ]
                        |))
                    ]
                  |) in
                let~ dst_hi_shl_amt : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [ M.read (| lb_n |); Value.Integer IntegerKind.Usize 6 ]
                  |) in
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.mkStructRecord
                              "core::ops::range::Range"
                              []
                              [ Ty.path "usize" ]
                              [
                                ("start", Value.Integer IntegerKind.Usize 0);
                                ("end_",
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.shr,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ F ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| vals |) |)
                                          |)
                                        ]
                                      |);
                                      Value.Integer IntegerKind.I32 6
                                    ]
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let src_chunk := M.copy (| Ty.path "usize", γ0_0 |) in
                                            M.read (|
                                              let~ src_hi : Ty.path "usize" :=
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.shl,
                                                  [
                                                    M.read (| src_chunk |);
                                                    Value.Integer IntegerKind.I32 6
                                                  ]
                                                |) in
                                              let~ dst_lo : Ty.path "usize" :=
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.path "usize",
                                                    "wrapping_shr",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.path "usize",
                                                        "reverse_bits",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.read (| src_chunk |) ]
                                                    |);
                                                    M.read (| dst_lo_shr_amt |)
                                                  ]
                                                |) in
                                              M.use
                                                (M.alloc (|
                                                  Ty.tuple [],
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::Range")
                                                        []
                                                        [ Ty.path "usize" ],
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          [],
                                                          "into_iter",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          Value.mkStructRecord
                                                            "core::ops::range::Range"
                                                            []
                                                            [ Ty.path "usize" ]
                                                            [
                                                              ("start",
                                                                Value.Integer IntegerKind.Usize 0);
                                                              ("end_",
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.shl,
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1;
                                                                    Value.Integer IntegerKind.I32 6
                                                                  ]
                                                                |))
                                                            ]
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter :=
                                                            M.copy (|
                                                              Ty.apply
                                                                (Ty.path "core::ops::range::Range")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              γ
                                                            |) in
                                                          M.read (|
                                                            M.loop (|
                                                              Ty.tuple [],
                                                              ltac:(M.monadic
                                                                (let~ _ : Ty.tuple [] :=
                                                                  M.match_operator (|
                                                                    Ty.tuple [],
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [ Ty.path "usize" ],
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::ops::range::Range")
                                                                            []
                                                                            [ Ty.path "usize" ],
                                                                          [],
                                                                          [],
                                                                          "next",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                iter
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let _ :=
                                                                            M.is_struct_tuple (|
                                                                              γ,
                                                                              "core::option::Option::None"
                                                                            |) in
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              γ,
                                                                              "core::option::Option::Some",
                                                                              0
                                                                            |) in
                                                                          let src_lo :=
                                                                            M.copy (|
                                                                              Ty.path "usize",
                                                                              γ0_0
                                                                            |) in
                                                                          M.read (|
                                                                            let~ dst_hi :
                                                                                Ty.path "usize" :=
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.shl,
                                                                                [
                                                                                  M.cast
                                                                                    (Ty.path
                                                                                      "usize")
                                                                                    (M.read (|
                                                                                      M.SubPointer.get_array_field (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            get_constant (|
                                                                                              "p3_util::BIT_REVERSE_6BIT",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "slice")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "u8"
                                                                                                    ]
                                                                                                ]
                                                                                            |)
                                                                                          |)
                                                                                        |),
                                                                                        M.read (|
                                                                                          src_lo
                                                                                        |)
                                                                                      |)
                                                                                    |));
                                                                                  M.read (|
                                                                                    dst_hi_shl_amt
                                                                                  |)
                                                                                ]
                                                                              |) in
                                                                            let~ src :
                                                                                Ty.path "usize" :=
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.add,
                                                                                [
                                                                                  M.read (|
                                                                                    src_hi
                                                                                  |);
                                                                                  M.read (|
                                                                                    src_lo
                                                                                  |)
                                                                                ]
                                                                              |) in
                                                                            let~ dst :
                                                                                Ty.path "usize" :=
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.add,
                                                                                [
                                                                                  M.read (|
                                                                                    dst_hi
                                                                                  |);
                                                                                  M.read (|
                                                                                    dst_lo
                                                                                  |)
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Ty.tuple [],
                                                                              M.match_operator (|
                                                                                Ty.tuple [],
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ :=
                                                                                        M.use
                                                                                          (M.alloc (|
                                                                                            Ty.path
                                                                                              "bool",
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "bool",
                                                                                              BinOp.lt,
                                                                                              [
                                                                                                M.read (|
                                                                                                  src
                                                                                                |);
                                                                                                M.read (|
                                                                                                  dst
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)) in
                                                                                      let _ :=
                                                                                        is_constant_or_break_match (|
                                                                                          M.read (|
                                                                                            γ
                                                                                          |),
                                                                                          Value.Bool
                                                                                            true
                                                                                        |) in
                                                                                      M.read (|
                                                                                        let~ _ :
                                                                                            Ty.tuple
                                                                                              [] :=
                                                                                          M.call_closure (|
                                                                                            Ty.tuple
                                                                                              [],
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "slice")
                                                                                                []
                                                                                                [ F
                                                                                                ],
                                                                                              "swap",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.MutRef,
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    vals
                                                                                                  |)
                                                                                                |)
                                                                                              |);
                                                                                              M.read (|
                                                                                                src
                                                                                              |);
                                                                                              M.read (|
                                                                                                dst
                                                                                              |)
                                                                                            ]
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (Value.Tuple
                                                                                        []))
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                M.alloc (|
                                                                  Ty.tuple [],
                                                                  Value.Tuple []
                                                                |)))
                                                            |)
                                                          |)))
                                                    ]
                                                  |)
                                                |))
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |)))
        ]
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_reverse_slice_index_bits_small :
  M.IsFunction.C "p3_util::reverse_slice_index_bits_small" reverse_slice_index_bits_small.
Admitted.
Global Typeclasses Opaque reverse_slice_index_bits_small.

(*
unsafe fn reverse_slice_index_bits_chunks<F>(
    vals: &mut [F],
    lb_num_chunks: usize,
    lb_chunk_size: usize,
) {
    for i in 0..1usize << lb_num_chunks {
        // `wrapping_shr` handles the silly case when `lb_num_chunks == 0`.
        let j = i
            .reverse_bits()
            .wrapping_shr(usize::BITS - lb_num_chunks as u32);
        if i < j {
            core::ptr::swap_nonoverlapping(
                vals.get_unchecked_mut(i << lb_chunk_size),
                vals.get_unchecked_mut(j << lb_chunk_size),
                1 << lb_chunk_size,
            );
        }
    }
}
*)
Definition reverse_slice_index_bits_chunks
    (ε : list Value.t)
    (τ : list Ty.t)
    (α : list Value.t)
    : M :=
  match ε, τ, α with
  | [], [ F ], [ vals; lb_num_chunks; lb_chunk_size ] =>
    ltac:(M.monadic
      (let vals :=
        M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ], vals |) in
      let lb_num_chunks := M.alloc (| Ty.path "usize", lb_num_chunks |) in
      let lb_chunk_size := M.alloc (| Ty.path "usize", lb_chunk_size |) in
      M.read (|
        M.use
          (M.alloc (|
            Ty.tuple [],
            M.match_operator (|
              Ty.tuple [],
              M.alloc (|
                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.mkStructRecord
                      "core::ops::range::Range"
                      []
                      [ Ty.path "usize" ]
                      [
                        ("start", Value.Integer IntegerKind.Usize 0);
                        ("end_",
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.shl,
                            [ Value.Integer IntegerKind.Usize 1; M.read (| lb_num_chunks |) ]
                          |))
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter :=
                      M.copy (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        γ
                      |) in
                    M.read (|
                      M.loop (|
                        Ty.tuple [],
                        ltac:(M.monadic
                          (let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.never_to_any (| M.read (| M.break (||) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                    M.read (|
                                      let~ j : Ty.path "usize" :=
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.path "usize",
                                            "wrapping_shr",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.path "usize",
                                                "reverse_bits",
                                                [],
                                                []
                                              |),
                                              [ M.read (| i |) ]
                                            |);
                                            M.call_closure (|
                                              Ty.path "u32",
                                              BinOp.Wrap.sub,
                                              [
                                                M.read (|
                                                  get_associated_constant (|
                                                    Ty.path "usize",
                                                    "BITS",
                                                    Ty.path "u32"
                                                  |)
                                                |);
                                                M.cast (Ty.path "u32") (M.read (| lb_num_chunks |))
                                              ]
                                            |)
                                          ]
                                        |) in
                                      M.alloc (|
                                        Ty.tuple [],
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.lt,
                                                        [ M.read (| i |); M.read (| j |) ]
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.read (|
                                                  let~ _ : Ty.tuple [] :=
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_function (|
                                                        "core::ptr::swap_nonoverlapping",
                                                        [],
                                                        [ F ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutPointer,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply (Ty.path "&mut") [] [ F ],
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ F ],
                                                                "get_unchecked_mut",
                                                                [],
                                                                [ Ty.path "usize" ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (| M.read (| vals |) |)
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.shl,
                                                                  [
                                                                    M.read (| i |);
                                                                    M.read (| lb_chunk_size |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.MutPointer,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply (Ty.path "&mut") [] [ F ],
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ F ],
                                                                "get_unchecked_mut",
                                                                [],
                                                                [ Ty.path "usize" ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (| M.read (| vals |) |)
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.shl,
                                                                  [
                                                                    M.read (| j |);
                                                                    M.read (| lb_chunk_size |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.shl,
                                                          [
                                                            Value.Integer IntegerKind.Usize 1;
                                                            M.read (| lb_chunk_size |)
                                                          ]
                                                        |)
                                                      ]
                                                    |) in
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                      |)
                    |)))
              ]
            |)
          |))
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_reverse_slice_index_bits_chunks :
  M.IsFunction.C "p3_util::reverse_slice_index_bits_chunks" reverse_slice_index_bits_chunks.
Admitted.
Global Typeclasses Opaque reverse_slice_index_bits_chunks.

(*
unsafe fn transpose_in_place_square<T>(
    arr: &mut [T],
    lb_chunk_size: usize,
    lb_num_chunks: usize,
    offset: usize,
) {
    transpose::transpose_in_place_square(arr, lb_chunk_size, lb_num_chunks, offset)
}
*)
Definition transpose_in_place_square (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [ T ], [ arr; lb_chunk_size; lb_num_chunks; offset ] =>
    ltac:(M.monadic
      (let arr :=
        M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ], arr |) in
      let lb_chunk_size := M.alloc (| Ty.path "usize", lb_chunk_size |) in
      let lb_num_chunks := M.alloc (| Ty.path "usize", lb_num_chunks |) in
      let offset := M.alloc (| Ty.path "usize", offset |) in
      M.call_closure (|
        Ty.tuple [],
        M.get_function (| "p3_util::transpose::transpose_in_place_square", [], [ T ] |),
        [
          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| arr |) |) |);
          M.read (| lb_chunk_size |);
          M.read (| lb_num_chunks |);
          M.read (| offset |)
        ]
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_transpose_in_place_square :
  M.IsFunction.C "p3_util::transpose_in_place_square" transpose_in_place_square.
Admitted.
Global Typeclasses Opaque transpose_in_place_square.

(*
pub fn assume(p: bool) {
    debug_assert!(p);
    if !p {
        unsafe {
            unreachable_unchecked();
        }
    }
}
*)
Definition assume (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [ p ] =>
    ltac:(M.monadic
      (let p := M.alloc (| Ty.path "bool", p |) in
      M.read (|
        let~ _ : Ty.tuple [] :=
          M.match_operator (|
            Ty.tuple [],
            M.alloc (| Ty.tuple [], Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.read (|
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (| Ty.path "bool", UnOp.not (| M.read (| p |) |) |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.never_to_any (|
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (| "core::panicking::panic", [], [] |),
                                  [ mk_str (| "assertion failed: p" |) ]
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |) in
                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                  |)));
              fun γ => ltac:(M.monadic (Value.Tuple []))
            ]
          |) in
        M.alloc (|
          Ty.tuple [],
          M.match_operator (|
            Ty.tuple [],
            M.alloc (| Ty.tuple [], Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.use (M.alloc (| Ty.path "bool", UnOp.not (| M.read (| p |) |) |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.never_to_any (|
                    M.call_closure (|
                      Ty.path "never",
                      M.get_function (| "core::hint::unreachable_unchecked", [], [] |),
                      []
                    |)
                  |)));
              fun γ => ltac:(M.monadic (Value.Tuple []))
            ]
          |)
        |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_assume : M.IsFunction.C "p3_util::assume" assume.
Admitted.
Global Typeclasses Opaque assume.

(*
pub fn branch_hint() {
    // NOTE: These are the currently supported assembly architectures. See the
    // [nightly reference](https://doc.rust-lang.org/nightly/reference/inline-assembly.html) for
    // the most up-to-date list.
    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "arm",
        target_arch = "riscv32",
        target_arch = "riscv64",
        target_arch = "x86",
        target_arch = "x86_64",
    ))]
    unsafe {
        core::arch::asm!("", options(nomem, nostack, preserves_flags));
    }
}
*)
Definition branch_hint (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [], [] =>
    ltac:(M.monadic
      (M.read (|
        let~ _ : Ty.tuple [] := M.read (| InlineAssembly |) in
        M.alloc (| Ty.tuple [], Value.Tuple [] |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_branch_hint : M.IsFunction.C "p3_util::branch_hint" branch_hint.
Admitted.
Global Typeclasses Opaque branch_hint.

(* Trait *)
(* Empty module 'VecExt' *)

Module Impl_p3_util_VecExt_T_for_alloc_vec_Vec_T_alloc_alloc_Global.
  Definition Self (T : Ty.t) : Ty.t :=
    Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ].
  
  (*
      fn pushed_ref(&mut self, elem: T) -> &T {
          self.push(elem);
          self.last().unwrap()
      }
  *)
  Definition pushed_ref (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self T in
    match ε, τ, α with
    | [], [], [ self; elem ] =>
      ltac:(M.monadic
        (let self :=
          M.alloc (|
            Ty.apply
              (Ty.path "&mut")
              []
              [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ],
            self
          |) in
        let elem := M.alloc (| T, elem |) in
        M.read (|
          let~ _ : Ty.tuple [] :=
            M.call_closure (|
              Ty.tuple [],
              M.get_associated_function (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                "push",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                M.read (| elem |)
              ]
            |) in
          M.alloc (|
            Ty.apply (Ty.path "&") [] [ T ],
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ T ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "&") [] [ T ] ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "&") [] [ T ] ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "last",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ T; Ty.path "alloc::alloc::Global" ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |)
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  (*
      fn pushed_mut(&mut self, elem: T) -> &mut T {
          self.push(elem);
          self.last_mut().unwrap()
      }
  *)
  Definition pushed_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    let Self : Ty.t := Self T in
    match ε, τ, α with
    | [], [], [ self; elem ] =>
      ltac:(M.monadic
        (let self :=
          M.alloc (|
            Ty.apply
              (Ty.path "&mut")
              []
              [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ],
            self
          |) in
        let elem := M.alloc (| T, elem |) in
        M.borrow (|
          Pointer.Kind.MutRef,
          M.deref (|
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                    "push",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.read (| elem |)
                  ]
                |) in
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ T ],
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&mut") [] [ T ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&mut") [] [ T ] ],
                        "unwrap",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.apply (Ty.path "&mut") [] [ T ] ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "last_mut",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ T; Ty.path "alloc::alloc::Global" ],
                                    [],
                                    [],
                                    "deref_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| self |) |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |)
                |)
              |)
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    forall (T : Ty.t),
    M.IsTraitInstance
      "p3_util::VecExt"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ T ]
      (Self T)
      (* Instance *)
      [
        ("pushed_ref", InstanceField.Method (pushed_ref T));
        ("pushed_mut", InstanceField.Method (pushed_mut T))
      ].
End Impl_p3_util_VecExt_T_for_alloc_vec_Vec_T_alloc_alloc_Global.

(*
pub fn transpose_vec<T>(v: Vec<Vec<T>>) -> Vec<Vec<T>> {
    assert!(!v.is_empty());
    let len = v[0].len();
    let mut iters: Vec<_> = v.into_iter().map(|n| n.into_iter()).collect();
    (0..len)
        .map(|_| {
            iters
                .iter_mut()
                .map(|n| n.next().unwrap())
                .collect::<Vec<T>>()
        })
        .collect()
}
*)
Definition transpose_vec (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [ T ], [ v ] =>
    ltac:(M.monadic
      (let v :=
        M.alloc (|
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            []
            [
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ];
              Ty.path "alloc::alloc::Global"
            ],
          v
        |) in
      M.read (|
        let~ _ : Ty.tuple [] :=
          M.match_operator (|
            Ty.tuple [],
            M.alloc (| Ty.tuple [], Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        Ty.path "bool",
                        UnOp.not (|
                          UnOp.not (|
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ T; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "is_empty",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, v |) ]
                            |)
                          |)
                        |)
                      |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.never_to_any (|
                    M.call_closure (|
                      Ty.path "never",
                      M.get_function (| "core::panicking::panic", [], [] |),
                      [ mk_str (| "assertion failed: !v.is_empty()" |) ]
                    |)
                  |)));
              fun γ => ltac:(M.monadic (Value.Tuple []))
            ]
          |) in
        let~ len : Ty.path "usize" :=
          M.call_closure (|
            Ty.path "usize",
            M.get_associated_function (|
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
              "len",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ]
                      ],
                    M.get_trait_method (|
                      "core::ops::index::Index",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [ Ty.path "usize" ],
                      "index",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, v |); Value.Integer IntegerKind.Usize 0 ]
                  |)
                |)
              |)
            ]
          |) in
        let~ iters :
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply
                  (Ty.path "alloc::vec::into_iter::IntoIter")
                  []
                  [ T; Ty.path "alloc::alloc::Global" ];
                Ty.path "alloc::alloc::Global"
              ] :=
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply
                  (Ty.path "alloc::vec::into_iter::IntoIter")
                  []
                  [ T; Ty.path "alloc::alloc::Global" ];
                Ty.path "alloc::alloc::Global"
              ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    []
                    [
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.function
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]
                    ]
                    (Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [ T; Ty.path "alloc::alloc::Global" ])
                ],
              [],
              [],
              "collect",
              [],
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [ T; Ty.path "alloc::alloc::Global" ];
                    Ty.path "alloc::alloc::Global"
                  ]
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.function
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ]
                      ]
                      (Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [ T; Ty.path "alloc::alloc::Global" ])
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    []
                    [
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  [],
                  [],
                  "map",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [ T; Ty.path "alloc::alloc::Global" ];
                    Ty.function
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ]
                      ]
                      (Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [ T; Ty.path "alloc::alloc::Global" ])
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [ M.read (| v |) ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ],
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ T; Ty.path "alloc::alloc::Global" ],
                                α0
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let n :=
                                      M.copy (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ T; Ty.path "alloc::alloc::Global" ],
                                        γ
                                      |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ],
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ T; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        [],
                                        "into_iter",
                                        [],
                                        []
                                      |),
                                      [ M.read (| n |) ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |) in
        M.alloc (|
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            []
            [
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ];
              Ty.path "alloc::alloc::Global"
            ],
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ];
                Ty.path "alloc::alloc::Global"
              ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                  Ty.function
                    [ Ty.path "usize" ]
                    (Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ])
                ],
              [],
              [],
              "collect",
              [],
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ];
                    Ty.path "alloc::alloc::Global"
                  ]
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                    Ty.function
                      [ Ty.path "usize" ]
                      (Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ T; Ty.path "alloc::alloc::Global" ])
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  [],
                  [],
                  "map",
                  [],
                  [
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ];
                    Ty.function
                      [ Ty.path "usize" ]
                      (Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ T; Ty.path "alloc::alloc::Global" ])
                  ]
                |),
                [
                  Value.mkStructRecord
                    "core::ops::range::Range"
                    []
                    [ Ty.path "usize" ]
                    [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", M.read (| len |)) ];
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ],
                              M.alloc (| Ty.path "usize", α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::map::Map")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  []
                                                  [ T; Ty.path "alloc::alloc::Global" ]
                                              ];
                                            Ty.function
                                              [
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                                      []
                                                      [ T; Ty.path "alloc::alloc::Global" ]
                                                  ]
                                              ]
                                              T
                                          ],
                                        [],
                                        [],
                                        "collect",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ T; Ty.path "alloc::alloc::Global" ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ]
                                                ];
                                              Ty.function
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                                        []
                                                        [ T; Ty.path "alloc::alloc::Global" ]
                                                    ]
                                                ]
                                                T
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  []
                                                  [ T; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            [],
                                            [],
                                            "map",
                                            [],
                                            [
                                              T;
                                              Ty.function
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                                        []
                                                        [ T; Ty.path "alloc::alloc::Global" ]
                                                    ]
                                                ]
                                                T
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                                      []
                                                      [ T; Ty.path "alloc::alloc::Global" ]
                                                  ],
                                                "iter_mut",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::vec::into_iter::IntoIter")
                                                                []
                                                                [ T; Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::deref::DerefMut",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::vec::into_iter::IntoIter")
                                                              []
                                                              [ T; Ty.path "alloc::alloc::Global" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [],
                                                        "deref_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.MutRef, iters |) ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    ltac:(M.monadic
                                                      (M.match_operator (|
                                                        T,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::vec::into_iter::IntoIter")
                                                                []
                                                                [ T; Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          α0
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let n :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::vec::into_iter::IntoIter")
                                                                        []
                                                                        [
                                                                          T;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ],
                                                                  γ
                                                                |) in
                                                              M.call_closure (|
                                                                T,
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [ T ],
                                                                  "unwrap",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [ T ],
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::vec::into_iter::IntoIter")
                                                                        []
                                                                        [
                                                                          T;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [],
                                                                      "next",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (| M.read (| n |) |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)))
                                                  | _ => M.impossible "wrong number of arguments"
                                                  end))
                                          ]
                                        |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |)
        |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_transpose_vec :
  M.IsFunction.C "p3_util::transpose_vec" transpose_vec.
Admitted.
Global Typeclasses Opaque transpose_vec.

(*
pub fn pretty_name<T>() -> String {
    let name = type_name::<T>();
    let mut result = String::new();
    for qual in name.split_inclusive(&['<', '>', ',']) {
        result.push_str(qual.split("::").last().unwrap());
    }
    result
}
*)
Definition pretty_name (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [ T ], [] =>
    ltac:(M.monadic
      (M.read (|
        let~ name : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
          M.call_closure (|
            Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
            M.get_function (| "core::any::type_name", [], [ T ] |),
            []
          |) in
        let~ result : Ty.path "alloc::string::String" :=
          M.call_closure (|
            Ty.path "alloc::string::String",
            M.get_associated_function (| Ty.path "alloc::string::String", "new", [], [] |),
            []
          |) in
        let~ _ : Ty.tuple [] :=
          M.read (|
            M.use
              (M.alloc (|
                Ty.tuple [],
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::str::iter::SplitInclusive")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 3 ]
                              [ Ty.path "char" ]
                          ]
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::str::iter::SplitInclusive")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 3 ]
                                [ Ty.path "char" ]
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "core::str::iter::SplitInclusive")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 3 ]
                                  [ Ty.path "char" ]
                              ]
                          ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::str::iter::SplitInclusive")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 3 ]
                                    [ Ty.path "char" ]
                                ]
                            ],
                          M.get_associated_function (|
                            Ty.path "str",
                            "split_inclusive",
                            [],
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 3 ]
                                    [ Ty.path "char" ]
                                ]
                            ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| name |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 3 ]
                                  [ Ty.path "char" ],
                                Value.Array
                                  [ Value.UnicodeChar 60; Value.UnicodeChar 62; Value.UnicodeChar 44
                                  ]
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "core::str::iter::SplitInclusive")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 3 ]
                                      [ Ty.path "char" ]
                                  ]
                              ],
                            γ
                          |) in
                        M.read (|
                          M.loop (|
                            Ty.tuple [],
                            ltac:(M.monadic
                              (let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::str::iter::SplitInclusive")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 3 ]
                                                  [ Ty.path "char" ]
                                              ]
                                          ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.never_to_any (| M.read (| M.break (||) |) |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let qual :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                            γ0_0
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_associated_function (|
                                                Ty.path "alloc::string::String",
                                                "push_str",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (| Pointer.Kind.MutRef, result |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "str" ]
                                                          ],
                                                        "unwrap",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "str" ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path "core::str::iter::Split")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "str" ]
                                                              ],
                                                            [],
                                                            [],
                                                            "last",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::str::iter::Split")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "str" ]
                                                                ],
                                                              M.get_associated_function (|
                                                                Ty.path "str",
                                                                "split",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "str" ]
                                                                ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| qual |) |)
                                                                |);
                                                                mk_str (| "::" |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                          |)
                        |)))
                  ]
                |)
              |))
          |) in
        result
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_pretty_name : M.IsFunction.C "p3_util::pretty_name" pretty_name.
Admitted.
Global Typeclasses Opaque pretty_name.

(*
unsafe fn iter_next_chunk<const BUFLEN: usize, I: Iterator>(
    iter: &mut I,
) -> ([I::Item; BUFLEN], usize)
where
    I::Item: Copy,
{
    let mut buf = unsafe {
        let t = [const { MaybeUninit::<I::Item>::uninit() }; BUFLEN];
        // We are forced to use `transmute_copy` here instead of
        // `transmute` because `BUFLEN` is a const generic parameter.
        // The compiler *should* be smart enough not to emit a copy though.
        core::mem::transmute_copy::<_, [I::Item; BUFLEN]>(&t)
    };
    let mut i = 0;

    // Read BUFLEN values from `iter` into `buf` at a time.
    for c in iter {
        // Copy the next Item into `buf`.
        unsafe {
            *buf.get_unchecked_mut(i) = c;
            i = i.unchecked_add(1);
        }
        // If `buf` is full
        if i == BUFLEN {
            break;
        }
    }
    (buf, i)
}
*)
Definition iter_next_chunk (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [ BUFLEN ], [ _ as I ], [ iter ] =>
    ltac:(M.monadic
      (let iter := M.alloc (| Ty.apply (Ty.path "&mut") [] [ I ], iter |) in
      M.read (|
        let~ buf :
            Ty.apply
              (Ty.path "array")
              [ BUFLEN ]
              [ Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item" ] :=
          M.read (|
            let~ t :
                Ty.apply
                  (Ty.path "array")
                  [ BUFLEN ]
                  [
                    Ty.apply
                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item"
                      ]
                  ] :=
              lib.repeat (|
                M.read (|
                  get_constant (|
                    "p3_util::iter_next_chunk_discriminant",
                    Ty.apply
                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                      []
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item"
                      ]
                  |)
                |),
                BUFLEN
              |) in
            M.alloc (|
              Ty.apply
                (Ty.path "array")
                [ BUFLEN ]
                [ Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item" ],
              M.call_closure (|
                Ty.apply
                  (Ty.path "array")
                  [ BUFLEN ]
                  [ Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item"
                  ],
                M.get_function (|
                  "core::mem::transmute_copy",
                  [],
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ BUFLEN ]
                      [
                        Ty.apply
                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                          []
                          [
                            Ty.associated_in_trait
                              "core::iter::traits::iterator::Iterator"
                              []
                              []
                              I
                              "Item"
                          ]
                      ];
                    Ty.apply
                      (Ty.path "array")
                      [ BUFLEN ]
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::iterator::Iterator"
                          []
                          []
                          I
                          "Item"
                      ]
                  ]
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.borrow (| Pointer.Kind.Ref, t |) |) |)
                ]
              |)
            |)
          |) in
        let~ i : Ty.path "usize" := Value.Integer IntegerKind.Usize 0 in
        let~ _ : Ty.tuple [] :=
          M.read (|
            M.use
              (M.alloc (|
                Ty.tuple [],
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ I ],
                    M.call_closure (|
                      Ty.apply (Ty.path "&mut") [] [ I ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "&mut") [] [ I ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [ M.read (| iter |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| Ty.apply (Ty.path "&mut") [] [ I ], γ |) in
                        M.read (|
                          M.loop (|
                            Ty.tuple [],
                            ltac:(M.monadic
                              (let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::iterator::Iterator"
                                          []
                                          []
                                          I
                                          "Item"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "core::iter::traits::iterator::Iterator"
                                            []
                                            []
                                            I
                                            "Item"
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply (Ty.path "&mut") [] [ I ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.never_to_any (| M.read (| M.break (||) |) |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let c :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "core::iter::traits::iterator::Iterator"
                                              []
                                              []
                                              I
                                              "Item",
                                            γ0_0
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "core::iter::traits::iterator::Iterator"
                                                            []
                                                            []
                                                            I
                                                            "Item"
                                                        ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "core::iter::traits::iterator::Iterator"
                                                              []
                                                              []
                                                              I
                                                              "Item"
                                                          ],
                                                        "get_unchecked_mut",
                                                        [],
                                                        [ Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "core::iter::traits::iterator::Iterator"
                                                                    []
                                                                    []
                                                                    I
                                                                    "Item"
                                                                ]
                                                            ],
                                                          M.pointer_coercion
                                                            M.PointerCoercion.Unsize
                                                            (Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [ BUFLEN ]
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "core::iter::traits::iterator::Iterator"
                                                                      []
                                                                      []
                                                                      I
                                                                      "Item"
                                                                  ]
                                                              ])
                                                            (Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "core::iter::traits::iterator::Iterator"
                                                                      []
                                                                      []
                                                                      I
                                                                      "Item"
                                                                  ]
                                                              ]),
                                                          [ M.borrow (| Pointer.Kind.MutRef, buf |)
                                                          ]
                                                        |);
                                                        M.read (| i |)
                                                      ]
                                                    |)
                                                  |),
                                                  M.read (| c |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  i,
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_associated_function (|
                                                      Ty.path "usize",
                                                      "unchecked_add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| i |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |) in
                                          M.alloc (|
                                            Ty.tuple [],
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.eq,
                                                            [ M.read (| i |); BUFLEN ]
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.read (| M.break (||) |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |)
                                          |)
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                          |)
                        |)))
                  ]
                |)
              |))
          |) in
        M.alloc (|
          Ty.tuple
            [
              Ty.apply
                (Ty.path "array")
                [ BUFLEN ]
                [ Ty.associated_in_trait "core::iter::traits::iterator::Iterator" [] [] I "Item" ];
              Ty.path "usize"
            ],
          Value.Tuple [ M.read (| buf |); M.read (| i |) ]
        |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_iter_next_chunk :
  M.IsFunction.C "p3_util::iter_next_chunk" iter_next_chunk.
Admitted.
Global Typeclasses Opaque iter_next_chunk.

(*
pub fn apply_to_chunks<const BUFLEN: usize, I, H>(input: I, mut func: H)
where
    I: IntoIterator<Item = u8>,
    H: FnMut(&[I::Item]),
{
    let mut iter = input.into_iter();
    loop {
        let (buf, n) = unsafe { iter_next_chunk::<BUFLEN, _>(&mut iter) };
        if n == 0 {
            break;
        }
        func(unsafe { buf.get_unchecked(..n) });
    }
}
*)
Definition apply_to_chunks (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [ BUFLEN ], [ _ as I; H ], [ input; func ] =>
    ltac:(M.monadic
      (let input := M.alloc (| I, input |) in
      let func := M.alloc (| H, func |) in
      M.read (|
        let~ iter :
            Ty.associated_in_trait "core::iter::traits::collect::IntoIterator" [] [] I "IntoIter" :=
          M.call_closure (|
            Ty.associated_in_trait "core::iter::traits::collect::IntoIterator" [] [] I "IntoIter",
            M.get_trait_method (|
              "core::iter::traits::collect::IntoIterator",
              I,
              [],
              [],
              "into_iter",
              [],
              []
            |),
            [ M.read (| input |) ]
          |) in
        M.loop (|
          Ty.tuple [],
          ltac:(M.monadic
            (M.alloc (|
              Ty.tuple [],
              M.match_operator (|
                Ty.tuple [],
                M.alloc (|
                  Ty.tuple
                    [ Ty.apply (Ty.path "array") [ BUFLEN ] [ Ty.path "u8" ]; Ty.path "usize" ],
                  M.call_closure (|
                    Ty.tuple
                      [ Ty.apply (Ty.path "array") [ BUFLEN ] [ Ty.path "u8" ]; Ty.path "usize" ],
                    M.get_function (|
                      "p3_util::iter_next_chunk",
                      [ BUFLEN ],
                      [
                        Ty.associated_in_trait
                          "core::iter::traits::collect::IntoIterator"
                          []
                          []
                          I
                          "IntoIter"
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let buf :=
                        M.copy (| Ty.apply (Ty.path "array") [ BUFLEN ] [ Ty.path "u8" ], γ0_0 |) in
                      let n := M.copy (| Ty.path "usize", γ0_1 |) in
                      M.read (|
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        Ty.path "bool",
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.eq,
                                          [ M.read (| n |); Value.Integer IntegerKind.Usize 0 ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.never_to_any (| M.read (| M.break (||) |) |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_trait_method (|
                              "core::ops::function::FnMut",
                              H,
                              [],
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                  ]
                              ],
                              "call_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, func |);
                              Value.Tuple
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          "get_unchecked",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeTo")
                                              []
                                              [ Ty.path "usize" ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                            M.pointer_coercion
                                              M.PointerCoercion.Unsize
                                              (Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ BUFLEN ]
                                                    [ Ty.path "u8" ]
                                                ])
                                              (Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]),
                                            [ M.borrow (| Pointer.Kind.Ref, buf |) ]
                                          |);
                                          Value.mkStructRecord
                                            "core::ops::range::RangeTo"
                                            []
                                            [ Ty.path "usize" ]
                                            [ ("end_", M.read (| n |)) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                            ]
                          |) in
                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                      |)))
                ]
              |)
            |)))
        |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_apply_to_chunks :
  M.IsFunction.C "p3_util::apply_to_chunks" apply_to_chunks.
Admitted.
Global Typeclasses Opaque apply_to_chunks.

(*
pub unsafe fn convert_vec<T, U>(mut vec: Vec<T>) -> Vec<U> {
    let ptr = vec.as_mut_ptr() as *mut U;
    let len_bytes = vec.len() * size_of::<T>();
    let cap_bytes = vec.capacity() * size_of::<T>();

    assert_eq!(align_of::<T>(), align_of::<U>());
    assert_eq!(len_bytes % size_of::<U>(), 0);
    assert_eq!(cap_bytes % size_of::<U>(), 0);

    let new_len = len_bytes / size_of::<U>();
    let new_cap = cap_bytes / size_of::<U>();
    mem::forget(vec);
    Vec::from_raw_parts(ptr, new_len, new_cap)
}
*)
Definition convert_vec (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
  match ε, τ, α with
  | [], [ T; U ], [ vec ] =>
    ltac:(M.monadic
      (let vec :=
        M.alloc (|
          Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
          vec
        |) in
      M.read (|
        let~ ptr : Ty.apply (Ty.path "*mut") [] [ U ] :=
          M.cast
            (Ty.apply (Ty.path "*mut") [] [ U ])
            (M.call_closure (|
              Ty.apply (Ty.path "*mut") [] [ T ],
              M.get_associated_function (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                "as_mut_ptr",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.MutRef, vec |) ]
            |)) in
        let~ len_bytes : Ty.path "usize" :=
          M.call_closure (|
            Ty.path "usize",
            BinOp.Wrap.mul,
            [
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                  "len",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, vec |) ]
              |);
              M.call_closure (|
                Ty.path "usize",
                M.get_function (| "core::mem::size_of", [], [ T ] |),
                []
              |)
            ]
          |) in
        let~ cap_bytes : Ty.path "usize" :=
          M.call_closure (|
            Ty.path "usize",
            BinOp.Wrap.mul,
            [
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                  "capacity",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, vec |) ]
              |);
              M.call_closure (|
                Ty.path "usize",
                M.get_function (| "core::mem::size_of", [], [ T ] |),
                []
              |)
            ]
          |) in
        let~ _ : Ty.tuple [] :=
          M.match_operator (|
            Ty.tuple [],
            M.alloc (|
              Ty.tuple
                [
                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                ],
              Value.Tuple
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      Ty.path "usize",
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_function (| "core::mem::align_of", [], [ T ] |),
                        []
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      Ty.path "usize",
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_function (| "core::mem::align_of", [], [ U ] |),
                        []
                      |)
                    |)
                  |)
                ]
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let left_val :=
                    M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                  let right_val :=
                    M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.eq,
                                    [
                                      M.read (| M.deref (| M.read (| left_val |) |) |);
                                      M.read (| M.deref (| M.read (| right_val |) |) |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              let~ kind : Ty.path "core::panicking::AssertKind" :=
                                Value.StructTuple "core::panicking::AssertKind::Eq" [] [] [] in
                              M.alloc (|
                                Ty.path "never",
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (|
                                    "core::panicking::assert_failed",
                                    [],
                                    [ Ty.path "usize"; Ty.path "usize" ]
                                  |),
                                  [
                                    M.read (| kind |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| left_val |) |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| right_val |) |)
                                        |)
                                      |)
                                    |);
                                    Value.StructTuple
                                      "core::option::Option::None"
                                      []
                                      [ Ty.path "core::fmt::Arguments" ]
                                      []
                                  ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |)))
            ]
          |) in
        let~ _ : Ty.tuple [] :=
          M.match_operator (|
            Ty.tuple [],
            M.alloc (|
              Ty.tuple
                [
                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                ],
              Value.Tuple
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      Ty.path "usize",
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.rem,
                        [
                          M.read (| len_bytes |);
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_function (| "core::mem::size_of", [], [ U ] |),
                            []
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 0 |)
                  |)
                ]
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let left_val :=
                    M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                  let right_val :=
                    M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.eq,
                                    [
                                      M.read (| M.deref (| M.read (| left_val |) |) |);
                                      M.read (| M.deref (| M.read (| right_val |) |) |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              let~ kind : Ty.path "core::panicking::AssertKind" :=
                                Value.StructTuple "core::panicking::AssertKind::Eq" [] [] [] in
                              M.alloc (|
                                Ty.path "never",
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (|
                                    "core::panicking::assert_failed",
                                    [],
                                    [ Ty.path "usize"; Ty.path "usize" ]
                                  |),
                                  [
                                    M.read (| kind |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| left_val |) |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| right_val |) |)
                                        |)
                                      |)
                                    |);
                                    Value.StructTuple
                                      "core::option::Option::None"
                                      []
                                      [ Ty.path "core::fmt::Arguments" ]
                                      []
                                  ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |)))
            ]
          |) in
        let~ _ : Ty.tuple [] :=
          M.match_operator (|
            Ty.tuple [],
            M.alloc (|
              Ty.tuple
                [
                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                ],
              Value.Tuple
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      Ty.path "usize",
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.rem,
                        [
                          M.read (| cap_bytes |);
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_function (| "core::mem::size_of", [], [ U ] |),
                            []
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 0 |)
                  |)
                ]
            |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                  let left_val :=
                    M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                  let right_val :=
                    M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.eq,
                                    [
                                      M.read (| M.deref (| M.read (| left_val |) |) |);
                                      M.read (| M.deref (| M.read (| right_val |) |) |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              let~ kind : Ty.path "core::panicking::AssertKind" :=
                                Value.StructTuple "core::panicking::AssertKind::Eq" [] [] [] in
                              M.alloc (|
                                Ty.path "never",
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (|
                                    "core::panicking::assert_failed",
                                    [],
                                    [ Ty.path "usize"; Ty.path "usize" ]
                                  |),
                                  [
                                    M.read (| kind |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| left_val |) |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| right_val |) |)
                                        |)
                                      |)
                                    |);
                                    Value.StructTuple
                                      "core::option::Option::None"
                                      []
                                      [ Ty.path "core::fmt::Arguments" ]
                                      []
                                  ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |)))
            ]
          |) in
        let~ new_len : Ty.path "usize" :=
          M.call_closure (|
            Ty.path "usize",
            BinOp.Wrap.div,
            [
              M.read (| len_bytes |);
              M.call_closure (|
                Ty.path "usize",
                M.get_function (| "core::mem::size_of", [], [ U ] |),
                []
              |)
            ]
          |) in
        let~ new_cap : Ty.path "usize" :=
          M.call_closure (|
            Ty.path "usize",
            BinOp.Wrap.div,
            [
              M.read (| cap_bytes |);
              M.call_closure (|
                Ty.path "usize",
                M.get_function (| "core::mem::size_of", [], [ U ] |),
                []
              |)
            ]
          |) in
        let~ _ : Ty.tuple [] :=
          M.call_closure (|
            Ty.tuple [],
            M.get_function (|
              "core::mem::forget",
              [],
              [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ] ]
            |),
            [ M.read (| vec |) ]
          |) in
        M.alloc (|
          Ty.apply (Ty.path "alloc::vec::Vec") [] [ U; Ty.path "alloc::alloc::Global" ],
          M.call_closure (|
            Ty.apply (Ty.path "alloc::vec::Vec") [] [ U; Ty.path "alloc::alloc::Global" ],
            M.get_associated_function (|
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ U; Ty.path "alloc::alloc::Global" ],
              "from_raw_parts",
              [],
              []
            |),
            [ M.read (| ptr |); M.read (| new_len |); M.read (| new_cap |) ]
          |)
        |)
      |)))
  | _, _, _ => M.impossible "wrong number of arguments"
  end.

Global Instance Instance_IsFunction_convert_vec : M.IsFunction.C "p3_util::convert_vec" convert_vec.
Admitted.
Global Typeclasses Opaque convert_vec.
