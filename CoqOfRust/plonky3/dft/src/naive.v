(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module naive.
  (* StructTuple
    {
      name := "NaiveDft";
      const_params := [];
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_default_Default_for_p3_dft_naive_NaiveDft.
    Definition Self : Ty.t := Ty.path "p3_dft::naive::NaiveDft".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] => ltac:(M.monadic (Value.StructTuple "p3_dft::naive::NaiveDft" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_p3_dft_naive_NaiveDft.
  
  Module Impl_core_clone_Clone_for_p3_dft_naive_NaiveDft.
    Definition Self : Ty.t := Ty.path "p3_dft::naive::NaiveDft".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructTuple "p3_dft::naive::NaiveDft" []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_p3_dft_naive_NaiveDft.
  
  Module Impl_core_fmt_Debug_for_p3_dft_naive_NaiveDft.
    Definition Self : Ty.t := Ty.path "p3_dft::naive::NaiveDft".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "NaiveDft" |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_p3_dft_naive_NaiveDft.
  
  Module Impl_p3_dft_traits_TwoAdicSubgroupDft_where_p3_field_field_TwoAdicField_F_F_for_p3_dft_naive_NaiveDft.
    Definition Self (F : Ty.t) : Ty.t := Ty.path "p3_dft::naive::NaiveDft".
    
    (*     type Evaluations = RowMajorMatrix<F>; *)
    Definition _Evaluations (F : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_matrix::dense::DenseMatrix")
        []
        [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ].
    
    (*
        fn dft_batch(&self, mat: RowMajorMatrix<F>) -> RowMajorMatrix<F> {
            let w = mat.width();
            let h = mat.height();
            let log_h = log2_strict_usize(h);
            let g = F::two_adic_generator(log_h);
    
            let mut res = RowMajorMatrix::new(vec![F::ZERO; w * h], w);
            for (res_r, point) in g.powers().take(h).enumerate() {
                for (src_r, point_power) in point.powers().take(h).enumerate() {
                    for c in 0..w {
                        res.values[res_r * w + c] += point_power * mat.values[src_r * w + c]
                    }
                }
            }
    
            res
        }
    *)
    Definition dft_batch (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; mat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          M.read (|
            let~ w : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [ F ],
                    "width",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                |)
              |) in
            let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [ F ],
                    "height",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                |)
              |) in
            let~ log_h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                  [ M.read (| h |) ]
                |)
              |) in
            let~ g : Ty.apply (Ty.path "*") [] [ F ] :=
              M.alloc (|
                M.call_closure (|
                  F,
                  M.get_trait_method (|
                    "p3_field::field::TwoAdicField",
                    F,
                    [],
                    [],
                    "two_adic_generator",
                    [],
                    []
                  |),
                  [ M.read (| log_h |) ]
                |)
              |) in
            let~ res :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      M.get_function (| "alloc::vec::from_elem", [], [ F ] |),
                      [
                        M.read (|
                          get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |)
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.mul,
                          [ M.read (| w |); M.read (| h |) ]
                        |)
                      ]
                    |);
                    M.read (| w |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::take::Take")
                            []
                            [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ] ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::take::Take")
                              []
                              [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ] ]
                          ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::take::Take")
                                []
                                [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ] ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::take::Take")
                              []
                              [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ] ],
                            [],
                            [],
                            "enumerate",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::take::Take")
                                []
                                [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ] ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ],
                                [],
                                [],
                                "take",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ],
                                  M.get_trait_method (|
                                    "p3_field::field::PrimeCharacteristicRing",
                                    F,
                                    [],
                                    [],
                                    "powers",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, g |) ]
                                |);
                                M.read (| h |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.tuple [ Ty.path "usize"; F ] ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::take::Take")
                                            []
                                            [ Ty.apply (Ty.path "p3_field::field::Powers") [] [ F ]
                                            ]
                                        ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                      let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                      let res_r := M.copy (| γ1_0 |) in
                                      let point := M.copy (| γ1_1 |) in
                                      M.use
                                        (M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::take::Take")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "p3_field::field::Powers")
                                                        []
                                                        [ F ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::collect::IntoIterator",
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::take::Take")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "p3_field::field::Powers")
                                                          []
                                                          [ F ]
                                                      ]
                                                  ],
                                                [],
                                                [],
                                                "into_iter",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::enumerate::Enumerate")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::take::Take")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "p3_field::field::Powers")
                                                            []
                                                            [ F ]
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::take::Take")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "p3_field::field::Powers")
                                                          []
                                                          [ F ]
                                                      ],
                                                    [],
                                                    [],
                                                    "enumerate",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::take::Take")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "p3_field::field::Powers")
                                                            []
                                                            [ F ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "p3_field::field::Powers")
                                                          []
                                                          [ F ],
                                                        [],
                                                        [],
                                                        "take",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "p3_field::field::Powers")
                                                            []
                                                            [ F ],
                                                          M.get_trait_method (|
                                                            "p3_field::field::PrimeCharacteristicRing",
                                                            F,
                                                            [],
                                                            [],
                                                            "powers",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.borrow (| Pointer.Kind.Ref, point |) ]
                                                        |);
                                                        M.read (| h |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let iter := M.copy (| γ |) in
                                                M.loop (|
                                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                  ltac:(M.monadic
                                                    (let~ _ :
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                      M.match_operator (|
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [ Ty.tuple [ Ty.path "usize"; F ] ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::enumerate::Enumerate")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::take::Take")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "p3_field::field::Powers")
                                                                        []
                                                                        [ F ]
                                                                    ]
                                                                ],
                                                              [],
                                                              [],
                                                              "next",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    iter
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.is_struct_tuple (|
                                                                  γ,
                                                                  "core::option::Option::None"
                                                                |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (| M.break (||) |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::option::Option::Some",
                                                                  0
                                                                |) in
                                                              let γ1_0 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ0_0,
                                                                  0
                                                                |) in
                                                              let γ1_1 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ0_0,
                                                                  1
                                                                |) in
                                                              let src_r := M.copy (| γ1_0 |) in
                                                              let point_power :=
                                                                M.copy (| γ1_1 |) in
                                                              M.use
                                                                (M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [ Ty.tuple [] ],
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::ops::range::Range")
                                                                        []
                                                                        [ Ty.path "usize" ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::collect::IntoIterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::ops::range::Range")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        [],
                                                                        [],
                                                                        "into_iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        Value.StructRecord
                                                                          "core::ops::range::Range"
                                                                          [
                                                                            ("start",
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0);
                                                                            ("end_", M.read (| w |))
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let iter :=
                                                                          M.copy (| γ |) in
                                                                        M.loop (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [ Ty.tuple [] ],
                                                                          ltac:(M.monadic
                                                                            (let~ _ :
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ] :=
                                                                              M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ],
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::ops::range::Range")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.is_struct_tuple (|
                                                                                          γ,
                                                                                          "core::option::Option::None"
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.break (||)
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::option::Option::Some",
                                                                                          0
                                                                                        |) in
                                                                                      let c :=
                                                                                        M.copy (|
                                                                                          γ0_0
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::AddAssign",
                                                                                            F,
                                                                                            [],
                                                                                            [ F ],
                                                                                            "add_assign",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              M.deref (|
                                                                                                M.call_closure (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&mut")
                                                                                                    []
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::index::IndexMut",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::Vec")
                                                                                                      []
                                                                                                      [
                                                                                                        F;
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ],
                                                                                                    [],
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize"
                                                                                                    ],
                                                                                                    "index_mut",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.MutRef,
                                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                                        res,
                                                                                                        "p3_matrix::dense::DenseMatrix",
                                                                                                        "values"
                                                                                                      |)
                                                                                                    |);
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "usize",
                                                                                                      BinOp.Wrap.add,
                                                                                                      [
                                                                                                        M.call_closure (|
                                                                                                          Ty.path
                                                                                                            "usize",
                                                                                                          BinOp.Wrap.mul,
                                                                                                          [
                                                                                                            M.read (|
                                                                                                              res_r
                                                                                                            |);
                                                                                                            M.read (|
                                                                                                              w
                                                                                                            |)
                                                                                                          ]
                                                                                                        |);
                                                                                                        M.read (|
                                                                                                          c
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              F,
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::arith::Mul",
                                                                                                F,
                                                                                                [],
                                                                                                [ F
                                                                                                ],
                                                                                                "mul",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  point_power
                                                                                                |);
                                                                                                M.read (|
                                                                                                  M.deref (|
                                                                                                    M.call_closure (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        []
                                                                                                        [
                                                                                                          F
                                                                                                        ],
                                                                                                      M.get_trait_method (|
                                                                                                        "core::ops::index::Index",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          []
                                                                                                          [
                                                                                                            F;
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ],
                                                                                                        [],
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize"
                                                                                                        ],
                                                                                                        "index",
                                                                                                        [],
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                            mat,
                                                                                                            "p3_matrix::dense::DenseMatrix",
                                                                                                            "values"
                                                                                                          |)
                                                                                                        |);
                                                                                                        M.call_closure (|
                                                                                                          Ty.path
                                                                                                            "usize",
                                                                                                          BinOp.Wrap.add,
                                                                                                          [
                                                                                                            M.call_closure (|
                                                                                                              Ty.path
                                                                                                                "usize",
                                                                                                              BinOp.Wrap.mul,
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  src_r
                                                                                                                |);
                                                                                                                M.read (|
                                                                                                                  w
                                                                                                                |)
                                                                                                              ]
                                                                                                            |);
                                                                                                            M.read (|
                                                                                                              c
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                        |)))
                                                                  ]
                                                                |))))
                                                        ]
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                                |)))
                                          ]
                                        |))))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            res
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "p3_dft::traits::TwoAdicSubgroupDft"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("Evaluations", InstanceField.Ty (_Evaluations F));
          ("dft_batch", InstanceField.Method (dft_batch F))
        ].
  End Impl_p3_dft_traits_TwoAdicSubgroupDft_where_p3_field_field_TwoAdicField_F_F_for_p3_dft_naive_NaiveDft.
End naive.
