(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module radix_2_dit.
  (* StructRecord
    {
      name := "Radix2Dit";
      const_params := [];
      ty_params := [ "F" ];
      fields :=
        [
          ("twiddles",
            Ty.apply
              (Ty.path "core::cell::RefCell")
              []
              [
                Ty.apply
                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                  []
                  [
                    Ty.path "usize";
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                    Ty.path "alloc::alloc::Global"
                  ]
              ])
        ];
    } *)
  
  Module Impl_core_default_Default_where_core_default_Default_F_where_p3_field_field_TwoAdicField_F_for_p3_dft_radix_2_dit_Radix2Dit_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_dft::radix_2_dit::Radix2Dit") [] [ F ].
    
    (* Default *)
    Definition default (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "p3_dft::radix_2_dit::Radix2Dit"
            [
              ("twiddles",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::cell::RefCell")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        []
                        [
                          Ty.path "usize";
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "core::cell::RefCell")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          []
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("default", InstanceField.Method (default F)) ].
  End Impl_core_default_Default_where_core_default_Default_F_where_p3_field_field_TwoAdicField_F_for_p3_dft_radix_2_dit_Radix2Dit_F.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_TwoAdicField_F_for_p3_dft_radix_2_dit_Radix2Dit_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_dft::radix_2_dit::Radix2Dit") [] [ F ].
    
    (* Clone *)
    Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "p3_dft::radix_2_dit::Radix2Dit"
            [
              ("twiddles",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::cell::RefCell")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        []
                        [
                          Ty.path "usize";
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "core::cell::RefCell")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          []
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_dft::radix_2_dit::Radix2Dit",
                            "twiddles"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_TwoAdicField_F_for_p3_dft_radix_2_dit_Radix2Dit_F.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_TwoAdicField_F_for_p3_dft_radix_2_dit_Radix2Dit_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_dft::radix_2_dit::Radix2Dit") [] [ F ].
    
    (* Debug *)
    Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field1_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Radix2Dit" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "twiddles" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "p3_dft::radix_2_dit::Radix2Dit",
                            "twiddles"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_TwoAdicField_F_for_p3_dft_radix_2_dit_Radix2Dit_F.
  
  Module Impl_p3_dft_traits_TwoAdicSubgroupDft_where_p3_field_field_TwoAdicField_F_F_for_p3_dft_radix_2_dit_Radix2Dit_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "p3_dft::radix_2_dit::Radix2Dit") [] [ F ].
    
    (*     type Evaluations = RowMajorMatrix<F>; *)
    Definition _Evaluations (F : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_matrix::dense::DenseMatrix")
        []
        [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ].
    
    (*
        fn dft_batch(&self, mut mat: RowMajorMatrix<F>) -> RowMajorMatrix<F> {
            let h = mat.height();
            let log_h = log2_strict_usize(h);
    
            // Compute twiddle factors, or take memoized ones if already available.
            let mut twiddles_ref_mut = self.twiddles.borrow_mut();
            let twiddles = twiddles_ref_mut.entry(log_h).or_insert_with(|| {
                let root = F::two_adic_generator(log_h);
                root.powers().take(1 << log_h).collect()
            });
    
            // DIT butterfly
            reverse_matrix_index_bits(&mut mat);
            for layer in 0..log_h {
                dit_layer(&mut mat.as_view_mut(), layer, twiddles);
            }
            mat
        }
    *)
    Definition dft_batch (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; mat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          M.read (|
            let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [ F ],
                    "height",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                |)
              |) in
            let~ log_h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                  [ M.read (| h |) ]
                |)
              |) in
            let~ twiddles_ref_mut :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::cell::RefMut")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          []
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::cell::RefMut")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        []
                        [
                          Ty.path "usize";
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::cell::RefCell")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          []
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    "borrow_mut",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "p3_dft::radix_2_dit::Radix2Dit",
                        "twiddles"
                      |)
                    |)
                  ]
                |)
              |) in
            let~ twiddles :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::entry::Entry")
                      []
                      [
                        Ty.path "usize";
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "or_insert_with",
                    [],
                    [
                      Ty.function
                        [ Ty.tuple [] ]
                        (Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::entry::Entry")
                        []
                        [
                          Ty.path "usize";
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          []
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "entry",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    []
                                    [
                                      Ty.path "usize";
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "core::cell::RefMut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                                      []
                                      [
                                        Ty.path "usize";
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ F; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                [],
                                [],
                                "deref_mut",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, twiddles_ref_mut |) ]
                            |)
                          |)
                        |);
                        M.read (| log_h |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "*")
                                  []
                                  [
                                    Ty.function
                                      [ Ty.tuple [] ]
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ])
                                  ],
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        let~ root : Ty.apply (Ty.path "*") [] [ F ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              F,
                                              M.get_trait_method (|
                                                "p3_field::field::TwoAdicField",
                                                F,
                                                [],
                                                [],
                                                "two_adic_generator",
                                                [],
                                                []
                                              |),
                                              [ M.read (| log_h |) ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::take::Take")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_field::field::Powers")
                                                    []
                                                    [ F ]
                                                ],
                                              [],
                                              [],
                                              "collect",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ F; Ty.path "alloc::alloc::Global" ]
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::take::Take")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_field::field::Powers")
                                                      []
                                                      [ F ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "p3_field::field::Powers")
                                                    []
                                                    [ F ],
                                                  [],
                                                  [],
                                                  "take",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "p3_field::field::Powers")
                                                      []
                                                      [ F ],
                                                    M.get_trait_method (|
                                                      "p3_field::field::PrimeCharacteristicRing",
                                                      F,
                                                      [],
                                                      [],
                                                      "powers",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, root |) ]
                                                  |);
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.shl,
                                                    [
                                                      Value.Integer IntegerKind.Usize 1;
                                                      M.read (| log_h |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (|
                    "p3_matrix::util::reverse_matrix_index_bits",
                    [],
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (| M.borrow (| Pointer.Kind.MutRef, mat |) |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_", M.read (| log_h |))
                          ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let layer := M.copy (| γ0_0 |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_function (|
                                              "p3_dft::radix_2_dit::dit_layer",
                                              [],
                                              [ F ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                                          []
                                                          [
                                                            F;
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [ Ty.apply (Ty.path "slice") [] [ F ]
                                                              ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_matrix::dense::DenseMatrix")
                                                            []
                                                            [
                                                              F;
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [ F; Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          "as_view_mut",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.borrow (| Pointer.Kind.MutRef, mat |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |);
                                              M.read (| layer |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ],
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| twiddles |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            mat
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "p3_dft::traits::TwoAdicSubgroupDft"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("Evaluations", InstanceField.Ty (_Evaluations F));
          ("dft_batch", InstanceField.Method (dft_batch F))
        ].
  End Impl_p3_dft_traits_TwoAdicSubgroupDft_where_p3_field_field_TwoAdicField_F_F_for_p3_dft_radix_2_dit_Radix2Dit_F.
  
  (*
  fn dit_layer<F: Field>(mat: &mut RowMajorMatrixViewMut<'_, F>, layer: usize, twiddles: &[F]) {
      let h = mat.height();
      let log_h = log2_strict_usize(h);
      let layer_rev = log_h - 1 - layer;
  
      let half_block_size = 1 << layer;
      let block_size = half_block_size * 2;
  
      mat.par_row_chunks_exact_mut(block_size)
          .for_each(|mut block_chunks| {
              let (mut hi_chunks, mut lo_chunks) = block_chunks.split_rows_mut(half_block_size);
              hi_chunks
                  .par_rows_mut()
                  .zip(lo_chunks.par_rows_mut())
                  .enumerate()
                  .for_each(|(ind, (hi_chunk, lo_chunk))| {
                      if ind == 0 {
                          TwiddleFreeButterfly.apply_to_rows(hi_chunk, lo_chunk)
                      } else {
                          DitButterfly(twiddles[ind << layer_rev]).apply_to_rows(hi_chunk, lo_chunk)
                      }
                  });
          });
  }
  *)
  Definition dit_layer (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ mat; layer; twiddles ] =>
      ltac:(M.monadic
        (let mat := M.alloc (| mat |) in
        let layer := M.alloc (| layer |) in
        let twiddles := M.alloc (| twiddles |) in
        M.read (|
          let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "p3_matrix::Matrix",
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [ F; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ],
                  [],
                  [ F ],
                  "height",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| mat |) |) |) ]
              |)
            |) in
          let~ log_h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                [ M.read (| h |) ]
              |)
            |) in
          let~ layer_rev : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.sub,
                [
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [ M.read (| log_h |); Value.Integer IntegerKind.Usize 1 ]
                  |);
                  M.read (| layer |)
                ]
              |)
            |) in
          let~ half_block_size : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.shl,
                [ Value.Integer IntegerKind.Usize 1; M.read (| layer |) ]
              |)
            |) in
          let~ block_size : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.mul,
                [ M.read (| half_block_size |); Value.Integer IntegerKind.Usize 2 ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.associated_unknown,
                  [],
                  [],
                  "for_each",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                F;
                                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.associated_unknown,
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [ F; Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ],
                      "par_row_chunks_exact_mut",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| mat |) |) |);
                      M.read (| block_size |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let block_chunks := M.copy (| γ |) in
                                    M.read (|
                                      M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    F;
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                                  []
                                                  [
                                                    F;
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                                ],
                                              "split_rows_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, block_chunks |);
                                              M.read (| half_block_size |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let hi_chunks := M.copy (| γ0_0 |) in
                                              let lo_chunks := M.copy (| γ0_1 |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            []
                                                            [
                                                              Ty.associated_unknown;
                                                              Ty.associated_unknown
                                                            ]
                                                        ],
                                                      [],
                                                      [],
                                                      "for_each",
                                                      [],
                                                      [
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [ F ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.tuple [])
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              []
                                                              [
                                                                Ty.associated_unknown;
                                                                Ty.associated_unknown
                                                              ]
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            []
                                                            [
                                                              Ty.associated_unknown;
                                                              Ty.associated_unknown
                                                            ],
                                                          [],
                                                          [],
                                                          "enumerate",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              []
                                                              [
                                                                Ty.associated_unknown;
                                                                Ty.associated_unknown
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.associated_unknown,
                                                              [],
                                                              [],
                                                              "zip",
                                                              [],
                                                              [ Ty.associated_unknown ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.associated_unknown,
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [ F ]
                                                                        ]
                                                                    ],
                                                                  "par_rows_mut",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    hi_chunks
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                Ty.associated_unknown,
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [ F ]
                                                                        ]
                                                                    ],
                                                                  "par_rows_mut",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    lo_chunks
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.closure
                                                        (fun γ =>
                                                          ltac:(M.monadic
                                                            match γ with
                                                            | [ α0 ] =>
                                                              ltac:(M.monadic
                                                                (M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&mut")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "slice")
                                                                                            []
                                                                                            [ F ]
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&mut")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "slice")
                                                                                            []
                                                                                            [ F ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        (Ty.tuple [])
                                                                    ],
                                                                  M.alloc (| α0 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            0
                                                                          |) in
                                                                        let γ0_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            1
                                                                          |) in
                                                                        let ind :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let γ1_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_1,
                                                                            0
                                                                          |) in
                                                                        let γ1_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_1,
                                                                            1
                                                                          |) in
                                                                        let hi_chunk :=
                                                                          M.copy (| γ1_0 |) in
                                                                        let lo_chunk :=
                                                                          M.copy (| γ1_1 |) in
                                                                        M.read (|
                                                                          M.match_operator (|
                                                                            Ty.apply
                                                                              (Ty.path "*")
                                                                              []
                                                                              [ Ty.tuple [] ],
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ :=
                                                                                    M.use
                                                                                      (M.alloc (|
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "bool",
                                                                                          BinOp.eq,
                                                                                          [
                                                                                            M.read (|
                                                                                              ind
                                                                                            |);
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              0
                                                                                          ]
                                                                                        |)
                                                                                      |)) in
                                                                                  let _ :=
                                                                                    is_constant_or_break_match (|
                                                                                      M.read (|
                                                                                        γ
                                                                                      |),
                                                                                      Value.Bool
                                                                                        true
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      Ty.tuple [],
                                                                                      M.get_trait_method (|
                                                                                        "p3_dft::butterflies::Butterfly",
                                                                                        Ty.path
                                                                                          "p3_dft::butterflies::TwiddleFreeButterfly",
                                                                                        [],
                                                                                        [ F ],
                                                                                        "apply_to_rows",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.alloc (|
                                                                                            Value.StructTuple
                                                                                              "p3_dft::butterflies::TwiddleFreeButterfly"
                                                                                              []
                                                                                          |)
                                                                                        |);
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              hi_chunk
                                                                                            |)
                                                                                          |)
                                                                                        |);
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              lo_chunk
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)));
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (M.alloc (|
                                                                                    M.call_closure (|
                                                                                      Ty.tuple [],
                                                                                      M.get_trait_method (|
                                                                                        "p3_dft::butterflies::Butterfly",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "p3_dft::butterflies::DitButterfly")
                                                                                          []
                                                                                          [ F ],
                                                                                        [],
                                                                                        [ F ],
                                                                                        "apply_to_rows",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.alloc (|
                                                                                            Value.StructTuple
                                                                                              "p3_dft::butterflies::DitButterfly"
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_array_field (|
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        twiddles
                                                                                                      |)
                                                                                                    |),
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "usize",
                                                                                                      BinOp.Wrap.shl,
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          ind
                                                                                                        |);
                                                                                                        M.read (|
                                                                                                          layer_rev
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                          |)
                                                                                        |);
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              hi_chunk
                                                                                            |)
                                                                                          |)
                                                                                        |);
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              lo_chunk
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)))
                                                                            ]
                                                                          |)
                                                                        |)))
                                                                  ]
                                                                |)))
                                                            | _ =>
                                                              M.impossible
                                                                "wrong number of arguments"
                                                            end))
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_dit_layer :
    M.IsFunction.C "p3_dft::radix_2_dit::dit_layer" dit_layer.
  Admitted.
  Global Typeclasses Opaque dit_layer.
End radix_2_dit.
