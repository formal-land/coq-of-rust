(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module traits.
  (* Trait *)
  Module TwoAdicSubgroupDft.
    Definition dft (F Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; vec ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let vec := M.alloc (| vec |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.associated_in_trait
                      "p3_dft::traits::TwoAdicSubgroupDft"
                      []
                      [ F ]
                      Self
                      "Evaluations",
                    [],
                    [ F ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_dft::traits::TwoAdicSubgroupDft"
                        []
                        [ F ]
                        Self
                        "Evaluations",
                      M.get_trait_method (|
                        "p3_dft::traits::TwoAdicSubgroupDft",
                        Self,
                        [],
                        [ F ],
                        "dft_batch",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ],
                            "new_col",
                            [],
                            []
                          |),
                          [ M.read (| vec |) ]
                        |)
                      ]
                    |)
                  ]
                |)
              |),
              "p3_matrix::dense::DenseMatrix",
              "values"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_dft :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_dft::traits::TwoAdicSubgroupDft" "dft" (dft F).
    Definition coset_dft
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; vec; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let vec := M.alloc (| vec |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.associated_in_trait
                      "p3_dft::traits::TwoAdicSubgroupDft"
                      []
                      [ F ]
                      Self
                      "Evaluations",
                    [],
                    [ F ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_dft::traits::TwoAdicSubgroupDft"
                        []
                        [ F ]
                        Self
                        "Evaluations",
                      M.get_trait_method (|
                        "p3_dft::traits::TwoAdicSubgroupDft",
                        Self,
                        [],
                        [ F ],
                        "coset_dft_batch",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ],
                            "new_col",
                            [],
                            []
                          |),
                          [ M.read (| vec |) ]
                        |);
                        M.read (| shift |)
                      ]
                    |)
                  ]
                |)
              |),
              "p3_matrix::dense::DenseMatrix",
              "values"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_coset_dft :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_dft::traits::TwoAdicSubgroupDft" "coset_dft" (coset_dft F).
    Definition coset_dft_batch
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; mat; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (| "p3_dft::util::coset_shift_cols", [], [ F ] |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (| M.borrow (| Pointer.Kind.MutRef, mat |) |)
                    |);
                    M.read (| shift |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_dft::traits::TwoAdicSubgroupDft"
                  []
                  [ F ]
                  Self
                  "Evaluations",
                M.get_trait_method (|
                  "p3_dft::traits::TwoAdicSubgroupDft",
                  Self,
                  [],
                  [ F ],
                  "dft_batch",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |); M.read (| mat |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_coset_dft_batch :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_dft::traits::TwoAdicSubgroupDft" "coset_dft_batch" (coset_dft_batch F).
    Definition idft (F Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; vec ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let vec := M.alloc (| vec |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_dft::traits::TwoAdicSubgroupDft",
                    Self,
                    [],
                    [ F ],
                    "idft_batch",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        "new",
                        [],
                        []
                      |),
                      [ M.read (| vec |); Value.Integer IntegerKind.Usize 1 ]
                    |)
                  ]
                |)
              |),
              "p3_matrix::dense::DenseMatrix",
              "values"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_idft :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_dft::traits::TwoAdicSubgroupDft" "idft" (idft F).
    Definition idft_batch
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; mat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          M.read (|
            let~ dft :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.associated_in_trait
                      "p3_dft::traits::TwoAdicSubgroupDft"
                      []
                      [ F ]
                      Self
                      "Evaluations",
                    [],
                    [ F ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_dft::traits::TwoAdicSubgroupDft"
                        []
                        [ F ]
                        Self
                        "Evaluations",
                      M.get_trait_method (|
                        "p3_dft::traits::TwoAdicSubgroupDft",
                        Self,
                        [],
                        [ F ],
                        "dft_batch",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.read (| mat |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [ F ],
                    "height",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, dft |) ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (|
                    "p3_dft::util::divide_by_height",
                    [],
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (| M.borrow (| Pointer.Kind.MutRef, dft |) |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", Value.Integer IntegerKind.Usize 1);
                            ("end_",
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.div,
                                [ M.read (| h |); Value.Integer IntegerKind.Usize 2 ]
                              |))
                          ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let row := M.copy (| γ0_0 |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_function (|
                                              "p3_matrix::util::swap_rows",
                                              [],
                                              [ F ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, dft |)
                                                |)
                                              |);
                                              M.read (| row |);
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.sub,
                                                [ M.read (| h |); M.read (| row |) ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            dft
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_idft_batch :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_dft::traits::TwoAdicSubgroupDft" "idft_batch" (idft_batch F).
    Definition coset_idft
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; vec; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let vec := M.alloc (| vec |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_dft::traits::TwoAdicSubgroupDft",
                    Self,
                    [],
                    [ F ],
                    "coset_idft_batch",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        "new",
                        [],
                        []
                      |),
                      [ M.read (| vec |); Value.Integer IntegerKind.Usize 1 ]
                    |);
                    M.read (| shift |)
                  ]
                |)
              |),
              "p3_matrix::dense::DenseMatrix",
              "values"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_coset_idft :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_dft::traits::TwoAdicSubgroupDft" "coset_idft" (coset_idft F).
    Definition coset_idft_batch
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; mat; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.write (|
                  mat,
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    M.get_trait_method (|
                      "p3_dft::traits::TwoAdicSubgroupDft",
                      Self,
                      [],
                      [ F ],
                      "idft_batch",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| mat |)
                    ]
                  |)
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (| "p3_dft::util::coset_shift_cols", [], [ F ] |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (| M.borrow (| Pointer.Kind.MutRef, mat |) |)
                    |);
                    M.call_closure (|
                      F,
                      M.get_trait_method (|
                        "p3_field::field::Field",
                        F,
                        [],
                        [],
                        "inverse",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, shift |) ]
                    |)
                  ]
                |)
              |) in
            mat
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_coset_idft_batch :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "p3_dft::traits::TwoAdicSubgroupDft"
        "coset_idft_batch"
        (coset_idft_batch F).
    Definition lde (F Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; vec; added_bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let vec := M.alloc (| vec |) in
          let added_bits := M.alloc (| added_bits |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.associated_in_trait
                      "p3_dft::traits::TwoAdicSubgroupDft"
                      []
                      [ F ]
                      Self
                      "Evaluations",
                    [],
                    [ F ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_dft::traits::TwoAdicSubgroupDft"
                        []
                        [ F ]
                        Self
                        "Evaluations",
                      M.get_trait_method (|
                        "p3_dft::traits::TwoAdicSubgroupDft",
                        Self,
                        [],
                        [ F ],
                        "lde_batch",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| vec |); Value.Integer IntegerKind.Usize 1 ]
                        |);
                        M.read (| added_bits |)
                      ]
                    |)
                  ]
                |)
              |),
              "p3_matrix::dense::DenseMatrix",
              "values"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_lde :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_dft::traits::TwoAdicSubgroupDft" "lde" (lde F).
    Definition lde_batch
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; mat; added_bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          let added_bits := M.alloc (| added_bits |) in
          M.read (|
            let~ coeffs :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_dft::traits::TwoAdicSubgroupDft",
                    Self,
                    [],
                    [ F ],
                    "idft_batch",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.read (| mat |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    "resize",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        coeffs,
                        "p3_matrix::dense::DenseMatrix",
                        "values"
                      |)
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.shl,
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            "len",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                coeffs,
                                "p3_matrix::dense::DenseMatrix",
                                "values"
                              |)
                            |)
                          ]
                        |);
                        M.read (| added_bits |)
                      ]
                    |);
                    M.read (|
                      get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |)
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_dft::traits::TwoAdicSubgroupDft"
                  []
                  [ F ]
                  Self
                  "Evaluations",
                M.get_trait_method (|
                  "p3_dft::traits::TwoAdicSubgroupDft",
                  Self,
                  [],
                  [ F ],
                  "dft_batch",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                  M.read (| coeffs |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_lde_batch :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_dft::traits::TwoAdicSubgroupDft" "lde_batch" (lde_batch F).
    Definition coset_lde
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; vec; added_bits; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let vec := M.alloc (| vec |) in
          let added_bits := M.alloc (| added_bits |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.associated_in_trait
                      "p3_dft::traits::TwoAdicSubgroupDft"
                      []
                      [ F ]
                      Self
                      "Evaluations",
                    [],
                    [ F ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_dft::traits::TwoAdicSubgroupDft"
                        []
                        [ F ]
                        Self
                        "Evaluations",
                      M.get_trait_method (|
                        "p3_dft::traits::TwoAdicSubgroupDft",
                        Self,
                        [],
                        [ F ],
                        "coset_lde_batch",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| vec |); Value.Integer IntegerKind.Usize 1 ]
                        |);
                        M.read (| added_bits |);
                        M.read (| shift |)
                      ]
                    |)
                  ]
                |)
              |),
              "p3_matrix::dense::DenseMatrix",
              "values"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_coset_lde :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_dft::traits::TwoAdicSubgroupDft" "coset_lde" (coset_lde F).
    Definition coset_lde_batch
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; mat; added_bits; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          let added_bits := M.alloc (| added_bits |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            let~ coeffs :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_dft::traits::TwoAdicSubgroupDft",
                    Self,
                    [],
                    [ F ],
                    "idft_batch",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.read (| mat |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    "resize",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        coeffs,
                        "p3_matrix::dense::DenseMatrix",
                        "values"
                      |)
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                        "unwrap",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                          M.get_associated_function (| Ty.path "usize", "checked_shl", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ],
                                "len",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    coeffs,
                                    "p3_matrix::dense::DenseMatrix",
                                    "values"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                                "unwrap",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                                  M.get_trait_method (|
                                    "core::convert::TryInto",
                                    Ty.path "usize",
                                    [],
                                    [ Ty.path "u32" ],
                                    "try_into",
                                    [],
                                    []
                                  |),
                                  [ M.read (| added_bits |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.read (|
                      get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", F |)
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.associated_in_trait
                  "p3_dft::traits::TwoAdicSubgroupDft"
                  []
                  [ F ]
                  Self
                  "Evaluations",
                M.get_trait_method (|
                  "p3_dft::traits::TwoAdicSubgroupDft",
                  Self,
                  [],
                  [ F ],
                  "coset_dft_batch",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                  M.read (| coeffs |);
                  M.read (| shift |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_coset_lde_batch :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_dft::traits::TwoAdicSubgroupDft" "coset_lde_batch" (coset_lde_batch F).
    Definition dft_algebra
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ V ], [ self; vec ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let vec := M.alloc (| vec |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      V;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_dft::traits::TwoAdicSubgroupDft",
                    Self,
                    [],
                    [ F ],
                    "dft_algebra_batch",
                    [],
                    [ V ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          V;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ V; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            V;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ V; Ty.path "alloc::alloc::Global" ]
                          ],
                        "new_col",
                        [],
                        []
                      |),
                      [ M.read (| vec |) ]
                    |)
                  ]
                |)
              |),
              "p3_matrix::dense::DenseMatrix",
              "values"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_dft_algebra :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_dft::traits::TwoAdicSubgroupDft" "dft_algebra" (dft_algebra F).
    Definition dft_algebra_batch
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ V ], [ self; mat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          M.read (|
            let~ init_width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        V;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ V; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [ V ],
                    "width",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                |)
              |) in
            let~ base_mat :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "p3_field::field::BasedVectorSpace",
                        V,
                        [],
                        [ F ],
                        "flatten_to_base",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            mat,
                            "p3_matrix::dense::DenseMatrix",
                            "values"
                          |)
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [
                        M.read (| init_width |);
                        M.read (|
                          get_constant (|
                            "p3_field::field::BasedVectorSpace::DIMENSION",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ base_dft_output :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.associated_in_trait
                      "p3_dft::traits::TwoAdicSubgroupDft"
                      []
                      [ F ]
                      Self
                      "Evaluations",
                    [],
                    [ F ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_dft::traits::TwoAdicSubgroupDft"
                        []
                        [ F ]
                        Self
                        "Evaluations",
                      M.get_trait_method (|
                        "p3_dft::traits::TwoAdicSubgroupDft",
                        Self,
                        [],
                        [ F ],
                        "dft_batch",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.read (| base_mat |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ V; Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      V;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                    ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "p3_field::field::BasedVectorSpace",
                      V,
                      [],
                      [ F ],
                      "reconstitute_from_base",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          base_dft_output,
                          "p3_matrix::dense::DenseMatrix",
                          "values"
                        |)
                      |)
                    ]
                  |);
                  M.read (| init_width |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_dft_algebra_batch :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "p3_dft::traits::TwoAdicSubgroupDft"
        "dft_algebra_batch"
        (dft_algebra_batch F).
    Definition coset_dft_algebra
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ V ], [ self; vec; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let vec := M.alloc (| vec |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      V;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        V;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ V; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [ V ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          V;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ V; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_trait_method (|
                        "p3_dft::traits::TwoAdicSubgroupDft",
                        Self,
                        [],
                        [ F ],
                        "coset_dft_algebra_batch",
                        [],
                        [ V ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              V;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ V; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                V;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ V; Ty.path "alloc::alloc::Global" ]
                              ],
                            "new_col",
                            [],
                            []
                          |),
                          [ M.read (| vec |) ]
                        |);
                        M.read (| shift |)
                      ]
                    |)
                  ]
                |)
              |),
              "p3_matrix::dense::DenseMatrix",
              "values"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_coset_dft_algebra :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "p3_dft::traits::TwoAdicSubgroupDft"
        "coset_dft_algebra"
        (coset_dft_algebra F).
    Definition coset_dft_algebra_batch
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ V ], [ self; mat; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            let~ init_width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        V;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ V; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [ V ],
                    "width",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                |)
              |) in
            let~ base_mat :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "p3_field::field::BasedVectorSpace",
                        V,
                        [],
                        [ F ],
                        "flatten_to_base",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            mat,
                            "p3_matrix::dense::DenseMatrix",
                            "values"
                          |)
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [
                        M.read (| init_width |);
                        M.read (|
                          get_constant (|
                            "p3_field::field::BasedVectorSpace::DIMENSION",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ base_dft_output :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.associated_in_trait
                      "p3_dft::traits::TwoAdicSubgroupDft"
                      []
                      [ F ]
                      Self
                      "Evaluations",
                    [],
                    [ F ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_dft::traits::TwoAdicSubgroupDft"
                        []
                        [ F ]
                        Self
                        "Evaluations",
                      M.get_trait_method (|
                        "p3_dft::traits::TwoAdicSubgroupDft",
                        Self,
                        [],
                        [ F ],
                        "coset_dft_batch",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.read (| base_mat |);
                        M.read (| shift |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ V; Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      V;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                    ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "p3_field::field::BasedVectorSpace",
                      V,
                      [],
                      [ F ],
                      "reconstitute_from_base",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          base_dft_output,
                          "p3_matrix::dense::DenseMatrix",
                          "values"
                        |)
                      |)
                    ]
                  |);
                  M.read (| init_width |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_coset_dft_algebra_batch :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "p3_dft::traits::TwoAdicSubgroupDft"
        "coset_dft_algebra_batch"
        (coset_dft_algebra_batch F).
    Definition idft_algebra
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ V ], [ self; vec ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let vec := M.alloc (| vec |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      V;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_dft::traits::TwoAdicSubgroupDft",
                    Self,
                    [],
                    [ F ],
                    "idft_algebra_batch",
                    [],
                    [ V ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          V;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ V; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            V;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ V; Ty.path "alloc::alloc::Global" ]
                          ],
                        "new",
                        [],
                        []
                      |),
                      [ M.read (| vec |); Value.Integer IntegerKind.Usize 1 ]
                    |)
                  ]
                |)
              |),
              "p3_matrix::dense::DenseMatrix",
              "values"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_idft_algebra :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_dft::traits::TwoAdicSubgroupDft" "idft_algebra" (idft_algebra F).
    Definition idft_algebra_batch
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ V ], [ self; mat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          M.read (|
            let~ init_width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        V;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ V; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [ V ],
                    "width",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                |)
              |) in
            let~ base_mat :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "p3_field::field::BasedVectorSpace",
                        V,
                        [],
                        [ F ],
                        "flatten_to_base",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            mat,
                            "p3_matrix::dense::DenseMatrix",
                            "values"
                          |)
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [
                        M.read (| init_width |);
                        M.read (|
                          get_constant (|
                            "p3_field::field::BasedVectorSpace::DIMENSION",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ base_dft_output :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_dft::traits::TwoAdicSubgroupDft",
                    Self,
                    [],
                    [ F ],
                    "idft_batch",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.read (| base_mat |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ V; Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      V;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                    ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "p3_field::field::BasedVectorSpace",
                      V,
                      [],
                      [ F ],
                      "reconstitute_from_base",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          base_dft_output,
                          "p3_matrix::dense::DenseMatrix",
                          "values"
                        |)
                      |)
                    ]
                  |);
                  M.read (| init_width |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_idft_algebra_batch :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "p3_dft::traits::TwoAdicSubgroupDft"
        "idft_algebra_batch"
        (idft_algebra_batch F).
    Definition coset_idft_algebra
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ V ], [ self; vec; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let vec := M.alloc (| vec |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      V;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_dft::traits::TwoAdicSubgroupDft",
                    Self,
                    [],
                    [ F ],
                    "coset_idft_algebra_batch",
                    [],
                    [ V ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          V;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ V; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            V;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ V; Ty.path "alloc::alloc::Global" ]
                          ],
                        "new",
                        [],
                        []
                      |),
                      [ M.read (| vec |); Value.Integer IntegerKind.Usize 1 ]
                    |);
                    M.read (| shift |)
                  ]
                |)
              |),
              "p3_matrix::dense::DenseMatrix",
              "values"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_coset_idft_algebra :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "p3_dft::traits::TwoAdicSubgroupDft"
        "coset_idft_algebra"
        (coset_idft_algebra F).
    Definition coset_idft_algebra_batch
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ V ], [ self; mat; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            let~ init_width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        V;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ V; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [ V ],
                    "width",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                |)
              |) in
            let~ base_mat :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "p3_field::field::BasedVectorSpace",
                        V,
                        [],
                        [ F ],
                        "flatten_to_base",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            mat,
                            "p3_matrix::dense::DenseMatrix",
                            "values"
                          |)
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [
                        M.read (| init_width |);
                        M.read (|
                          get_constant (|
                            "p3_field::field::BasedVectorSpace::DIMENSION",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ base_dft_output :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_dft::traits::TwoAdicSubgroupDft",
                    Self,
                    [],
                    [ F ],
                    "coset_idft_batch",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.read (| base_mat |);
                    M.read (| shift |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ V; Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      V;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                    ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "p3_field::field::BasedVectorSpace",
                      V,
                      [],
                      [ F ],
                      "reconstitute_from_base",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          base_dft_output,
                          "p3_matrix::dense::DenseMatrix",
                          "values"
                        |)
                      |)
                    ]
                  |);
                  M.read (| init_width |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_coset_idft_algebra_batch :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "p3_dft::traits::TwoAdicSubgroupDft"
        "coset_idft_algebra_batch"
        (coset_idft_algebra_batch F).
    Definition lde_algebra
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ V ], [ self; vec; added_bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let vec := M.alloc (| vec |) in
          let added_bits := M.alloc (| added_bits |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      V;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        V;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ V; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [ V ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          V;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ V; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_trait_method (|
                        "p3_dft::traits::TwoAdicSubgroupDft",
                        Self,
                        [],
                        [ F ],
                        "lde_algebra_batch",
                        [],
                        [ V ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              V;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ V; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                V;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ V; Ty.path "alloc::alloc::Global" ]
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| vec |); Value.Integer IntegerKind.Usize 1 ]
                        |);
                        M.read (| added_bits |)
                      ]
                    |)
                  ]
                |)
              |),
              "p3_matrix::dense::DenseMatrix",
              "values"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_lde_algebra :
      forall (F : Ty.t),
      M.IsProvidedMethod "p3_dft::traits::TwoAdicSubgroupDft" "lde_algebra" (lde_algebra F).
    Definition lde_algebra_batch
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ V ], [ self; mat; added_bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          let added_bits := M.alloc (| added_bits |) in
          M.read (|
            let~ init_width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        V;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ V; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [ V ],
                    "width",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                |)
              |) in
            let~ base_mat :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "p3_field::field::BasedVectorSpace",
                        V,
                        [],
                        [ F ],
                        "flatten_to_base",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            mat,
                            "p3_matrix::dense::DenseMatrix",
                            "values"
                          |)
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [
                        M.read (| init_width |);
                        M.read (|
                          get_constant (|
                            "p3_field::field::BasedVectorSpace::DIMENSION",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ base_dft_output :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.associated_in_trait
                      "p3_dft::traits::TwoAdicSubgroupDft"
                      []
                      [ F ]
                      Self
                      "Evaluations",
                    [],
                    [ F ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_dft::traits::TwoAdicSubgroupDft"
                        []
                        [ F ]
                        Self
                        "Evaluations",
                      M.get_trait_method (|
                        "p3_dft::traits::TwoAdicSubgroupDft",
                        Self,
                        [],
                        [ F ],
                        "lde_batch",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.read (| base_mat |);
                        M.read (| added_bits |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ V; Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      V;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                    ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "p3_field::field::BasedVectorSpace",
                      V,
                      [],
                      [ F ],
                      "reconstitute_from_base",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          base_dft_output,
                          "p3_matrix::dense::DenseMatrix",
                          "values"
                        |)
                      |)
                    ]
                  |);
                  M.read (| init_width |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_lde_algebra_batch :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "p3_dft::traits::TwoAdicSubgroupDft"
        "lde_algebra_batch"
        (lde_algebra_batch F).
    Definition coset_lde_algebra
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ V ], [ self; vec; added_bits; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let vec := M.alloc (| vec |) in
          let added_bits := M.alloc (| added_bits |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      V;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        V;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ V; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [ V ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          V;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ V; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_trait_method (|
                        "p3_dft::traits::TwoAdicSubgroupDft",
                        Self,
                        [],
                        [ F ],
                        "coset_lde_algebra_batch",
                        [],
                        [ V ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              V;
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ V; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                V;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ V; Ty.path "alloc::alloc::Global" ]
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| vec |); Value.Integer IntegerKind.Usize 1 ]
                        |);
                        M.read (| added_bits |);
                        M.read (| shift |)
                      ]
                    |)
                  ]
                |)
              |),
              "p3_matrix::dense::DenseMatrix",
              "values"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_coset_lde_algebra :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "p3_dft::traits::TwoAdicSubgroupDft"
        "coset_lde_algebra"
        (coset_lde_algebra F).
    Definition coset_lde_algebra_batch
        (F Self : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ V ], [ self; mat; added_bits; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          let added_bits := M.alloc (| added_bits |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            let~ init_width : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        V;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ V; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [ V ],
                    "width",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                |)
              |) in
            let~ base_mat :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "p3_field::field::BasedVectorSpace",
                        V,
                        [],
                        [ F ],
                        "flatten_to_base",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            mat,
                            "p3_matrix::dense::DenseMatrix",
                            "values"
                          |)
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.mul,
                      [
                        M.read (| init_width |);
                        M.read (|
                          get_constant (|
                            "p3_field::field::BasedVectorSpace::DIMENSION",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let~ base_dft_output :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.get_trait_method (|
                    "p3_matrix::Matrix",
                    Ty.associated_in_trait
                      "p3_dft::traits::TwoAdicSubgroupDft"
                      []
                      [ F ]
                      Self
                      "Evaluations",
                    [],
                    [ F ],
                    "to_row_major_matrix",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_dft::traits::TwoAdicSubgroupDft"
                        []
                        [ F ]
                        Self
                        "Evaluations",
                      M.get_trait_method (|
                        "p3_dft::traits::TwoAdicSubgroupDft",
                        Self,
                        [],
                        [ F ],
                        "coset_lde_batch",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.read (| base_mat |);
                        M.read (| added_bits |);
                        M.read (| shift |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ V; Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      V;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ]
                    ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ V; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "p3_field::field::BasedVectorSpace",
                      V,
                      [],
                      [ F ],
                      "reconstitute_from_base",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          base_dft_output,
                          "p3_matrix::dense::DenseMatrix",
                          "values"
                        |)
                      |)
                    ]
                  |);
                  M.read (| init_width |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom ProvidedMethod_coset_lde_algebra_batch :
      forall (F : Ty.t),
      M.IsProvidedMethod
        "p3_dft::traits::TwoAdicSubgroupDft"
        "coset_lde_algebra_batch"
        (coset_lde_algebra_batch F).
  End TwoAdicSubgroupDft.
End traits.
