(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module airs.
  (*
  Enum ProofObjective
  {
    const_params :=
      [ "WIDTH"; "SBOX_DEGREE"; "SBOX_REGISTERS"; "HALF_FULL_ROUNDS"; "PARTIAL_ROUNDS"; "VECTOR_LEN"
      ];
    ty_params := [ "F"; "LinearLayers" ];
    variants :=
      [
        {
          name := "Blake3";
          item := StructTuple [ Ty.path "p3_blake3_air::air::Blake3Air" ];
        };
        {
          name := "Keccak";
          item := StructTuple [ Ty.path "p3_keccak_air::air::KeccakAir" ];
        };
        {
          name := "Poseidon2";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Air")
                  [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS; VECTOR_LEN
                  ]
                  [ F; LinearLayers ]
              ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_ProofObjective_Blake3 :
    M.IsDiscriminant "p3_examples::airs::ProofObjective::Blake3" 0.
  Axiom IsDiscriminant_ProofObjective_Keccak :
    M.IsDiscriminant "p3_examples::airs::ProofObjective::Keccak" 1.
  Axiom IsDiscriminant_ProofObjective_Poseidon2 :
    M.IsDiscriminant "p3_examples::airs::ProofObjective::Poseidon2" 2.
  
  (* Trait *)
  (* Empty module 'ExampleHashAir' *)
  
  Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_where_core_marker_Sync_LinearLayers_F_for_p3_examples_airs_ProofObjective_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_F_LinearLayers.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F LinearLayers : Ty.t)
        : Ty.t :=
      Ty.apply
        (Ty.path "p3_examples::airs::ProofObjective")
        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS; VECTOR_LEN ]
        [ F; LinearLayers ].
    
    (*
        fn width(&self) -> usize {
            match self {
                Self::Blake3(b3_air) => <Blake3Air as BaseAir<F>>::width(b3_air),
                Self::Poseidon2(p2_air) => p2_air.width(),
                Self::Keccak(k_air) => <KeccakAir as BaseAir<F>>::width(k_air),
            }
        }
    *)
    Definition width
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          LinearLayers in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "usize" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::airs::ProofObjective::Blake3",
                        0
                      |) in
                    let b3_air := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "p3_air::air::BaseAir",
                          Ty.path "p3_blake3_air::air::Blake3Air",
                          [],
                          [ F ],
                          "width",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| b3_air |) |) |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::airs::ProofObjective::Poseidon2",
                        0
                      |) in
                    let p2_air := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "p3_air::air::BaseAir",
                          Ty.apply
                            (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Air")
                            [
                              WIDTH;
                              SBOX_DEGREE;
                              SBOX_REGISTERS;
                              HALF_FULL_ROUNDS;
                              PARTIAL_ROUNDS;
                              VECTOR_LEN
                            ]
                            [ F; LinearLayers ],
                          [],
                          [ F ],
                          "width",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| p2_air |) |) |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::airs::ProofObjective::Keccak",
                        0
                      |) in
                    let k_air := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "p3_air::air::BaseAir",
                          Ty.path "p3_keccak_air::air::KeccakAir",
                          [],
                          [ F ],
                          "width",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| k_air |) |) |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F LinearLayers : Ty.t),
      M.IsTraitInstance
        "p3_air::air::BaseAir"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          LinearLayers)
        (* Instance *)
        [
          ("width",
            InstanceField.Method
              (width
                WIDTH
                SBOX_DEGREE
                SBOX_REGISTERS
                HALF_FULL_ROUNDS
                PARTIAL_ROUNDS
                VECTOR_LEN
                F
                LinearLayers))
        ].
  End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_where_core_marker_Sync_LinearLayers_F_for_p3_examples_airs_ProofObjective_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_F_LinearLayers.
  
  Module Impl_p3_air_air_Air_where_p3_air_air_AirBuilder_AB_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_for_p3_examples_airs_ProofObjective_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_associated_in_trait_p3_air_air_AirBuilder___AB_F_LinearLayers.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (AB LinearLayers : Ty.t)
        : Ty.t :=
      Ty.apply
        (Ty.path "p3_examples::airs::ProofObjective")
        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS; VECTOR_LEN ]
        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"; LinearLayers ].
    
    (*
        fn eval(&self, builder: &mut AB) {
            match self {
                Self::Blake3(b3_air) => b3_air.eval(builder),
                Self::Poseidon2(p2_air) => p2_air.eval(builder),
                Self::Keccak(k_air) => k_air.eval(builder),
            }
        }
    *)
    Definition eval
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (AB LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          AB
          LinearLayers in
      match ε, τ, α with
      | [], [], [ self; builder ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let builder := M.alloc (| builder |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::airs::ProofObjective::Blake3",
                        0
                      |) in
                    let b3_air := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "p3_air::air::Air",
                          Ty.path "p3_blake3_air::air::Blake3Air",
                          [],
                          [ AB ],
                          "eval",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| b3_air |) |) |);
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::airs::ProofObjective::Poseidon2",
                        0
                      |) in
                    let p2_air := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "p3_air::air::Air",
                          Ty.apply
                            (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Air")
                            [
                              WIDTH;
                              SBOX_DEGREE;
                              SBOX_REGISTERS;
                              HALF_FULL_ROUNDS;
                              PARTIAL_ROUNDS;
                              VECTOR_LEN
                            ]
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                              LinearLayers
                            ],
                          [],
                          [ AB ],
                          "eval",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| p2_air |) |) |);
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::airs::ProofObjective::Keccak",
                        0
                      |) in
                    let k_air := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "p3_air::air::Air",
                          Ty.path "p3_keccak_air::air::KeccakAir",
                          [],
                          [ AB ],
                          "eval",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| k_air |) |) |);
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (AB LinearLayers : Ty.t),
      M.IsTraitInstance
        "p3_air::air::Air"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ AB ]
        (Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          AB
          LinearLayers)
        (* Instance *)
        [
          ("eval",
            InstanceField.Method
              (eval
                WIDTH
                SBOX_DEGREE
                SBOX_REGISTERS
                HALF_FULL_ROUNDS
                PARTIAL_ROUNDS
                VECTOR_LEN
                AB
                LinearLayers))
        ].
  End Impl_p3_air_air_Air_where_p3_air_air_AirBuilder_AB_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_for_p3_examples_airs_ProofObjective_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_associated_in_trait_p3_air_air_AirBuilder___AB_F_LinearLayers.
  
  Module Impl_p3_examples_airs_ExampleHashAir_where_p3_field_field_PrimeField64_F_where_p3_commit_domain_PolynomialSpace_Domain_where_p3_field_field_ExtensionField_EF_F_where_p3_challenger_FieldChallenger_Challenger_F_where_p3_commit_pcs_Pcs_Pcs_EF_Challenger_where_p3_uni_stark_config_StarkGenericConfig_SC_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_F_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_p3_uni_stark_symbolic_expression_SymbolicExpression_F_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_associated_in_trait_p3_field_field_Field___F_Packing_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_EF_F_SC_for_p3_examples_airs_ProofObjective_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_F_LinearLayers.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F Domain EF Challenger Pcs SC LinearLayers : Ty.t)
        : Ty.t :=
      Ty.apply
        (Ty.path "p3_examples::airs::ProofObjective")
        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS; VECTOR_LEN ]
        [ F; LinearLayers ].
    
    (*
        fn generate_trace_rows(
            &self,
            num_hashes: usize,
            extra_capacity_bits: usize,
        ) -> RowMajorMatrix<F>
        where
            StandardUniform: Distribution<F>,
        {
            match self {
                Self::Blake3(b3_air) => b3_air.generate_trace_rows(num_hashes, extra_capacity_bits),
                Self::Poseidon2(p2_air) => {
                    p2_air.generate_vectorized_trace_rows(num_hashes, extra_capacity_bits)
                }
                Self::Keccak(k_air) => k_air.generate_trace_rows(num_hashes, extra_capacity_bits),
            }
        }
    *)
    Definition generate_trace_rows
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F Domain EF Challenger Pcs SC LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          Domain
          EF
          Challenger
          Pcs
          SC
          LinearLayers in
      match ε, τ, α with
      | [], [], [ self; num_hashes; extra_capacity_bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let num_hashes := M.alloc (| num_hashes |) in
          let extra_capacity_bits := M.alloc (| extra_capacity_bits |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ]
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::airs::ProofObjective::Blake3",
                        0
                      |) in
                    let b3_air := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.get_associated_function (|
                          Ty.path "p3_blake3_air::air::Blake3Air",
                          "generate_trace_rows",
                          [],
                          [ F ]
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| b3_air |) |) |);
                          M.read (| num_hashes |);
                          M.read (| extra_capacity_bits |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::airs::ProofObjective::Poseidon2",
                        0
                      |) in
                    let p2_air := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Air")
                            [
                              WIDTH;
                              SBOX_DEGREE;
                              SBOX_REGISTERS;
                              HALF_FULL_ROUNDS;
                              PARTIAL_ROUNDS;
                              VECTOR_LEN
                            ]
                            [ F; LinearLayers ],
                          "generate_vectorized_trace_rows",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| p2_air |) |) |);
                          M.read (| num_hashes |);
                          M.read (| extra_capacity_bits |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::airs::ProofObjective::Keccak",
                        0
                      |) in
                    let k_air := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.get_associated_function (|
                          Ty.path "p3_keccak_air::air::KeccakAir",
                          "generate_trace_rows",
                          [],
                          [ F ]
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| k_air |) |) |);
                          M.read (| num_hashes |);
                          M.read (| extra_capacity_bits |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F Domain EF Challenger Pcs SC LinearLayers : Ty.t),
      M.IsTraitInstance
        "p3_examples::airs::ExampleHashAir"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F; SC ]
        (Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          Domain
          EF
          Challenger
          Pcs
          SC
          LinearLayers)
        (* Instance *)
        [
          ("generate_trace_rows",
            InstanceField.Method
              (generate_trace_rows
                WIDTH
                SBOX_DEGREE
                SBOX_REGISTERS
                HALF_FULL_ROUNDS
                PARTIAL_ROUNDS
                VECTOR_LEN
                F
                Domain
                EF
                Challenger
                Pcs
                SC
                LinearLayers))
        ].
  End Impl_p3_examples_airs_ExampleHashAir_where_p3_field_field_PrimeField64_F_where_p3_commit_domain_PolynomialSpace_Domain_where_p3_field_field_ExtensionField_EF_F_where_p3_challenger_FieldChallenger_Challenger_F_where_p3_commit_pcs_Pcs_Pcs_EF_Challenger_where_p3_uni_stark_config_StarkGenericConfig_SC_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_F_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_p3_uni_stark_symbolic_expression_SymbolicExpression_F_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_associated_in_trait_p3_field_field_Field___F_Packing_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_EF_F_SC_for_p3_examples_airs_ProofObjective_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_F_LinearLayers.
  
  Module Impl_p3_examples_airs_ExampleHashAir_where_p3_field_field_PrimeField64_F_where_p3_commit_domain_PolynomialSpace_Domain_where_p3_field_field_ExtensionField_EF_F_where_p3_challenger_FieldChallenger_Challenger_F_where_p3_commit_pcs_Pcs_Pcs_EF_Challenger_where_p3_uni_stark_config_StarkGenericConfig_SC_F_SC_for_p3_blake3_air_air_Blake3Air.
    Definition Self (F Domain EF Challenger Pcs SC : Ty.t) : Ty.t :=
      Ty.path "p3_blake3_air::air::Blake3Air".
    
    (*
        fn generate_trace_rows(
            &self,
            num_hashes: usize,
            extra_capacity_bits: usize,
        ) -> RowMajorMatrix<F>
        where
            StandardUniform: Distribution<F>,
        {
            self.generate_trace_rows(num_hashes, extra_capacity_bits)
        }
    *)
    Definition generate_trace_rows
        (F Domain EF Challenger Pcs SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F Domain EF Challenger Pcs SC in
      match ε, τ, α with
      | [], [], [ self; num_hashes; extra_capacity_bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let num_hashes := M.alloc (| num_hashes |) in
          let extra_capacity_bits := M.alloc (| extra_capacity_bits |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ],
            M.get_associated_function (|
              Ty.path "p3_blake3_air::air::Blake3Air",
              "generate_trace_rows",
              [],
              [ F ]
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.read (| num_hashes |);
              M.read (| extra_capacity_bits |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Domain EF Challenger Pcs SC : Ty.t),
      M.IsTraitInstance
        "p3_examples::airs::ExampleHashAir"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F; SC ]
        (Self F Domain EF Challenger Pcs SC)
        (* Instance *)
        [
          ("generate_trace_rows",
            InstanceField.Method (generate_trace_rows F Domain EF Challenger Pcs SC))
        ].
  End Impl_p3_examples_airs_ExampleHashAir_where_p3_field_field_PrimeField64_F_where_p3_commit_domain_PolynomialSpace_Domain_where_p3_field_field_ExtensionField_EF_F_where_p3_challenger_FieldChallenger_Challenger_F_where_p3_commit_pcs_Pcs_Pcs_EF_Challenger_where_p3_uni_stark_config_StarkGenericConfig_SC_F_SC_for_p3_blake3_air_air_Blake3Air.
  
  Module Impl_p3_examples_airs_ExampleHashAir_where_p3_field_field_PrimeField64_F_where_p3_commit_domain_PolynomialSpace_Domain_where_p3_field_field_ExtensionField_EF_F_where_p3_challenger_FieldChallenger_Challenger_F_where_p3_commit_pcs_Pcs_Pcs_EF_Challenger_where_p3_uni_stark_config_StarkGenericConfig_SC_F_SC_for_p3_keccak_air_air_KeccakAir.
    Definition Self (F Domain EF Challenger Pcs SC : Ty.t) : Ty.t :=
      Ty.path "p3_keccak_air::air::KeccakAir".
    
    (*
        fn generate_trace_rows(
            &self,
            num_hashes: usize,
            extra_capacity_bits: usize,
        ) -> RowMajorMatrix<F>
        where
            StandardUniform: Distribution<F>,
        {
            self.generate_trace_rows(num_hashes, extra_capacity_bits)
        }
    *)
    Definition generate_trace_rows
        (F Domain EF Challenger Pcs SC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F Domain EF Challenger Pcs SC in
      match ε, τ, α with
      | [], [], [ self; num_hashes; extra_capacity_bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let num_hashes := M.alloc (| num_hashes |) in
          let extra_capacity_bits := M.alloc (| extra_capacity_bits |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ],
            M.get_associated_function (|
              Ty.path "p3_keccak_air::air::KeccakAir",
              "generate_trace_rows",
              [],
              [ F ]
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.read (| num_hashes |);
              M.read (| extra_capacity_bits |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F Domain EF Challenger Pcs SC : Ty.t),
      M.IsTraitInstance
        "p3_examples::airs::ExampleHashAir"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F; SC ]
        (Self F Domain EF Challenger Pcs SC)
        (* Instance *)
        [
          ("generate_trace_rows",
            InstanceField.Method (generate_trace_rows F Domain EF Challenger Pcs SC))
        ].
  End Impl_p3_examples_airs_ExampleHashAir_where_p3_field_field_PrimeField64_F_where_p3_commit_domain_PolynomialSpace_Domain_where_p3_field_field_ExtensionField_EF_F_where_p3_challenger_FieldChallenger_Challenger_F_where_p3_commit_pcs_Pcs_Pcs_EF_Challenger_where_p3_uni_stark_config_StarkGenericConfig_SC_F_SC_for_p3_keccak_air_air_KeccakAir.
  
  Module Impl_p3_examples_airs_ExampleHashAir_where_p3_field_field_PrimeField64_F_where_p3_commit_domain_PolynomialSpace_Domain_where_p3_field_field_ExtensionField_EF_F_where_p3_challenger_FieldChallenger_Challenger_F_where_p3_commit_pcs_Pcs_Pcs_EF_Challenger_where_p3_uni_stark_config_StarkGenericConfig_SC_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_F_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_p3_uni_stark_symbolic_expression_SymbolicExpression_F_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_associated_in_trait_p3_field_field_Field___F_Packing_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_EF_F_SC_for_p3_poseidon2_air_vectorized_VectorizedPoseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_F_LinearLayers.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F Domain EF Challenger Pcs SC LinearLayers : Ty.t)
        : Ty.t :=
      Ty.apply
        (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Air")
        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS; VECTOR_LEN ]
        [ F; LinearLayers ].
    
    (*
        fn generate_trace_rows(
            &self,
            num_hashes: usize,
            extra_capacity_bits: usize,
        ) -> RowMajorMatrix<F>
        where
            StandardUniform: Distribution<F>,
        {
            self.generate_vectorized_trace_rows(num_hashes, extra_capacity_bits)
        }
    *)
    Definition generate_trace_rows
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F Domain EF Challenger Pcs SC LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          Domain
          EF
          Challenger
          Pcs
          SC
          LinearLayers in
      match ε, τ, α with
      | [], [], [ self; num_hashes; extra_capacity_bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let num_hashes := M.alloc (| num_hashes |) in
          let extra_capacity_bits := M.alloc (| extra_capacity_bits |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "p3_poseidon2_air::vectorized::VectorizedPoseidon2Air")
                [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS; VECTOR_LEN ]
                [ F; LinearLayers ],
              "generate_vectorized_trace_rows",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.read (| num_hashes |);
              M.read (| extra_capacity_bits |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS VECTOR_LEN : Value.t)
        (F Domain EF Challenger Pcs SC LinearLayers : Ty.t),
      M.IsTraitInstance
        "p3_examples::airs::ExampleHashAir"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F; SC ]
        (Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          VECTOR_LEN
          F
          Domain
          EF
          Challenger
          Pcs
          SC
          LinearLayers)
        (* Instance *)
        [
          ("generate_trace_rows",
            InstanceField.Method
              (generate_trace_rows
                WIDTH
                SBOX_DEGREE
                SBOX_REGISTERS
                HALF_FULL_ROUNDS
                PARTIAL_ROUNDS
                VECTOR_LEN
                F
                Domain
                EF
                Challenger
                Pcs
                SC
                LinearLayers))
        ].
  End Impl_p3_examples_airs_ExampleHashAir_where_p3_field_field_PrimeField64_F_where_p3_commit_domain_PolynomialSpace_Domain_where_p3_field_field_ExtensionField_EF_F_where_p3_challenger_FieldChallenger_Challenger_F_where_p3_commit_pcs_Pcs_Pcs_EF_Challenger_where_p3_uni_stark_config_StarkGenericConfig_SC_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_F_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_p3_uni_stark_symbolic_expression_SymbolicExpression_F_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_associated_in_trait_p3_field_field_Field___F_Packing_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_EF_F_SC_for_p3_poseidon2_air_vectorized_VectorizedPoseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_VECTOR_LEN_F_LinearLayers.
  
  Module Impl_p3_examples_airs_ExampleHashAir_where_p3_field_field_PrimeField64_F_where_p3_commit_domain_PolynomialSpace_Domain_where_p3_field_field_ExtensionField_EF_F_where_p3_challenger_FieldChallenger_Challenger_F_where_p3_commit_pcs_Pcs_Pcs_EF_Challenger_where_p3_uni_stark_config_StarkGenericConfig_SC_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_F_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_p3_uni_stark_symbolic_expression_SymbolicExpression_F_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_associated_in_trait_p3_field_field_Field___F_Packing_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_EF_F_SC_for_p3_poseidon2_air_air_Poseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F_LinearLayers.
    Definition Self
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F Domain EF Challenger Pcs SC LinearLayers : Ty.t)
        : Ty.t :=
      Ty.apply
        (Ty.path "p3_poseidon2_air::air::Poseidon2Air")
        [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
        [ F; LinearLayers ].
    
    (*
        fn generate_trace_rows(
            &self,
            num_hashes: usize,
            extra_capacity_bits: usize,
        ) -> RowMajorMatrix<F>
        where
            StandardUniform: Distribution<F>,
        {
            self.generate_trace_rows(num_hashes, extra_capacity_bits)
        }
    *)
    Definition generate_trace_rows
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F Domain EF Challenger Pcs SC LinearLayers : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t :=
        Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          F
          Domain
          EF
          Challenger
          Pcs
          SC
          LinearLayers in
      match ε, τ, α with
      | [], [], [ self; num_hashes; extra_capacity_bits ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let num_hashes := M.alloc (| num_hashes |) in
          let extra_capacity_bits := M.alloc (| extra_capacity_bits |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "p3_matrix::dense::DenseMatrix")
              []
              [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "p3_poseidon2_air::air::Poseidon2Air")
                [ WIDTH; SBOX_DEGREE; SBOX_REGISTERS; HALF_FULL_ROUNDS; PARTIAL_ROUNDS ]
                [ F; LinearLayers ],
              "generate_trace_rows",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.read (| num_hashes |);
              M.read (| extra_capacity_bits |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall
        (WIDTH SBOX_DEGREE SBOX_REGISTERS HALF_FULL_ROUNDS PARTIAL_ROUNDS : Value.t)
        (F Domain EF Challenger Pcs SC LinearLayers : Ty.t),
      M.IsTraitInstance
        "p3_examples::airs::ExampleHashAir"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F; SC ]
        (Self
          WIDTH
          SBOX_DEGREE
          SBOX_REGISTERS
          HALF_FULL_ROUNDS
          PARTIAL_ROUNDS
          F
          Domain
          EF
          Challenger
          Pcs
          SC
          LinearLayers)
        (* Instance *)
        [
          ("generate_trace_rows",
            InstanceField.Method
              (generate_trace_rows
                WIDTH
                SBOX_DEGREE
                SBOX_REGISTERS
                HALF_FULL_ROUNDS
                PARTIAL_ROUNDS
                F
                Domain
                EF
                Challenger
                Pcs
                SC
                LinearLayers))
        ].
  End Impl_p3_examples_airs_ExampleHashAir_where_p3_field_field_PrimeField64_F_where_p3_commit_domain_PolynomialSpace_Domain_where_p3_field_field_ExtensionField_EF_F_where_p3_challenger_FieldChallenger_Challenger_F_where_p3_commit_pcs_Pcs_Pcs_EF_Challenger_where_p3_uni_stark_config_StarkGenericConfig_SC_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_F_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_p3_uni_stark_symbolic_expression_SymbolicExpression_F_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_associated_in_trait_p3_field_field_Field___F_Packing_where_p3_poseidon2_generic_GenericPoseidon2LinearLayers_LinearLayers_EF_F_SC_for_p3_poseidon2_air_air_Poseidon2Air_WIDTH_SBOX_DEGREE_SBOX_REGISTERS_HALF_FULL_ROUNDS_PARTIAL_ROUNDS_F_LinearLayers.
End airs.
