(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module dfts.
  (*
  Enum DftChoice
  {
    const_params := [];
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "Recursive";
          item := StructTuple [ Ty.apply (Ty.path "p3_monty_31::dft::RecursiveDft") [] [ F ] ];
        };
        {
          name := "Parallel";
          item :=
            StructTuple
              [ Ty.apply (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel") [] [ F ] ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_DftChoice_Recursive :
    M.IsDiscriminant "p3_examples::dfts::DftChoice::Recursive" 0.
  Axiom IsDiscriminant_DftChoice_Parallel :
    M.IsDiscriminant "p3_examples::dfts::DftChoice::Parallel" 1.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_p3_examples_dfts_DftChoice_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_examples::dfts::DftChoice") [] [ F ].
    
    (* Clone *)
    Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "p3_examples::dfts::DftChoice") [] [ F ] ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::dfts::DftChoice::Recursive",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "p3_examples::dfts::DftChoice::Recursive"
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_monty_31::dft::RecursiveDft") [] [ F ],
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply (Ty.path "p3_monty_31::dft::RecursiveDft") [] [ F ],
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::dfts::DftChoice::Parallel",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "p3_examples::dfts::DftChoice::Parallel"
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                              []
                              [ F ],
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply
                                (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                []
                                [ F ],
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_for_p3_examples_dfts_DftChoice_F.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_p3_examples_dfts_DftChoice_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_examples::dfts::DftChoice") [] [ F ].
    
    (* Debug *)
    Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ]
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::dfts::DftChoice::Recursive",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Recursive" |) |) |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::dfts::DftChoice::Parallel",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Parallel" |) |) |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |))
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_p3_examples_dfts_DftChoice_F.
  
  Module Impl_core_default_Default_where_core_default_Default_F_for_p3_examples_dfts_DftChoice_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_examples::dfts::DftChoice") [] [ F ].
    
    (*
        fn default() -> Self {
            Self::Parallel(Radix2DitParallel::<F>::default())
        }
    *)
    Definition default (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructTuple
            "p3_examples::dfts::DftChoice::Parallel"
            [
              M.call_closure (|
                Ty.apply (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel") [] [ F ],
                M.get_trait_method (|
                  "core::default::Default",
                  Ty.apply (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel") [] [ F ],
                  [],
                  [],
                  "default",
                  [],
                  []
                |),
                []
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self F)
        (* Instance *) [ ("default", InstanceField.Method (default F)) ].
  End Impl_core_default_Default_where_core_default_Default_F_for_p3_examples_dfts_DftChoice_F.
  
  Module Impl_p3_dft_traits_TwoAdicSubgroupDft_where_p3_field_field_TwoAdicField_F_where_p3_dft_traits_TwoAdicSubgroupDft_p3_monty_31_dft_RecursiveDft_F_F_where_p3_dft_traits_TwoAdicSubgroupDft_p3_dft_radix_2_dit_parallel_Radix2DitParallel_F_F_F_for_p3_examples_dfts_DftChoice_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "p3_examples::dfts::DftChoice") [] [ F ].
    
    (*     type Evaluations = BitReversedMatrixView<RowMajorMatrix<F>>; *)
    Definition _Evaluations (F : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
        []
        [
          Ty.path "p3_matrix::bitrev::BitReversalPerm";
          Ty.apply
            (Ty.path "p3_matrix::dense::DenseMatrix")
            []
            [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ]
        ].
    
    (*
        fn dft_batch(&self, mat: RowMajorMatrix<F>) -> Self::Evaluations {
            match self {
                Self::Recursive(inner_dft) => inner_dft.dft_batch(mat),
                Self::Parallel(inner_dft) => inner_dft.dft_batch(mat),
            }
        }
    *)
    Definition dft_batch (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; mat ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                    []
                    [
                      Ty.path "p3_matrix::bitrev::BitReversalPerm";
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ]
                    ]
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::dfts::DftChoice::Recursive",
                        0
                      |) in
                    let inner_dft := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                          []
                          [
                            Ty.path "p3_matrix::bitrev::BitReversalPerm";
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ]
                          ],
                        M.get_trait_method (|
                          "p3_dft::traits::TwoAdicSubgroupDft",
                          Ty.apply (Ty.path "p3_monty_31::dft::RecursiveDft") [] [ F ],
                          [],
                          [ F ],
                          "dft_batch",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| inner_dft |) |) |);
                          M.read (| mat |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::dfts::DftChoice::Parallel",
                        0
                      |) in
                    let inner_dft := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                          []
                          [
                            Ty.path "p3_matrix::bitrev::BitReversalPerm";
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ]
                          ],
                        M.get_trait_method (|
                          "p3_dft::traits::TwoAdicSubgroupDft",
                          Ty.apply
                            (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                            []
                            [ F ],
                          [],
                          [ F ],
                          "dft_batch",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| inner_dft |) |) |);
                          M.read (| mat |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn coset_dft_batch(&self, mat: RowMajorMatrix<F>, shift: F) -> Self::Evaluations {
            match self {
                Self::Recursive(inner_dft) => inner_dft.coset_dft_batch(mat, shift),
                Self::Parallel(inner_dft) => inner_dft.coset_dft_batch(mat, shift),
            }
        }
    *)
    Definition coset_dft_batch
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; mat; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                    []
                    [
                      Ty.path "p3_matrix::bitrev::BitReversalPerm";
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ]
                    ]
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::dfts::DftChoice::Recursive",
                        0
                      |) in
                    let inner_dft := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                          []
                          [
                            Ty.path "p3_matrix::bitrev::BitReversalPerm";
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ]
                          ],
                        M.get_trait_method (|
                          "p3_dft::traits::TwoAdicSubgroupDft",
                          Ty.apply (Ty.path "p3_monty_31::dft::RecursiveDft") [] [ F ],
                          [],
                          [ F ],
                          "coset_dft_batch",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| inner_dft |) |) |);
                          M.read (| mat |);
                          M.read (| shift |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::dfts::DftChoice::Parallel",
                        0
                      |) in
                    let inner_dft := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                          []
                          [
                            Ty.path "p3_matrix::bitrev::BitReversalPerm";
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ]
                          ],
                        M.get_trait_method (|
                          "p3_dft::traits::TwoAdicSubgroupDft",
                          Ty.apply
                            (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                            []
                            [ F ],
                          [],
                          [ F ],
                          "coset_dft_batch",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| inner_dft |) |) |);
                          M.read (| mat |);
                          M.read (| shift |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn coset_lde_batch(
            &self,
            mat: RowMajorMatrix<F>,
            added_bits: usize,
            shift: F,
        ) -> Self::Evaluations {
            match self {
                Self::Recursive(inner_dft) => inner_dft.coset_lde_batch(mat, added_bits, shift),
                Self::Parallel(inner_dft) => inner_dft.coset_lde_batch(mat, added_bits, shift),
            }
        }
    *)
    Definition coset_lde_batch
        (F : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F in
      match ε, τ, α with
      | [], [], [ self; mat; added_bits; shift ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let mat := M.alloc (| mat |) in
          let added_bits := M.alloc (| added_bits |) in
          let shift := M.alloc (| shift |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                    []
                    [
                      Ty.path "p3_matrix::bitrev::BitReversalPerm";
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ]
                    ]
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::dfts::DftChoice::Recursive",
                        0
                      |) in
                    let inner_dft := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                          []
                          [
                            Ty.path "p3_matrix::bitrev::BitReversalPerm";
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ]
                          ],
                        M.get_trait_method (|
                          "p3_dft::traits::TwoAdicSubgroupDft",
                          Ty.apply (Ty.path "p3_monty_31::dft::RecursiveDft") [] [ F ],
                          [],
                          [ F ],
                          "coset_lde_batch",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| inner_dft |) |) |);
                          M.read (| mat |);
                          M.read (| added_bits |);
                          M.read (| shift |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "p3_examples::dfts::DftChoice::Parallel",
                        0
                      |) in
                    let inner_dft := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::row_index_mapped::RowIndexMappedView")
                          []
                          [
                            Ty.path "p3_matrix::bitrev::BitReversalPerm";
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ]
                              ]
                          ],
                        M.get_trait_method (|
                          "p3_dft::traits::TwoAdicSubgroupDft",
                          Ty.apply
                            (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                            []
                            [ F ],
                          [],
                          [ F ],
                          "coset_lde_batch",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| inner_dft |) |) |);
                          M.read (| mat |);
                          M.read (| added_bits |);
                          M.read (| shift |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "p3_dft::traits::TwoAdicSubgroupDft"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ F ]
        (Self F)
        (* Instance *)
        [
          ("Evaluations", InstanceField.Ty (_Evaluations F));
          ("dft_batch", InstanceField.Method (dft_batch F));
          ("coset_dft_batch", InstanceField.Method (coset_dft_batch F));
          ("coset_lde_batch", InstanceField.Method (coset_lde_batch F))
        ].
  End Impl_p3_dft_traits_TwoAdicSubgroupDft_where_p3_field_field_TwoAdicField_F_where_p3_dft_traits_TwoAdicSubgroupDft_p3_monty_31_dft_RecursiveDft_F_F_where_p3_dft_traits_TwoAdicSubgroupDft_p3_dft_radix_2_dit_parallel_Radix2DitParallel_F_F_F_for_p3_examples_dfts_DftChoice_F.
End dfts.
