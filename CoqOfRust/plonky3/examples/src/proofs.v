(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module proofs.
  (*
  const fn get_keccak_mmcs<F: Field>() -> KeccakMerkleMmcs<F> {
      let u64_hash = PaddingFreeSponge::<KeccakF, 25, 17, 4>::new(KeccakF {});
  
      let field_hash = SerializingHasher32To64::new(u64_hash);
  
      let compress = KeccakCompressionFunction::new(u64_hash);
  
      KeccakMerkleMmcs::new(field_hash, compress)
  }
  *)
  Definition get_keccak_mmcs (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ u64_hash :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                    [
                      Value.Integer IntegerKind.Usize 25;
                      Value.Integer IntegerKind.Usize 17;
                      Value.Integer IntegerKind.Usize 4
                    ]
                    [ Ty.path "p3_keccak::KeccakF" ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                  [
                    Value.Integer IntegerKind.Usize 25;
                    Value.Integer IntegerKind.Usize 17;
                    Value.Integer IntegerKind.Usize 4
                  ]
                  [ Ty.path "p3_keccak::KeccakF" ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                    [
                      Value.Integer IntegerKind.Usize 25;
                      Value.Integer IntegerKind.Usize 17;
                      Value.Integer IntegerKind.Usize 4
                    ]
                    [ Ty.path "p3_keccak::KeccakF" ],
                  "new",
                  [],
                  []
                |),
                [ Value.StructTuple "p3_keccak::KeccakF" [] ]
              |)
            |) in
          let~ field_hash :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 25;
                          Value.Integer IntegerKind.Usize 17;
                          Value.Integer IntegerKind.Usize 4
                        ]
                        [ Ty.path "p3_keccak::KeccakF" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                      [
                        Value.Integer IntegerKind.Usize 25;
                        Value.Integer IntegerKind.Usize 17;
                        Value.Integer IntegerKind.Usize 4
                      ]
                      [ Ty.path "p3_keccak::KeccakF" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 25;
                          Value.Integer IntegerKind.Usize 17;
                          Value.Integer IntegerKind.Usize 4
                        ]
                        [ Ty.path "p3_keccak::KeccakF" ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| u64_hash |) ]
              |)
            |) in
          let~ compress :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                    [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                    [
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 25;
                          Value.Integer IntegerKind.Usize 17;
                          Value.Integer IntegerKind.Usize 4
                        ]
                        [ Ty.path "p3_keccak::KeccakF" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                  [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                  [
                    Ty.apply
                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                      [
                        Value.Integer IntegerKind.Usize 25;
                        Value.Integer IntegerKind.Usize 17;
                        Value.Integer IntegerKind.Usize 4
                      ]
                      [ Ty.path "p3_keccak::KeccakF" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                    [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                    [
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 25;
                          Value.Integer IntegerKind.Usize 17;
                          Value.Integer IntegerKind.Usize 4
                        ]
                        [ Ty.path "p3_keccak::KeccakF" ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| u64_hash |) ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                [ Value.Integer IntegerKind.Usize 4 ]
                [
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 2 ]
                    [ Ty.path "u64" ];
                  Ty.apply
                    (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 25;
                          Value.Integer IntegerKind.Usize 17;
                          Value.Integer IntegerKind.Usize 4
                        ]
                        [ Ty.path "p3_keccak::KeccakF" ]
                    ];
                  Ty.apply
                    (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                    [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                    [
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 25;
                          Value.Integer IntegerKind.Usize 17;
                          Value.Integer IntegerKind.Usize 4
                        ]
                        [ Ty.path "p3_keccak::KeccakF" ]
                    ]
                ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                  [ Value.Integer IntegerKind.Usize 4 ]
                  [
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [ Ty.path "u64" ];
                    Ty.apply
                      (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                          [
                            Value.Integer IntegerKind.Usize 25;
                            Value.Integer IntegerKind.Usize 17;
                            Value.Integer IntegerKind.Usize 4
                          ]
                          [ Ty.path "p3_keccak::KeccakF" ]
                      ];
                    Ty.apply
                      (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                      [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.apply
                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                          [
                            Value.Integer IntegerKind.Usize 25;
                            Value.Integer IntegerKind.Usize 17;
                            Value.Integer IntegerKind.Usize 4
                          ]
                          [ Ty.path "p3_keccak::KeccakF" ]
                      ]
                  ],
                "new",
                [],
                []
              |),
              [ M.read (| field_hash |); M.read (| compress |) ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_get_keccak_mmcs :
    M.IsFunction.C "p3_examples::proofs::get_keccak_mmcs" get_keccak_mmcs.
  Admitted.
  Global Typeclasses Opaque get_keccak_mmcs.
  
  (*
  const fn get_poseidon2_mmcs<
      F: Field,
      Perm16: CryptographicPermutation<[F; 16]> + CryptographicPermutation<[F::Packing; 16]>,
      Perm24: CryptographicPermutation<[F; 24]> + CryptographicPermutation<[F::Packing; 24]>,
  >(
      perm16: Perm16,
      perm24: Perm24,
  ) -> Poseidon2MerkleMmcs<F, Perm16, Perm24> {
      let hash = Poseidon2Sponge::new(perm24);
  
      let compress = Poseidon2Compression::new(perm16);
  
      Poseidon2MerkleMmcs::<F, _, _>::new(hash, compress)
  }
  *)
  Definition get_poseidon2_mmcs (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; Perm16; Perm24 ], [ perm16; perm24 ] =>
      ltac:(M.monadic
        (let perm16 := M.alloc (| perm16 |) in
        let perm24 := M.alloc (| perm24 |) in
        M.read (|
          let~ hash :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                    [
                      Value.Integer IntegerKind.Usize 24;
                      Value.Integer IntegerKind.Usize 16;
                      Value.Integer IntegerKind.Usize 8
                    ]
                    [ Perm24 ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                  [
                    Value.Integer IntegerKind.Usize 24;
                    Value.Integer IntegerKind.Usize 16;
                    Value.Integer IntegerKind.Usize 8
                  ]
                  [ Perm24 ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                    [
                      Value.Integer IntegerKind.Usize 24;
                      Value.Integer IntegerKind.Usize 16;
                      Value.Integer IntegerKind.Usize 8
                    ]
                    [ Perm24 ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| perm24 |) ]
              |)
            |) in
          let~ compress :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                    [
                      Value.Integer IntegerKind.Usize 2;
                      Value.Integer IntegerKind.Usize 8;
                      Value.Integer IntegerKind.Usize 16
                    ]
                    [ Perm16 ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                  [
                    Value.Integer IntegerKind.Usize 2;
                    Value.Integer IntegerKind.Usize 8;
                    Value.Integer IntegerKind.Usize 16
                  ]
                  [ Perm16 ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                    [
                      Value.Integer IntegerKind.Usize 2;
                      Value.Integer IntegerKind.Usize 8;
                      Value.Integer IntegerKind.Usize 16
                    ]
                    [ Perm16 ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| perm16 |) ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                [ Value.Integer IntegerKind.Usize 8 ]
                [
                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                  Ty.apply
                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                    [
                      Value.Integer IntegerKind.Usize 24;
                      Value.Integer IntegerKind.Usize 16;
                      Value.Integer IntegerKind.Usize 8
                    ]
                    [ Perm24 ];
                  Ty.apply
                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                    [
                      Value.Integer IntegerKind.Usize 2;
                      Value.Integer IntegerKind.Usize 8;
                      Value.Integer IntegerKind.Usize 16
                    ]
                    [ Perm16 ]
                ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                  [ Value.Integer IntegerKind.Usize 8 ]
                  [
                    Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                    Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                    Ty.apply
                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                      [
                        Value.Integer IntegerKind.Usize 24;
                        Value.Integer IntegerKind.Usize 16;
                        Value.Integer IntegerKind.Usize 8
                      ]
                      [ Perm24 ];
                    Ty.apply
                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                      [
                        Value.Integer IntegerKind.Usize 2;
                        Value.Integer IntegerKind.Usize 8;
                        Value.Integer IntegerKind.Usize 16
                      ]
                      [ Perm16 ]
                  ],
                "new",
                [],
                []
              |),
              [ M.read (| hash |); M.read (| compress |) ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_get_poseidon2_mmcs :
    M.IsFunction.C "p3_examples::proofs::get_poseidon2_mmcs" get_poseidon2_mmcs.
  Admitted.
  Global Typeclasses Opaque get_poseidon2_mmcs.
  
  (*
  pub fn prove_monty31_keccak<
      F: PrimeField32 + TwoAdicField,
      EF: ExtensionField<F> + TwoAdicField,
      DFT: TwoAdicSubgroupDft<F>,
      PG: ExampleHashAir<F, KeccakStarkConfig<F, EF, DFT>>,
  >(
      proof_goal: PG,
      dft: DFT,
      num_hashes: usize,
  ) -> Result<(), impl Debug>
  where
      StandardUniform: Distribution<F>,
  {
      let val_mmcs = get_keccak_mmcs();
  
      let challenge_mmcs = ExtensionMmcs::<F, EF, _>::new(val_mmcs.clone());
      let fri_config = create_benchmark_fri_config(challenge_mmcs);
  
      let trace = proof_goal.generate_trace_rows(num_hashes, fri_config.log_blowup);
  
      let pcs = TwoAdicFriPcs::new(dft, val_mmcs, fri_config);
      let challenger = SerializingChallenger32::from_hasher(vec![], Keccak256Hash {});
  
      let config = KeccakStarkConfig::new(pcs, challenger);
  
      let proof = prove(&config, &proof_goal, trace, &vec![]);
      report_proof_size(&proof);
  
      verify(&config, &proof_goal, &proof, &vec![])
  }
  *)
  Definition prove_monty31_keccak (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; EF; DFT; PG ], [ proof_goal; dft; num_hashes ] =>
      ltac:(M.monadic
        (let proof_goal := M.alloc (| proof_goal |) in
        let dft := M.alloc (| dft |) in
        let num_hashes := M.alloc (| num_hashes |) in
        M.read (|
          let~ val_mmcs :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Ty.path "u64" ];
                      Ty.apply
                        (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 25;
                              Value.Integer IntegerKind.Usize 17;
                              Value.Integer IntegerKind.Usize 4
                            ]
                            [ Ty.path "p3_keccak::KeccakF" ]
                        ];
                      Ty.apply
                        (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                        [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 25;
                              Value.Integer IntegerKind.Usize 17;
                              Value.Integer IntegerKind.Usize 4
                            ]
                            [ Ty.path "p3_keccak::KeccakF" ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                  [ Value.Integer IntegerKind.Usize 4 ]
                  [
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [ Ty.path "u64" ];
                    Ty.apply
                      (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                          [
                            Value.Integer IntegerKind.Usize 25;
                            Value.Integer IntegerKind.Usize 17;
                            Value.Integer IntegerKind.Usize 4
                          ]
                          [ Ty.path "p3_keccak::KeccakF" ]
                      ];
                    Ty.apply
                      (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                      [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.apply
                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                          [
                            Value.Integer IntegerKind.Usize 25;
                            Value.Integer IntegerKind.Usize 17;
                            Value.Integer IntegerKind.Usize 4
                          ]
                          [ Ty.path "p3_keccak::KeccakF" ]
                      ]
                  ],
                M.get_function (| "p3_examples::proofs::get_keccak_mmcs", [], [ F ] |),
                []
              |)
            |) in
          let~ challenge_mmcs :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                    []
                    [
                      F;
                      EF;
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "u64" ];
                          Ty.apply
                            (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                  []
                  [
                    F;
                    EF;
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "u64" ];
                        Ty.apply
                          (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 25;
                                Value.Integer IntegerKind.Usize 17;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [ Ty.path "p3_keccak::KeccakF" ]
                          ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                          [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 25;
                                Value.Integer IntegerKind.Usize 17;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [ Ty.path "p3_keccak::KeccakF" ]
                          ]
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                    []
                    [
                      F;
                      EF;
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "u64" ];
                          Ty.apply
                            (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ]
                        ]
                    ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "u64" ];
                        Ty.apply
                          (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 25;
                                Value.Integer IntegerKind.Usize 17;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [ Ty.path "p3_keccak::KeccakF" ]
                          ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                          [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 25;
                                Value.Integer IntegerKind.Usize 17;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [ Ty.path "p3_keccak::KeccakF" ]
                          ]
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "u64" ];
                          Ty.apply
                            (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ]
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, val_mmcs |) ]
                  |)
                ]
              |)
            |) in
          let~ fri_config :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_fri::config::FriConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                        []
                        [
                          F;
                          EF;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ];
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u64" ];
                              Ty.apply
                                (Ty.path
                                  "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ]
                            ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_fri::config::FriConfig")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        F;
                        EF;
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "u64" ];
                            Ty.apply
                              (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ]
                          ]
                      ]
                  ],
                M.get_function (|
                  "p3_fri::config::create_benchmark_fri_config",
                  [],
                  [
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        F;
                        EF;
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "u64" ];
                            Ty.apply
                              (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ]
                          ]
                      ]
                  ]
                |),
                [ M.read (| challenge_mmcs |) ]
              |)
            |) in
          let~ trace :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_trait_method (|
                  "p3_examples::airs::ExampleHashAir",
                  PG,
                  [],
                  [
                    F;
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                          []
                          [
                            F;
                            DFT;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ F ];
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "u64" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::compression::CompressionFunctionFromHasher")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                F;
                                EF;
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "u64" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ]
                                  ]
                              ]
                          ];
                        EF;
                        Ty.apply
                          (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                          ]
                      ]
                  ],
                  "generate_trace_rows",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, proof_goal |);
                  M.read (| num_hashes |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      fri_config,
                      "p3_fri::config::FriConfig",
                      "log_blowup"
                    |)
                  |)
                ]
              |)
            |) in
          let~ pcs :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                    []
                    [
                      F;
                      DFT;
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "u64" ];
                          Ty.apply
                            (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ]
                        ];
                      Ty.apply
                        (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                        []
                        [
                          F;
                          EF;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ];
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u64" ];
                              Ty.apply
                                (Ty.path
                                  "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ]
                            ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                  []
                  [
                    F;
                    DFT;
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "u64" ];
                        Ty.apply
                          (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 25;
                                Value.Integer IntegerKind.Usize 17;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [ Ty.path "p3_keccak::KeccakF" ]
                          ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                          [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 25;
                                Value.Integer IntegerKind.Usize 17;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [ Ty.path "p3_keccak::KeccakF" ]
                          ]
                      ];
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        F;
                        EF;
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "u64" ];
                            Ty.apply
                              (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ]
                          ]
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                    []
                    [
                      F;
                      DFT;
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "u64" ];
                          Ty.apply
                            (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ]
                        ];
                      Ty.apply
                        (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                        []
                        [
                          F;
                          EF;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ];
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u64" ];
                              Ty.apply
                                (Ty.path
                                  "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ]
                            ]
                        ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| dft |); M.read (| val_mmcs |); M.read (| fri_config |) ]
              |)
            |) in
          let~ challenger :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                    []
                    [
                      F;
                      Ty.apply
                        (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                    []
                    [
                      F;
                      Ty.apply
                        (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                    ],
                  "from_hasher",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |);
                  Value.StructTuple "p3_keccak::Keccak256Hash" []
                ]
              |)
            |) in
          let~ config :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::config::StarkConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                        []
                        [
                          F;
                          DFT;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ];
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u64" ];
                              Ty.apply
                                (Ty.path
                                  "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                            []
                            [
                              F;
                              EF;
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "u64" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::compression::CompressionFunctionFromHasher")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ]
                                ]
                            ]
                        ];
                      EF;
                      Ty.apply
                        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_uni_stark::config::StarkConfig")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                      []
                      [
                        F;
                        DFT;
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ];
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "u64" ];
                            Ty.apply
                              (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                          []
                          [
                            F;
                            EF;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ F ];
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "u64" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::compression::CompressionFunctionFromHasher")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ]
                              ]
                          ]
                      ];
                    EF;
                    Ty.apply
                      (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_uni_stark::config::StarkConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                        []
                        [
                          F;
                          DFT;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ];
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u64" ];
                              Ty.apply
                                (Ty.path
                                  "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                            []
                            [
                              F;
                              EF;
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "u64" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::compression::CompressionFunctionFromHasher")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ]
                                ]
                            ]
                        ];
                      EF;
                      Ty.apply
                        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                        ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| pcs |); M.read (| challenger |) ]
              |)
            |) in
          let~ proof :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::proof::Proof")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_uni_stark::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                            []
                            [
                              F;
                              DFT;
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "u64" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::compression::CompressionFunctionFromHasher")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  F;
                                  EF;
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ Ty.path "u64" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                            [
                                              Value.Integer IntegerKind.Usize 25;
                                              Value.Integer IntegerKind.Usize 17;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [ Ty.path "p3_keccak::KeccakF" ]
                                        ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::compression::CompressionFunctionFromHasher")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                            [
                                              Value.Integer IntegerKind.Usize 25;
                                              Value.Integer IntegerKind.Usize 17;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [ Ty.path "p3_keccak::KeccakF" ]
                                        ]
                                    ]
                                ]
                            ];
                          EF;
                          Ty.apply
                            (Ty.path
                              "p3_challenger::serializing_challenger::SerializingChallenger32")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                            ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_uni_stark::proof::Proof")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                          []
                          [
                            F;
                            DFT;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ F ];
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "u64" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::compression::CompressionFunctionFromHasher")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                F;
                                EF;
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "u64" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ]
                                  ]
                              ]
                          ];
                        EF;
                        Ty.apply
                          (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                          ]
                      ]
                  ],
                M.get_function (|
                  "p3_uni_stark::prover::prove",
                  [],
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                          []
                          [
                            F;
                            DFT;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ F ];
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "u64" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::compression::CompressionFunctionFromHasher")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                F;
                                EF;
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "u64" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ]
                                  ]
                              ]
                          ];
                        EF;
                        Ty.apply
                          (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                          ]
                      ];
                    PG
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, config |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, proof_goal |) |)
                  |);
                  M.read (| trace |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ],
                              "new",
                              [],
                              []
                            |),
                            []
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_examples::proofs::report_proof_size",
                  [],
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                          []
                          [
                            F;
                            DFT;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ F ];
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "u64" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::compression::CompressionFunctionFromHasher")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                F;
                                EF;
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "u64" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ]
                                  ]
                              ]
                          ];
                        EF;
                        Ty.apply
                          (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                          ]
                      ]
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, proof |) |)
                  |)
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple [];
                  Ty.apply
                    (Ty.path "p3_uni_stark::verifier::VerificationError")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_fri::verifier::FriError")
                        []
                        [
                          Ty.path "p3_merkle_tree::mmcs::MerkleTreeError";
                          Ty.path "p3_merkle_tree::mmcs::MerkleTreeError"
                        ]
                    ]
                ],
              M.get_function (|
                "p3_uni_stark::verifier::verify",
                [],
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::config::StarkConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                        []
                        [
                          F;
                          DFT;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ];
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u64" ];
                              Ty.apply
                                (Ty.path
                                  "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                            []
                            [
                              F;
                              EF;
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "u64" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::compression::CompressionFunctionFromHasher")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ]
                                ]
                            ]
                        ];
                      EF;
                      Ty.apply
                        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                        ]
                    ];
                  PG
                ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, config |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, proof_goal |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, proof |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            "new",
                            [],
                            []
                          |),
                          []
                        |)
                      |)
                    |)
                  |)
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_prove_monty31_keccak :
    M.IsFunction.C "p3_examples::proofs::prove_monty31_keccak" prove_monty31_keccak.
  Admitted.
  Global Typeclasses Opaque prove_monty31_keccak.
  
  (*
  pub fn prove_monty31_poseidon2<
      F: PrimeField32 + TwoAdicField,
      EF: ExtensionField<F> + TwoAdicField,
      DFT: TwoAdicSubgroupDft<F>,
      Perm16: CryptographicPermutation<[F; 16]> + CryptographicPermutation<[F::Packing; 16]>,
      Perm24: CryptographicPermutation<[F; 24]> + CryptographicPermutation<[F::Packing; 24]>,
      PG: ExampleHashAir<F, Poseidon2StarkConfig<F, EF, DFT, Perm16, Perm24>>,
  >(
      proof_goal: PG,
      dft: DFT,
      num_hashes: usize,
      perm16: Perm16,
      perm24: Perm24,
  ) -> Result<(), impl Debug>
  where
      StandardUniform: Distribution<F>,
  {
      let val_mmcs = get_poseidon2_mmcs::<F, _, _>(perm16, perm24.clone());
  
      let challenge_mmcs = ExtensionMmcs::<F, EF, _>::new(val_mmcs.clone());
      let fri_config = create_benchmark_fri_config(challenge_mmcs);
  
      let trace = proof_goal.generate_trace_rows(num_hashes, fri_config.log_blowup);
  
      let pcs = TwoAdicFriPcs::new(dft, val_mmcs, fri_config);
      let challenger = DuplexChallenger::new(perm24);
  
      let config = Poseidon2StarkConfig::new(pcs, challenger);
  
      let proof = prove(&config, &proof_goal, trace, &vec![]);
      report_proof_size(&proof);
  
      verify(&config, &proof_goal, &proof, &vec![])
  }
  *)
  Definition prove_monty31_poseidon2 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; EF; DFT; Perm16; Perm24; PG ], [ proof_goal; dft; num_hashes; perm16; perm24 ] =>
      ltac:(M.monadic
        (let proof_goal := M.alloc (| proof_goal |) in
        let dft := M.alloc (| dft |) in
        let num_hashes := M.alloc (| num_hashes |) in
        let perm16 := M.alloc (| perm16 |) in
        let perm24 := M.alloc (| perm24 |) in
        M.read (|
          let~ val_mmcs :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                    [ Value.Integer IntegerKind.Usize 8 ]
                    [
                      Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                      Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 24;
                          Value.Integer IntegerKind.Usize 16;
                          Value.Integer IntegerKind.Usize 8
                        ]
                        [ Perm24 ];
                      Ty.apply
                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                        [
                          Value.Integer IntegerKind.Usize 2;
                          Value.Integer IntegerKind.Usize 8;
                          Value.Integer IntegerKind.Usize 16
                        ]
                        [ Perm16 ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                  [ Value.Integer IntegerKind.Usize 8 ]
                  [
                    Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                    Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                    Ty.apply
                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                      [
                        Value.Integer IntegerKind.Usize 24;
                        Value.Integer IntegerKind.Usize 16;
                        Value.Integer IntegerKind.Usize 8
                      ]
                      [ Perm24 ];
                    Ty.apply
                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                      [
                        Value.Integer IntegerKind.Usize 2;
                        Value.Integer IntegerKind.Usize 8;
                        Value.Integer IntegerKind.Usize 16
                      ]
                      [ Perm16 ]
                  ],
                M.get_function (|
                  "p3_examples::proofs::get_poseidon2_mmcs",
                  [],
                  [ F; Perm16; Perm24 ]
                |),
                [
                  M.read (| perm16 |);
                  M.call_closure (|
                    Perm24,
                    M.get_trait_method (| "core::clone::Clone", Perm24, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, perm24 |) ]
                  |)
                ]
              |)
            |) in
          let~ challenge_mmcs :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                    []
                    [
                      F;
                      EF;
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 24;
                              Value.Integer IntegerKind.Usize 16;
                              Value.Integer IntegerKind.Usize 8
                            ]
                            [ Perm24 ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                            [
                              Value.Integer IntegerKind.Usize 2;
                              Value.Integer IntegerKind.Usize 8;
                              Value.Integer IntegerKind.Usize 16
                            ]
                            [ Perm16 ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                  []
                  [
                    F;
                    EF;
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [
                        Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                        Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                        Ty.apply
                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                          [
                            Value.Integer IntegerKind.Usize 24;
                            Value.Integer IntegerKind.Usize 16;
                            Value.Integer IntegerKind.Usize 8
                          ]
                          [ Perm24 ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                          [
                            Value.Integer IntegerKind.Usize 2;
                            Value.Integer IntegerKind.Usize 8;
                            Value.Integer IntegerKind.Usize 16
                          ]
                          [ Perm16 ]
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                    []
                    [
                      F;
                      EF;
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 24;
                              Value.Integer IntegerKind.Usize 16;
                              Value.Integer IntegerKind.Usize 8
                            ]
                            [ Perm24 ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                            [
                              Value.Integer IntegerKind.Usize 2;
                              Value.Integer IntegerKind.Usize 8;
                              Value.Integer IntegerKind.Usize 16
                            ]
                            [ Perm16 ]
                        ]
                    ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [
                        Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                        Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                        Ty.apply
                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                          [
                            Value.Integer IntegerKind.Usize 24;
                            Value.Integer IntegerKind.Usize 16;
                            Value.Integer IntegerKind.Usize 8
                          ]
                          [ Perm24 ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                          [
                            Value.Integer IntegerKind.Usize 2;
                            Value.Integer IntegerKind.Usize 8;
                            Value.Integer IntegerKind.Usize 16
                          ]
                          [ Perm16 ]
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 24;
                              Value.Integer IntegerKind.Usize 16;
                              Value.Integer IntegerKind.Usize 8
                            ]
                            [ Perm24 ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                            [
                              Value.Integer IntegerKind.Usize 2;
                              Value.Integer IntegerKind.Usize 8;
                              Value.Integer IntegerKind.Usize 16
                            ]
                            [ Perm16 ]
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, val_mmcs |) ]
                  |)
                ]
              |)
            |) in
          let~ fri_config :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_fri::config::FriConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                        []
                        [
                          F;
                          EF;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 24;
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [ Perm24 ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 8;
                                  Value.Integer IntegerKind.Usize 16
                                ]
                                [ Perm16 ]
                            ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_fri::config::FriConfig")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        F;
                        EF;
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 24;
                                Value.Integer IntegerKind.Usize 16;
                                Value.Integer IntegerKind.Usize 8
                              ]
                              [ Perm24 ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                              [
                                Value.Integer IntegerKind.Usize 2;
                                Value.Integer IntegerKind.Usize 8;
                                Value.Integer IntegerKind.Usize 16
                              ]
                              [ Perm16 ]
                          ]
                      ]
                  ],
                M.get_function (|
                  "p3_fri::config::create_benchmark_fri_config",
                  [],
                  [
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        F;
                        EF;
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 24;
                                Value.Integer IntegerKind.Usize 16;
                                Value.Integer IntegerKind.Usize 8
                              ]
                              [ Perm24 ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                              [
                                Value.Integer IntegerKind.Usize 2;
                                Value.Integer IntegerKind.Usize 8;
                                Value.Integer IntegerKind.Usize 16
                              ]
                              [ Perm16 ]
                          ]
                      ]
                  ]
                |),
                [ M.read (| challenge_mmcs |) ]
              |)
            |) in
          let~ trace :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_trait_method (|
                  "p3_examples::airs::ExampleHashAir",
                  PG,
                  [],
                  [
                    F;
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                          []
                          [
                            F;
                            DFT;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 24;
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [ Perm24 ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 16
                                  ]
                                  [ Perm16 ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                F;
                                EF;
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 24;
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [ Perm24 ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 16
                                      ]
                                      [ Perm16 ]
                                  ]
                              ]
                          ];
                        EF;
                        Ty.apply
                          (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                          [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                          [ F; Perm24 ]
                      ]
                  ],
                  "generate_trace_rows",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, proof_goal |);
                  M.read (| num_hashes |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      fri_config,
                      "p3_fri::config::FriConfig",
                      "log_blowup"
                    |)
                  |)
                ]
              |)
            |) in
          let~ pcs :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                    []
                    [
                      F;
                      DFT;
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 24;
                              Value.Integer IntegerKind.Usize 16;
                              Value.Integer IntegerKind.Usize 8
                            ]
                            [ Perm24 ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                            [
                              Value.Integer IntegerKind.Usize 2;
                              Value.Integer IntegerKind.Usize 8;
                              Value.Integer IntegerKind.Usize 16
                            ]
                            [ Perm16 ]
                        ];
                      Ty.apply
                        (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                        []
                        [
                          F;
                          EF;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 24;
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [ Perm24 ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 8;
                                  Value.Integer IntegerKind.Usize 16
                                ]
                                [ Perm16 ]
                            ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                  []
                  [
                    F;
                    DFT;
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [
                        Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                        Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                        Ty.apply
                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                          [
                            Value.Integer IntegerKind.Usize 24;
                            Value.Integer IntegerKind.Usize 16;
                            Value.Integer IntegerKind.Usize 8
                          ]
                          [ Perm24 ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                          [
                            Value.Integer IntegerKind.Usize 2;
                            Value.Integer IntegerKind.Usize 8;
                            Value.Integer IntegerKind.Usize 16
                          ]
                          [ Perm16 ]
                      ];
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        F;
                        EF;
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 24;
                                Value.Integer IntegerKind.Usize 16;
                                Value.Integer IntegerKind.Usize 8
                              ]
                              [ Perm24 ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                              [
                                Value.Integer IntegerKind.Usize 2;
                                Value.Integer IntegerKind.Usize 8;
                                Value.Integer IntegerKind.Usize 16
                              ]
                              [ Perm16 ]
                          ]
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                    []
                    [
                      F;
                      DFT;
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 24;
                              Value.Integer IntegerKind.Usize 16;
                              Value.Integer IntegerKind.Usize 8
                            ]
                            [ Perm24 ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                            [
                              Value.Integer IntegerKind.Usize 2;
                              Value.Integer IntegerKind.Usize 8;
                              Value.Integer IntegerKind.Usize 16
                            ]
                            [ Perm16 ]
                        ];
                      Ty.apply
                        (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                        []
                        [
                          F;
                          EF;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 24;
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [ Perm24 ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 8;
                                  Value.Integer IntegerKind.Usize 16
                                ]
                                [ Perm16 ]
                            ]
                        ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| dft |); M.read (| val_mmcs |); M.read (| fri_config |) ]
              |)
            |) in
          let~ challenger :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                    [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                    [ F; Perm24 ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                  [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                  [ F; Perm24 ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                    [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                    [ F; Perm24 ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| perm24 |) ]
              |)
            |) in
          let~ config :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::config::StarkConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                        []
                        [
                          F;
                          DFT;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 24;
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [ Perm24 ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 8;
                                  Value.Integer IntegerKind.Usize 16
                                ]
                                [ Perm16 ]
                            ];
                          Ty.apply
                            (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                            []
                            [
                              F;
                              EF;
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 24;
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [ Perm24 ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 16
                                    ]
                                    [ Perm16 ]
                                ]
                            ]
                        ];
                      EF;
                      Ty.apply
                        (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                        [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                        [ F; Perm24 ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_uni_stark::config::StarkConfig")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                      []
                      [
                        F;
                        DFT;
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 24;
                                Value.Integer IntegerKind.Usize 16;
                                Value.Integer IntegerKind.Usize 8
                              ]
                              [ Perm24 ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                              [
                                Value.Integer IntegerKind.Usize 2;
                                Value.Integer IntegerKind.Usize 8;
                                Value.Integer IntegerKind.Usize 16
                              ]
                              [ Perm16 ]
                          ];
                        Ty.apply
                          (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                          []
                          [
                            F;
                            EF;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 24;
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [ Perm24 ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 16
                                  ]
                                  [ Perm16 ]
                              ]
                          ]
                      ];
                    EF;
                    Ty.apply
                      (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                      [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                      [ F; Perm24 ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_uni_stark::config::StarkConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                        []
                        [
                          F;
                          DFT;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 24;
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [ Perm24 ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 8;
                                  Value.Integer IntegerKind.Usize 16
                                ]
                                [ Perm16 ]
                            ];
                          Ty.apply
                            (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                            []
                            [
                              F;
                              EF;
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 24;
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [ Perm24 ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 16
                                    ]
                                    [ Perm16 ]
                                ]
                            ]
                        ];
                      EF;
                      Ty.apply
                        (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                        [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                        [ F; Perm24 ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| pcs |); M.read (| challenger |) ]
              |)
            |) in
          let~ proof :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::proof::Proof")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_uni_stark::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                            []
                            [
                              F;
                              DFT;
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 24;
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [ Perm24 ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 16
                                    ]
                                    [ Perm16 ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  F;
                                  EF;
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_field::field::Field"
                                        []
                                        []
                                        F
                                        "Packing";
                                      Ty.associated_in_trait
                                        "p3_field::field::Field"
                                        []
                                        []
                                        F
                                        "Packing";
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 24;
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [ Perm24 ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 16
                                        ]
                                        [ Perm16 ]
                                    ]
                                ]
                            ];
                          EF;
                          Ty.apply
                            (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                            [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16
                            ]
                            [ F; Perm24 ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_uni_stark::proof::Proof")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                          []
                          [
                            F;
                            DFT;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 24;
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [ Perm24 ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 16
                                  ]
                                  [ Perm16 ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                F;
                                EF;
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 24;
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [ Perm24 ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 16
                                      ]
                                      [ Perm16 ]
                                  ]
                              ]
                          ];
                        EF;
                        Ty.apply
                          (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                          [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                          [ F; Perm24 ]
                      ]
                  ],
                M.get_function (|
                  "p3_uni_stark::prover::prove",
                  [],
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                          []
                          [
                            F;
                            DFT;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 24;
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [ Perm24 ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 16
                                  ]
                                  [ Perm16 ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                F;
                                EF;
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 24;
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [ Perm24 ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 16
                                      ]
                                      [ Perm16 ]
                                  ]
                              ]
                          ];
                        EF;
                        Ty.apply
                          (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                          [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                          [ F; Perm24 ]
                      ];
                    PG
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, config |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, proof_goal |) |)
                  |);
                  M.read (| trace |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ],
                              "new",
                              [],
                              []
                            |),
                            []
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_examples::proofs::report_proof_size",
                  [],
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                          []
                          [
                            F;
                            DFT;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 24;
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [ Perm24 ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 16
                                  ]
                                  [ Perm16 ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                F;
                                EF;
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 24;
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [ Perm24 ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 16
                                      ]
                                      [ Perm16 ]
                                  ]
                              ]
                          ];
                        EF;
                        Ty.apply
                          (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                          [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                          [ F; Perm24 ]
                      ]
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, proof |) |)
                  |)
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple [];
                  Ty.apply
                    (Ty.path "p3_uni_stark::verifier::VerificationError")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_fri::verifier::FriError")
                        []
                        [
                          Ty.path "p3_merkle_tree::mmcs::MerkleTreeError";
                          Ty.path "p3_merkle_tree::mmcs::MerkleTreeError"
                        ]
                    ]
                ],
              M.get_function (|
                "p3_uni_stark::verifier::verify",
                [],
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::config::StarkConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                        []
                        [
                          F;
                          DFT;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 24;
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [ Perm24 ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 8;
                                  Value.Integer IntegerKind.Usize 16
                                ]
                                [ Perm16 ]
                            ];
                          Ty.apply
                            (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                            []
                            [
                              F;
                              EF;
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 24;
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [ Perm24 ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 16
                                    ]
                                    [ Perm16 ]
                                ]
                            ]
                        ];
                      EF;
                      Ty.apply
                        (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                        [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                        [ F; Perm24 ]
                    ];
                  PG
                ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, config |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, proof_goal |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, proof |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            "new",
                            [],
                            []
                          |),
                          []
                        |)
                      |)
                    |)
                  |)
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_prove_monty31_poseidon2 :
    M.IsFunction.C "p3_examples::proofs::prove_monty31_poseidon2" prove_monty31_poseidon2.
  Admitted.
  Global Typeclasses Opaque prove_monty31_poseidon2.
  
  (*
  pub fn prove_m31_keccak<
      PG: ExampleHashAir<
              Mersenne31,
              KeccakCircleStarkConfig<Mersenne31, BinomialExtensionField<Mersenne31, 3>>,
          >,
  >(
      proof_goal: PG,
      num_hashes: usize,
  ) -> Result<(), impl Debug> {
      type F = Mersenne31;
      type EF = BinomialExtensionField<Mersenne31, 3>;
  
      let val_mmcs = get_keccak_mmcs();
      let challenge_mmcs = ExtensionMmcs::<F, EF, _>::new(val_mmcs.clone());
      let fri_config = create_benchmark_fri_config(challenge_mmcs);
  
      let trace = proof_goal.generate_trace_rows(num_hashes, fri_config.log_blowup);
  
      let pcs = CirclePcs::new(val_mmcs, fri_config);
      let challenger = SerializingChallenger32::from_hasher(vec![], Keccak256Hash {});
  
      let config = KeccakCircleStarkConfig::new(pcs, challenger);
  
      let proof = prove(&config, &proof_goal, trace, &vec![]);
      report_proof_size(&proof);
  
      verify(&config, &proof_goal, &proof, &vec![])
  }
  *)
  Definition prove_m31_keccak (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ PG ], [ proof_goal; num_hashes ] =>
      ltac:(M.monadic
        (let proof_goal := M.alloc (| proof_goal |) in
        let num_hashes := M.alloc (| num_hashes |) in
        M.read (|
          let~ val_mmcs :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Ty.path "u64" ];
                      Ty.apply
                        (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 25;
                              Value.Integer IntegerKind.Usize 17;
                              Value.Integer IntegerKind.Usize 4
                            ]
                            [ Ty.path "p3_keccak::KeccakF" ]
                        ];
                      Ty.apply
                        (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                        [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 25;
                              Value.Integer IntegerKind.Usize 17;
                              Value.Integer IntegerKind.Usize 4
                            ]
                            [ Ty.path "p3_keccak::KeccakF" ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                  [ Value.Integer IntegerKind.Usize 4 ]
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [ Ty.path "u64" ];
                    Ty.apply
                      (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                          [
                            Value.Integer IntegerKind.Usize 25;
                            Value.Integer IntegerKind.Usize 17;
                            Value.Integer IntegerKind.Usize 4
                          ]
                          [ Ty.path "p3_keccak::KeccakF" ]
                      ];
                    Ty.apply
                      (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                      [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.apply
                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                          [
                            Value.Integer IntegerKind.Usize 25;
                            Value.Integer IntegerKind.Usize 17;
                            Value.Integer IntegerKind.Usize 4
                          ]
                          [ Ty.path "p3_keccak::KeccakF" ]
                      ]
                  ],
                M.get_function (|
                  "p3_examples::proofs::get_keccak_mmcs",
                  [],
                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ]
                |),
                []
              |)
            |) in
          let~ challenge_mmcs :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                    []
                    [
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.apply
                        (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                        [ Value.Integer IntegerKind.Usize 3 ]
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                        ];
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "u64" ];
                          Ty.apply
                            (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                  []
                  [
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                    Ty.apply
                      (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                      [ Value.Integer IntegerKind.Usize 3 ]
                      [
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                      ];
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "u64" ];
                        Ty.apply
                          (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 25;
                                Value.Integer IntegerKind.Usize 17;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [ Ty.path "p3_keccak::KeccakF" ]
                          ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                          [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 25;
                                Value.Integer IntegerKind.Usize 17;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [ Ty.path "p3_keccak::KeccakF" ]
                          ]
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                    []
                    [
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.apply
                        (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                        [ Value.Integer IntegerKind.Usize 3 ]
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                        ];
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "u64" ];
                          Ty.apply
                            (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ]
                        ]
                    ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "u64" ];
                        Ty.apply
                          (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 25;
                                Value.Integer IntegerKind.Usize 17;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [ Ty.path "p3_keccak::KeccakF" ]
                          ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                          [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 25;
                                Value.Integer IntegerKind.Usize 17;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [ Ty.path "p3_keccak::KeccakF" ]
                          ]
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "u64" ];
                          Ty.apply
                            (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ]
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, val_mmcs |) ]
                  |)
                ]
              |)
            |) in
          let~ fri_config :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_fri::config::FriConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                        []
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 3 ]
                            [
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                            ];
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u64" ];
                              Ty.apply
                                (Ty.path
                                  "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ]
                            ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_fri::config::FriConfig")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 3 ]
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                          ];
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "u64" ];
                            Ty.apply
                              (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ]
                          ]
                      ]
                  ],
                M.get_function (|
                  "p3_fri::config::create_benchmark_fri_config",
                  [],
                  [
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 3 ]
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                          ];
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "u64" ];
                            Ty.apply
                              (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ]
                          ]
                      ]
                  ]
                |),
                [ M.read (| challenge_mmcs |) ]
              |)
            |) in
          let~ trace :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ],
                M.get_trait_method (|
                  "p3_examples::airs::ExampleHashAir",
                  PG,
                  [],
                  [
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_circle::pcs::CirclePcs")
                          []
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "u64" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::compression::CompressionFunctionFromHasher")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 3 ]
                                  [
                                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "u64" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ]
                                  ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 3 ]
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                          ];
                        Ty.apply
                          (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                          []
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.apply
                              (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                          ]
                      ]
                  ],
                  "generate_trace_rows",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, proof_goal |);
                  M.read (| num_hashes |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      fri_config,
                      "p3_fri::config::FriConfig",
                      "log_blowup"
                    |)
                  |)
                ]
              |)
            |) in
          let~ pcs :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_circle::pcs::CirclePcs")
                    []
                    [
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "u64" ];
                          Ty.apply
                            (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ]
                        ];
                      Ty.apply
                        (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                        []
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 3 ]
                            [
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                            ];
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u64" ];
                              Ty.apply
                                (Ty.path
                                  "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ]
                            ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_circle::pcs::CirclePcs")
                  []
                  [
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "u64" ];
                        Ty.apply
                          (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 25;
                                Value.Integer IntegerKind.Usize 17;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [ Ty.path "p3_keccak::KeccakF" ]
                          ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                          [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 25;
                                Value.Integer IntegerKind.Usize 17;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [ Ty.path "p3_keccak::KeccakF" ]
                          ]
                      ];
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 3 ]
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                          ];
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "u64" ];
                            Ty.apply
                              (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ]
                          ]
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_circle::pcs::CirclePcs")
                    []
                    [
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "u64" ];
                          Ty.apply
                            (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 25;
                                  Value.Integer IntegerKind.Usize 17;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [ Ty.path "p3_keccak::KeccakF" ]
                            ]
                        ];
                      Ty.apply
                        (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                        []
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 3 ]
                            [
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                            ];
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u64" ];
                              Ty.apply
                                (Ty.path
                                  "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ]
                            ]
                        ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| val_mmcs |); M.read (| fri_config |) ]
              |)
            |) in
          let~ challenger :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                    []
                    [
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.apply
                        (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                  []
                  [
                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                    Ty.apply
                      (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                    []
                    [
                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                      Ty.apply
                        (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                        [ Value.Integer IntegerKind.Usize 32 ]
                        [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                    ],
                  "from_hasher",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |);
                  Value.StructTuple "p3_keccak::Keccak256Hash" []
                ]
              |)
            |) in
          let~ config :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::config::StarkConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_circle::pcs::CirclePcs")
                        []
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u64" ];
                              Ty.apply
                                (Ty.path
                                  "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                            []
                            [
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 3 ]
                                [
                                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                ];
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "u64" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::compression::CompressionFunctionFromHasher")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ]
                                ]
                            ]
                        ];
                      Ty.apply
                        (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                        [ Value.Integer IntegerKind.Usize 3 ]
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                        ];
                      Ty.apply
                        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                        []
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.apply
                            (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_uni_stark::config::StarkConfig")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_circle::pcs::CirclePcs")
                      []
                      [
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "u64" ];
                            Ty.apply
                              (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 25;
                                    Value.Integer IntegerKind.Usize 17;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [ Ty.path "p3_keccak::KeccakF" ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                          []
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 3 ]
                              [
                                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                              ];
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "u64" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::compression::CompressionFunctionFromHasher")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ]
                              ]
                          ]
                      ];
                    Ty.apply
                      (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                      [ Value.Integer IntegerKind.Usize 3 ]
                      [
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                      ];
                    Ty.apply
                      (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                      []
                      [
                        Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                        Ty.apply
                          (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_uni_stark::config::StarkConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_circle::pcs::CirclePcs")
                        []
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u64" ];
                              Ty.apply
                                (Ty.path
                                  "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                            []
                            [
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 3 ]
                                [
                                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                ];
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "u64" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::compression::CompressionFunctionFromHasher")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ]
                                ]
                            ]
                        ];
                      Ty.apply
                        (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                        [ Value.Integer IntegerKind.Usize 3 ]
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                        ];
                      Ty.apply
                        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                        []
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.apply
                            (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                        ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| pcs |); M.read (| challenger |) ]
              |)
            |) in
          let~ proof :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::proof::Proof")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_uni_stark::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_circle::pcs::CirclePcs")
                            []
                            [
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "u64" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::compression::CompressionFunctionFromHasher")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 3 ]
                                    [
                                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                      Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ Ty.path "u64" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                            [
                                              Value.Integer IntegerKind.Usize 25;
                                              Value.Integer IntegerKind.Usize 17;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [ Ty.path "p3_keccak::KeccakF" ]
                                        ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::compression::CompressionFunctionFromHasher")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                            [
                                              Value.Integer IntegerKind.Usize 25;
                                              Value.Integer IntegerKind.Usize 17;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [ Ty.path "p3_keccak::KeccakF" ]
                                        ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 3 ]
                            [
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_challenger::serializing_challenger::SerializingChallenger32")
                            []
                            [
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                              Ty.apply
                                (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                            ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_uni_stark::proof::Proof")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_circle::pcs::CirclePcs")
                          []
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "u64" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::compression::CompressionFunctionFromHasher")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 3 ]
                                  [
                                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "u64" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ]
                                  ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 3 ]
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                          ];
                        Ty.apply
                          (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                          []
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.apply
                              (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                          ]
                      ]
                  ],
                M.get_function (|
                  "p3_uni_stark::prover::prove",
                  [],
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_circle::pcs::CirclePcs")
                          []
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "u64" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::compression::CompressionFunctionFromHasher")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 3 ]
                                  [
                                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "u64" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ]
                                  ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 3 ]
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                          ];
                        Ty.apply
                          (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                          []
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.apply
                              (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                          ]
                      ];
                    PG
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, config |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, proof_goal |) |)
                  |);
                  M.read (| trace |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              [],
                              []
                            |),
                            []
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_examples::proofs::report_proof_size",
                  [],
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_circle::pcs::CirclePcs")
                          []
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "u64" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::compression::CompressionFunctionFromHasher")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 25;
                                        Value.Integer IntegerKind.Usize 17;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [ Ty.path "p3_keccak::KeccakF" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 3 ]
                                  [
                                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                    Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "u64" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 25;
                                            Value.Integer IntegerKind.Usize 17;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [ Ty.path "p3_keccak::KeccakF" ]
                                      ]
                                  ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 3 ]
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                          ];
                        Ty.apply
                          (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                          []
                          [
                            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                            Ty.apply
                              (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                          ]
                      ]
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, proof |) |)
                  |)
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple [];
                  Ty.apply
                    (Ty.path "p3_uni_stark::verifier::VerificationError")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_fri::verifier::FriError")
                        []
                        [
                          Ty.path "p3_merkle_tree::mmcs::MerkleTreeError";
                          Ty.apply
                            (Ty.path "p3_circle::pcs::InputError")
                            []
                            [
                              Ty.path "p3_merkle_tree::mmcs::MerkleTreeError";
                              Ty.path "p3_merkle_tree::mmcs::MerkleTreeError"
                            ]
                        ]
                    ]
                ],
              M.get_function (|
                "p3_uni_stark::verifier::verify",
                [],
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::config::StarkConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_circle::pcs::CirclePcs")
                        []
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "u64" ];
                              Ty.apply
                                (Ty.path
                                  "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 25;
                                      Value.Integer IntegerKind.Usize 17;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [ Ty.path "p3_keccak::KeccakF" ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                            []
                            [
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 3 ]
                                [
                                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                  Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                                ];
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "p3_mersenne_31::mersenne_31::Mersenne31" ];
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "u64" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::compression::CompressionFunctionFromHasher")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 25;
                                          Value.Integer IntegerKind.Usize 17;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [ Ty.path "p3_keccak::KeccakF" ]
                                    ]
                                ]
                            ]
                        ];
                      Ty.apply
                        (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                        [ Value.Integer IntegerKind.Usize 3 ]
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
                        ];
                      Ty.apply
                        (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                        []
                        [
                          Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                          Ty.apply
                            (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
                        ]
                    ];
                  PG
                ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, config |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, proof_goal |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, proof |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          []
                        |)
                      |)
                    |)
                  |)
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_prove_m31_keccak :
    M.IsFunction.C "p3_examples::proofs::prove_m31_keccak" prove_m31_keccak.
  Admitted.
  Global Typeclasses Opaque prove_m31_keccak.
  
  Module prove_m31_keccak.
    Axiom F :
      (Ty.path "p3_examples::proofs::prove_m31_keccak::F") =
        (Ty.path "p3_mersenne_31::mersenne_31::Mersenne31").
    
    Axiom EF :
      (Ty.path "p3_examples::proofs::prove_m31_keccak::EF") =
        (Ty.apply
          (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
          [ Value.Integer IntegerKind.Usize 3 ]
          [
            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31";
            Ty.path "p3_mersenne_31::mersenne_31::Mersenne31"
          ]).
  End prove_m31_keccak.
  
  (*
  pub fn prove_m31_poseidon2<
      F: PrimeField64 + ComplexExtendable,
      EF: ExtensionField<F>,
      Perm16: CryptographicPermutation<[F; 16]> + CryptographicPermutation<[F::Packing; 16]>,
      Perm24: CryptographicPermutation<[F; 24]> + CryptographicPermutation<[F::Packing; 24]>,
      PG: ExampleHashAir<F, Poseidon2CircleStarkConfig<F, EF, Perm16, Perm24>>,
  >(
      proof_goal: PG,
      num_hashes: usize,
      perm16: Perm16,
      perm24: Perm24,
  ) -> Result<(), impl Debug>
  where
      StandardUniform: Distribution<F>,
  {
      let val_mmcs = get_poseidon2_mmcs::<F, _, _>(perm16, perm24.clone());
  
      let challenge_mmcs = ExtensionMmcs::<F, EF, _>::new(val_mmcs.clone());
      let fri_config = create_benchmark_fri_config(challenge_mmcs);
  
      let trace = proof_goal.generate_trace_rows(num_hashes, fri_config.log_blowup);
  
      let pcs = CirclePcs::new(val_mmcs, fri_config);
      let challenger = DuplexChallenger::new(perm24);
  
      let config = Poseidon2CircleStarkConfig::new(pcs, challenger);
  
      let proof = prove(&config, &proof_goal, trace, &vec![]);
      report_proof_size(&proof);
  
      verify(&config, &proof_goal, &proof, &vec![])
  }
  *)
  Definition prove_m31_poseidon2 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; EF; Perm16; Perm24; PG ], [ proof_goal; num_hashes; perm16; perm24 ] =>
      ltac:(M.monadic
        (let proof_goal := M.alloc (| proof_goal |) in
        let num_hashes := M.alloc (| num_hashes |) in
        let perm16 := M.alloc (| perm16 |) in
        let perm24 := M.alloc (| perm24 |) in
        M.read (|
          let~ val_mmcs :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                    [ Value.Integer IntegerKind.Usize 8 ]
                    [
                      Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                      Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 24;
                          Value.Integer IntegerKind.Usize 16;
                          Value.Integer IntegerKind.Usize 8
                        ]
                        [ Perm24 ];
                      Ty.apply
                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                        [
                          Value.Integer IntegerKind.Usize 2;
                          Value.Integer IntegerKind.Usize 8;
                          Value.Integer IntegerKind.Usize 16
                        ]
                        [ Perm16 ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                  [ Value.Integer IntegerKind.Usize 8 ]
                  [
                    Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                    Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                    Ty.apply
                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                      [
                        Value.Integer IntegerKind.Usize 24;
                        Value.Integer IntegerKind.Usize 16;
                        Value.Integer IntegerKind.Usize 8
                      ]
                      [ Perm24 ];
                    Ty.apply
                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                      [
                        Value.Integer IntegerKind.Usize 2;
                        Value.Integer IntegerKind.Usize 8;
                        Value.Integer IntegerKind.Usize 16
                      ]
                      [ Perm16 ]
                  ],
                M.get_function (|
                  "p3_examples::proofs::get_poseidon2_mmcs",
                  [],
                  [ F; Perm16; Perm24 ]
                |),
                [
                  M.read (| perm16 |);
                  M.call_closure (|
                    Perm24,
                    M.get_trait_method (| "core::clone::Clone", Perm24, [], [], "clone", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, perm24 |) ]
                  |)
                ]
              |)
            |) in
          let~ challenge_mmcs :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                    []
                    [
                      F;
                      EF;
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 24;
                              Value.Integer IntegerKind.Usize 16;
                              Value.Integer IntegerKind.Usize 8
                            ]
                            [ Perm24 ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                            [
                              Value.Integer IntegerKind.Usize 2;
                              Value.Integer IntegerKind.Usize 8;
                              Value.Integer IntegerKind.Usize 16
                            ]
                            [ Perm16 ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                  []
                  [
                    F;
                    EF;
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [
                        Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                        Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                        Ty.apply
                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                          [
                            Value.Integer IntegerKind.Usize 24;
                            Value.Integer IntegerKind.Usize 16;
                            Value.Integer IntegerKind.Usize 8
                          ]
                          [ Perm24 ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                          [
                            Value.Integer IntegerKind.Usize 2;
                            Value.Integer IntegerKind.Usize 8;
                            Value.Integer IntegerKind.Usize 16
                          ]
                          [ Perm16 ]
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                    []
                    [
                      F;
                      EF;
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 24;
                              Value.Integer IntegerKind.Usize 16;
                              Value.Integer IntegerKind.Usize 8
                            ]
                            [ Perm24 ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                            [
                              Value.Integer IntegerKind.Usize 2;
                              Value.Integer IntegerKind.Usize 8;
                              Value.Integer IntegerKind.Usize 16
                            ]
                            [ Perm16 ]
                        ]
                    ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [
                        Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                        Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                        Ty.apply
                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                          [
                            Value.Integer IntegerKind.Usize 24;
                            Value.Integer IntegerKind.Usize 16;
                            Value.Integer IntegerKind.Usize 8
                          ]
                          [ Perm24 ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                          [
                            Value.Integer IntegerKind.Usize 2;
                            Value.Integer IntegerKind.Usize 8;
                            Value.Integer IntegerKind.Usize 16
                          ]
                          [ Perm16 ]
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 24;
                              Value.Integer IntegerKind.Usize 16;
                              Value.Integer IntegerKind.Usize 8
                            ]
                            [ Perm24 ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                            [
                              Value.Integer IntegerKind.Usize 2;
                              Value.Integer IntegerKind.Usize 8;
                              Value.Integer IntegerKind.Usize 16
                            ]
                            [ Perm16 ]
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, val_mmcs |) ]
                  |)
                ]
              |)
            |) in
          let~ fri_config :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_fri::config::FriConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                        []
                        [
                          F;
                          EF;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 24;
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [ Perm24 ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 8;
                                  Value.Integer IntegerKind.Usize 16
                                ]
                                [ Perm16 ]
                            ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_fri::config::FriConfig")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        F;
                        EF;
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 24;
                                Value.Integer IntegerKind.Usize 16;
                                Value.Integer IntegerKind.Usize 8
                              ]
                              [ Perm24 ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                              [
                                Value.Integer IntegerKind.Usize 2;
                                Value.Integer IntegerKind.Usize 8;
                                Value.Integer IntegerKind.Usize 16
                              ]
                              [ Perm16 ]
                          ]
                      ]
                  ],
                M.get_function (|
                  "p3_fri::config::create_benchmark_fri_config",
                  [],
                  [
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        F;
                        EF;
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 24;
                                Value.Integer IntegerKind.Usize 16;
                                Value.Integer IntegerKind.Usize 8
                              ]
                              [ Perm24 ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                              [
                                Value.Integer IntegerKind.Usize 2;
                                Value.Integer IntegerKind.Usize 8;
                                Value.Integer IntegerKind.Usize 16
                              ]
                              [ Perm16 ]
                          ]
                      ]
                  ]
                |),
                [ M.read (| challenge_mmcs |) ]
              |)
            |) in
          let~ trace :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_trait_method (|
                  "p3_examples::airs::ExampleHashAir",
                  PG,
                  [],
                  [
                    F;
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_circle::pcs::CirclePcs")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 24;
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [ Perm24 ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 16
                                  ]
                                  [ Perm16 ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                F;
                                EF;
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 24;
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [ Perm24 ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 16
                                      ]
                                      [ Perm16 ]
                                  ]
                              ]
                          ];
                        EF;
                        Ty.apply
                          (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                          [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                          [ F; Perm24 ]
                      ]
                  ],
                  "generate_trace_rows",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, proof_goal |);
                  M.read (| num_hashes |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      fri_config,
                      "p3_fri::config::FriConfig",
                      "log_blowup"
                    |)
                  |)
                ]
              |)
            |) in
          let~ pcs :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_circle::pcs::CirclePcs")
                    []
                    [
                      F;
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 24;
                              Value.Integer IntegerKind.Usize 16;
                              Value.Integer IntegerKind.Usize 8
                            ]
                            [ Perm24 ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                            [
                              Value.Integer IntegerKind.Usize 2;
                              Value.Integer IntegerKind.Usize 8;
                              Value.Integer IntegerKind.Usize 16
                            ]
                            [ Perm16 ]
                        ];
                      Ty.apply
                        (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                        []
                        [
                          F;
                          EF;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 24;
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [ Perm24 ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 8;
                                  Value.Integer IntegerKind.Usize 16
                                ]
                                [ Perm16 ]
                            ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_circle::pcs::CirclePcs")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [
                        Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                        Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                        Ty.apply
                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                          [
                            Value.Integer IntegerKind.Usize 24;
                            Value.Integer IntegerKind.Usize 16;
                            Value.Integer IntegerKind.Usize 8
                          ]
                          [ Perm24 ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                          [
                            Value.Integer IntegerKind.Usize 2;
                            Value.Integer IntegerKind.Usize 8;
                            Value.Integer IntegerKind.Usize 16
                          ]
                          [ Perm16 ]
                      ];
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        F;
                        EF;
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 24;
                                Value.Integer IntegerKind.Usize 16;
                                Value.Integer IntegerKind.Usize 8
                              ]
                              [ Perm24 ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                              [
                                Value.Integer IntegerKind.Usize 2;
                                Value.Integer IntegerKind.Usize 8;
                                Value.Integer IntegerKind.Usize 16
                              ]
                              [ Perm16 ]
                          ]
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_circle::pcs::CirclePcs")
                    []
                    [
                      F;
                      Ty.apply
                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 24;
                              Value.Integer IntegerKind.Usize 16;
                              Value.Integer IntegerKind.Usize 8
                            ]
                            [ Perm24 ];
                          Ty.apply
                            (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                            [
                              Value.Integer IntegerKind.Usize 2;
                              Value.Integer IntegerKind.Usize 8;
                              Value.Integer IntegerKind.Usize 16
                            ]
                            [ Perm16 ]
                        ];
                      Ty.apply
                        (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                        []
                        [
                          F;
                          EF;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 24;
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [ Perm24 ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 8;
                                  Value.Integer IntegerKind.Usize 16
                                ]
                                [ Perm16 ]
                            ]
                        ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| val_mmcs |); M.read (| fri_config |) ]
              |)
            |) in
          let~ challenger :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                    [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                    [ F; Perm24 ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                  [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                  [ F; Perm24 ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                    [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                    [ F; Perm24 ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| perm24 |) ]
              |)
            |) in
          let~ config :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::config::StarkConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_circle::pcs::CirclePcs")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 24;
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [ Perm24 ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 8;
                                  Value.Integer IntegerKind.Usize 16
                                ]
                                [ Perm16 ]
                            ];
                          Ty.apply
                            (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                            []
                            [
                              F;
                              EF;
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 24;
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [ Perm24 ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 16
                                    ]
                                    [ Perm16 ]
                                ]
                            ]
                        ];
                      EF;
                      Ty.apply
                        (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                        [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                        [ F; Perm24 ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_uni_stark::config::StarkConfig")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_circle::pcs::CirclePcs")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                Value.Integer IntegerKind.Usize 24;
                                Value.Integer IntegerKind.Usize 16;
                                Value.Integer IntegerKind.Usize 8
                              ]
                              [ Perm24 ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                              [
                                Value.Integer IntegerKind.Usize 2;
                                Value.Integer IntegerKind.Usize 8;
                                Value.Integer IntegerKind.Usize 16
                              ]
                              [ Perm16 ]
                          ];
                        Ty.apply
                          (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                          []
                          [
                            F;
                            EF;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 24;
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [ Perm24 ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 16
                                  ]
                                  [ Perm16 ]
                              ]
                          ]
                      ];
                    EF;
                    Ty.apply
                      (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                      [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                      [ F; Perm24 ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "p3_uni_stark::config::StarkConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_circle::pcs::CirclePcs")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 24;
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [ Perm24 ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 8;
                                  Value.Integer IntegerKind.Usize 16
                                ]
                                [ Perm16 ]
                            ];
                          Ty.apply
                            (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                            []
                            [
                              F;
                              EF;
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 24;
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [ Perm24 ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 16
                                    ]
                                    [ Perm16 ]
                                ]
                            ]
                        ];
                      EF;
                      Ty.apply
                        (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                        [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                        [ F; Perm24 ]
                    ],
                  "new",
                  [],
                  []
                |),
                [ M.read (| pcs |); M.read (| challenger |) ]
              |)
            |) in
          let~ proof :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::proof::Proof")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_uni_stark::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_circle::pcs::CirclePcs")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 24;
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [ Perm24 ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 16
                                    ]
                                    [ Perm16 ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  F;
                                  EF;
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_field::field::Field"
                                        []
                                        []
                                        F
                                        "Packing";
                                      Ty.associated_in_trait
                                        "p3_field::field::Field"
                                        []
                                        []
                                        F
                                        "Packing";
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 24;
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [ Perm24 ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 16
                                        ]
                                        [ Perm16 ]
                                    ]
                                ]
                            ];
                          EF;
                          Ty.apply
                            (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                            [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16
                            ]
                            [ F; Perm24 ]
                        ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "p3_uni_stark::proof::Proof")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_circle::pcs::CirclePcs")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 24;
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [ Perm24 ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 16
                                  ]
                                  [ Perm16 ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                F;
                                EF;
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 24;
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [ Perm24 ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 16
                                      ]
                                      [ Perm16 ]
                                  ]
                              ]
                          ];
                        EF;
                        Ty.apply
                          (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                          [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                          [ F; Perm24 ]
                      ]
                  ],
                M.get_function (|
                  "p3_uni_stark::prover::prove",
                  [],
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_circle::pcs::CirclePcs")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 24;
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [ Perm24 ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 16
                                  ]
                                  [ Perm16 ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                F;
                                EF;
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 24;
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [ Perm24 ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 16
                                      ]
                                      [ Perm16 ]
                                  ]
                              ]
                          ];
                        EF;
                        Ty.apply
                          (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                          [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                          [ F; Perm24 ]
                      ];
                    PG
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, config |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, proof_goal |) |)
                  |);
                  M.read (| trace |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ],
                              "new",
                              [],
                              []
                            |),
                            []
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_function (|
                  "p3_examples::proofs::report_proof_size",
                  [],
                  [
                    Ty.apply
                      (Ty.path "p3_uni_stark::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_circle::pcs::CirclePcs")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 24;
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [ Perm24 ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 16
                                  ]
                                  [ Perm16 ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                F;
                                EF;
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      F
                                      "Packing";
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 24;
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [ Perm24 ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 16
                                      ]
                                      [ Perm16 ]
                                  ]
                              ]
                          ];
                        EF;
                        Ty.apply
                          (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                          [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                          [ F; Perm24 ]
                      ]
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, proof |) |)
                  |)
                ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple [];
                  Ty.apply
                    (Ty.path "p3_uni_stark::verifier::VerificationError")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_fri::verifier::FriError")
                        []
                        [
                          Ty.path "p3_merkle_tree::mmcs::MerkleTreeError";
                          Ty.apply
                            (Ty.path "p3_circle::pcs::InputError")
                            []
                            [
                              Ty.path "p3_merkle_tree::mmcs::MerkleTreeError";
                              Ty.path "p3_merkle_tree::mmcs::MerkleTreeError"
                            ]
                        ]
                    ]
                ],
              M.get_function (|
                "p3_uni_stark::verifier::verify",
                [],
                [
                  Ty.apply
                    (Ty.path "p3_uni_stark::config::StarkConfig")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_circle::pcs::CirclePcs")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                              Ty.apply
                                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                [
                                  Value.Integer IntegerKind.Usize 24;
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [ Perm24 ];
                              Ty.apply
                                (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 8;
                                  Value.Integer IntegerKind.Usize 16
                                ]
                                [ Perm16 ]
                            ];
                          Ty.apply
                            (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                            []
                            [
                              F;
                              EF;
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 24;
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [ Perm24 ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 16
                                    ]
                                    [ Perm16 ]
                                ]
                            ]
                        ];
                      EF;
                      Ty.apply
                        (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                        [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
                        [ F; Perm24 ]
                    ];
                  PG
                ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, config |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, proof_goal |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, proof |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            "new",
                            [],
                            []
                          |),
                          []
                        |)
                      |)
                    |)
                  |)
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_prove_m31_poseidon2 :
    M.IsFunction.C "p3_examples::proofs::prove_m31_poseidon2" prove_m31_poseidon2.
  Admitted.
  Global Typeclasses Opaque prove_m31_poseidon2.
  
  (*
  pub fn report_result(result: Result<(), impl Debug>) {
      if let Err(e) = result {
          panic!("{:?}", e);
      } else {
          println!("Proof Verified Successfully")
      }
  }
  *)
  Definition report_result (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ impl_Debug ], [ result ] =>
      ltac:(M.monadic
        (let result := M.alloc (| result |) in
        M.read (|
          M.match_operator (|
            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := result in
                  let γ0_0 :=
                    M.SubPointer.get_struct_tuple_field (| γ, "core::result::Result::Err", 0 |) in
                  let e := M.copy (| γ0_0 |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        Ty.path "never",
                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1
                              ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (| Value.Array [ mk_str (| "" |) ] |)
                                  |)
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::rt::Argument",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_debug",
                                              [],
                                              [ impl_Debug ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, e |) |)
                                              |)
                                            ]
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_function (| "std::io::stdio::_print", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              [ Value.Integer IntegerKind.Usize 1 ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array [ mk_str (| "Proof Verified Successfully
" |) ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_report_result :
    M.IsFunction.C "p3_examples::proofs::report_result" report_result.
  Admitted.
  Global Typeclasses Opaque report_result.
  
  (*
  pub fn report_proof_size<SC>(proof: &Proof<SC>)
  where
      SC: StarkGenericConfig,
  {
      let config = bincode::config::standard()
          .with_little_endian()
          .with_fixed_int_encoding();
      let proof_bytes =
          bincode::serde::encode_to_vec(proof, config).expect("Failed to serialize proof");
      println!("Proof size: {} bytes", proof_bytes.len());
  }
  *)
  Definition report_proof_size (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ SC ], [ proof ] =>
      ltac:(M.monadic
        (let proof := M.alloc (| proof |) in
        M.read (|
          let~ config :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "bincode::config::Configuration")
                    []
                    [
                      Ty.path "bincode::config::LittleEndian";
                      Ty.path "bincode::config::Fixint";
                      Ty.path "bincode::config::NoLimit"
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "bincode::config::Configuration")
                  []
                  [
                    Ty.path "bincode::config::LittleEndian";
                    Ty.path "bincode::config::Fixint";
                    Ty.path "bincode::config::NoLimit"
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "bincode::config::Configuration")
                    []
                    [
                      Ty.path "bincode::config::LittleEndian";
                      Ty.path "bincode::config::Varint";
                      Ty.path "bincode::config::NoLimit"
                    ],
                  "with_fixed_int_encoding",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "bincode::config::Configuration")
                      []
                      [
                        Ty.path "bincode::config::LittleEndian";
                        Ty.path "bincode::config::Varint";
                        Ty.path "bincode::config::NoLimit"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "bincode::config::Configuration")
                        []
                        [
                          Ty.path "bincode::config::LittleEndian";
                          Ty.path "bincode::config::Varint";
                          Ty.path "bincode::config::NoLimit"
                        ],
                      "with_little_endian",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "bincode::config::Configuration")
                          []
                          [
                            Ty.path "bincode::config::LittleEndian";
                            Ty.path "bincode::config::Varint";
                            Ty.path "bincode::config::NoLimit"
                          ],
                        M.get_function (| "bincode::config::standard", [], [] |),
                        []
                      |)
                    ]
                  |)
                ]
              |)
            |) in
          let~ proof_bytes :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                      Ty.path "bincode::error::EncodeError"
                    ],
                  "expect",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ];
                        Ty.path "bincode::error::EncodeError"
                      ],
                    M.get_function (|
                      "bincode::features::serde::ser::encode_to_vec",
                      [],
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "p3_uni_stark::proof::Proof") [] [ SC ] ];
                        Ty.apply
                          (Ty.path "bincode::config::Configuration")
                          []
                          [
                            Ty.path "bincode::config::LittleEndian";
                            Ty.path "bincode::config::Fixint";
                            Ty.path "bincode::config::NoLimit"
                          ]
                      ]
                    |),
                    [ M.read (| proof |); M.read (| config |) ]
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "Failed to serialize proof" |) |)
                  |)
                ]
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (| "std::io::stdio::_print", [], [] |),
                  [
                    M.call_closure (|
                      Ty.path "core::fmt::Arguments",
                      M.get_associated_function (|
                        Ty.path "core::fmt::Arguments",
                        "new_v1",
                        [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Value.Array [ mk_str (| "Proof size: " |); mk_str (| " bytes
" |) ]
                              |)
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Value.Array
                                  [
                                    M.call_closure (|
                                      Ty.path "core::fmt::rt::Argument",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::rt::Argument",
                                        "new_display",
                                        [],
                                        [ Ty.path "usize" ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "len",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, proof_bytes |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_report_proof_size :
    M.IsFunction.C "p3_examples::proofs::report_proof_size" report_proof_size.
  Admitted.
  Global Typeclasses Opaque report_proof_size.
End proofs.
