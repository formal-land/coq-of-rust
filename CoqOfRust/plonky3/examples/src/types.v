(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module types.
  Definition value_KECCAK_VECTOR_LEN (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (get_constant (| "p3_keccak::sse2::VECTOR_LEN", Ty.path "usize" |))).
  
  Global Instance Instance_IsConstant_value_KECCAK_VECTOR_LEN :
    M.IsFunction.C "p3_examples::types::KECCAK_VECTOR_LEN" value_KECCAK_VECTOR_LEN.
  Admitted.
  Global Typeclasses Opaque value_KECCAK_VECTOR_LEN.
  
  Axiom KeccakCompressionFunction :
    (Ty.path "p3_examples::types::KeccakCompressionFunction") =
      (Ty.apply
        (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
        [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
        [
          Ty.apply
            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
            [
              Value.Integer IntegerKind.Usize 25;
              Value.Integer IntegerKind.Usize 17;
              Value.Integer IntegerKind.Usize 4
            ]
            [ Ty.path "p3_keccak::KeccakF" ]
        ]).
  
  Axiom KeccakMerkleMmcs :
    forall (F : Ty.t),
    (Ty.apply (Ty.path "p3_examples::types::KeccakMerkleMmcs") [] [ F ]) =
      (Ty.apply
        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
        [ Value.Integer IntegerKind.Usize 4 ]
        [
          Ty.apply
            (Ty.path "array")
            [ M.unevaluated_const (mk_str (| "p3_examples_types_KeccakMerkleMmcs_discriminant" |)) ]
            [ F ];
          Ty.apply
            (Ty.path "array")
            [ M.unevaluated_const (mk_str (| "p3_examples_types_KeccakMerkleMmcs_discriminant" |)) ]
            [ Ty.path "u64" ];
          Ty.apply
            (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
            []
            [
              Ty.apply
                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                [
                  Value.Integer IntegerKind.Usize 25;
                  Value.Integer IntegerKind.Usize 17;
                  Value.Integer IntegerKind.Usize 4
                ]
                [ Ty.path "p3_keccak::KeccakF" ]
            ];
          Ty.apply
            (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
            [
              Ty.apply
                (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                [
                  Value.Integer IntegerKind.Usize 25;
                  Value.Integer IntegerKind.Usize 17;
                  Value.Integer IntegerKind.Usize 4
                ]
                [ Ty.path "p3_keccak::KeccakF" ]
            ]
        ]).
  
  Axiom KeccakStarkConfig :
    forall (F EF DFT : Ty.t),
    (Ty.apply (Ty.path "p3_examples::types::KeccakStarkConfig") [] [ F; EF; DFT ]) =
      (Ty.apply
        (Ty.path "p3_uni_stark::config::StarkConfig")
        []
        [
          Ty.apply
            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
            []
            [
              F;
              DFT;
              Ty.apply
                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                [ Value.Integer IntegerKind.Usize 4 ]
                [
                  Ty.apply
                    (Ty.path "array")
                    [
                      M.unevaluated_const
                        (mk_str (| "p3_examples_types_KeccakMerkleMmcs_discriminant" |))
                    ]
                    [ F ];
                  Ty.apply
                    (Ty.path "array")
                    [
                      M.unevaluated_const
                        (mk_str (| "p3_examples_types_KeccakMerkleMmcs_discriminant" |))
                    ]
                    [ Ty.path "u64" ];
                  Ty.apply
                    (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 25;
                          Value.Integer IntegerKind.Usize 17;
                          Value.Integer IntegerKind.Usize 4
                        ]
                        [ Ty.path "p3_keccak::KeccakF" ]
                    ];
                  Ty.apply
                    (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                    [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                    [
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 25;
                          Value.Integer IntegerKind.Usize 17;
                          Value.Integer IntegerKind.Usize 4
                        ]
                        [ Ty.path "p3_keccak::KeccakF" ]
                    ]
                ];
              Ty.apply
                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                []
                [
                  F;
                  EF;
                  Ty.apply
                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [
                      Ty.apply
                        (Ty.path "array")
                        [
                          M.unevaluated_const
                            (mk_str (| "p3_examples_types_KeccakMerkleMmcs_discriminant" |))
                        ]
                        [ F ];
                      Ty.apply
                        (Ty.path "array")
                        [
                          M.unevaluated_const
                            (mk_str (| "p3_examples_types_KeccakMerkleMmcs_discriminant" |))
                        ]
                        [ Ty.path "u64" ];
                      Ty.apply
                        (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 25;
                              Value.Integer IntegerKind.Usize 17;
                              Value.Integer IntegerKind.Usize 4
                            ]
                            [ Ty.path "p3_keccak::KeccakF" ]
                        ];
                      Ty.apply
                        (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                        [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 25;
                              Value.Integer IntegerKind.Usize 17;
                              Value.Integer IntegerKind.Usize 4
                            ]
                            [ Ty.path "p3_keccak::KeccakF" ]
                        ]
                    ]
                ]
            ];
          EF;
          Ty.apply
            (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
            []
            [
              F;
              Ty.apply
                (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                [ Value.Integer IntegerKind.Usize 32 ]
                [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
            ]
        ]).
  
  Axiom KeccakCircleStarkConfig :
    forall (F EF : Ty.t),
    (Ty.apply (Ty.path "p3_examples::types::KeccakCircleStarkConfig") [] [ F; EF ]) =
      (Ty.apply
        (Ty.path "p3_uni_stark::config::StarkConfig")
        []
        [
          Ty.apply
            (Ty.path "p3_circle::pcs::CirclePcs")
            []
            [
              F;
              Ty.apply
                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                [ Value.Integer IntegerKind.Usize 4 ]
                [
                  Ty.apply
                    (Ty.path "array")
                    [
                      M.unevaluated_const
                        (mk_str (| "p3_examples_types_KeccakMerkleMmcs_discriminant" |))
                    ]
                    [ F ];
                  Ty.apply
                    (Ty.path "array")
                    [
                      M.unevaluated_const
                        (mk_str (| "p3_examples_types_KeccakMerkleMmcs_discriminant" |))
                    ]
                    [ Ty.path "u64" ];
                  Ty.apply
                    (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 25;
                          Value.Integer IntegerKind.Usize 17;
                          Value.Integer IntegerKind.Usize 4
                        ]
                        [ Ty.path "p3_keccak::KeccakF" ]
                    ];
                  Ty.apply
                    (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                    [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                    [
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 25;
                          Value.Integer IntegerKind.Usize 17;
                          Value.Integer IntegerKind.Usize 4
                        ]
                        [ Ty.path "p3_keccak::KeccakF" ]
                    ]
                ];
              Ty.apply
                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                []
                [
                  F;
                  EF;
                  Ty.apply
                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [
                      Ty.apply
                        (Ty.path "array")
                        [
                          M.unevaluated_const
                            (mk_str (| "p3_examples_types_KeccakMerkleMmcs_discriminant" |))
                        ]
                        [ F ];
                      Ty.apply
                        (Ty.path "array")
                        [
                          M.unevaluated_const
                            (mk_str (| "p3_examples_types_KeccakMerkleMmcs_discriminant" |))
                        ]
                        [ Ty.path "u64" ];
                      Ty.apply
                        (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32To64")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 25;
                              Value.Integer IntegerKind.Usize 17;
                              Value.Integer IntegerKind.Usize 4
                            ]
                            [ Ty.path "p3_keccak::KeccakF" ]
                        ];
                      Ty.apply
                        (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                        [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.apply
                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                            [
                              Value.Integer IntegerKind.Usize 25;
                              Value.Integer IntegerKind.Usize 17;
                              Value.Integer IntegerKind.Usize 4
                            ]
                            [ Ty.path "p3_keccak::KeccakF" ]
                        ]
                    ]
                ]
            ];
          EF;
          Ty.apply
            (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
            []
            [
              F;
              Ty.apply
                (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                [ Value.Integer IntegerKind.Usize 32 ]
                [ Ty.path "u8"; Ty.path "p3_keccak::Keccak256Hash" ]
            ]
        ]).
  
  Axiom Poseidon2Sponge :
    forall (Perm24 : Ty.t),
    (Ty.apply (Ty.path "p3_examples::types::Poseidon2Sponge") [] [ Perm24 ]) =
      (Ty.apply
        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
        [
          Value.Integer IntegerKind.Usize 24;
          Value.Integer IntegerKind.Usize 16;
          Value.Integer IntegerKind.Usize 8
        ]
        [ Perm24 ]).
  
  Axiom Poseidon2Compression :
    forall (Perm16 : Ty.t),
    (Ty.apply (Ty.path "p3_examples::types::Poseidon2Compression") [] [ Perm16 ]) =
      (Ty.apply
        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
        [
          Value.Integer IntegerKind.Usize 2;
          Value.Integer IntegerKind.Usize 8;
          Value.Integer IntegerKind.Usize 16
        ]
        [ Perm16 ]).
  
  Axiom Poseidon2MerkleMmcs :
    forall (F Perm16 Perm24 : Ty.t),
    (Ty.apply (Ty.path "p3_examples::types::Poseidon2MerkleMmcs") [] [ F; Perm16; Perm24 ]) =
      (Ty.apply
        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
        [ Value.Integer IntegerKind.Usize 8 ]
        [
          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
          Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
          Ty.apply
            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
            [
              Value.Integer IntegerKind.Usize 24;
              Value.Integer IntegerKind.Usize 16;
              Value.Integer IntegerKind.Usize 8
            ]
            [ Perm24 ];
          Ty.apply
            (Ty.path "p3_symmetric::compression::TruncatedPermutation")
            [
              Value.Integer IntegerKind.Usize 2;
              Value.Integer IntegerKind.Usize 8;
              Value.Integer IntegerKind.Usize 16
            ]
            [ Perm16 ]
        ]).
  
  Axiom Poseidon2StarkConfig :
    forall (F EF DFT Perm16 Perm24 : Ty.t),
    (Ty.apply
        (Ty.path "p3_examples::types::Poseidon2StarkConfig")
        []
        [ F; EF; DFT; Perm16; Perm24 ]) =
      (Ty.apply
        (Ty.path "p3_uni_stark::config::StarkConfig")
        []
        [
          Ty.apply
            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
            []
            [
              F;
              DFT;
              Ty.apply
                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                [ Value.Integer IntegerKind.Usize 8 ]
                [
                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                  Ty.apply
                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                    [
                      Value.Integer IntegerKind.Usize 24;
                      Value.Integer IntegerKind.Usize 16;
                      Value.Integer IntegerKind.Usize 8
                    ]
                    [ Perm24 ];
                  Ty.apply
                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                    [
                      Value.Integer IntegerKind.Usize 2;
                      Value.Integer IntegerKind.Usize 8;
                      Value.Integer IntegerKind.Usize 16
                    ]
                    [ Perm16 ]
                ];
              Ty.apply
                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                []
                [
                  F;
                  EF;
                  Ty.apply
                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                    [ Value.Integer IntegerKind.Usize 8 ]
                    [
                      Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                      Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 24;
                          Value.Integer IntegerKind.Usize 16;
                          Value.Integer IntegerKind.Usize 8
                        ]
                        [ Perm24 ];
                      Ty.apply
                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                        [
                          Value.Integer IntegerKind.Usize 2;
                          Value.Integer IntegerKind.Usize 8;
                          Value.Integer IntegerKind.Usize 16
                        ]
                        [ Perm16 ]
                    ]
                ]
            ];
          EF;
          Ty.apply
            (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
            [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
            [ F; Perm24 ]
        ]).
  
  Axiom Poseidon2CircleStarkConfig :
    forall (F EF Perm16 Perm24 : Ty.t),
    (Ty.apply
        (Ty.path "p3_examples::types::Poseidon2CircleStarkConfig")
        []
        [ F; EF; Perm16; Perm24 ]) =
      (Ty.apply
        (Ty.path "p3_uni_stark::config::StarkConfig")
        []
        [
          Ty.apply
            (Ty.path "p3_circle::pcs::CirclePcs")
            []
            [
              F;
              Ty.apply
                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                [ Value.Integer IntegerKind.Usize 8 ]
                [
                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                  Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                  Ty.apply
                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                    [
                      Value.Integer IntegerKind.Usize 24;
                      Value.Integer IntegerKind.Usize 16;
                      Value.Integer IntegerKind.Usize 8
                    ]
                    [ Perm24 ];
                  Ty.apply
                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                    [
                      Value.Integer IntegerKind.Usize 2;
                      Value.Integer IntegerKind.Usize 8;
                      Value.Integer IntegerKind.Usize 16
                    ]
                    [ Perm16 ]
                ];
              Ty.apply
                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                []
                [
                  F;
                  EF;
                  Ty.apply
                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                    [ Value.Integer IntegerKind.Usize 8 ]
                    [
                      Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                      Ty.associated_in_trait "p3_field::field::Field" [] [] F "Packing";
                      Ty.apply
                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                        [
                          Value.Integer IntegerKind.Usize 24;
                          Value.Integer IntegerKind.Usize 16;
                          Value.Integer IntegerKind.Usize 8
                        ]
                        [ Perm24 ];
                      Ty.apply
                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                        [
                          Value.Integer IntegerKind.Usize 2;
                          Value.Integer IntegerKind.Usize 8;
                          Value.Integer IntegerKind.Usize 16
                        ]
                        [ Perm16 ]
                    ]
                ]
            ];
          EF;
          Ty.apply
            (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
            [ Value.Integer IntegerKind.Usize 24; Value.Integer IntegerKind.Usize 16 ]
            [ F; Perm24 ]
        ]).
End types.
