(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module bench_func.
  (*
  pub fn benchmark_square<F: Field>(c: &mut Criterion, name: &str)
  where
      StandardUniform: Distribution<F>,
  {
      let mut rng = SmallRng::seed_from_u64(1);
      let x = rng.random::<F>();
      c.bench_function(&format!("{} square", name), |b| {
          b.iter(|| black_box(black_box(x).square()))
      });
  }
  *)
  Definition benchmark_square (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ c; name ] =>
      ltac:(M.monadic
        (let c := M.alloc (| c |) in
        let name := M.alloc (| name |) in
        M.read (|
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          let~ x : Ty.apply (Ty.path "*") [] [ F ] :=
            M.alloc (|
              M.call_closure (|
                F,
                M.get_trait_method (|
                  "rand::rng::Rng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "random",
                  [],
                  [ F ]
                |),
                [ M.borrow (| Pointer.Kind.MutRef, rng |) ]
              |)
            |) in
          let~ _ :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "criterion::Criterion")
                        []
                        [ Ty.path "criterion::measurement::WallTime" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "criterion::Criterion")
                      []
                      [ Ty.path "criterion::measurement::WallTime" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "criterion::Criterion")
                    []
                    [ Ty.path "criterion::measurement::WallTime" ],
                  "bench_function",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "criterion::bencher::Bencher")
                                  []
                                  [ Ty.path "criterion::measurement::WallTime" ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| c |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.path "alloc::string::String",
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (|
                                      "core::hint::must_use",
                                      [],
                                      [ Ty.path "alloc::string::String" ]
                                    |),
                                    [
                                      M.read (|
                                        let~ res :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "alloc::string::String" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloc::string::String",
                                              M.get_function (| "alloc::fmt::format", [], [] |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      Value.Integer IntegerKind.Usize 1
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (| "" |);
                                                                mk_str (| " square" |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          name
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "criterion::bencher::Bencher")
                                                []
                                                [ Ty.path "criterion::measurement::WallTime" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let b := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "criterion::bencher::Bencher")
                                          []
                                          [ Ty.path "criterion::measurement::WallTime" ],
                                        "iter",
                                        [],
                                        [ F; Ty.function [ Ty.tuple [] ] F ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| b |) |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [ Ty.function [ Ty.tuple [] ] F ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            F,
                                                            M.get_function (|
                                                              "criterion::black_box",
                                                              [],
                                                              [ F ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                F,
                                                                M.get_trait_method (|
                                                                  "p3_field::field::PrimeCharacteristicRing",
                                                                  F,
                                                                  [],
                                                                  [],
                                                                  "square",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        F,
                                                                        M.get_function (|
                                                                          "criterion::black_box",
                                                                          [],
                                                                          [ F ]
                                                                        |),
                                                                        [ M.read (| x |) ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_benchmark_square :
    M.IsFunction.C "p3_field_testing::bench_func::benchmark_square" benchmark_square.
  Admitted.
  Global Typeclasses Opaque benchmark_square.
  
  (*
  pub fn benchmark_inv<F: Field>(c: &mut Criterion, name: &str)
  where
      StandardUniform: Distribution<F>,
  {
      let mut rng = SmallRng::seed_from_u64(1);
      let x = rng.random::<F>();
      c.bench_function(&format!("{} inv", name), |b| {
          b.iter(|| black_box(black_box(x)).inverse())
      });
  }
  *)
  Definition benchmark_inv (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ c; name ] =>
      ltac:(M.monadic
        (let c := M.alloc (| c |) in
        let name := M.alloc (| name |) in
        M.read (|
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          let~ x : Ty.apply (Ty.path "*") [] [ F ] :=
            M.alloc (|
              M.call_closure (|
                F,
                M.get_trait_method (|
                  "rand::rng::Rng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "random",
                  [],
                  [ F ]
                |),
                [ M.borrow (| Pointer.Kind.MutRef, rng |) ]
              |)
            |) in
          let~ _ :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "criterion::Criterion")
                        []
                        [ Ty.path "criterion::measurement::WallTime" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "criterion::Criterion")
                      []
                      [ Ty.path "criterion::measurement::WallTime" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "criterion::Criterion")
                    []
                    [ Ty.path "criterion::measurement::WallTime" ],
                  "bench_function",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "criterion::bencher::Bencher")
                                  []
                                  [ Ty.path "criterion::measurement::WallTime" ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| c |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.path "alloc::string::String",
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (|
                                      "core::hint::must_use",
                                      [],
                                      [ Ty.path "alloc::string::String" ]
                                    |),
                                    [
                                      M.read (|
                                        let~ res :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "alloc::string::String" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloc::string::String",
                                              M.get_function (| "alloc::fmt::format", [], [] |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      Value.Integer IntegerKind.Usize 1
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [ mk_str (| "" |); mk_str (| " inv" |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          name
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "criterion::bencher::Bencher")
                                                []
                                                [ Ty.path "criterion::measurement::WallTime" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let b := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "criterion::bencher::Bencher")
                                          []
                                          [ Ty.path "criterion::measurement::WallTime" ],
                                        "iter",
                                        [],
                                        [ F; Ty.function [ Ty.tuple [] ] F ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| b |) |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [ Ty.function [ Ty.tuple [] ] F ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            F,
                                                            M.get_trait_method (|
                                                              "p3_field::field::Field",
                                                              F,
                                                              [],
                                                              [],
                                                              "inverse",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    F,
                                                                    M.get_function (|
                                                                      "criterion::black_box",
                                                                      [],
                                                                      [ F ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        F,
                                                                        M.get_function (|
                                                                          "criterion::black_box",
                                                                          [],
                                                                          [ F ]
                                                                        |),
                                                                        [ M.read (| x |) ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_benchmark_inv :
    M.IsFunction.C "p3_field_testing::bench_func::benchmark_inv" benchmark_inv.
  Admitted.
  Global Typeclasses Opaque benchmark_inv.
  
  (*
  pub fn benchmark_mul_2exp<R: PrimeCharacteristicRing + Copy, const REPS: usize>(
      c: &mut Criterion,
      name: &str,
      val: u64,
  ) where
      StandardUniform: Distribution<R>,
  {
      let mut rng = SmallRng::seed_from_u64(1);
      let mut input = Vec::new();
      for _ in 0..REPS {
          input.push(rng.random::<R>())
      }
      c.bench_function(&format!("{} mul_2exp_u64 {}", name, val), |b| {
          b.iter(|| input.iter_mut().for_each(|i| *i = i.mul_2exp_u64(val)))
      });
  }
  *)
  Definition benchmark_mul_2exp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ REPS ], [ R ], [ c; name; val ] =>
      ltac:(M.monadic
        (let c := M.alloc (| c |) in
        let name := M.alloc (| name |) in
        let val := M.alloc (| val |) in
        M.read (|
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          let~ input :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ R; Ty.path "alloc::alloc::Global" ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ R; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ R; Ty.path "alloc::alloc::Global" ],
                  "new",
                  [],
                  []
                |),
                []
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", REPS) ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ R; Ty.path "alloc::alloc::Global" ],
                                          "push",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, input |);
                                          M.call_closure (|
                                            R,
                                            M.get_trait_method (|
                                              "rand::rng::Rng",
                                              Ty.path "rand::rngs::small::SmallRng",
                                              [],
                                              [],
                                              "random",
                                              [],
                                              [ R ]
                                            |),
                                            [ M.borrow (| Pointer.Kind.MutRef, rng |) ]
                                          |)
                                        ]
                                      |)
                                    |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          let~ _ :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "criterion::Criterion")
                        []
                        [ Ty.path "criterion::measurement::WallTime" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "criterion::Criterion")
                      []
                      [ Ty.path "criterion::measurement::WallTime" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "criterion::Criterion")
                    []
                    [ Ty.path "criterion::measurement::WallTime" ],
                  "bench_function",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "criterion::bencher::Bencher")
                                  []
                                  [ Ty.path "criterion::measurement::WallTime" ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| c |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.path "alloc::string::String",
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (|
                                      "core::hint::must_use",
                                      [],
                                      [ Ty.path "alloc::string::String" ]
                                    |),
                                    [
                                      M.read (|
                                        let~ res :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "alloc::string::String" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloc::string::String",
                                              M.get_function (| "alloc::fmt::format", [], [] |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      Value.Integer IntegerKind.Usize 2
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (| "" |);
                                                                mk_str (| " mul_2exp_u64 " |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          name
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "u64" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          val
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "criterion::bencher::Bencher")
                                                []
                                                [ Ty.path "criterion::measurement::WallTime" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let b := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "criterion::bencher::Bencher")
                                          []
                                          [ Ty.path "criterion::measurement::WallTime" ],
                                        "iter",
                                        [],
                                        [ Ty.tuple []; Ty.function [ Ty.tuple [] ] (Ty.tuple []) ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| b |) |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [ Ty.function [ Ty.tuple [] ] (Ty.tuple []) ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            Ty.tuple [],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [ R ],
                                                              [],
                                                              [],
                                                              "for_each",
                                                              [],
                                                              [
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [ R ]
                                                                      ]
                                                                  ]
                                                                  (Ty.tuple [])
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [ R ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ R ],
                                                                  "iter_mut",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [ R ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::DerefMut",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              R;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "deref_mut",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            input
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      ltac:(M.monadic
                                                                        (M.match_operator (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&mut")
                                                                                        []
                                                                                        [ R ]
                                                                                    ]
                                                                                ]
                                                                                (Ty.tuple [])
                                                                            ],
                                                                          M.alloc (| α0 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let i :=
                                                                                  M.copy (| γ |) in
                                                                                M.write (|
                                                                                  M.deref (|
                                                                                    M.read (| i |)
                                                                                  |),
                                                                                  M.call_closure (|
                                                                                    R,
                                                                                    M.get_trait_method (|
                                                                                      "p3_field::field::PrimeCharacteristicRing",
                                                                                      R,
                                                                                      [],
                                                                                      [],
                                                                                      "mul_2exp_u64",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            i
                                                                                          |)
                                                                                        |)
                                                                                      |);
                                                                                      M.read (|
                                                                                        val
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                    | _ =>
                                                                      M.impossible
                                                                        "wrong number of arguments"
                                                                    end))
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_benchmark_mul_2exp :
    M.IsFunction.C "p3_field_testing::bench_func::benchmark_mul_2exp" benchmark_mul_2exp.
  Admitted.
  Global Typeclasses Opaque benchmark_mul_2exp.
  
  (*
  pub fn benchmark_div_2exp<F: Field, const REPS: usize>(c: &mut Criterion, name: &str, val: u64)
  where
      StandardUniform: Distribution<F>,
  {
      let mut rng = SmallRng::seed_from_u64(1);
      let mut input = Vec::new();
      for _ in 0..REPS {
          input.push(rng.random::<F>())
      }
      c.bench_function(&format!("{} div_2exp_u64 {}", name, val), |b| {
          b.iter(|| input.iter_mut().for_each(|i| *i = i.div_2exp_u64(val)))
      });
  }
  *)
  Definition benchmark_div_2exp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ REPS ], [ F ], [ c; name; val ] =>
      ltac:(M.monadic
        (let c := M.alloc (| c |) in
        let name := M.alloc (| name |) in
        let val := M.alloc (| val |) in
        M.read (|
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          let~ input :
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                  "new",
                  [],
                  []
                |),
                []
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", REPS) ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ F; Ty.path "alloc::alloc::Global" ],
                                          "push",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, input |);
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "rand::rng::Rng",
                                              Ty.path "rand::rngs::small::SmallRng",
                                              [],
                                              [],
                                              "random",
                                              [],
                                              [ F ]
                                            |),
                                            [ M.borrow (| Pointer.Kind.MutRef, rng |) ]
                                          |)
                                        ]
                                      |)
                                    |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          let~ _ :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "criterion::Criterion")
                        []
                        [ Ty.path "criterion::measurement::WallTime" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "criterion::Criterion")
                      []
                      [ Ty.path "criterion::measurement::WallTime" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "criterion::Criterion")
                    []
                    [ Ty.path "criterion::measurement::WallTime" ],
                  "bench_function",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "criterion::bencher::Bencher")
                                  []
                                  [ Ty.path "criterion::measurement::WallTime" ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| c |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.path "alloc::string::String",
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (|
                                      "core::hint::must_use",
                                      [],
                                      [ Ty.path "alloc::string::String" ]
                                    |),
                                    [
                                      M.read (|
                                        let~ res :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "alloc::string::String" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloc::string::String",
                                              M.get_function (| "alloc::fmt::format", [], [] |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      Value.Integer IntegerKind.Usize 2
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (| "" |);
                                                                mk_str (| " div_2exp_u64 " |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          name
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "u64" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          val
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "criterion::bencher::Bencher")
                                                []
                                                [ Ty.path "criterion::measurement::WallTime" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let b := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "criterion::bencher::Bencher")
                                          []
                                          [ Ty.path "criterion::measurement::WallTime" ],
                                        "iter",
                                        [],
                                        [ Ty.tuple []; Ty.function [ Ty.tuple [] ] (Ty.tuple []) ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| b |) |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [ Ty.function [ Ty.tuple [] ] (Ty.tuple []) ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            Ty.tuple [],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                []
                                                                [ F ],
                                                              [],
                                                              [],
                                                              "for_each",
                                                              [],
                                                              [
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [ F ]
                                                                      ]
                                                                  ]
                                                                  (Ty.tuple [])
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  []
                                                                  [ F ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ F ],
                                                                  "iter_mut",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [ F ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::DerefMut",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              F;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "deref_mut",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            input
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      ltac:(M.monadic
                                                                        (M.match_operator (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&mut")
                                                                                        []
                                                                                        [ F ]
                                                                                    ]
                                                                                ]
                                                                                (Ty.tuple [])
                                                                            ],
                                                                          M.alloc (| α0 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let i :=
                                                                                  M.copy (| γ |) in
                                                                                M.write (|
                                                                                  M.deref (|
                                                                                    M.read (| i |)
                                                                                  |),
                                                                                  M.call_closure (|
                                                                                    F,
                                                                                    M.get_trait_method (|
                                                                                      "p3_field::field::Field",
                                                                                      F,
                                                                                      [],
                                                                                      [],
                                                                                      "div_2exp_u64",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            i
                                                                                          |)
                                                                                        |)
                                                                                      |);
                                                                                      M.read (|
                                                                                        val
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                    | _ =>
                                                                      M.impossible
                                                                        "wrong number of arguments"
                                                                    end))
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_benchmark_div_2exp :
    M.IsFunction.C "p3_field_testing::bench_func::benchmark_div_2exp" benchmark_div_2exp.
  Admitted.
  Global Typeclasses Opaque benchmark_div_2exp.
  
  (*
  pub fn benchmark_iter_sum<R: PrimeCharacteristicRing + Copy, const N: usize, const REPS: usize>(
      c: &mut Criterion,
      name: &str,
  ) where
      StandardUniform: Distribution<R>,
  {
      let mut rng = SmallRng::seed_from_u64(1);
      let mut input = Vec::new();
      for _ in 0..REPS {
          input.push(rng.random::<[R; N]>())
      }
      c.bench_function(&format!("{} sum/{}, {}", name, REPS, N), |b| {
          b.iter(|| {
              let mut acc = R::ZERO;
              for row in &mut input {
                  acc += row.iter().copied().sum()
              }
              acc
          })
      });
  }
  *)
  Definition benchmark_iter_sum (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N; REPS ], [ R ], [ c; name ] =>
      ltac:(M.monadic
        (let c := M.alloc (| c |) in
        let name := M.alloc (| name |) in
        M.read (|
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          let~ input :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.apply (Ty.path "array") [ N ] [ R ]; Ty.path "alloc::alloc::Global" ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.apply (Ty.path "array") [ N ] [ R ]; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.apply (Ty.path "array") [ N ] [ R ]; Ty.path "alloc::alloc::Global" ],
                  "new",
                  [],
                  []
                |),
                []
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", REPS) ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply (Ty.path "array") [ N ] [ R ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "push",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, input |);
                                          M.call_closure (|
                                            Ty.apply (Ty.path "array") [ N ] [ R ],
                                            M.get_trait_method (|
                                              "rand::rng::Rng",
                                              Ty.path "rand::rngs::small::SmallRng",
                                              [],
                                              [],
                                              "random",
                                              [],
                                              [ Ty.apply (Ty.path "array") [ N ] [ R ] ]
                                            |),
                                            [ M.borrow (| Pointer.Kind.MutRef, rng |) ]
                                          |)
                                        ]
                                      |)
                                    |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          let~ _ :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "criterion::Criterion")
                        []
                        [ Ty.path "criterion::measurement::WallTime" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "criterion::Criterion")
                      []
                      [ Ty.path "criterion::measurement::WallTime" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "criterion::Criterion")
                    []
                    [ Ty.path "criterion::measurement::WallTime" ],
                  "bench_function",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "criterion::bencher::Bencher")
                                  []
                                  [ Ty.path "criterion::measurement::WallTime" ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| c |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.path "alloc::string::String",
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (|
                                      "core::hint::must_use",
                                      [],
                                      [ Ty.path "alloc::string::String" ]
                                    |),
                                    [
                                      M.read (|
                                        let~ res :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "alloc::string::String" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloc::string::String",
                                              M.get_function (| "alloc::fmt::format", [], [] |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 3;
                                                      Value.Integer IntegerKind.Usize 3
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (| "" |);
                                                                mk_str (| " sum/" |);
                                                                mk_str (| ", " |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          name
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (| REPS |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (| N |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "criterion::bencher::Bencher")
                                                []
                                                [ Ty.path "criterion::measurement::WallTime" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let b := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "criterion::bencher::Bencher")
                                          []
                                          [ Ty.path "criterion::measurement::WallTime" ],
                                        "iter",
                                        [],
                                        [ R; Ty.function [ Ty.tuple [] ] R ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| b |) |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [ Ty.function [ Ty.tuple [] ] R ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.read (|
                                                            let~ acc :
                                                                Ty.apply (Ty.path "*") [] [ R ] :=
                                                              M.copy (|
                                                                get_constant (|
                                                                  "p3_field::field::PrimeCharacteristicRing::ZERO",
                                                                  R
                                                                |)
                                                              |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.use
                                                                (M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [ Ty.tuple [] ],
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [ N ]
                                                                            [ R ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::collect::IntoIterator",
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [ N ]
                                                                                  [ R ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "into_iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          input
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let iter :=
                                                                          M.copy (| γ |) in
                                                                        M.loop (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [ Ty.tuple [] ],
                                                                          ltac:(M.monadic
                                                                            (let~ _ :
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ] :=
                                                                              M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ],
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&mut")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "array")
                                                                                              [ N ]
                                                                                              [ R ]
                                                                                          ]
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::IterMut")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "array")
                                                                                            [ N ]
                                                                                            [ R ]
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.is_struct_tuple (|
                                                                                          γ,
                                                                                          "core::option::Option::None"
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.break (||)
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::option::Option::Some",
                                                                                          0
                                                                                        |) in
                                                                                      let row :=
                                                                                        M.copy (|
                                                                                          γ0_0
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::AddAssign",
                                                                                            R,
                                                                                            [],
                                                                                            [ R ],
                                                                                            "add_assign",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              acc
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              R,
                                                                                              M.get_trait_method (|
                                                                                                "core::iter::traits::iterator::Iterator",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::iter::adapters::copied::Copied")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::Iter")
                                                                                                      []
                                                                                                      [
                                                                                                        R
                                                                                                      ]
                                                                                                  ],
                                                                                                [],
                                                                                                [],
                                                                                                "sum",
                                                                                                [],
                                                                                                [ R
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::iter::adapters::copied::Copied")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::Iter")
                                                                                                        []
                                                                                                        [
                                                                                                          R
                                                                                                        ]
                                                                                                    ],
                                                                                                  M.get_trait_method (|
                                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::Iter")
                                                                                                      []
                                                                                                      [
                                                                                                        R
                                                                                                      ],
                                                                                                    [],
                                                                                                    [],
                                                                                                    "copied",
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ]
                                                                                                  |),
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::Iter")
                                                                                                        []
                                                                                                        [
                                                                                                          R
                                                                                                        ],
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "slice")
                                                                                                          []
                                                                                                          [
                                                                                                            R
                                                                                                          ],
                                                                                                        "iter",
                                                                                                        [],
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        (* Unsize *)
                                                                                                        M.pointer_coercion
                                                                                                          (M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                row
                                                                                                              |)
                                                                                                            |)
                                                                                                          |))
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                        |)))
                                                                  ]
                                                                |)) in
                                                            acc
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_benchmark_iter_sum :
    M.IsFunction.C "p3_field_testing::bench_func::benchmark_iter_sum" benchmark_iter_sum.
  Admitted.
  Global Typeclasses Opaque benchmark_iter_sum.
  
  (*
  pub fn benchmark_sum_array<R: PrimeCharacteristicRing + Copy, const N: usize, const REPS: usize>(
      c: &mut Criterion,
      name: &str,
  ) where
      StandardUniform: Distribution<R>,
  {
      let mut rng = SmallRng::seed_from_u64(1);
      let mut input = Vec::new();
      for _ in 0..REPS {
          input.push(rng.random::<[R; N]>())
      }
      c.bench_function(&format!("{} tree sum/{}, {}", name, REPS, N), |b| {
          b.iter(|| {
              let mut acc = R::ZERO;
              for row in &mut input {
                  acc += R::sum_array::<N>(row)
              }
              acc
          })
      });
  }
  *)
  Definition benchmark_sum_array (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N; REPS ], [ R ], [ c; name ] =>
      ltac:(M.monadic
        (let c := M.alloc (| c |) in
        let name := M.alloc (| name |) in
        M.read (|
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          let~ input :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.apply (Ty.path "array") [ N ] [ R ]; Ty.path "alloc::alloc::Global" ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.apply (Ty.path "array") [ N ] [ R ]; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.apply (Ty.path "array") [ N ] [ R ]; Ty.path "alloc::alloc::Global" ],
                  "new",
                  [],
                  []
                |),
                []
              |)
            |) in
          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", REPS) ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply (Ty.path "array") [ N ] [ R ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "push",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, input |);
                                          M.call_closure (|
                                            Ty.apply (Ty.path "array") [ N ] [ R ],
                                            M.get_trait_method (|
                                              "rand::rng::Rng",
                                              Ty.path "rand::rngs::small::SmallRng",
                                              [],
                                              [],
                                              "random",
                                              [],
                                              [ Ty.apply (Ty.path "array") [ N ] [ R ] ]
                                            |),
                                            [ M.borrow (| Pointer.Kind.MutRef, rng |) ]
                                          |)
                                        ]
                                      |)
                                    |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |)) in
          let~ _ :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "criterion::Criterion")
                        []
                        [ Ty.path "criterion::measurement::WallTime" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "criterion::Criterion")
                      []
                      [ Ty.path "criterion::measurement::WallTime" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "criterion::Criterion")
                    []
                    [ Ty.path "criterion::measurement::WallTime" ],
                  "bench_function",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "criterion::bencher::Bencher")
                                  []
                                  [ Ty.path "criterion::measurement::WallTime" ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| c |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.path "alloc::string::String",
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (|
                                      "core::hint::must_use",
                                      [],
                                      [ Ty.path "alloc::string::String" ]
                                    |),
                                    [
                                      M.read (|
                                        let~ res :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "alloc::string::String" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloc::string::String",
                                              M.get_function (| "alloc::fmt::format", [], [] |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 3;
                                                      Value.Integer IntegerKind.Usize 3
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (| "" |);
                                                                mk_str (| " tree sum/" |);
                                                                mk_str (| ", " |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          name
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (| REPS |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (| N |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "criterion::bencher::Bencher")
                                                []
                                                [ Ty.path "criterion::measurement::WallTime" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let b := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "criterion::bencher::Bencher")
                                          []
                                          [ Ty.path "criterion::measurement::WallTime" ],
                                        "iter",
                                        [],
                                        [ R; Ty.function [ Ty.tuple [] ] R ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| b |) |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [ Ty.function [ Ty.tuple [] ] R ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.read (|
                                                            let~ acc :
                                                                Ty.apply (Ty.path "*") [] [ R ] :=
                                                              M.copy (|
                                                                get_constant (|
                                                                  "p3_field::field::PrimeCharacteristicRing::ZERO",
                                                                  R
                                                                |)
                                                              |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.use
                                                                (M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [ Ty.tuple [] ],
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [ N ]
                                                                            [ R ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::collect::IntoIterator",
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [ N ]
                                                                                  [ R ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "into_iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          input
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let iter :=
                                                                          M.copy (| γ |) in
                                                                        M.loop (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [ Ty.tuple [] ],
                                                                          ltac:(M.monadic
                                                                            (let~ _ :
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ] :=
                                                                              M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ],
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&mut")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "array")
                                                                                              [ N ]
                                                                                              [ R ]
                                                                                          ]
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::IterMut")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "array")
                                                                                            [ N ]
                                                                                            [ R ]
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.is_struct_tuple (|
                                                                                          γ,
                                                                                          "core::option::Option::None"
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.break (||)
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::option::Option::Some",
                                                                                          0
                                                                                        |) in
                                                                                      let row :=
                                                                                        M.copy (|
                                                                                          γ0_0
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::AddAssign",
                                                                                            R,
                                                                                            [],
                                                                                            [ R ],
                                                                                            "add_assign",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              acc
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              R,
                                                                                              M.get_trait_method (|
                                                                                                "p3_field::field::PrimeCharacteristicRing",
                                                                                                R,
                                                                                                [],
                                                                                                [],
                                                                                                "sum_array",
                                                                                                [ N
                                                                                                ],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                (* Unsize *)
                                                                                                M.pointer_coercion
                                                                                                  (M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        row
                                                                                                      |)
                                                                                                    |)
                                                                                                  |))
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                        |)))
                                                                  ]
                                                                |)) in
                                                            acc
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_benchmark_sum_array :
    M.IsFunction.C "p3_field_testing::bench_func::benchmark_sum_array" benchmark_sum_array.
  Admitted.
  Global Typeclasses Opaque benchmark_sum_array.
  
  (*
  pub fn benchmark_add_latency<R: PrimeCharacteristicRing + Copy, const N: usize>(
      c: &mut Criterion,
      name: &str,
  ) where
      StandardUniform: Distribution<R>,
  {
      c.bench_function(&format!("add-latency/{} {}", N, name), |b| {
          b.iter_batched(
              || {
                  let mut rng = SmallRng::seed_from_u64(1);
                  let mut vec = Vec::new();
                  for _ in 0..N {
                      vec.push(rng.random::<R>())
                  }
                  vec
              },
              |x| x.iter().fold(R::ZERO, |x, y| x + *y),
              BatchSize::SmallInput,
          )
      });
  }
  *)
  Definition benchmark_add_latency (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ R ], [ c; name ] =>
      ltac:(M.monadic
        (let c := M.alloc (| c |) in
        let name := M.alloc (| name |) in
        M.read (|
          let~ _ :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "criterion::Criterion")
                        []
                        [ Ty.path "criterion::measurement::WallTime" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "criterion::Criterion")
                      []
                      [ Ty.path "criterion::measurement::WallTime" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "criterion::Criterion")
                    []
                    [ Ty.path "criterion::measurement::WallTime" ],
                  "bench_function",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "criterion::bencher::Bencher")
                                  []
                                  [ Ty.path "criterion::measurement::WallTime" ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| c |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.path "alloc::string::String",
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (|
                                      "core::hint::must_use",
                                      [],
                                      [ Ty.path "alloc::string::String" ]
                                    |),
                                    [
                                      M.read (|
                                        let~ res :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "alloc::string::String" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloc::string::String",
                                              M.get_function (| "alloc::fmt::format", [], [] |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      Value.Integer IntegerKind.Usize 2
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (| "add-latency/" |);
                                                                mk_str (| " " |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (| N |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          name
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "criterion::bencher::Bencher")
                                                []
                                                [ Ty.path "criterion::measurement::WallTime" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let b := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "criterion::bencher::Bencher")
                                          []
                                          [ Ty.path "criterion::measurement::WallTime" ],
                                        "iter_batched",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ R; Ty.path "alloc::alloc::Global" ];
                                          R;
                                          Ty.function
                                            [ Ty.tuple [] ]
                                            (Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ R; Ty.path "alloc::alloc::Global" ]);
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ R; Ty.path "alloc::alloc::Global" ]
                                                ]
                                            ]
                                            R
                                        ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| b |) |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [ Ty.tuple [] ]
                                                          (Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ R; Ty.path "alloc::alloc::Global" ])
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.read (|
                                                            let~ rng :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "rand::rngs::small::SmallRng"
                                                                  ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "rand::rngs::small::SmallRng",
                                                                  M.get_trait_method (|
                                                                    "rand_core::SeedableRng",
                                                                    Ty.path
                                                                      "rand::rngs::small::SmallRng",
                                                                    [],
                                                                    [],
                                                                    "seed_from_u64",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ Value.Integer IntegerKind.U64 1
                                                                  ]
                                                                |)
                                                              |) in
                                                            let~ vec :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        R;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      R;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        R;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.use
                                                                (M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [ Ty.tuple [] ],
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::ops::range::Range")
                                                                        []
                                                                        [ Ty.path "usize" ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::collect::IntoIterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::ops::range::Range")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        [],
                                                                        [],
                                                                        "into_iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        Value.StructRecord
                                                                          "core::ops::range::Range"
                                                                          [
                                                                            ("start",
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0);
                                                                            ("end_", N)
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let iter :=
                                                                          M.copy (| γ |) in
                                                                        M.loop (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [ Ty.tuple [] ],
                                                                          ltac:(M.monadic
                                                                            (let~ _ :
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ] :=
                                                                              M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ],
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::ops::range::Range")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.is_struct_tuple (|
                                                                                          γ,
                                                                                          "core::option::Option::None"
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.break (||)
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::option::Option::Some",
                                                                                          0
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                R;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            "push",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              vec
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              R,
                                                                                              M.get_trait_method (|
                                                                                                "rand::rng::Rng",
                                                                                                Ty.path
                                                                                                  "rand::rngs::small::SmallRng",
                                                                                                [],
                                                                                                [],
                                                                                                "random",
                                                                                                [],
                                                                                                [ R
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  rng
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                        |)))
                                                                  ]
                                                                |)) in
                                                            vec
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end));
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    R;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ]
                                                          R
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let x := M.copy (| γ |) in
                                                          M.call_closure (|
                                                            R,
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                []
                                                                [ R ],
                                                              [],
                                                              [],
                                                              "fold",
                                                              [],
                                                              [
                                                                R;
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        R;
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ R ]
                                                                      ]
                                                                  ]
                                                                  R
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [ R ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ R ],
                                                                  "iter",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [ R ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              R;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "deref",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            x
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::PrimeCharacteristicRing::ZERO",
                                                                  R
                                                                |)
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0; α1 ] =>
                                                                      ltac:(M.monadic
                                                                        (M.match_operator (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      R;
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [ R ]
                                                                                    ]
                                                                                ]
                                                                                R
                                                                            ],
                                                                          M.alloc (| α0 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let x :=
                                                                                  M.copy (| γ |) in
                                                                                M.match_operator (|
                                                                                  Ty.apply
                                                                                    (Ty.path "*")
                                                                                    []
                                                                                    [
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              R;
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [ R
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                        R
                                                                                    ],
                                                                                  M.alloc (| α1 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let y :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        M.call_closure (|
                                                                                          R,
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Add",
                                                                                            R,
                                                                                            [],
                                                                                            [ R ],
                                                                                            "add",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              x
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.deref (|
                                                                                                M.read (|
                                                                                                  y
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                    | _ =>
                                                                      M.impossible
                                                                        "wrong number of arguments"
                                                                    end))
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end));
                                        Value.StructTuple "criterion::BatchSize::SmallInput" []
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_benchmark_add_latency :
    M.IsFunction.C "p3_field_testing::bench_func::benchmark_add_latency" benchmark_add_latency.
  Admitted.
  Global Typeclasses Opaque benchmark_add_latency.
  
  (*
  pub fn benchmark_add_throughput<R: PrimeCharacteristicRing + Copy, const N: usize>(
      c: &mut Criterion,
      name: &str,
  ) where
      StandardUniform: Distribution<R>,
  {
      c.bench_function(&format!("add-throughput/{} {}", N, name), |b| {
          b.iter_batched(
              || {
                  let mut rng = SmallRng::seed_from_u64(1);
                  (
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                  )
              },
              |(mut a, mut b, mut c, mut d, mut e, mut f, mut g, mut h, mut i, mut j)| {
                  for _ in 0..N {
                      (a, b, c, d, e, f, g, h, i, j) = (
                          a + b,
                          b + c,
                          c + d,
                          d + e,
                          e + f,
                          f + g,
                          g + h,
                          h + i,
                          i + j,
                          j + a,
                      );
                  }
                  (a, b, c, d, e, f, g, h, i, j)
              },
              BatchSize::SmallInput,
          )
      });
  }
  *)
  Definition benchmark_add_throughput (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ R ], [ c; name ] =>
      ltac:(M.monadic
        (let c := M.alloc (| c |) in
        let name := M.alloc (| name |) in
        M.read (|
          let~ _ :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "criterion::Criterion")
                        []
                        [ Ty.path "criterion::measurement::WallTime" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "criterion::Criterion")
                      []
                      [ Ty.path "criterion::measurement::WallTime" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "criterion::Criterion")
                    []
                    [ Ty.path "criterion::measurement::WallTime" ],
                  "bench_function",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "criterion::bencher::Bencher")
                                  []
                                  [ Ty.path "criterion::measurement::WallTime" ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| c |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.path "alloc::string::String",
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (|
                                      "core::hint::must_use",
                                      [],
                                      [ Ty.path "alloc::string::String" ]
                                    |),
                                    [
                                      M.read (|
                                        let~ res :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "alloc::string::String" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloc::string::String",
                                              M.get_function (| "alloc::fmt::format", [], [] |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      Value.Integer IntegerKind.Usize 2
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (| "add-throughput/" |);
                                                                mk_str (| " " |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (| N |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          name
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "criterion::bencher::Bencher")
                                                []
                                                [ Ty.path "criterion::measurement::WallTime" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let b := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "criterion::bencher::Bencher")
                                          []
                                          [ Ty.path "criterion::measurement::WallTime" ],
                                        "iter_batched",
                                        [],
                                        [
                                          Ty.tuple [ R; R; R; R; R; R; R; R; R; R ];
                                          Ty.tuple [ R; R; R; R; R; R; R; R; R; R ];
                                          Ty.function
                                            [ Ty.tuple [] ]
                                            (Ty.tuple [ R; R; R; R; R; R; R; R; R; R ]);
                                          Ty.function
                                            [ Ty.tuple [ Ty.tuple [ R; R; R; R; R; R; R; R; R; R ] ]
                                            ]
                                            (Ty.tuple [ R; R; R; R; R; R; R; R; R; R ])
                                        ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| b |) |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [ Ty.tuple [] ]
                                                          (Ty.tuple
                                                            [ R; R; R; R; R; R; R; R; R; R ])
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.read (|
                                                            let~ rng :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "rand::rngs::small::SmallRng"
                                                                  ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "rand::rngs::small::SmallRng",
                                                                  M.get_trait_method (|
                                                                    "rand_core::SeedableRng",
                                                                    Ty.path
                                                                      "rand::rngs::small::SmallRng",
                                                                    [],
                                                                    [],
                                                                    "seed_from_u64",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ Value.Integer IntegerKind.U64 1
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.alloc (|
                                                              Value.Tuple
                                                                [
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end));
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.tuple
                                                                  [ R; R; R; R; R; R; R; R; R; R ]
                                                              ]
                                                          ]
                                                          (Ty.tuple
                                                            [ R; R; R; R; R; R; R; R; R; R ])
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              0
                                                            |) in
                                                          let γ0_1 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              1
                                                            |) in
                                                          let γ0_2 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              2
                                                            |) in
                                                          let γ0_3 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              3
                                                            |) in
                                                          let γ0_4 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              4
                                                            |) in
                                                          let γ0_5 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              5
                                                            |) in
                                                          let γ0_6 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              6
                                                            |) in
                                                          let γ0_7 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              7
                                                            |) in
                                                          let γ0_8 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              8
                                                            |) in
                                                          let γ0_9 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              9
                                                            |) in
                                                          let a := M.copy (| γ0_0 |) in
                                                          let b := M.copy (| γ0_1 |) in
                                                          let c := M.copy (| γ0_2 |) in
                                                          let d := M.copy (| γ0_3 |) in
                                                          let e := M.copy (| γ0_4 |) in
                                                          let f := M.copy (| γ0_5 |) in
                                                          let g := M.copy (| γ0_6 |) in
                                                          let h := M.copy (| γ0_7 |) in
                                                          let i := M.copy (| γ0_8 |) in
                                                          let j := M.copy (| γ0_9 |) in
                                                          M.read (|
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.use
                                                                (M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [ Ty.tuple [] ],
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::ops::range::Range")
                                                                        []
                                                                        [ Ty.path "usize" ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::collect::IntoIterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::ops::range::Range")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        [],
                                                                        [],
                                                                        "into_iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        Value.StructRecord
                                                                          "core::ops::range::Range"
                                                                          [
                                                                            ("start",
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0);
                                                                            ("end_", N)
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let iter :=
                                                                          M.copy (| γ |) in
                                                                        M.loop (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [ Ty.tuple [] ],
                                                                          ltac:(M.monadic
                                                                            (let~ _ :
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ] :=
                                                                              M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ],
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::ops::range::Range")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.is_struct_tuple (|
                                                                                          γ,
                                                                                          "core::option::Option::None"
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.break (||)
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::option::Option::Some",
                                                                                          0
                                                                                        |) in
                                                                                      let~ _ :
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "*")
                                                                                            []
                                                                                            [
                                                                                              Ty.tuple
                                                                                                []
                                                                                            ] :=
                                                                                        M.match_operator (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "*")
                                                                                            []
                                                                                            [
                                                                                              Ty.tuple
                                                                                                []
                                                                                            ],
                                                                                          M.alloc (|
                                                                                            Value.Tuple
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Add",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "add",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      a
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      b
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Add",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "add",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      b
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      c
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Add",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "add",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      c
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      d
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Add",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "add",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      d
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      e
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Add",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "add",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      e
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      f
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Add",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "add",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      f
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      g
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Add",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "add",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      g
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      h
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Add",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "add",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      h
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      i
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Add",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "add",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      i
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      j
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Add",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "add",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      j
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      a
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      γ0_0 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    0
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_1 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    1
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_2 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    2
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_3 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    3
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_4 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    4
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_5 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    5
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_6 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    6
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_7 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    7
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_8 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    8
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_9 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    9
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_0
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_1
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_2
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_3
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_4
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_5
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_6
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_7
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_8
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_9
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      a,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      b,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      c,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      d,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      e,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      f,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      g,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      h,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      i,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      j,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                M.alloc (|
                                                                                                  Value.Tuple
                                                                                                    []
                                                                                                |)))
                                                                                          ]
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |)))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                        |)))
                                                                  ]
                                                                |)) in
                                                            M.alloc (|
                                                              Value.Tuple
                                                                [
                                                                  M.read (| a |);
                                                                  M.read (| b |);
                                                                  M.read (| c |);
                                                                  M.read (| d |);
                                                                  M.read (| e |);
                                                                  M.read (| f |);
                                                                  M.read (| g |);
                                                                  M.read (| h |);
                                                                  M.read (| i |);
                                                                  M.read (| j |)
                                                                ]
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end));
                                        Value.StructTuple "criterion::BatchSize::SmallInput" []
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_benchmark_add_throughput :
    M.IsFunction.C
      "p3_field_testing::bench_func::benchmark_add_throughput"
      benchmark_add_throughput.
  Admitted.
  Global Typeclasses Opaque benchmark_add_throughput.
  
  (*
  pub fn benchmark_sub_latency<R: PrimeCharacteristicRing + Copy, const N: usize>(
      c: &mut Criterion,
      name: &str,
  ) where
      StandardUniform: Distribution<R>,
  {
      c.bench_function(&format!("sub-latency/{} {}", N, name), |b| {
          b.iter_batched(
              || {
                  let mut rng = SmallRng::seed_from_u64(1);
                  let mut vec = Vec::new();
                  for _ in 0..N {
                      vec.push(rng.random::<R>())
                  }
                  vec
              },
              |x| x.iter().fold(R::ZERO, |x, y| x - *y),
              BatchSize::SmallInput,
          )
      });
  }
  *)
  Definition benchmark_sub_latency (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ R ], [ c; name ] =>
      ltac:(M.monadic
        (let c := M.alloc (| c |) in
        let name := M.alloc (| name |) in
        M.read (|
          let~ _ :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "criterion::Criterion")
                        []
                        [ Ty.path "criterion::measurement::WallTime" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "criterion::Criterion")
                      []
                      [ Ty.path "criterion::measurement::WallTime" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "criterion::Criterion")
                    []
                    [ Ty.path "criterion::measurement::WallTime" ],
                  "bench_function",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "criterion::bencher::Bencher")
                                  []
                                  [ Ty.path "criterion::measurement::WallTime" ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| c |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.path "alloc::string::String",
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (|
                                      "core::hint::must_use",
                                      [],
                                      [ Ty.path "alloc::string::String" ]
                                    |),
                                    [
                                      M.read (|
                                        let~ res :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "alloc::string::String" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloc::string::String",
                                              M.get_function (| "alloc::fmt::format", [], [] |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      Value.Integer IntegerKind.Usize 2
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (| "sub-latency/" |);
                                                                mk_str (| " " |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (| N |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          name
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "criterion::bencher::Bencher")
                                                []
                                                [ Ty.path "criterion::measurement::WallTime" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let b := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "criterion::bencher::Bencher")
                                          []
                                          [ Ty.path "criterion::measurement::WallTime" ],
                                        "iter_batched",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ R; Ty.path "alloc::alloc::Global" ];
                                          R;
                                          Ty.function
                                            [ Ty.tuple [] ]
                                            (Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ R; Ty.path "alloc::alloc::Global" ]);
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ R; Ty.path "alloc::alloc::Global" ]
                                                ]
                                            ]
                                            R
                                        ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| b |) |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [ Ty.tuple [] ]
                                                          (Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ R; Ty.path "alloc::alloc::Global" ])
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.read (|
                                                            let~ rng :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "rand::rngs::small::SmallRng"
                                                                  ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "rand::rngs::small::SmallRng",
                                                                  M.get_trait_method (|
                                                                    "rand_core::SeedableRng",
                                                                    Ty.path
                                                                      "rand::rngs::small::SmallRng",
                                                                    [],
                                                                    [],
                                                                    "seed_from_u64",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ Value.Integer IntegerKind.U64 1
                                                                  ]
                                                                |)
                                                              |) in
                                                            let~ vec :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        R;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      R;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        R;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.use
                                                                (M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [ Ty.tuple [] ],
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::ops::range::Range")
                                                                        []
                                                                        [ Ty.path "usize" ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::collect::IntoIterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::ops::range::Range")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        [],
                                                                        [],
                                                                        "into_iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        Value.StructRecord
                                                                          "core::ops::range::Range"
                                                                          [
                                                                            ("start",
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0);
                                                                            ("end_", N)
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let iter :=
                                                                          M.copy (| γ |) in
                                                                        M.loop (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [ Ty.tuple [] ],
                                                                          ltac:(M.monadic
                                                                            (let~ _ :
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ] :=
                                                                              M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ],
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::ops::range::Range")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.is_struct_tuple (|
                                                                                          γ,
                                                                                          "core::option::Option::None"
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.break (||)
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::option::Option::Some",
                                                                                          0
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                R;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            "push",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              vec
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              R,
                                                                                              M.get_trait_method (|
                                                                                                "rand::rng::Rng",
                                                                                                Ty.path
                                                                                                  "rand::rngs::small::SmallRng",
                                                                                                [],
                                                                                                [],
                                                                                                "random",
                                                                                                [],
                                                                                                [ R
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  rng
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                        |)))
                                                                  ]
                                                                |)) in
                                                            vec
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end));
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    R;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ]
                                                          R
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let x := M.copy (| γ |) in
                                                          M.call_closure (|
                                                            R,
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                []
                                                                [ R ],
                                                              [],
                                                              [],
                                                              "fold",
                                                              [],
                                                              [
                                                                R;
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        R;
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ R ]
                                                                      ]
                                                                  ]
                                                                  R
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [ R ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ R ],
                                                                  "iter",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [ R ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              R;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "deref",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            x
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::PrimeCharacteristicRing::ZERO",
                                                                  R
                                                                |)
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0; α1 ] =>
                                                                      ltac:(M.monadic
                                                                        (M.match_operator (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      R;
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [ R ]
                                                                                    ]
                                                                                ]
                                                                                R
                                                                            ],
                                                                          M.alloc (| α0 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let x :=
                                                                                  M.copy (| γ |) in
                                                                                M.match_operator (|
                                                                                  Ty.apply
                                                                                    (Ty.path "*")
                                                                                    []
                                                                                    [
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              R;
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [ R
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                        R
                                                                                    ],
                                                                                  M.alloc (| α1 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let y :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        M.call_closure (|
                                                                                          R,
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Sub",
                                                                                            R,
                                                                                            [],
                                                                                            [ R ],
                                                                                            "sub",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              x
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.deref (|
                                                                                                M.read (|
                                                                                                  y
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                    | _ =>
                                                                      M.impossible
                                                                        "wrong number of arguments"
                                                                    end))
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end));
                                        Value.StructTuple "criterion::BatchSize::SmallInput" []
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_benchmark_sub_latency :
    M.IsFunction.C "p3_field_testing::bench_func::benchmark_sub_latency" benchmark_sub_latency.
  Admitted.
  Global Typeclasses Opaque benchmark_sub_latency.
  
  (*
  pub fn benchmark_sub_throughput<R: PrimeCharacteristicRing + Copy, const N: usize>(
      c: &mut Criterion,
      name: &str,
  ) where
      StandardUniform: Distribution<R>,
  {
      c.bench_function(&format!("sub-throughput/{} {}", N, name), |b| {
          b.iter_batched(
              || {
                  let mut rng = SmallRng::seed_from_u64(1);
                  (
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                  )
              },
              |(mut a, mut b, mut c, mut d, mut e, mut f, mut g, mut h, mut i, mut j)| {
                  for _ in 0..N {
                      (a, b, c, d, e, f, g, h, i, j) = (
                          a - b,
                          b - c,
                          c - d,
                          d - e,
                          e - f,
                          f - g,
                          g - h,
                          h - i,
                          i - j,
                          j - a,
                      );
                  }
                  (a, b, c, d, e, f, g, h, i, j)
              },
              BatchSize::SmallInput,
          )
      });
  }
  *)
  Definition benchmark_sub_throughput (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ R ], [ c; name ] =>
      ltac:(M.monadic
        (let c := M.alloc (| c |) in
        let name := M.alloc (| name |) in
        M.read (|
          let~ _ :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "criterion::Criterion")
                        []
                        [ Ty.path "criterion::measurement::WallTime" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "criterion::Criterion")
                      []
                      [ Ty.path "criterion::measurement::WallTime" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "criterion::Criterion")
                    []
                    [ Ty.path "criterion::measurement::WallTime" ],
                  "bench_function",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "criterion::bencher::Bencher")
                                  []
                                  [ Ty.path "criterion::measurement::WallTime" ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| c |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.path "alloc::string::String",
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (|
                                      "core::hint::must_use",
                                      [],
                                      [ Ty.path "alloc::string::String" ]
                                    |),
                                    [
                                      M.read (|
                                        let~ res :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "alloc::string::String" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloc::string::String",
                                              M.get_function (| "alloc::fmt::format", [], [] |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      Value.Integer IntegerKind.Usize 2
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (| "sub-throughput/" |);
                                                                mk_str (| " " |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (| N |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          name
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "criterion::bencher::Bencher")
                                                []
                                                [ Ty.path "criterion::measurement::WallTime" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let b := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "criterion::bencher::Bencher")
                                          []
                                          [ Ty.path "criterion::measurement::WallTime" ],
                                        "iter_batched",
                                        [],
                                        [
                                          Ty.tuple [ R; R; R; R; R; R; R; R; R; R ];
                                          Ty.tuple [ R; R; R; R; R; R; R; R; R; R ];
                                          Ty.function
                                            [ Ty.tuple [] ]
                                            (Ty.tuple [ R; R; R; R; R; R; R; R; R; R ]);
                                          Ty.function
                                            [ Ty.tuple [ Ty.tuple [ R; R; R; R; R; R; R; R; R; R ] ]
                                            ]
                                            (Ty.tuple [ R; R; R; R; R; R; R; R; R; R ])
                                        ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| b |) |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [ Ty.tuple [] ]
                                                          (Ty.tuple
                                                            [ R; R; R; R; R; R; R; R; R; R ])
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.read (|
                                                            let~ rng :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "rand::rngs::small::SmallRng"
                                                                  ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "rand::rngs::small::SmallRng",
                                                                  M.get_trait_method (|
                                                                    "rand_core::SeedableRng",
                                                                    Ty.path
                                                                      "rand::rngs::small::SmallRng",
                                                                    [],
                                                                    [],
                                                                    "seed_from_u64",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ Value.Integer IntegerKind.U64 1
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.alloc (|
                                                              Value.Tuple
                                                                [
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end));
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.tuple
                                                                  [ R; R; R; R; R; R; R; R; R; R ]
                                                              ]
                                                          ]
                                                          (Ty.tuple
                                                            [ R; R; R; R; R; R; R; R; R; R ])
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              0
                                                            |) in
                                                          let γ0_1 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              1
                                                            |) in
                                                          let γ0_2 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              2
                                                            |) in
                                                          let γ0_3 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              3
                                                            |) in
                                                          let γ0_4 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              4
                                                            |) in
                                                          let γ0_5 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              5
                                                            |) in
                                                          let γ0_6 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              6
                                                            |) in
                                                          let γ0_7 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              7
                                                            |) in
                                                          let γ0_8 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              8
                                                            |) in
                                                          let γ0_9 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              9
                                                            |) in
                                                          let a := M.copy (| γ0_0 |) in
                                                          let b := M.copy (| γ0_1 |) in
                                                          let c := M.copy (| γ0_2 |) in
                                                          let d := M.copy (| γ0_3 |) in
                                                          let e := M.copy (| γ0_4 |) in
                                                          let f := M.copy (| γ0_5 |) in
                                                          let g := M.copy (| γ0_6 |) in
                                                          let h := M.copy (| γ0_7 |) in
                                                          let i := M.copy (| γ0_8 |) in
                                                          let j := M.copy (| γ0_9 |) in
                                                          M.read (|
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.use
                                                                (M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [ Ty.tuple [] ],
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::ops::range::Range")
                                                                        []
                                                                        [ Ty.path "usize" ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::collect::IntoIterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::ops::range::Range")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        [],
                                                                        [],
                                                                        "into_iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        Value.StructRecord
                                                                          "core::ops::range::Range"
                                                                          [
                                                                            ("start",
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0);
                                                                            ("end_", N)
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let iter :=
                                                                          M.copy (| γ |) in
                                                                        M.loop (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [ Ty.tuple [] ],
                                                                          ltac:(M.monadic
                                                                            (let~ _ :
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ] :=
                                                                              M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ],
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::ops::range::Range")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.is_struct_tuple (|
                                                                                          γ,
                                                                                          "core::option::Option::None"
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.break (||)
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::option::Option::Some",
                                                                                          0
                                                                                        |) in
                                                                                      let~ _ :
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "*")
                                                                                            []
                                                                                            [
                                                                                              Ty.tuple
                                                                                                []
                                                                                            ] :=
                                                                                        M.match_operator (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "*")
                                                                                            []
                                                                                            [
                                                                                              Ty.tuple
                                                                                                []
                                                                                            ],
                                                                                          M.alloc (|
                                                                                            Value.Tuple
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Sub",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "sub",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      a
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      b
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Sub",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "sub",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      b
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      c
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Sub",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "sub",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      c
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      d
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Sub",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "sub",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      d
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      e
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Sub",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "sub",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      e
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      f
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Sub",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "sub",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      f
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      g
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Sub",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "sub",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      g
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      h
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Sub",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "sub",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      h
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      i
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Sub",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "sub",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      i
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      j
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Sub",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "sub",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      j
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      a
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      γ0_0 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    0
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_1 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    1
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_2 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    2
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_3 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    3
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_4 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    4
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_5 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    5
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_6 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    6
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_7 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    7
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_8 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    8
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_9 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    9
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_0
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_1
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_2
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_3
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_4
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_5
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_6
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_7
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_8
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_9
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      a,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      b,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      c,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      d,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      e,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      f,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      g,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      h,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      i,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      j,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                M.alloc (|
                                                                                                  Value.Tuple
                                                                                                    []
                                                                                                |)))
                                                                                          ]
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |)))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                        |)))
                                                                  ]
                                                                |)) in
                                                            M.alloc (|
                                                              Value.Tuple
                                                                [
                                                                  M.read (| a |);
                                                                  M.read (| b |);
                                                                  M.read (| c |);
                                                                  M.read (| d |);
                                                                  M.read (| e |);
                                                                  M.read (| f |);
                                                                  M.read (| g |);
                                                                  M.read (| h |);
                                                                  M.read (| i |);
                                                                  M.read (| j |)
                                                                ]
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end));
                                        Value.StructTuple "criterion::BatchSize::SmallInput" []
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_benchmark_sub_throughput :
    M.IsFunction.C
      "p3_field_testing::bench_func::benchmark_sub_throughput"
      benchmark_sub_throughput.
  Admitted.
  Global Typeclasses Opaque benchmark_sub_throughput.
  
  (*
  pub fn benchmark_mul_latency<R: PrimeCharacteristicRing + Copy, const N: usize>(
      c: &mut Criterion,
      name: &str,
  ) where
      StandardUniform: Distribution<R>,
  {
      c.bench_function(&format!("mul-latency/{} {}", N, name), |b| {
          b.iter_batched(
              || {
                  let mut rng = SmallRng::seed_from_u64(1);
                  let mut vec = Vec::new();
                  for _ in 0..N {
                      vec.push(rng.random::<R>())
                  }
                  vec
              },
              |x| x.iter().fold(R::ZERO, |x, y| x * *y),
              BatchSize::SmallInput,
          )
      });
  }
  *)
  Definition benchmark_mul_latency (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ R ], [ c; name ] =>
      ltac:(M.monadic
        (let c := M.alloc (| c |) in
        let name := M.alloc (| name |) in
        M.read (|
          let~ _ :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "criterion::Criterion")
                        []
                        [ Ty.path "criterion::measurement::WallTime" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "criterion::Criterion")
                      []
                      [ Ty.path "criterion::measurement::WallTime" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "criterion::Criterion")
                    []
                    [ Ty.path "criterion::measurement::WallTime" ],
                  "bench_function",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "criterion::bencher::Bencher")
                                  []
                                  [ Ty.path "criterion::measurement::WallTime" ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| c |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.path "alloc::string::String",
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (|
                                      "core::hint::must_use",
                                      [],
                                      [ Ty.path "alloc::string::String" ]
                                    |),
                                    [
                                      M.read (|
                                        let~ res :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "alloc::string::String" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloc::string::String",
                                              M.get_function (| "alloc::fmt::format", [], [] |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      Value.Integer IntegerKind.Usize 2
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (| "mul-latency/" |);
                                                                mk_str (| " " |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (| N |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          name
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "criterion::bencher::Bencher")
                                                []
                                                [ Ty.path "criterion::measurement::WallTime" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let b := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "criterion::bencher::Bencher")
                                          []
                                          [ Ty.path "criterion::measurement::WallTime" ],
                                        "iter_batched",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ R; Ty.path "alloc::alloc::Global" ];
                                          R;
                                          Ty.function
                                            [ Ty.tuple [] ]
                                            (Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ R; Ty.path "alloc::alloc::Global" ]);
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ R; Ty.path "alloc::alloc::Global" ]
                                                ]
                                            ]
                                            R
                                        ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| b |) |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [ Ty.tuple [] ]
                                                          (Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ R; Ty.path "alloc::alloc::Global" ])
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.read (|
                                                            let~ rng :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "rand::rngs::small::SmallRng"
                                                                  ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "rand::rngs::small::SmallRng",
                                                                  M.get_trait_method (|
                                                                    "rand_core::SeedableRng",
                                                                    Ty.path
                                                                      "rand::rngs::small::SmallRng",
                                                                    [],
                                                                    [],
                                                                    "seed_from_u64",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ Value.Integer IntegerKind.U64 1
                                                                  ]
                                                                |)
                                                              |) in
                                                            let~ vec :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        R;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      R;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        R;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              |) in
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.use
                                                                (M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [ Ty.tuple [] ],
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::ops::range::Range")
                                                                        []
                                                                        [ Ty.path "usize" ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::collect::IntoIterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::ops::range::Range")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        [],
                                                                        [],
                                                                        "into_iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        Value.StructRecord
                                                                          "core::ops::range::Range"
                                                                          [
                                                                            ("start",
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0);
                                                                            ("end_", N)
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let iter :=
                                                                          M.copy (| γ |) in
                                                                        M.loop (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [ Ty.tuple [] ],
                                                                          ltac:(M.monadic
                                                                            (let~ _ :
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ] :=
                                                                              M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ],
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::ops::range::Range")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.is_struct_tuple (|
                                                                                          γ,
                                                                                          "core::option::Option::None"
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.break (||)
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::option::Option::Some",
                                                                                          0
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                R;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            "push",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              vec
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              R,
                                                                                              M.get_trait_method (|
                                                                                                "rand::rng::Rng",
                                                                                                Ty.path
                                                                                                  "rand::rngs::small::SmallRng",
                                                                                                [],
                                                                                                [],
                                                                                                "random",
                                                                                                [],
                                                                                                [ R
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  rng
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                        |)))
                                                                  ]
                                                                |)) in
                                                            vec
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end));
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    R;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ]
                                                          R
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let x := M.copy (| γ |) in
                                                          M.call_closure (|
                                                            R,
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                []
                                                                [ R ],
                                                              [],
                                                              [],
                                                              "fold",
                                                              [],
                                                              [
                                                                R;
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        R;
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ R ]
                                                                      ]
                                                                  ]
                                                                  R
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [ R ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ R ],
                                                                  "iter",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [ R ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              R;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          [],
                                                                          "deref",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            x
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::PrimeCharacteristicRing::ZERO",
                                                                  R
                                                                |)
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0; α1 ] =>
                                                                      ltac:(M.monadic
                                                                        (M.match_operator (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      R;
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [ R ]
                                                                                    ]
                                                                                ]
                                                                                R
                                                                            ],
                                                                          M.alloc (| α0 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let x :=
                                                                                  M.copy (| γ |) in
                                                                                M.match_operator (|
                                                                                  Ty.apply
                                                                                    (Ty.path "*")
                                                                                    []
                                                                                    [
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              R;
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [ R
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                        R
                                                                                    ],
                                                                                  M.alloc (| α1 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let y :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        M.call_closure (|
                                                                                          R,
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Mul",
                                                                                            R,
                                                                                            [],
                                                                                            [ R ],
                                                                                            "mul",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              x
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.deref (|
                                                                                                M.read (|
                                                                                                  y
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                    | _ =>
                                                                      M.impossible
                                                                        "wrong number of arguments"
                                                                    end))
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end));
                                        Value.StructTuple "criterion::BatchSize::SmallInput" []
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_benchmark_mul_latency :
    M.IsFunction.C "p3_field_testing::bench_func::benchmark_mul_latency" benchmark_mul_latency.
  Admitted.
  Global Typeclasses Opaque benchmark_mul_latency.
  
  (*
  pub fn benchmark_mul_throughput<R: PrimeCharacteristicRing + Copy, const N: usize>(
      c: &mut Criterion,
      name: &str,
  ) where
      StandardUniform: Distribution<R>,
  {
      c.bench_function(&format!("mul-throughput/{} {}", N, name), |b| {
          b.iter_batched(
              || {
                  let mut rng = SmallRng::seed_from_u64(1);
                  (
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                      rng.random::<R>(),
                  )
              },
              |(mut a, mut b, mut c, mut d, mut e, mut f, mut g, mut h, mut i, mut j)| {
                  for _ in 0..N {
                      (a, b, c, d, e, f, g, h, i, j) = (
                          a * b,
                          b * c,
                          c * d,
                          d * e,
                          e * f,
                          f * g,
                          g * h,
                          h * i,
                          i * j,
                          j * a,
                      );
                  }
                  (a, b, c, d, e, f, g, h, i, j)
              },
              BatchSize::SmallInput,
          )
      });
  }
  *)
  Definition benchmark_mul_throughput (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [ N ], [ R ], [ c; name ] =>
      ltac:(M.monadic
        (let c := M.alloc (| c |) in
        let name := M.alloc (| name |) in
        M.read (|
          let~ _ :
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "criterion::Criterion")
                        []
                        [ Ty.path "criterion::measurement::WallTime" ]
                    ]
                ] :=
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "criterion::Criterion")
                      []
                      [ Ty.path "criterion::measurement::WallTime" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "criterion::Criterion")
                    []
                    [ Ty.path "criterion::measurement::WallTime" ],
                  "bench_function",
                  [],
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "criterion::bencher::Bencher")
                                  []
                                  [ Ty.path "criterion::measurement::WallTime" ]
                              ]
                          ]
                      ]
                      (Ty.tuple [])
                  ]
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| c |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.path "alloc::string::String",
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (|
                                      "core::hint::must_use",
                                      [],
                                      [ Ty.path "alloc::string::String" ]
                                    |),
                                    [
                                      M.read (|
                                        let~ res :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "alloc::string::String" ] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloc::string::String",
                                              M.get_function (| "alloc::fmt::format", [], [] |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      Value.Integer IntegerKind.Usize 2
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                mk_str (| "mul-throughput/" |);
                                                                mk_str (| " " |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (| N |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          name
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "criterion::bencher::Bencher")
                                                []
                                                [ Ty.path "criterion::measurement::WallTime" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let b := M.copy (| γ |) in
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "criterion::bencher::Bencher")
                                          []
                                          [ Ty.path "criterion::measurement::WallTime" ],
                                        "iter_batched",
                                        [],
                                        [
                                          Ty.tuple [ R; R; R; R; R; R; R; R; R; R ];
                                          Ty.tuple [ R; R; R; R; R; R; R; R; R; R ];
                                          Ty.function
                                            [ Ty.tuple [] ]
                                            (Ty.tuple [ R; R; R; R; R; R; R; R; R; R ]);
                                          Ty.function
                                            [ Ty.tuple [ Ty.tuple [ R; R; R; R; R; R; R; R; R; R ] ]
                                            ]
                                            (Ty.tuple [ R; R; R; R; R; R; R; R; R; R ])
                                        ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| b |) |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [ Ty.tuple [] ]
                                                          (Ty.tuple
                                                            [ R; R; R; R; R; R; R; R; R; R ])
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.read (|
                                                            let~ rng :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "rand::rngs::small::SmallRng"
                                                                  ] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "rand::rngs::small::SmallRng",
                                                                  M.get_trait_method (|
                                                                    "rand_core::SeedableRng",
                                                                    Ty.path
                                                                      "rand::rngs::small::SmallRng",
                                                                    [],
                                                                    [],
                                                                    "seed_from_u64",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ Value.Integer IntegerKind.U64 1
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.alloc (|
                                                              Value.Tuple
                                                                [
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    R,
                                                                    M.get_trait_method (|
                                                                      "rand::rng::Rng",
                                                                      Ty.path
                                                                        "rand::rngs::small::SmallRng",
                                                                      [],
                                                                      [],
                                                                      "random",
                                                                      [],
                                                                      [ R ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        rng
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end));
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.tuple
                                                                  [ R; R; R; R; R; R; R; R; R; R ]
                                                              ]
                                                          ]
                                                          (Ty.tuple
                                                            [ R; R; R; R; R; R; R; R; R; R ])
                                                      ],
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              0
                                                            |) in
                                                          let γ0_1 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              1
                                                            |) in
                                                          let γ0_2 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              2
                                                            |) in
                                                          let γ0_3 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              3
                                                            |) in
                                                          let γ0_4 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              4
                                                            |) in
                                                          let γ0_5 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              5
                                                            |) in
                                                          let γ0_6 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              6
                                                            |) in
                                                          let γ0_7 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              7
                                                            |) in
                                                          let γ0_8 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              8
                                                            |) in
                                                          let γ0_9 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              9
                                                            |) in
                                                          let a := M.copy (| γ0_0 |) in
                                                          let b := M.copy (| γ0_1 |) in
                                                          let c := M.copy (| γ0_2 |) in
                                                          let d := M.copy (| γ0_3 |) in
                                                          let e := M.copy (| γ0_4 |) in
                                                          let f := M.copy (| γ0_5 |) in
                                                          let g := M.copy (| γ0_6 |) in
                                                          let h := M.copy (| γ0_7 |) in
                                                          let i := M.copy (| γ0_8 |) in
                                                          let j := M.copy (| γ0_9 |) in
                                                          M.read (|
                                                            let~ _ :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [ Ty.tuple [] ] :=
                                                              M.use
                                                                (M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "*")
                                                                    []
                                                                    [ Ty.tuple [] ],
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::ops::range::Range")
                                                                        []
                                                                        [ Ty.path "usize" ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::collect::IntoIterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::ops::range::Range")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        [],
                                                                        [],
                                                                        "into_iter",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        Value.StructRecord
                                                                          "core::ops::range::Range"
                                                                          [
                                                                            ("start",
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0);
                                                                            ("end_", N)
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let iter :=
                                                                          M.copy (| γ |) in
                                                                        M.loop (|
                                                                          Ty.apply
                                                                            (Ty.path "*")
                                                                            []
                                                                            [ Ty.tuple [] ],
                                                                          ltac:(M.monadic
                                                                            (let~ _ :
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ] :=
                                                                              M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ],
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::ops::range::Range")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      [],
                                                                                      [],
                                                                                      "next",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.MutRef,
                                                                                            iter
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.is_struct_tuple (|
                                                                                          γ,
                                                                                          "core::option::Option::None"
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        M.never_to_any (|
                                                                                          M.read (|
                                                                                            M.break (||)
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                          γ,
                                                                                          "core::option::Option::Some",
                                                                                          0
                                                                                        |) in
                                                                                      let~ _ :
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "*")
                                                                                            []
                                                                                            [
                                                                                              Ty.tuple
                                                                                                []
                                                                                            ] :=
                                                                                        M.match_operator (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "*")
                                                                                            []
                                                                                            [
                                                                                              Ty.tuple
                                                                                                []
                                                                                            ],
                                                                                          M.alloc (|
                                                                                            Value.Tuple
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      a
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      b
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      b
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      c
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      c
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      d
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      d
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      e
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      e
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      f
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      f
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      g
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      g
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      h
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      h
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      i
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      i
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      j
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  R,
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    R,
                                                                                                    [],
                                                                                                    [
                                                                                                      R
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      j
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      a
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      γ0_0 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    0
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_1 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    1
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_2 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    2
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_3 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    3
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_4 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    4
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_5 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    5
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_6 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    6
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_7 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    7
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_8 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    8
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_9 :=
                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                    γ,
                                                                                                    9
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_0
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_1
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_2
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_3
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_4
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_5
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_6
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_7
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_8
                                                                                                  |) in
                                                                                                let
                                                                                                      lhs :=
                                                                                                  M.copy (|
                                                                                                    γ0_9
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      a,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      b,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      c,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      d,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      e,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      f,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      g,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      h,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      i,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          []
                                                                                                      ] :=
                                                                                                  M.alloc (|
                                                                                                    M.write (|
                                                                                                      j,
                                                                                                      M.read (|
                                                                                                        lhs
                                                                                                      |)
                                                                                                    |)
                                                                                                  |) in
                                                                                                M.alloc (|
                                                                                                  Value.Tuple
                                                                                                    []
                                                                                                |)))
                                                                                          ]
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |)))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                        |)))
                                                                  ]
                                                                |)) in
                                                            M.alloc (|
                                                              Value.Tuple
                                                                [
                                                                  M.read (| a |);
                                                                  M.read (| b |);
                                                                  M.read (| c |);
                                                                  M.read (| d |);
                                                                  M.read (| e |);
                                                                  M.read (| f |);
                                                                  M.read (| g |);
                                                                  M.read (| h |);
                                                                  M.read (| i |);
                                                                  M.read (| j |)
                                                                ]
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end));
                                        Value.StructTuple "criterion::BatchSize::SmallInput" []
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |) in
          M.alloc (| Value.Tuple [] |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_benchmark_mul_throughput :
    M.IsFunction.C
      "p3_field_testing::bench_func::benchmark_mul_throughput"
      benchmark_mul_throughput.
  Admitted.
  Global Typeclasses Opaque benchmark_mul_throughput.
End bench_func.
