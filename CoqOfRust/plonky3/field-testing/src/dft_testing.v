(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module dft_testing.
  (*
  pub fn test_dft_matches_naive<F, Dft>()
  where
      F: TwoAdicField,
      StandardUniform: Distribution<F>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let mat = RowMajorMatrix::<F>::rand(&mut rng, h, 3);
          let dft_naive = NaiveDft.dft_batch(mat.clone());
          let dft_result = dft.dft_batch(mat);
          assert_eq!(dft_naive, dft_result.to_row_major_matrix());
      }
  }
  *)
  Definition test_dft_matches_naive (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ mat :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ dft_naive :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Ty.path "p3_dft::naive::NaiveDft",
                                          [],
                                          [ F ],
                                          "dft_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.StructTuple "p3_dft::naive::NaiveDft" []
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ F; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ dft_result :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_dft::traits::TwoAdicSubgroupDft"
                                            []
                                            [ F ]
                                            Dft
                                            "Evaluations"
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_dft::traits::TwoAdicSubgroupDft"
                                          []
                                          [ F ]
                                          Dft
                                          "Evaluations",
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "dft_batch",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, dft |); M.read (| mat |) ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, dft_naive |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.associated_in_trait
                                                      "p3_dft::traits::TwoAdicSubgroupDft"
                                                      []
                                                      [ F ]
                                                      Dft
                                                      "Evaluations",
                                                    [],
                                                    [ F ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| dft_result |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_dft_matches_naive :
    M.IsFunction.C "p3_field_testing::dft_testing::test_dft_matches_naive" test_dft_matches_naive.
  Admitted.
  Global Typeclasses Opaque test_dft_matches_naive.
  
  (*
  pub fn test_coset_dft_matches_naive<F, Dft>()
  where
      F: TwoAdicField,
      StandardUniform: Distribution<F>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let mat = RowMajorMatrix::<F>::rand(&mut rng, h, 3);
          let shift = F::GENERATOR;
          let coset_dft_naive = NaiveDft.coset_dft_batch(mat.clone(), shift);
          let coset_dft_result = dft.coset_dft_batch(mat, shift);
          assert_eq!(coset_dft_naive, coset_dft_result.to_row_major_matrix());
      }
  }
  *)
  Definition test_coset_dft_matches_naive
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ mat :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ shift : Ty.apply (Ty.path "*") [] [ F ] :=
                                    M.copy (|
                                      get_constant (| "p3_field::field::Field::GENERATOR", F |)
                                    |) in
                                  let~ coset_dft_naive :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Ty.path "p3_dft::naive::NaiveDft",
                                          [],
                                          [ F ],
                                          "coset_dft_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.StructTuple "p3_dft::naive::NaiveDft" []
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ F; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |);
                                          M.read (| shift |)
                                        ]
                                      |)
                                    |) in
                                  let~ coset_dft_result :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_dft::traits::TwoAdicSubgroupDft"
                                            []
                                            [ F ]
                                            Dft
                                            "Evaluations"
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_dft::traits::TwoAdicSubgroupDft"
                                          []
                                          [ F ]
                                          Dft
                                          "Evaluations",
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "coset_dft_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.read (| mat |);
                                          M.read (| shift |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, coset_dft_naive |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.associated_in_trait
                                                      "p3_dft::traits::TwoAdicSubgroupDft"
                                                      []
                                                      [ F ]
                                                      Dft
                                                      "Evaluations",
                                                    [],
                                                    [ F ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| coset_dft_result |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_coset_dft_matches_naive :
    M.IsFunction.C
      "p3_field_testing::dft_testing::test_coset_dft_matches_naive"
      test_coset_dft_matches_naive.
  Admitted.
  Global Typeclasses Opaque test_coset_dft_matches_naive.
  
  (*
  pub fn test_idft_matches_naive<F, Dft>()
  where
      F: TwoAdicField,
      StandardUniform: Distribution<F>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let mat = RowMajorMatrix::<F>::rand(&mut rng, h, 3);
          let idft_naive = NaiveDft.idft_batch(mat.clone());
          let idft_result = dft.idft_batch(mat.clone());
          assert_eq!(idft_naive, idft_result.to_row_major_matrix());
      }
  }
  *)
  Definition test_idft_matches_naive (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ mat :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ idft_naive :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Ty.path "p3_dft::naive::NaiveDft",
                                          [],
                                          [ F ],
                                          "idft_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.StructTuple "p3_dft::naive::NaiveDft" []
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ F; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ idft_result :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "idft_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ F; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, idft_naive |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        F;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ F; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    [],
                                                    [ F ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| idft_result |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_idft_matches_naive :
    M.IsFunction.C "p3_field_testing::dft_testing::test_idft_matches_naive" test_idft_matches_naive.
  Admitted.
  Global Typeclasses Opaque test_idft_matches_naive.
  
  (*
  pub fn test_coset_idft_matches_naive<F, Dft>()
  where
      F: TwoAdicField,
      StandardUniform: Distribution<F>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let mat = RowMajorMatrix::<F>::rand(&mut rng, h, 3);
          let shift = F::GENERATOR;
          let idft_naive = NaiveDft.coset_idft_batch(mat.clone(), shift);
          let idft_result = dft.coset_idft_batch(mat, shift);
          assert_eq!(idft_naive, idft_result.to_row_major_matrix());
      }
  }
  *)
  Definition test_coset_idft_matches_naive
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ mat :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ shift : Ty.apply (Ty.path "*") [] [ F ] :=
                                    M.copy (|
                                      get_constant (| "p3_field::field::Field::GENERATOR", F |)
                                    |) in
                                  let~ idft_naive :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Ty.path "p3_dft::naive::NaiveDft",
                                          [],
                                          [ F ],
                                          "coset_idft_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.StructTuple "p3_dft::naive::NaiveDft" []
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ F; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |);
                                          M.read (| shift |)
                                        ]
                                      |)
                                    |) in
                                  let~ idft_result :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "coset_idft_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.read (| mat |);
                                          M.read (| shift |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, idft_naive |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        F;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ F; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    [],
                                                    [ F ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| idft_result |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_coset_idft_matches_naive :
    M.IsFunction.C
      "p3_field_testing::dft_testing::test_coset_idft_matches_naive"
      test_coset_idft_matches_naive.
  Admitted.
  Global Typeclasses Opaque test_coset_idft_matches_naive.
  
  (*
  pub fn test_lde_matches_naive<F, Dft>()
  where
      F: TwoAdicField,
      StandardUniform: Distribution<F>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let mat = RowMajorMatrix::<F>::rand(&mut rng, h, 3);
          let lde_naive = NaiveDft.lde_batch(mat.clone(), 1);
          let lde_result = dft.lde_batch(mat, 1);
          assert_eq!(lde_naive, lde_result.to_row_major_matrix());
      }
  }
  *)
  Definition test_lde_matches_naive (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ mat :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ lde_naive :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Ty.path "p3_dft::naive::NaiveDft",
                                          [],
                                          [ F ],
                                          "lde_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.StructTuple "p3_dft::naive::NaiveDft" []
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ F; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |)
                                    |) in
                                  let~ lde_result :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_dft::traits::TwoAdicSubgroupDft"
                                            []
                                            [ F ]
                                            Dft
                                            "Evaluations"
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_dft::traits::TwoAdicSubgroupDft"
                                          []
                                          [ F ]
                                          Dft
                                          "Evaluations",
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "lde_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.read (| mat |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, lde_naive |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.associated_in_trait
                                                      "p3_dft::traits::TwoAdicSubgroupDft"
                                                      []
                                                      [ F ]
                                                      Dft
                                                      "Evaluations",
                                                    [],
                                                    [ F ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| lde_result |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_lde_matches_naive :
    M.IsFunction.C "p3_field_testing::dft_testing::test_lde_matches_naive" test_lde_matches_naive.
  Admitted.
  Global Typeclasses Opaque test_lde_matches_naive.
  
  (*
  pub fn test_coset_lde_matches_naive<F, Dft>()
  where
      F: TwoAdicField,
      StandardUniform: Distribution<F>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let mat = RowMajorMatrix::<F>::rand(&mut rng, h, 3);
          let shift = F::GENERATOR;
          let coset_lde_naive = NaiveDft.coset_lde_batch(mat.clone(), 1, shift);
          let coset_lde_result = dft.coset_lde_batch(mat, 1, shift);
          assert_eq!(coset_lde_naive, coset_lde_result.to_row_major_matrix());
      }
  }
  *)
  Definition test_coset_lde_matches_naive
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ mat :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ shift : Ty.apply (Ty.path "*") [] [ F ] :=
                                    M.copy (|
                                      get_constant (| "p3_field::field::Field::GENERATOR", F |)
                                    |) in
                                  let~ coset_lde_naive :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Ty.path "p3_dft::naive::NaiveDft",
                                          [],
                                          [ F ],
                                          "coset_lde_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.StructTuple "p3_dft::naive::NaiveDft" []
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ F; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1;
                                          M.read (| shift |)
                                        ]
                                      |)
                                    |) in
                                  let~ coset_lde_result :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_dft::traits::TwoAdicSubgroupDft"
                                            []
                                            [ F ]
                                            Dft
                                            "Evaluations"
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_dft::traits::TwoAdicSubgroupDft"
                                          []
                                          [ F ]
                                          Dft
                                          "Evaluations",
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "coset_lde_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.read (| mat |);
                                          Value.Integer IntegerKind.Usize 1;
                                          M.read (| shift |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, coset_lde_naive |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.associated_in_trait
                                                      "p3_dft::traits::TwoAdicSubgroupDft"
                                                      []
                                                      [ F ]
                                                      Dft
                                                      "Evaluations",
                                                    [],
                                                    [ F ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| coset_lde_result |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_coset_lde_matches_naive :
    M.IsFunction.C
      "p3_field_testing::dft_testing::test_coset_lde_matches_naive"
      test_coset_lde_matches_naive.
  Admitted.
  Global Typeclasses Opaque test_coset_lde_matches_naive.
  
  (*
  pub fn test_dft_idft_consistency<F, Dft>()
  where
      F: TwoAdicField,
      StandardUniform: Distribution<F>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let original = RowMajorMatrix::<F>::rand(&mut rng, h, 3);
          let dft_output = dft.dft_batch(original.clone());
          let idft_output = dft.idft_batch(dft_output.to_row_major_matrix());
          assert_eq!(original, idft_output.to_row_major_matrix());
      }
  }
  *)
  Definition test_dft_idft_consistency (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ original :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ dft_output :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_dft::traits::TwoAdicSubgroupDft"
                                            []
                                            [ F ]
                                            Dft
                                            "Evaluations"
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_dft::traits::TwoAdicSubgroupDft"
                                          []
                                          [ F ]
                                          Dft
                                          "Evaluations",
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "dft_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ F; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, original |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ idft_output :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "idft_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ F; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "p3_matrix::Matrix",
                                              Ty.associated_in_trait
                                                "p3_dft::traits::TwoAdicSubgroupDft"
                                                []
                                                [ F ]
                                                Dft
                                                "Evaluations",
                                              [],
                                              [ F ],
                                              "to_row_major_matrix",
                                              [],
                                              []
                                            |),
                                            [ M.read (| dft_output |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, original |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        F;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ F; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    [],
                                                    [ F ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| idft_output |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    F;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      F;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_dft_idft_consistency :
    M.IsFunction.C
      "p3_field_testing::dft_testing::test_dft_idft_consistency"
      test_dft_idft_consistency.
  Admitted.
  Global Typeclasses Opaque test_dft_idft_consistency.
  
  (*
  pub fn test_dft_algebra_matches_naive<F, EF, Dft>()
  where
      F: TwoAdicField,
      EF: ExtensionField<F> + TwoAdicField,
      StandardUniform: Distribution<EF>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let mat = RowMajorMatrix::<EF>::rand(&mut rng, h, 3);
          let dft_naive = NaiveDft.dft_batch(mat.clone());
          let dft_result = dft.dft_algebra_batch(mat);
          assert_eq!(dft_naive, dft_result.to_row_major_matrix());
      }
  }
  *)
  Definition test_dft_algebra_matches_naive
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F; EF; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ mat :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ dft_naive :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Ty.path "p3_dft::naive::NaiveDft",
                                          [],
                                          [ EF ],
                                          "dft_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.StructTuple "p3_dft::naive::NaiveDft" []
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                EF;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ EF; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  EF;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ EF; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ dft_result :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "dft_algebra_batch",
                                          [],
                                          [ EF ]
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, dft |); M.read (| mat |) ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, dft_naive |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      EF;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ EF; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        EF;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ EF; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    [],
                                                    [ EF ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| dft_result |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    EF;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        EF;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_dft_algebra_matches_naive :
    M.IsFunction.C
      "p3_field_testing::dft_testing::test_dft_algebra_matches_naive"
      test_dft_algebra_matches_naive.
  Admitted.
  Global Typeclasses Opaque test_dft_algebra_matches_naive.
  
  (*
  pub fn test_coset_dft_algebra_matches_naive<F, EF, Dft>()
  where
      F: TwoAdicField,
      EF: ExtensionField<F> + TwoAdicField,
      StandardUniform: Distribution<EF>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let mat = RowMajorMatrix::<EF>::rand(&mut rng, h, 3);
          let shift = F::GENERATOR;
          let coset_dft_naive = NaiveDft.coset_dft_batch(mat.clone(), EF::from(shift));
          let coset_dft_result = dft.coset_dft_algebra_batch(mat, shift);
          assert_eq!(coset_dft_naive, coset_dft_result.to_row_major_matrix());
      }
  }
  *)
  Definition test_coset_dft_algebra_matches_naive
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F; EF; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ mat :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ shift : Ty.apply (Ty.path "*") [] [ F ] :=
                                    M.copy (|
                                      get_constant (| "p3_field::field::Field::GENERATOR", F |)
                                    |) in
                                  let~ coset_dft_naive :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Ty.path "p3_dft::naive::NaiveDft",
                                          [],
                                          [ EF ],
                                          "coset_dft_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.StructTuple "p3_dft::naive::NaiveDft" []
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                EF;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ EF; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  EF;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ EF; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |);
                                          M.call_closure (|
                                            EF,
                                            M.get_trait_method (|
                                              "core::convert::From",
                                              EF,
                                              [],
                                              [ F ],
                                              "from",
                                              [],
                                              []
                                            |),
                                            [ M.read (| shift |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ coset_dft_result :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "coset_dft_algebra_batch",
                                          [],
                                          [ EF ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.read (| mat |);
                                          M.read (| shift |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, coset_dft_naive |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      EF;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ EF; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        EF;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ EF; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    [],
                                                    [ EF ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| coset_dft_result |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    EF;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        EF;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_coset_dft_algebra_matches_naive :
    M.IsFunction.C
      "p3_field_testing::dft_testing::test_coset_dft_algebra_matches_naive"
      test_coset_dft_algebra_matches_naive.
  Admitted.
  Global Typeclasses Opaque test_coset_dft_algebra_matches_naive.
  
  (*
  pub fn test_idft_algebra_matches_naive<F, EF, Dft>()
  where
      F: TwoAdicField,
      EF: ExtensionField<F> + TwoAdicField,
      StandardUniform: Distribution<EF>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let mat = RowMajorMatrix::<EF>::rand(&mut rng, h, 3);
          let idft_naive = NaiveDft.idft_batch(mat.clone());
          let idft_result = dft.idft_algebra_batch(mat.clone());
          assert_eq!(idft_naive, idft_result.to_row_major_matrix());
      }
  }
  *)
  Definition test_idft_algebra_matches_naive
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F; EF; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ mat :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ idft_naive :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Ty.path "p3_dft::naive::NaiveDft",
                                          [],
                                          [ EF ],
                                          "idft_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.StructTuple "p3_dft::naive::NaiveDft" []
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                EF;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ EF; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  EF;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ EF; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ idft_result :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "idft_algebra_batch",
                                          [],
                                          [ EF ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                EF;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ EF; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  EF;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ EF; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, idft_naive |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      EF;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ EF; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        EF;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ EF; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    [],
                                                    [ EF ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| idft_result |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    EF;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        EF;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_idft_algebra_matches_naive :
    M.IsFunction.C
      "p3_field_testing::dft_testing::test_idft_algebra_matches_naive"
      test_idft_algebra_matches_naive.
  Admitted.
  Global Typeclasses Opaque test_idft_algebra_matches_naive.
  
  (*
  pub fn test_coset_idft_algebra_matches_naive<F, EF, Dft>()
  where
      F: TwoAdicField,
      EF: ExtensionField<F> + TwoAdicField,
      StandardUniform: Distribution<EF>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let mat = RowMajorMatrix::<EF>::rand(&mut rng, h, 3);
          let shift = F::GENERATOR;
          let idft_naive = NaiveDft.coset_idft_batch(mat.clone(), EF::from(shift));
          let idft_result = dft.coset_idft_algebra_batch(mat, shift);
          assert_eq!(idft_naive, idft_result.to_row_major_matrix());
      }
  }
  *)
  Definition test_coset_idft_algebra_matches_naive
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F; EF; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ mat :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ shift : Ty.apply (Ty.path "*") [] [ F ] :=
                                    M.copy (|
                                      get_constant (| "p3_field::field::Field::GENERATOR", F |)
                                    |) in
                                  let~ idft_naive :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Ty.path "p3_dft::naive::NaiveDft",
                                          [],
                                          [ EF ],
                                          "coset_idft_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.StructTuple "p3_dft::naive::NaiveDft" []
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                EF;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ EF; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  EF;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ EF; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |);
                                          M.call_closure (|
                                            EF,
                                            M.get_trait_method (|
                                              "core::convert::From",
                                              EF,
                                              [],
                                              [ F ],
                                              "from",
                                              [],
                                              []
                                            |),
                                            [ M.read (| shift |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ idft_result :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "coset_idft_algebra_batch",
                                          [],
                                          [ EF ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.read (| mat |);
                                          M.read (| shift |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, idft_naive |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      EF;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ EF; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        EF;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ EF; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    [],
                                                    [ EF ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| idft_result |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    EF;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        EF;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_coset_idft_algebra_matches_naive :
    M.IsFunction.C
      "p3_field_testing::dft_testing::test_coset_idft_algebra_matches_naive"
      test_coset_idft_algebra_matches_naive.
  Admitted.
  Global Typeclasses Opaque test_coset_idft_algebra_matches_naive.
  
  (*
  pub fn test_lde_algebra_matches_naive<F, EF, Dft>()
  where
      F: TwoAdicField,
      EF: ExtensionField<F> + TwoAdicField,
      StandardUniform: Distribution<EF>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let mat = RowMajorMatrix::<EF>::rand(&mut rng, h, 3);
          let lde_naive = NaiveDft.lde_batch(mat.clone(), 1);
          let lde_result = dft.lde_algebra_batch(mat, 1);
          assert_eq!(lde_naive, lde_result.to_row_major_matrix());
      }
  }
  *)
  Definition test_lde_algebra_matches_naive
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F; EF; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ mat :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ lde_naive :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Ty.path "p3_dft::naive::NaiveDft",
                                          [],
                                          [ EF ],
                                          "lde_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.StructTuple "p3_dft::naive::NaiveDft" []
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                EF;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ EF; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  EF;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ EF; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |)
                                    |) in
                                  let~ lde_result :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "lde_algebra_batch",
                                          [],
                                          [ EF ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.read (| mat |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, lde_naive |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      EF;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ EF; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        EF;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ EF; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    [],
                                                    [ EF ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| lde_result |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    EF;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        EF;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_lde_algebra_matches_naive :
    M.IsFunction.C
      "p3_field_testing::dft_testing::test_lde_algebra_matches_naive"
      test_lde_algebra_matches_naive.
  Admitted.
  Global Typeclasses Opaque test_lde_algebra_matches_naive.
  
  (*
  pub fn test_coset_lde_algebra_matches_naive<F, EF, Dft>()
  where
      F: TwoAdicField,
      EF: ExtensionField<F> + TwoAdicField,
      StandardUniform: Distribution<EF>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let mat = RowMajorMatrix::<EF>::rand(&mut rng, h, 3);
          let shift = F::GENERATOR;
          let coset_lde_naive = NaiveDft.coset_lde_batch(mat.clone(), 1, EF::from(shift));
          let coset_lde_result = dft.coset_lde_algebra_batch(mat, 1, shift);
          assert_eq!(coset_lde_naive, coset_lde_result.to_row_major_matrix());
      }
  }
  *)
  Definition test_coset_lde_algebra_matches_naive
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F; EF; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ mat :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ shift : Ty.apply (Ty.path "*") [] [ F ] :=
                                    M.copy (|
                                      get_constant (| "p3_field::field::Field::GENERATOR", F |)
                                    |) in
                                  let~ coset_lde_naive :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Ty.path "p3_dft::naive::NaiveDft",
                                          [],
                                          [ EF ],
                                          "coset_lde_batch",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.StructTuple "p3_dft::naive::NaiveDft" []
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                EF;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ EF; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  EF;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ EF; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, mat |) ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1;
                                          M.call_closure (|
                                            EF,
                                            M.get_trait_method (|
                                              "core::convert::From",
                                              EF,
                                              [],
                                              [ F ],
                                              "from",
                                              [],
                                              []
                                            |),
                                            [ M.read (| shift |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ coset_lde_result :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "coset_lde_algebra_batch",
                                          [],
                                          [ EF ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.read (| mat |);
                                          Value.Integer IntegerKind.Usize 1;
                                          M.read (| shift |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, coset_lde_naive |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      EF;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ EF; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        EF;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ EF; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    [],
                                                    [ EF ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| coset_lde_result |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    EF;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        EF;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_coset_lde_algebra_matches_naive :
    M.IsFunction.C
      "p3_field_testing::dft_testing::test_coset_lde_algebra_matches_naive"
      test_coset_lde_algebra_matches_naive.
  Admitted.
  Global Typeclasses Opaque test_coset_lde_algebra_matches_naive.
  
  (*
  pub fn test_dft_idft_algebra_consistency<F, EF, Dft>()
  where
      F: TwoAdicField,
      EF: ExtensionField<F> + TwoAdicField,
      StandardUniform: Distribution<EF>,
      Dft: TwoAdicSubgroupDft<F>,
  {
      let dft = Dft::default();
      let mut rng = SmallRng::seed_from_u64(1);
      for log_h in 0..5 {
          let h = 1 << log_h;
          let original = RowMajorMatrix::<EF>::rand(&mut rng, h, 3);
          let dft_output = dft.dft_algebra_batch(original.clone());
          let idft_output = dft.idft_algebra_batch(dft_output.to_row_major_matrix());
          assert_eq!(original, idft_output.to_row_major_matrix());
      }
  }
  *)
  Definition test_dft_idft_algebra_consistency
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [ F; EF; Dft ], [] =>
      ltac:(M.monadic
        (M.read (|
          let~ dft : Ty.apply (Ty.path "*") [] [ Dft ] :=
            M.alloc (|
              M.call_closure (|
                Dft,
                M.get_trait_method (| "core::default::Default", Dft, [], [], "default", [], [] |),
                []
              |)
            |) in
          let~ rng : Ty.apply (Ty.path "*") [] [ Ty.path "rand::rngs::small::SmallRng" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "rand::rngs::small::SmallRng",
                M.get_trait_method (|
                  "rand_core::SeedableRng",
                  Ty.path "rand::rngs::small::SmallRng",
                  [],
                  [],
                  "seed_from_u64",
                  [],
                  []
                |),
                [ Value.Integer IntegerKind.U64 1 ]
              |)
            |) in
          M.use
            (M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [
                    Value.StructRecord
                      "core::ops::range::Range"
                      [
                        ("start", Value.Integer IntegerKind.I32 0);
                        ("end_", Value.Integer IntegerKind.I32 5)
                      ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let iter := M.copy (| γ |) in
                    M.loop (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      ltac:(M.monadic
                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "i32" ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "i32" ],
                                  [],
                                  [],
                                  "next",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let _ :=
                                    M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let log_h := M.copy (| γ0_0 |) in
                                  let~ h : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.Usize 1; M.read (| log_h |) ]
                                      |)
                                    |) in
                                  let~ original :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          "rand",
                                          [],
                                          [ Ty.path "rand::rngs::small::SmallRng" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rng |) |)
                                          |);
                                          M.read (| h |);
                                          Value.Integer IntegerKind.Usize 3
                                        ]
                                      |)
                                    |) in
                                  let~ dft_output :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "dft_algebra_batch",
                                          [],
                                          [ EF ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                EF;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ EF; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  EF;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ EF; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, original |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ idft_output :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              EF;
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ EF; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            EF;
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ EF; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        M.get_trait_method (|
                                          "p3_dft::traits::TwoAdicSubgroupDft",
                                          Dft,
                                          [],
                                          [ F ],
                                          "idft_algebra_batch",
                                          [],
                                          [ EF ]
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, dft |);
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                EF;
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ EF; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            M.get_trait_method (|
                                              "p3_matrix::Matrix",
                                              Ty.apply
                                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                                []
                                                [
                                                  EF;
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ EF; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              [],
                                              [ EF ],
                                              "to_row_major_matrix",
                                              [],
                                              []
                                            |),
                                            [ M.read (| dft_output |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (| Pointer.Kind.Ref, original |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      EF;
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ EF; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_matrix::Matrix",
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        EF;
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ EF; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    [],
                                                    [ EF ],
                                                    "to_row_major_matrix",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| idft_output |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialEq",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_matrix::dense::DenseMatrix")
                                                                  []
                                                                  [
                                                                    EF;
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        EF;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "eq",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "core::panicking::AssertKind"
                                                                ] :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_matrix::dense::DenseMatrix")
                                                                    []
                                                                    [
                                                                      EF;
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          EF;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                    |)))
              ]
            |))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_test_dft_idft_algebra_consistency :
    M.IsFunction.C
      "p3_field_testing::dft_testing::test_dft_idft_algebra_consistency"
      test_dft_idft_algebra_consistency.
  Admitted.
  Global Typeclasses Opaque test_dft_idft_algebra_consistency.
End dft_testing.
