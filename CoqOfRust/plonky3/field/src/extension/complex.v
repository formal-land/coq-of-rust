(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module extension.
  Module complex.
    Axiom Complex :
      forall (F : Ty.t),
      (Ty.apply (Ty.path "p3_field::extension::complex::Complex") [] [ F ]) =
        (Ty.apply
          (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
          [ Value.Integer IntegerKind.Usize 2 ]
          [ F; F ]).
    
    (* Trait *)
    (* Empty module 'ComplexExtendable' *)
    
    Module Impl_p3_field_extension_BinomiallyExtendable_where_p3_field_extension_complex_ComplexExtendable_F_Usize_2_for_F.
      Definition Self (F : Ty.t) : Ty.t := F.
      
      (*     const W: Self = F::NEG_ONE; *)
      (* F *)
      Definition value_W (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        ltac:(M.monadic
          (get_constant (| "p3_field::field::PrimeCharacteristicRing::NEG_ONE", F |))).
      
      (*     const DTH_ROOT: Self = F::NEG_ONE; *)
      (* F *)
      Definition value_DTH_ROOT
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        ltac:(M.monadic
          (get_constant (| "p3_field::field::PrimeCharacteristicRing::NEG_ONE", F |))).
      
      (*     const EXT_GENERATOR: [Self; 2] = F::COMPLEX_GENERATOR.value; *)
      (* Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ] *)
      Definition value_EXT_GENERATOR
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        ltac:(M.monadic
          (M.SubPointer.get_struct_record_field (|
            get_constant (|
              "p3_field::extension::complex::ComplexExtendable::COMPLEX_GENERATOR",
              Ty.apply
                (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                [ Value.Integer IntegerKind.Usize 2 ]
                [ F; F ]
            |),
            "p3_field::extension::binomial_extension::BinomialExtensionField",
            "value"
          |))).
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "p3_field::extension::BinomiallyExtendable"
          (* Trait polymorphic consts *) [ Value.Integer IntegerKind.Usize 2 ]
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("value_W", InstanceField.Method (value_W F));
            ("value_DTH_ROOT", InstanceField.Method (value_DTH_ROOT F));
            ("value_EXT_GENERATOR", InstanceField.Method (value_EXT_GENERATOR F))
          ].
    End Impl_p3_field_extension_BinomiallyExtendable_where_p3_field_extension_complex_ComplexExtendable_F_Usize_2_for_F.
    
    Module Impl_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_2_R_R.
      Definition Self (R : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
          [ Value.Integer IntegerKind.Usize 2 ]
          [ R; R ].
      
      (*
          pub const fn new_complex(real: R, imag: R) -> Self {
              Self::new([real, imag])
          }
      *)
      Definition new_complex (R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self R in
        match ε, τ, α with
        | [], [], [ real; imag ] =>
          ltac:(M.monadic
            (let real := M.alloc (| real |) in
            let imag := M.alloc (| imag |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                [ Value.Integer IntegerKind.Usize 2 ]
                [ R; R ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ R; R ],
                "new",
                [],
                []
              |),
              [ Value.Array [ M.read (| real |); M.read (| imag |) ] ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_complex :
        forall (R : Ty.t),
        M.IsAssociatedFunction.C (Self R) "new_complex" (new_complex R).
      Admitted.
      Global Typeclasses Opaque new_complex.
      
      (*
          pub const fn new_real(real: R) -> Self {
              Self::new_complex(real, R::ZERO)
          }
      *)
      Definition new_real (R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self R in
        match ε, τ, α with
        | [], [], [ real ] =>
          ltac:(M.monadic
            (let real := M.alloc (| real |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                [ Value.Integer IntegerKind.Usize 2 ]
                [ R; R ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ R; R ],
                "new_complex",
                [],
                []
              |),
              [
                M.read (| real |);
                M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", R |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_real :
        forall (R : Ty.t),
        M.IsAssociatedFunction.C (Self R) "new_real" (new_real R).
      Admitted.
      Global Typeclasses Opaque new_real.
      
      (*
          pub const fn new_imag(imag: R) -> Self {
              Self::new_complex(R::ZERO, imag)
          }
      *)
      Definition new_imag (R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self R in
        match ε, τ, α with
        | [], [], [ imag ] =>
          ltac:(M.monadic
            (let imag := M.alloc (| imag |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                [ Value.Integer IntegerKind.Usize 2 ]
                [ R; R ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ R; R ],
                "new_complex",
                [],
                []
              |),
              [
                M.read (| get_constant (| "p3_field::field::PrimeCharacteristicRing::ZERO", R |) |);
                M.read (| imag |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_imag :
        forall (R : Ty.t),
        M.IsAssociatedFunction.C (Self R) "new_imag" (new_imag R).
      Admitted.
      Global Typeclasses Opaque new_imag.
      
      (*
          pub fn real(&self) -> R {
              self.value[0].clone()
          }
      *)
      Definition real (R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self R in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              R,
              M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_array_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_field::extension::binomial_extension::BinomialExtensionField",
                      "value"
                    |),
                    Value.Integer IntegerKind.Usize 0
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_real :
        forall (R : Ty.t),
        M.IsAssociatedFunction.C (Self R) "real" (real R).
      Admitted.
      Global Typeclasses Opaque real.
      
      (*
          pub fn imag(&self) -> R {
              self.value[1].clone()
          }
      *)
      Definition imag (R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self R in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              R,
              M.get_trait_method (| "core::clone::Clone", R, [], [], "clone", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_array_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "p3_field::extension::binomial_extension::BinomialExtensionField",
                      "value"
                    |),
                    Value.Integer IntegerKind.Usize 1
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_imag :
        forall (R : Ty.t),
        M.IsAssociatedFunction.C (Self R) "imag" (imag R).
      Admitted.
      Global Typeclasses Opaque imag.
      
      (*
          pub fn conjugate(&self) -> Self {
              Self::new_complex(self.real(), self.imag().neg())
          }
      *)
      Definition conjugate (R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self R in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                [ Value.Integer IntegerKind.Usize 2 ]
                [ R; R ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ R; R ],
                "new_complex",
                [],
                []
              |),
              [
                M.call_closure (|
                  R,
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [ R; R ],
                    "real",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |);
                M.call_closure (|
                  R,
                  M.get_trait_method (| "core::ops::arith::Neg", R, [], [], "neg", [], [] |),
                  [
                    M.call_closure (|
                      R,
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ R; R ],
                        "imag",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_conjugate :
        forall (R : Ty.t),
        M.IsAssociatedFunction.C (Self R) "conjugate" (conjugate R).
      Admitted.
      Global Typeclasses Opaque conjugate.
      
      (*
          pub fn norm(&self) -> R {
              self.real().square() + self.imag().square()
          }
      *)
      Definition norm (R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self R in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              R,
              M.get_trait_method (| "core::ops::arith::Add", R, [], [ R ], "add", [], [] |),
              [
                M.call_closure (|
                  R,
                  M.get_trait_method (|
                    "p3_field::field::PrimeCharacteristicRing",
                    R,
                    [],
                    [],
                    "square",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.call_closure (|
                          R,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ R; R ],
                            "real",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |)
                    |)
                  ]
                |);
                M.call_closure (|
                  R,
                  M.get_trait_method (|
                    "p3_field::field::PrimeCharacteristicRing",
                    R,
                    [],
                    [],
                    "square",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.call_closure (|
                          R,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ R; R ],
                            "imag",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_norm :
        forall (R : Ty.t),
        M.IsAssociatedFunction.C (Self R) "norm" (norm R).
      Admitted.
      Global Typeclasses Opaque norm.
      
      (*
          pub fn to_array(&self) -> [R; 2] {
              self.value.clone()
          }
      *)
      Definition to_array (R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self R in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ R ],
              M.get_trait_method (|
                "core::clone::Clone",
                Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ R ],
                [],
                [],
                "clone",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "p3_field::extension::binomial_extension::BinomialExtensionField",
                    "value"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_to_array :
        forall (R : Ty.t),
        M.IsAssociatedFunction.C (Self R) "to_array" (to_array R).
      Admitted.
      Global Typeclasses Opaque to_array.
      
      (*
          pub fn rotate<Ext: Algebra<R>>(&self, rhs: &Complex<Ext>) -> Complex<Ext> {
              Complex::<Ext>::new_complex(
                  rhs.real() * self.real() - rhs.imag() * self.imag(),
                  rhs.imag() * self.real() + rhs.real() * self.imag(),
              )
          }
      *)
      Definition rotate (R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self R in
        match ε, τ, α with
        | [], [ Ext ], [ self; rhs ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let rhs := M.alloc (| rhs |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                [ Value.Integer IntegerKind.Usize 2 ]
                [ Ext; Ext ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ Ext; Ext ],
                "new_complex",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ext,
                  M.get_trait_method (| "core::ops::arith::Sub", Ext, [], [ Ext ], "sub", [], [] |),
                  [
                    M.call_closure (|
                      Ext,
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ext,
                        [],
                        [ R ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ext,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ext; Ext ],
                            "real",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rhs |) |) |) ]
                        |);
                        M.call_closure (|
                          R,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ R; R ],
                            "real",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ext,
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ext,
                        [],
                        [ R ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ext,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ext; Ext ],
                            "imag",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rhs |) |) |) ]
                        |);
                        M.call_closure (|
                          R,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ R; R ],
                            "imag",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      ]
                    |)
                  ]
                |);
                M.call_closure (|
                  Ext,
                  M.get_trait_method (| "core::ops::arith::Add", Ext, [], [ Ext ], "add", [], [] |),
                  [
                    M.call_closure (|
                      Ext,
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ext,
                        [],
                        [ R ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ext,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ext; Ext ],
                            "imag",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rhs |) |) |) ]
                        |);
                        M.call_closure (|
                          R,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ R; R ],
                            "real",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ext,
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ext,
                        [],
                        [ R ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ext,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ext; Ext ],
                            "real",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rhs |) |) |) ]
                        |);
                        M.call_closure (|
                          R,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ R; R ],
                            "imag",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_rotate :
        forall (R : Ty.t),
        M.IsAssociatedFunction.C (Self R) "rotate" (rotate R).
      Admitted.
      Global Typeclasses Opaque rotate.
    End Impl_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_2_R_R.
    
    (* Trait *)
    (* Empty module 'HasComplexBinomialExtension' *)
    
    Module Impl_p3_field_extension_BinomiallyExtendable_where_p3_field_extension_complex_HasComplexBinomialExtension_F_D_for_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_2_F_F.
      Definition Self (D : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
          [ Value.Integer IntegerKind.Usize 2 ]
          [ F; F ].
      
      (*     const W: Self = <F as HasComplexBinomialExtension<D>>::W; *)
      (* Ty.apply
        (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
        [ Value.Integer IntegerKind.Usize 2 ]
        [ F; F ] *)
      Definition value_W
          (D : Value.t)
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self D F in
        ltac:(M.monadic
          (get_constant (|
            "p3_field::extension::complex::HasComplexBinomialExtension::W",
            Ty.apply
              (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
              [ Value.Integer IntegerKind.Usize 2 ]
              [ F; F ]
          |))).
      
      (*     const DTH_ROOT: Self = <F as HasComplexBinomialExtension<D>>::DTH_ROOT; *)
      (* Ty.apply
        (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
        [ Value.Integer IntegerKind.Usize 2 ]
        [ F; F ] *)
      Definition value_DTH_ROOT
          (D : Value.t)
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self D F in
        ltac:(M.monadic
          (get_constant (|
            "p3_field::extension::complex::HasComplexBinomialExtension::DTH_ROOT",
            Ty.apply
              (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
              [ Value.Integer IntegerKind.Usize 2 ]
              [ F; F ]
          |))).
      
      (*     const EXT_GENERATOR: [Self; D] = F::EXT_GENERATOR; *)
      (* Ty.apply
        (Ty.path "array")
        [ D ]
        [
          Ty.apply
            (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
            [ Value.Integer IntegerKind.Usize 2 ]
            [ F; F ]
        ] *)
      Definition value_EXT_GENERATOR
          (D : Value.t)
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self D F in
        ltac:(M.monadic
          (get_constant (|
            "p3_field::extension::complex::HasComplexBinomialExtension::EXT_GENERATOR",
            Ty.apply
              (Ty.path "array")
              [ D ]
              [
                Ty.apply
                  (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [ F; F ]
              ]
          |))).
      
      Axiom Implements :
        forall (D : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "p3_field::extension::BinomiallyExtendable"
          (* Trait polymorphic consts *) [ D ]
          (* Trait polymorphic types *) []
          (Self D F)
          (* Instance *)
          [
            ("value_W", InstanceField.Method (value_W D F));
            ("value_DTH_ROOT", InstanceField.Method (value_DTH_ROOT D F));
            ("value_EXT_GENERATOR", InstanceField.Method (value_EXT_GENERATOR D F))
          ].
    End Impl_p3_field_extension_BinomiallyExtendable_where_p3_field_extension_complex_HasComplexBinomialExtension_F_D_for_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_2_F_F.
    
    (* Trait *)
    (* Empty module 'HasTwoAdicComplexBinomialExtension' *)
    
    Module Impl_p3_field_extension_HasTwoAdicBinomialExtension_where_p3_field_extension_complex_HasTwoAdicComplexBinomialExtension_F_D_for_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_2_F_F.
      Definition Self (D : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
          [ Value.Integer IntegerKind.Usize 2 ]
          [ F; F ].
      
      (*     const EXT_TWO_ADICITY: usize = F::COMPLEX_EXT_TWO_ADICITY; *)
      (* Ty.path "usize" *)
      Definition value_EXT_TWO_ADICITY
          (D : Value.t)
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self D F in
        ltac:(M.monadic
          (get_constant (|
            "p3_field::extension::complex::HasTwoAdicComplexBinomialExtension::COMPLEX_EXT_TWO_ADICITY",
            Ty.path "usize"
          |))).
      
      (*
          fn ext_two_adic_generator(bits: usize) -> [Self; D] {
              F::complex_ext_two_adic_generator(bits)
          }
      *)
      Definition ext_two_adic_generator
          (D : Value.t)
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self D F in
        match ε, τ, α with
        | [], [], [ bits ] =>
          ltac:(M.monadic
            (let bits := M.alloc (| bits |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "array")
                [ D ]
                [
                  Ty.apply
                    (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                    [ Value.Integer IntegerKind.Usize 2 ]
                    [ F; F ]
                ],
              M.get_trait_method (|
                "p3_field::extension::complex::HasTwoAdicComplexBinomialExtension",
                F,
                [ D ],
                [],
                "complex_ext_two_adic_generator",
                [],
                []
              |),
              [ M.read (| bits |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (D : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "p3_field::extension::HasTwoAdicBinomialExtension"
          (* Trait polymorphic consts *) [ D ]
          (* Trait polymorphic types *) []
          (Self D F)
          (* Instance *)
          [
            ("value_EXT_TWO_ADICITY", InstanceField.Method (value_EXT_TWO_ADICITY D F));
            ("ext_two_adic_generator", InstanceField.Method (ext_two_adic_generator D F))
          ].
    End Impl_p3_field_extension_HasTwoAdicBinomialExtension_where_p3_field_extension_complex_HasTwoAdicComplexBinomialExtension_F_D_for_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_2_F_F.
  End complex.
End extension.
